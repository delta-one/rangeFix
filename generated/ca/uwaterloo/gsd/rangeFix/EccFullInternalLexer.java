/* The following code was generated by JFlex 1.4.3 on 12-1-12 下午11:21 */

package ca.uwaterloo.gsd.rangeFix;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12-1-12 下午11:21 from the specification file
 * <tt>C:/Users/FlyingHero/Documents/Projects/2011/RangeFix3/src/main/eccFullInternal.flex</tt>
 */
public class EccFullInternalLexer implements IEccFullInternalLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int LINERETURN = 6;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\60\1\2\2\0\1\1\22\0\1\44\1\67\1\70\1\43"+
    "\2\0\1\65\1\72\1\63\1\63\1\63\1\7\1\63\1\36\1\5"+
    "\1\63\1\10\11\4\1\46\1\63\1\62\1\66\1\61\1\63\1\0"+
    "\1\52\1\12\1\55\1\47\1\6\1\45\2\3\1\53\2\3\1\54"+
    "\5\3\1\50\1\3\1\57\3\3\1\11\2\3\1\0\1\71\2\0"+
    "\1\16\1\0\1\20\1\41\1\13\1\14\1\22\1\23\1\31\1\37"+
    "\1\24\1\3\1\35\1\15\1\30\1\27\1\26\1\34\1\51\1\25"+
    "\1\17\1\33\1\32\1\21\1\40\1\42\1\56\1\3\1\63\1\64"+
    "\1\63\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\5\12\4\1\6\1\4\1\7\2\6\3\3\1\6"+
    "\1\10\1\11\1\12\1\13\1\3\1\1\2\14\1\2"+
    "\3\0\14\4\1\15\1\4\2\0\1\4\2\0\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\2\32\1\0\1\33\16\4\2\0"+
    "\1\4\15\0\1\4\1\34\20\4\2\0\1\35\13\0"+
    "\2\36\2\37\25\4\2\0\1\4\13\0\7\4\1\40"+
    "\15\4\2\0\1\4\13\0\11\4\1\41\7\4\1\42"+
    "\2\4\1\43\2\0\1\4\1\0\1\44\1\45\10\0"+
    "\7\4\1\46\6\4\1\47\1\4\1\50\1\4\2\0"+
    "\1\51\11\0\10\4\1\52\1\53\1\54\4\4\1\55"+
    "\1\56\1\0\1\57\7\0\4\4\1\60\3\4\1\61"+
    "\1\62\1\4\1\63\10\0\4\4\1\64\1\65\1\66"+
    "\1\4\2\0\1\67\5\0\5\4\1\70\6\0\1\4"+
    "\1\71\1\4\1\72\1\4\6\0\3\4\1\73\6\0"+
    "\3\4\3\0\1\74\2\0\3\4\1\75\1\0\1\76"+
    "\2\0\1\77\2\4\3\0\2\4\3\0\2\4\1\0"+
    "\1\100\1\0\1\101\1\102\4\0\1\103\11\0\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[422];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\354\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a"+
    "\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512"+
    "\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\354\0\u0674\0\354"+
    "\0\354\0\u06af\0\u06ea\0\u0725\0\354\0\u0760\0\u079b\0\u07d6"+
    "\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae"+
    "\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0162\0\u0b10\0\u0b4b"+
    "\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\354\0\354\0\354\0\354"+
    "\0\354\0\354\0\354\0\354\0\354\0\354\0\354\0\354"+
    "\0\u0c72\0\u0cad\0\u0cad\0\u0811\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99"+
    "\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71"+
    "\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149"+
    "\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321"+
    "\0\u135c\0\u1397\0\u13d2\0\u0162\0\u140d\0\u1448\0\u1483\0\u14be"+
    "\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696"+
    "\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e"+
    "\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46"+
    "\0\u1a81\0\u1abc\0\u1af7\0\354\0\u1b32\0\354\0\u1b6d\0\u1ba8"+
    "\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80"+
    "\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58"+
    "\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130"+
    "\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308"+
    "\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0"+
    "\0\u0162\0\u251b\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642\0\u267d"+
    "\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855"+
    "\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d"+
    "\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05"+
    "\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u0162\0\u2d67\0\u2da2"+
    "\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u0162\0\u2f04\0\u2f3f"+
    "\0\u0162\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\354\0\u2941\0\u3066"+
    "\0\u30a1\0\u30dc\0\u3117\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e"+
    "\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u0162\0\u33db"+
    "\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502\0\u0162\0\u353d\0\u0162"+
    "\0\u3578\0\u35b3\0\u35ee\0\u0162\0\u3629\0\u3664\0\u369f\0\u36da"+
    "\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3877\0\u38b2"+
    "\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9\0\u0162\0\u0162\0\u0162"+
    "\0\u3a14\0\u3a4f\0\u3a8a\0\u3ac5\0\354\0\354\0\u3b00\0\354"+
    "\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8"+
    "\0\u3d13\0\u3d4e\0\u3d89\0\u0162\0\u3dc4\0\u3dff\0\u3e3a\0\u0162"+
    "\0\u0162\0\u3e75\0\u0162\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c"+
    "\0\u3fd7\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe\0\u4139\0\u0162"+
    "\0\u0162\0\u0162\0\u4174\0\u41af\0\u41ea\0\354\0\u4225\0\u4260"+
    "\0\u429b\0\u42d6\0\u4311\0\u434c\0\u4387\0\u43c2\0\u43fd\0\u4438"+
    "\0\354\0\u4473\0\u44ae\0\u44e9\0\u4524\0\u455f\0\u459a\0\u45d5"+
    "\0\u0162\0\u4610\0\u0162\0\u464b\0\u4686\0\u46c1\0\u46fc\0\u4737"+
    "\0\u4772\0\u47ad\0\u47e8\0\u4823\0\u485e\0\u0162\0\u4899\0\u48d4"+
    "\0\u490f\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36\0\u4a71\0\u4aac"+
    "\0\u4ae7\0\u4b22\0\354\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e\0\u4c49"+
    "\0\354\0\u4c84\0\354\0\u4cbf\0\u4cfa\0\u0162\0\u4d35\0\u4d70"+
    "\0\u4dab\0\u4de6\0\u4e21\0\u4e5c\0\u4e97\0\u4ed2\0\u4f0d\0\u4f48"+
    "\0\u4f83\0\u4fbe\0\u4ff9\0\354\0\u5034\0\u0162\0\u0162\0\u506f"+
    "\0\u50aa\0\u50e5\0\u5120\0\354\0\u515b\0\u5196\0\u51d1\0\u520c"+
    "\0\u5247\0\u5282\0\u52bd\0\u52f8\0\u5333\0\354";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[422];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\11\1\7\1\11\1\12"+
    "\2\7\1\13\1\14\3\7\1\15\1\16\1\17\1\7"+
    "\1\20\4\7\1\21\1\22\1\23\1\24\1\7\1\25"+
    "\2\7\1\26\1\7\1\27\1\6\1\7\1\11\11\7"+
    "\1\6\1\30\1\31\1\11\1\32\1\33\1\34\1\35"+
    "\1\36\2\5\1\37\2\40\65\37\1\41\1\42\1\37"+
    "\1\43\1\44\1\45\70\43\1\46\1\44\1\45\70\46"+
    "\74\0\2\6\41\0\1\6\13\0\1\6\15\0\2\7"+
    "\1\0\1\7\1\0\26\7\1\0\4\7\2\0\1\7"+
    "\1\0\11\7\17\0\1\10\1\47\1\50\1\0\1\10"+
    "\11\0\1\50\54\0\1\10\1\47\1\50\1\0\1\10"+
    "\1\51\10\0\1\50\17\0\1\51\33\0\2\7\1\0"+
    "\1\7\1\0\4\7\1\52\21\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\10\7\1\53\1\7\1\54\1\7\1\55\11\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\3\7\1\56\22\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\12\7\1\57\13\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\17\7\1\60"+
    "\6\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\7\7\1\61\7\7\1\62"+
    "\1\63\5\7\1\0\4\7\2\0\1\7\1\0\11\7"+
    "\16\0\2\7\1\0\1\7\1\0\12\7\1\64\13\7"+
    "\1\0\4\7\2\0\1\7\1\0\11\7\16\0\2\7"+
    "\1\0\1\7\1\0\7\7\1\65\16\7\1\0\4\7"+
    "\2\0\1\7\1\0\11\7\16\0\2\7\1\0\1\7"+
    "\1\0\16\7\1\66\7\7\1\0\4\7\2\0\1\7"+
    "\1\0\11\7\16\0\2\7\1\0\1\7\1\0\10\7"+
    "\1\67\15\7\1\0\4\7\2\0\1\7\1\0\11\7"+
    "\46\0\1\70\3\0\1\71\36\0\2\7\1\0\1\7"+
    "\1\0\16\7\1\72\7\7\1\0\4\7\2\0\1\7"+
    "\1\0\11\7\57\0\1\73\13\0\1\74\100\0\1\75"+
    "\72\0\1\76\70\0\1\11\73\0\1\11\73\0\1\11"+
    "\72\0\1\77\4\0\1\37\2\0\65\37\2\0\1\37"+
    "\2\100\1\0\20\100\1\101\1\100\1\102\1\100\1\103"+
    "\3\100\1\104\5\100\1\105\26\100\1\106\1\107\1\110"+
    "\1\43\2\0\70\43\2\0\1\45\70\0\1\46\2\0"+
    "\70\46\4\0\1\111\3\0\1\111\66\0\1\112\2\0"+
    "\1\113\1\112\25\0\1\113\40\0\1\114\1\0\1\114"+
    "\1\0\1\114\1\0\3\114\3\0\1\114\1\0\2\114"+
    "\15\0\1\114\3\0\1\114\1\0\1\114\2\0\1\114"+
    "\2\0\1\114\20\0\2\7\1\0\1\7\1\0\5\7"+
    "\1\115\20\7\1\0\4\7\2\0\1\7\1\0\11\7"+
    "\16\0\2\7\1\0\1\7\1\0\23\7\1\116\2\7"+
    "\1\0\4\7\2\0\1\7\1\0\11\7\16\0\2\7"+
    "\1\0\1\7\1\0\7\7\1\117\16\7\1\0\4\7"+
    "\2\0\1\7\1\0\11\7\16\0\2\7\1\0\1\7"+
    "\1\0\7\7\1\120\16\7\1\0\4\7\2\0\1\7"+
    "\1\0\11\7\16\0\2\7\1\0\1\7\1\0\23\7"+
    "\1\121\2\7\1\0\4\7\2\0\1\7\1\0\11\7"+
    "\16\0\2\7\1\0\1\7\1\0\15\7\1\122\10\7"+
    "\1\0\4\7\2\0\1\7\1\0\11\7\16\0\2\7"+
    "\1\0\1\7\1\0\10\7\1\123\15\7\1\0\4\7"+
    "\2\0\1\7\1\0\11\7\16\0\2\7\1\0\1\7"+
    "\1\0\6\7\1\124\17\7\1\0\4\7\2\0\1\7"+
    "\1\0\11\7\16\0\2\7\1\0\1\7\1\0\10\7"+
    "\1\125\2\7\1\126\12\7\1\0\4\7\2\0\1\7"+
    "\1\0\11\7\16\0\2\7\1\0\1\7\1\0\24\7"+
    "\1\127\1\7\1\0\4\7\2\0\1\7\1\0\11\7"+
    "\16\0\2\7\1\0\1\7\1\0\23\7\1\130\2\7"+
    "\1\0\4\7\2\0\1\7\1\0\11\7\16\0\2\7"+
    "\1\0\1\7\1\0\12\7\1\131\13\7\1\0\4\7"+
    "\2\0\1\7\1\0\11\7\16\0\2\7\1\0\1\7"+
    "\1\0\3\7\1\132\22\7\1\0\4\7\2\0\1\7"+
    "\1\0\11\7\35\0\1\133\70\0\1\134\55\0\2\7"+
    "\1\0\1\7\1\0\16\7\1\135\7\7\1\0\4\7"+
    "\2\0\1\7\1\0\11\7\45\0\1\136\11\0\1\137"+
    "\1\140\1\0\1\141\1\142\1\0\1\143\1\144\1\145"+
    "\1\146\1\0\1\147\1\150\1\151\1\152\54\0\1\150"+
    "\13\0\1\150\16\0\1\111\1\0\1\50\1\0\1\111"+
    "\11\0\1\50\54\0\1\112\3\0\1\112\65\0\2\7"+
    "\1\0\1\7\1\0\6\7\1\153\17\7\1\0\4\7"+
    "\2\0\1\7\1\0\11\7\16\0\2\7\1\0\1\7"+
    "\1\0\10\7\1\154\15\7\1\0\4\7\2\0\1\7"+
    "\1\0\11\7\16\0\2\7\1\0\1\7\1\0\3\7"+
    "\1\155\22\7\1\0\4\7\2\0\1\7\1\0\11\7"+
    "\16\0\2\7\1\0\1\7\1\0\10\7\1\156\15\7"+
    "\1\0\4\7\2\0\1\7\1\0\11\7\16\0\2\7"+
    "\1\0\1\7\1\0\14\7\1\157\11\7\1\0\4\7"+
    "\2\0\1\7\1\0\11\7\16\0\2\7\1\0\1\7"+
    "\1\0\7\7\1\160\16\7\1\0\4\7\2\0\1\7"+
    "\1\0\11\7\16\0\2\7\1\0\1\7\1\0\26\7"+
    "\1\0\2\7\1\161\1\7\2\0\1\7\1\0\11\7"+
    "\16\0\2\7\1\0\1\7\1\0\5\7\1\162\1\7"+
    "\1\163\1\164\1\7\1\165\13\7\1\0\3\7\1\166"+
    "\2\0\1\7\1\0\11\7\16\0\2\7\1\0\1\7"+
    "\1\0\3\7\1\167\22\7\1\0\4\7\2\0\1\7"+
    "\1\0\11\7\16\0\2\7\1\0\1\7\1\0\12\7"+
    "\1\170\13\7\1\0\4\7\2\0\1\7\1\0\11\7"+
    "\16\0\2\7\1\0\1\7\1\0\5\7\1\171\20\7"+
    "\1\0\4\7\2\0\1\7\1\0\11\7\16\0\2\7"+
    "\1\0\1\7\1\0\6\7\1\172\17\7\1\0\4\7"+
    "\2\0\1\7\1\0\11\7\16\0\2\7\1\0\1\7"+
    "\1\0\15\7\1\173\10\7\1\0\4\7\2\0\1\7"+
    "\1\0\11\7\16\0\2\7\1\0\1\7\1\0\25\7"+
    "\1\174\1\0\4\7\2\0\1\7\1\0\11\7\43\0"+
    "\1\175\67\0\1\176\50\0\2\7\1\0\1\7\1\0"+
    "\5\7\1\177\20\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\32\0\1\200\117\0\1\201\13\0\1\202\27\0"+
    "\1\203\77\0\1\204\72\0\1\205\63\0\1\206\107\0"+
    "\1\207\64\0\1\210\70\0\1\211\111\0\1\212\77\0"+
    "\1\202\13\0\1\202\13\0\1\213\1\214\71\0\1\215"+
    "\1\216\73\0\2\7\1\0\1\7\1\0\3\7\1\217"+
    "\3\7\1\220\4\7\1\221\1\7\1\222\5\7\1\223"+
    "\1\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\15\7\1\224\10\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\26\7\1\0\2\7\1\225\1\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\11\7\1\226\14\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\14\7\1\227"+
    "\11\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\5\7\1\230\20\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\16\7\1\231\7\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\22\7\1\232\3\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\3\7\1\233"+
    "\22\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\17\7\1\234\6\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\7\7\1\235\16\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\23\7\1\236\2\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\15\7\1\237"+
    "\10\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\14\7\1\240\11\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\4\7\1\241\21\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\6\7\1\242\17\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\10\7\1\243"+
    "\15\7\1\0\4\7\2\0\1\7\1\0\11\7\47\0"+
    "\1\244\52\0\1\245\61\0\2\7\1\0\1\7\1\0"+
    "\4\7\1\246\21\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\35\0\1\247\106\0\1\250\5\0\1\251\13\0"+
    "\1\251\56\0\1\251\13\0\1\251\32\0\1\252\75\0"+
    "\1\253\120\0\1\254\54\0\1\255\73\0\1\256\67\0"+
    "\1\257\56\0\1\260\77\0\1\261\52\0\1\214\72\0"+
    "\1\216\73\0\2\7\1\0\1\7\1\0\16\7\1\262"+
    "\7\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\10\7\1\263\15\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\17\7\1\264\6\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\24\7\1\265\1\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\10\7\1\266"+
    "\15\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\14\7\1\267\11\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\5\7\1\270\20\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\12\7\1\271\13\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\16\7\1\272"+
    "\7\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\12\7\1\273\13\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\10\7\1\274\15\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\26\7\1\0\2\7\1\275\1\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\23\7\1\276"+
    "\2\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\10\7\1\277\15\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\22\7\1\300\3\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\14\7\1\301\11\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\15\7\1\302"+
    "\10\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\12\7\1\303\13\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\10\7\1\304\15\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\11\7\1\305\14\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\21\7\1\306"+
    "\4\7\1\0\4\7\2\0\1\7\1\0\11\7\30\0"+
    "\1\307\115\0\1\310\35\0\2\7\1\0\1\7\1\0"+
    "\10\7\1\311\15\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\40\0\1\312\103\0\1\313\100\0\1\314\13\0"+
    "\1\314\33\0\1\315\71\0\1\316\104\0\1\317\64\0"+
    "\1\320\63\0\1\321\75\0\1\322\65\0\1\323\104\0"+
    "\1\324\50\0\2\7\1\0\1\7\1\0\17\7\1\325"+
    "\1\326\5\7\1\0\4\7\2\0\1\7\1\0\11\7"+
    "\16\0\2\7\1\0\1\7\1\0\11\7\1\327\14\7"+
    "\1\0\4\7\2\0\1\7\1\0\11\7\16\0\2\7"+
    "\1\0\1\7\1\0\23\7\1\330\2\7\1\0\4\7"+
    "\2\0\1\7\1\0\11\7\16\0\2\7\1\0\1\7"+
    "\1\0\23\7\1\331\2\7\1\0\4\7\2\0\1\7"+
    "\1\0\11\7\16\0\2\7\1\0\1\7\1\0\3\7"+
    "\1\332\22\7\1\0\4\7\2\0\1\7\1\0\11\7"+
    "\16\0\2\7\1\0\1\7\1\0\24\7\1\333\1\7"+
    "\1\0\4\7\2\0\1\7\1\0\11\7\16\0\2\7"+
    "\1\0\1\7\1\0\12\7\1\334\13\7\1\0\4\7"+
    "\2\0\1\7\1\0\11\7\16\0\2\7\1\0\1\7"+
    "\1\0\17\7\1\335\6\7\1\0\4\7\2\0\1\7"+
    "\1\0\11\7\16\0\2\7\1\0\1\7\1\0\4\7"+
    "\1\336\21\7\1\0\4\7\2\0\1\7\1\0\11\7"+
    "\16\0\2\7\1\0\1\7\1\0\4\7\1\337\21\7"+
    "\1\0\4\7\2\0\1\7\1\0\11\7\16\0\2\7"+
    "\1\0\1\7\1\0\7\7\1\340\16\7\1\0\4\7"+
    "\2\0\1\7\1\0\11\7\16\0\2\7\1\0\1\7"+
    "\1\0\14\7\1\341\11\7\1\0\4\7\2\0\1\7"+
    "\1\0\11\7\16\0\2\7\1\0\1\7\1\0\26\7"+
    "\1\0\2\7\1\342\1\7\2\0\1\7\1\0\11\7"+
    "\16\0\2\7\1\0\1\7\1\0\26\7\1\0\2\7"+
    "\1\343\1\7\2\0\1\7\1\0\11\7\16\0\2\7"+
    "\1\0\1\7\1\0\11\7\1\344\14\7\1\0\4\7"+
    "\2\0\1\7\1\0\11\7\16\0\2\7\1\0\1\7"+
    "\1\0\12\7\1\345\13\7\1\0\4\7\2\0\1\7"+
    "\1\0\11\7\16\0\2\7\1\0\1\7\1\0\7\7"+
    "\1\346\16\7\1\0\4\7\2\0\1\7\1\0\11\7"+
    "\16\0\2\7\1\0\1\7\1\0\23\7\1\347\2\7"+
    "\1\0\4\7\2\0\1\7\1\0\11\7\16\0\2\7"+
    "\1\0\1\7\1\0\10\7\1\350\15\7\1\0\4\7"+
    "\2\0\1\7\1\0\11\7\16\0\2\7\1\0\1\7"+
    "\1\0\12\7\1\351\13\7\1\0\4\7\2\0\1\7"+
    "\1\0\11\7\33\0\1\352\72\0\1\353\55\0\2\7"+
    "\1\0\1\7\1\0\23\7\1\354\2\7\1\0\4\7"+
    "\2\0\1\7\1\0\11\7\31\0\1\355\135\0\1\356"+
    "\55\0\1\357\13\0\1\357\40\0\1\360\76\0\1\361"+
    "\64\0\1\362\67\0\1\363\73\0\1\364\65\0\1\365"+
    "\107\0\1\366\62\0\1\367\53\0\2\7\1\0\1\7"+
    "\1\0\13\7\1\370\12\7\1\0\4\7\2\0\1\7"+
    "\1\0\11\7\16\0\2\7\1\0\1\7\1\0\24\7"+
    "\1\371\1\7\1\0\4\7\2\0\1\7\1\0\11\7"+
    "\16\0\2\7\1\0\1\7\1\0\12\7\1\372\13\7"+
    "\1\0\4\7\2\0\1\7\1\0\11\7\16\0\2\7"+
    "\1\0\1\7\1\0\12\7\1\373\13\7\1\0\4\7"+
    "\2\0\1\7\1\0\11\7\16\0\2\7\1\0\1\7"+
    "\1\0\14\7\1\374\11\7\1\0\4\7\2\0\1\7"+
    "\1\0\11\7\16\0\2\7\1\0\1\7\1\0\25\7"+
    "\1\375\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\23\7\1\376\2\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\4\7\1\377\21\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\6\7\1\u0100\17\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\12\7\1\u0101"+
    "\13\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\23\7\1\u0102\2\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\11\7\1\u0103\14\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\5\7\1\u0104\20\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\7\7\1\u0105"+
    "\16\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\12\7\1\u0106\13\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\4\7\1\u0107\21\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\10\7\1\u0108\15\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\5\7\1\u0109"+
    "\20\7\1\0\4\7\2\0\1\7\1\0\11\7\46\0"+
    "\1\u010a\64\0\1\u010b\50\0\2\7\1\0\1\7\1\0"+
    "\10\7\1\u010c\15\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\34\0\1\u010d\76\0\1\u010e\62\0\1\u010f\102\0"+
    "\1\u0110\67\0\1\u0111\100\0\1\u0112\106\0\1\u0113\43\0"+
    "\1\u0114\121\0\1\u0115\31\0\2\7\1\0\1\7\1\0"+
    "\14\7\1\u0116\11\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\16\7\1\u0117"+
    "\7\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\13\7\1\u0118\12\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\15\7\1\u0119\10\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\16\7\1\u011a\7\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\10\7\1\u011b"+
    "\15\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\14\7\1\u011c\11\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\3\7\1\u011d\22\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\4\7\1\u011e\21\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\15\7\1\u011f"+
    "\10\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\12\7\1\u0120\13\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\12\7\1\u0121\13\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\23\7\1\u0122\2\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\6\7\1\u0123"+
    "\17\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\22\7\1\u0124\3\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\35\0\1\u0125\72\0"+
    "\1\u0126\70\0\1\u0127\120\0\1\u0128\57\0\1\u0129\61\0"+
    "\1\u012a\123\0\1\u012b\41\0\1\u012c\71\0\1\u012d\71\0"+
    "\1\u012e\76\0\1\u012f\51\0\2\7\1\0\1\7\1\0"+
    "\21\7\1\u0130\4\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\17\7\1\u0131"+
    "\6\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\14\7\1\u0132\11\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\13\7\1\u0133\12\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\17\7\1\u0134\6\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\21\7\1\u0135"+
    "\4\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\16\7\1\u0136\7\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\20\7\1\u0137\5\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\4\7\1\u0138\21\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\15\7\1\u0139"+
    "\10\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\11\7\1\u013a\14\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\12\7\1\u013b\13\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\30\0\1\u013c\121\0\1\u013d\45\0"+
    "\1\u013e\76\0\1\u013f\76\0\1\u0140\63\0\1\u0141\105\0"+
    "\1\u0142\56\0\1\u0143\56\0\2\7\1\0\1\7\1\0"+
    "\22\7\1\u0144\3\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\12\7\1\u0145"+
    "\13\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\5\7\1\u0146\20\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\10\7\1\u0147\15\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\12\7\1\u0148\13\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\17\7\1\u0149"+
    "\6\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\24\7\1\u014a\1\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\10\7\1\u014b\15\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\45\0\1\u014c\61\0\1\u014d\117\0"+
    "\1\u014e\70\0\1\u014f\61\0\1\u0150\54\0\1\u0151\77\0"+
    "\1\u0152\114\0\1\u0153\31\0\2\7\1\0\1\7\1\0"+
    "\15\7\1\u0154\10\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\17\7\1\u0155"+
    "\6\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\12\7\1\u0156\13\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\3\7\1\u0157\22\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\5\7\1\u0158\20\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\35\0\1\u0159\70\0\1\u015a\65\0\1\u015b\101\0"+
    "\1\u015c\102\0\1\u015d\54\0\1\u015e\105\0\1\u015f\46\0"+
    "\2\7\1\0\1\7\1\0\10\7\1\u0160\15\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\23\7\1\u0161\2\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\6\7\1\u0162\17\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\12\7\1\u0163"+
    "\13\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\22\7\1\u0164\3\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\30\0\1\u0165\103\0"+
    "\1\u0166\60\0\1\u0167\100\0\1\u0168\114\0\1\u0169\54\0"+
    "\1\u016a\47\0\2\7\1\0\1\7\1\0\23\7\1\u016b"+
    "\2\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\3\7\1\u016c\5\7\1\u016d"+
    "\14\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\12\7\1\u016e\13\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\45\0\1\u016f\67\0"+
    "\1\u0170\107\0\1\u0171\45\0\1\u0172\74\0\1\u0173\115\0"+
    "\1\u0174\31\0\2\7\1\0\1\7\1\0\14\7\1\u0175"+
    "\11\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\16\7\1\u0176\7\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\12\7\1\u0177\13\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\35\0\1\u0178\67\0\1\u0179\114\0"+
    "\1\u017a\77\0\1\u017b\44\0\1\u017c\72\0\1\u017d\55\0"+
    "\2\7\1\0\1\7\1\0\16\7\1\u017e\7\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\20\7\1\u017f\5\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\15\7\1\u0180\10\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\61\0\1\u0181\57\0\1\u0182\115\0\1\u0183\31\0"+
    "\1\u0184\74\0\1\u0185\56\0\2\7\1\0\1\7\1\0"+
    "\17\7\1\u0186\6\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\20\7\1\u0187"+
    "\5\7\1\0\4\7\2\0\1\7\1\0\11\7\16\0"+
    "\2\7\1\0\1\7\1\0\7\7\1\u0188\16\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\40\0\1\u0189\77\0"+
    "\1\u018a\57\0\1\u018b\56\0\2\7\1\0\1\7\1\0"+
    "\10\7\1\u018c\15\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\16\0\2\7\1\0\1\7\1\0\14\7\1\u018d"+
    "\11\7\1\0\4\7\2\0\1\7\1\0\11\7\33\0"+
    "\1\u018e\74\0\1\u018f\76\0\1\u0190\47\0\2\7\1\0"+
    "\1\7\1\0\17\7\1\u0191\6\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\16\0\2\7\1\0\1\7\1\0"+
    "\16\7\1\u0192\7\7\1\0\4\7\2\0\1\7\1\0"+
    "\11\7\37\0\1\u0193\114\0\1\u0194\37\0\1\u0195\62\0"+
    "\2\7\1\0\1\7\1\0\4\7\1\u0196\21\7\1\0"+
    "\4\7\2\0\1\7\1\0\11\7\16\0\2\7\1\0"+
    "\1\7\1\0\17\7\1\u0197\6\7\1\0\4\7\2\0"+
    "\1\7\1\0\11\7\42\0\1\u0198\67\0\1\u0199\101\0"+
    "\1\u019a\57\0\1\u019b\120\0\1\u019c\57\0\1\u019d\61\0"+
    "\1\u019e\64\0\1\u019f\122\0\1\u01a0\47\0\1\u01a1\71\0"+
    "\1\u01a2\67\0\1\u01a3\107\0\1\u01a4\62\0\1\u01a5\55\0"+
    "\1\u01a6\65\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21358];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\1\1\11\3\1\1\11\24\1\1\11\1\1"+
    "\2\11\3\1\1\11\1\1\3\0\16\1\2\0\1\1"+
    "\2\0\14\11\2\1\1\0\17\1\2\0\1\1\15\0"+
    "\22\1\2\0\1\1\13\0\1\1\1\11\1\1\1\11"+
    "\25\1\2\0\1\1\13\0\25\1\2\0\1\1\13\0"+
    "\25\1\2\0\1\1\1\0\1\11\1\1\10\0\22\1"+
    "\2\0\1\1\11\0\17\1\2\11\1\0\1\11\7\0"+
    "\14\1\10\0\10\1\2\0\1\11\5\0\5\1\1\11"+
    "\6\0\5\1\6\0\4\1\6\0\3\1\3\0\1\11"+
    "\2\0\3\1\1\11\1\0\1\11\2\0\3\1\3\0"+
    "\2\1\3\0\2\1\1\0\1\11\1\0\2\1\4\0"+
    "\1\11\11\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[422];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  
  private StringBuffer _string = new StringBuffer();
  
  private Token _lastToken; 
  
  private int _lastPseudoCommentLine;
  
  private Position _stringBegin;

  private int createToken(int type) {
    return createToken(type, yytext());
  }

  private int createToken(int type, String text) {
    Token t = new Token(type, text, new Location(getStartPos(), getEndPos()));
    _lastToken = t;
    return type;
  }

  private int createToken(int type, String text, Position begin, Position end) {
    Token t = new Token(type, text, new Location(begin, end));
    _lastToken = t;
    return type;
  }

	@Override
    public Object getLVal() {
        return _lastToken;
    }
    
    @Override
    public Position getStartPos() {
        return new Position(yyline + 1, yycolumn + 1);
    }
    
    @Override
    public Position getEndPos() {
        return new Position(yyline + 1, yycolumn + yylength());
    }
    
    @Override
    public void yyerror(EccFullParser.Location loc, String s) {
        yyerror(new Location(loc), s);
    }
	
	public void setLocation(int line, int column){
		yyline = line;
		yycolumn = column;
	}

    
    public void yyerror(Location loc, String s) {
        if (_reportError)
            System.err.println(String.format("%1$d:%2$d-%3$d:%4$d:%5$s", 
                loc.getBegin().getLine(), loc.getBegin().getColumn(),
                loc.getEnd().getLine(), loc.getEnd().getColumn(),
                s));
        _allErrors.add(new CompileError(loc, s));
            
    }
    
    
    private boolean _reportError;
    public void setReportError(boolean report){
        _reportError = report;
    }
    
    Collection<CompileError> _allErrors = new LinkedList<CompileError>();
    
  
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EccFullInternalLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public EccFullInternalLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 37: 
          { if (_lastPseudoCommentLine != yyline - 1) yybegin(COMMENT); 
		else {
			_lastPseudoCommentLine = yyline;
			return EccFullParser.FOLLOWINDICATOR;
		}
          }
        case 69: break;
        case 39: 
          { return createToken(EccFullParser.INACTIVE);
          }
        case 70: break;
        case 25: 
          { _string.append( '\'' );
          }
        case 71: break;
        case 26: 
          { return createToken(EccFullParser.REAL);
          }
        case 72: break;
        case 8: 
          { yybegin(STRING); _string.setLength(0); _stringBegin = getStartPos();
          }
        case 73: break;
        case 55: 
          { _lastPseudoCommentLine = yyline; return createToken(EccFullParser.REQUIRES);
          }
        case 74: break;
        case 3: 
          { yyerror(new Location(getStartPos(), getEndPos()), "Error: unexpected character '"+yytext()+"'"); return -1;
          }
        case 75: break;
        case 4: 
          { return createToken(EccFullParser.ID);
          }
        case 76: break;
        case 44: 
          { return createToken(EccFullParser.ISACTIVE);
          }
        case 77: break;
        case 11: 
          { yybegin(YYINITIAL); return createToken(EccFullParser.STRING, _string.toString(), _stringBegin, getEndPos());
          }
        case 78: break;
        case 15: 
          { return createToken(EccFullParser.LEQ);
          }
        case 79: break;
        case 43: 
          { return createToken(EccFullParser.ISSUBSTR);
          }
        case 80: break;
        case 27: 
          { return createToken(EccFullParser.HEXINT);
          }
        case 81: break;
        case 38: 
          { return createToken(EccFullParser.DISABLED);
          }
        case 82: break;
        case 9: 
          { _string.append( yytext() );
          }
        case 83: break;
        case 40: 
          { return createToken(EccFullParser.GETDATA);
          }
        case 84: break;
        case 65: 
          { yybegin(COMMENT);/*return createToken(EccFullParser.COMMAND);*/
          }
        case 85: break;
        case 12: 
          { yybegin(YYINITIAL);
          }
        case 86: break;
        case 67: 
          { _lastPseudoCommentLine = yyline; return createToken(EccFullParser.ACTIVEIF);
          }
        case 87: break;
        case 58: 
          { return createToken(EccFullParser.INTERFACE);
          }
        case 88: break;
        case 13: 
          { return createToken(EccFullParser.TO);
          }
        case 89: break;
        case 53: 
          { return createToken(EccFullParser.DESCRIPTION);
          }
        case 90: break;
        case 23: 
          { _string.append( '\"' );
          }
        case 91: break;
        case 6: 
          { return createToken((int) yycharat(0));
          }
        case 92: break;
        case 5: 
          { return createToken(EccFullParser.INT);
          }
        case 93: break;
        case 62: 
          { _lastPseudoCommentLine = yyline; return createToken(EccFullParser.IMPLEMENTEDBY);
          }
        case 94: break;
        case 7: 
          { yybegin(COMMENT);
          }
        case 95: break;
        case 19: 
          { _string.append( '\r' );
          }
        case 96: break;
        case 34: 
          { return createToken(EccFullParser.IMPLIES);
          }
        case 97: break;
        case 24: 
          { _string.append( '\\' );
          }
        case 98: break;
        case 49: 
          { return createToken(EccFullParser.ISENABLED);
          }
        case 99: break;
        case 10: 
          { yyerror(new Location(getStartPos(), getEndPos()), "Unterminated string at end of line"); return -1;
          }
        case 100: break;
        case 33: 
          { return createToken(EccFullParser.ENABLED);
          }
        case 101: break;
        case 20: 
          { _string.append( '\n' );
          }
        case 102: break;
        case 64: 
          { _lastPseudoCommentLine = yyline; return createToken(EccFullParser.CALCULATED);
          }
        case 103: break;
        case 61: 
          { _lastPseudoCommentLine = yyline; yybegin(LINERETURN); return createToken(EccFullParser.DEFAULT);
          }
        case 104: break;
        case 35: 
          { return createToken(EccFullParser.PACKAGE);
          }
        case 105: break;
        case 14: 
          { return createToken(EccFullParser.GEQ);
          }
        case 106: break;
        case 57: 
          { return createToken(EccFullParser.COMPONENT);
          }
        case 107: break;
        case 31: 
          { return createToken(EccFullParser.LEVELUP);
          }
        case 108: break;
        case 60: 
          { _lastPseudoCommentLine = yyline; return createToken(EccFullParser.LEGALVALUES);
          }
        case 109: break;
        case 32: 
          { return createToken(EccFullParser.ACTIVE);
          }
        case 110: break;
        case 68: 
          { _lastPseudoCommentLine = yyline; return createToken(EccFullParser.NONEFLAVOR);
          }
        case 111: break;
        case 16: 
          { return createToken(EccFullParser.NEQ);
          }
        case 112: break;
        case 52: 
          { return createToken(EccFullParser.CDLPACKAGE);
          }
        case 113: break;
        case 45: 
          { return createToken(EccFullParser.TEMPLATE);
          }
        case 114: break;
        case 41: 
          { return createToken(EccFullParser.BOOLDATA);
          }
        case 115: break;
        case 66: 
          { return createToken(EccFullParser.VERSION);
          }
        case 116: break;
        case 50: 
          { return createToken(EccFullParser.ISXSUBSTR);
          }
        case 117: break;
        case 46: 
          { return createToken(EccFullParser.HARDWARE);
          }
        case 118: break;
        case 2: 
          { return createToken(EccFullParser.LINETEXT);
          }
        case 119: break;
        case 54: 
          { return createToken(EccFullParser.VERSIONCMP);
          }
        case 120: break;
        case 47: 
          { _lastPseudoCommentLine = yyline; return createToken(EccFullParser.FLAVOR);
          }
        case 121: break;
        case 42: 
          { return createToken(EccFullParser.ISLOADED);
          }
        case 122: break;
        case 18: 
          { _string.append( '\f' );
          }
        case 123: break;
        case 36: 
          { yybegin(COMMENT); return createToken(EccFullParser.CALCULATIONINDICATOR);
          }
        case 124: break;
        case 29: 
          { return createToken(EccFullParser.BOOL);
          }
        case 125: break;
        case 51: 
          { yybegin(LINERETURN);return createToken(EccFullParser.USERVALUE);
          }
        case 126: break;
        case 63: 
          { return createToken(EccFullParser.CONFIGURATION);
          }
        case 127: break;
        case 22: 
          { _string.append( '\b' );
          }
        case 128: break;
        case 48: 
          { return createToken(EccFullParser.OPTION);
          }
        case 129: break;
        case 56: 
          { yybegin(LINERETURN);return createToken(EccFullParser.DERIVEDUSERVALUE);
          }
        case 130: break;
        case 30: 
          { return createToken(EccFullParser.LEVELDOWN);
          }
        case 131: break;
        case 21: 
          { _string.append( '\t' );
          }
        case 132: break;
        case 17: 
          { _string.append( yytext().substring(1) );
          }
        case 133: break;
        case 59: 
          { yybegin(LINERETURN);return createToken(EccFullParser.INFERREDVALUE);
          }
        case 134: break;
        case 1: 
          { 
          }
        case 135: break;
        case 28: 
          { return createToken(EccFullParser.DATA);
          }
        case 136: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
