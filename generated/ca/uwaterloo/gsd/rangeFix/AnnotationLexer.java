/* The following code was generated by JFlex 1.4.3 on 12-1-12 下午11:21 */

package ca.uwaterloo.gsd.rangeFix;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12-1-12 下午11:21 from the specification file
 * <tt>C:/Users/FlyingHero/Documents/Projects/2011/RangeFix3/src/main/annotation.flex</tt>
 */
public class AnnotationLexer implements AnnotationParser.Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int LINERETURN = 6;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\55\1\2\2\0\1\1\22\0\1\55\1\50\1\53\1\54"+
    "\2\0\1\46\1\57\1\44\1\44\1\44\1\7\1\44\1\7\1\5"+
    "\1\44\1\10\11\4\1\44\1\44\1\52\1\47\1\51\1\44\1\0"+
    "\1\12\1\42\2\12\1\6\1\12\2\3\1\41\11\3\1\43\4\3"+
    "\1\11\2\3\1\44\1\56\1\44\1\0\1\22\1\0\1\16\1\33"+
    "\1\26\1\13\1\14\1\15\1\24\1\3\1\27\2\3\1\20\1\36"+
    "\1\32\1\34\1\37\1\31\1\30\1\25\1\21\1\17\1\23\1\3"+
    "\1\35\1\40\1\3\1\44\1\45\1\44\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\0\1\2\1\1\1\3\1\4\1\5"+
    "\1\4\14\3\3\2\3\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\2\1\1\2\13\3\0\4\3\1\14\5\3"+
    "\1\15\4\3\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\2\32\1\0"+
    "\1\33\22\3\1\34\5\3\1\35\14\3\1\36\3\3"+
    "\1\37\21\3\1\40\2\3\1\41\11\3\1\42\13\3"+
    "\1\43\5\3\1\44\7\3\1\45\2\3\1\46\4\3"+
    "\1\47\1\50\1\51\1\3\1\52\3\3\1\53\1\54"+
    "\1\55\2\3\1\56\1\3\1\57\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\300\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420"+
    "\0\u0450\0\u0480\0\u04b0\0\u04e0\0\300\0\300\0\u0510\0\300"+
    "\0\300\0\u0540\0\u0570\0\u05a0\0\300\0\u05d0\0\u0600\0\u0630"+
    "\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0"+
    "\0\u07e0\0\u0810\0\u0120\0\u0840\0\u0870\0\u08a0\0\u08d0\0\300"+
    "\0\300\0\300\0\300\0\300\0\300\0\300\0\300\0\300"+
    "\0\300\0\300\0\300\0\u0900\0\u0930\0\u0930\0\u0630\0\u0960"+
    "\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0"+
    "\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60"+
    "\0\u0c90\0\u0120\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0120"+
    "\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00"+
    "\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0120\0\u0ff0\0\u1020\0\u1050"+
    "\0\u0120\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0"+
    "\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320"+
    "\0\u1350\0\u1380\0\u0120\0\u13b0\0\u13e0\0\u0120\0\u1410\0\u1440"+
    "\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u1530\0\u1560\0\u1590\0\u0120"+
    "\0\u15c0\0\u15f0\0\u1620\0\u1650\0\u1680\0\u16b0\0\u16e0\0\u1710"+
    "\0\u1740\0\u1770\0\u17a0\0\u0120\0\u17d0\0\u1800\0\u1830\0\u1860"+
    "\0\u1890\0\u0120\0\u18c0\0\u18f0\0\u1920\0\u1950\0\u1980\0\u19b0"+
    "\0\u19e0\0\u0120\0\u1a10\0\u1a40\0\u0120\0\u1a70\0\u1aa0\0\u1ad0"+
    "\0\u1b00\0\u0120\0\u0120\0\u0120\0\u1b30\0\u0120\0\u1b60\0\u1b90"+
    "\0\u1bc0\0\u0120\0\u0120\0\u0120\0\u1bf0\0\u1c20\0\u0120\0\u1c50"+
    "\0\u0120\0\u0120";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\11\1\7\1\11\1\12"+
    "\2\7\1\13\1\14\1\7\1\15\1\7\1\16\1\17"+
    "\1\7\1\20\1\7\1\21\1\22\1\23\1\24\1\7"+
    "\1\25\1\26\10\7\1\11\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\6\2\5\1\37\2\40"+
    "\50\37\1\41\2\37\1\42\1\37\1\43\1\44\1\45"+
    "\55\43\60\5\61\0\2\6\52\0\1\6\5\0\2\7"+
    "\1\0\1\7\1\0\34\7\20\0\1\10\1\46\1\47"+
    "\1\0\1\10\3\0\1\47\47\0\1\10\1\46\1\47"+
    "\1\0\1\10\1\50\2\0\1\47\20\0\1\50\25\0"+
    "\2\7\1\0\1\7\1\0\4\7\1\51\27\7\17\0"+
    "\2\7\1\0\1\7\1\0\22\7\1\52\11\7\17\0"+
    "\2\7\1\0\1\7\1\0\16\7\1\53\15\7\17\0"+
    "\2\7\1\0\1\7\1\0\4\7\1\54\27\7\17\0"+
    "\2\7\1\0\1\7\1\0\24\7\1\55\3\7\1\56"+
    "\3\7\17\0\2\7\1\0\1\7\1\0\4\7\1\57"+
    "\27\7\17\0\2\7\1\0\1\7\1\0\11\7\1\60"+
    "\22\7\17\0\2\7\1\0\1\7\1\0\6\7\1\61"+
    "\25\7\17\0\2\7\1\0\1\7\1\0\15\7\1\62"+
    "\4\7\1\63\3\7\1\64\5\7\17\0\2\7\1\0"+
    "\1\7\1\0\4\7\1\65\27\7\17\0\2\7\1\0"+
    "\1\7\1\0\7\7\1\66\24\7\17\0\2\7\1\0"+
    "\1\7\1\0\24\7\1\67\7\7\61\0\1\11\60\0"+
    "\1\11\60\0\1\11\57\0\1\70\57\0\1\71\57\0"+
    "\1\72\10\0\1\37\2\0\50\37\1\0\2\37\1\0"+
    "\1\37\2\73\1\0\12\73\1\74\3\73\1\75\6\73"+
    "\1\76\1\73\1\77\1\100\17\73\1\101\2\73\1\102"+
    "\1\103\1\43\2\0\55\43\2\0\1\45\61\0\1\104"+
    "\3\0\1\104\53\0\1\105\2\0\1\106\1\105\53\0"+
    "\1\107\1\0\1\107\1\0\1\107\1\0\5\107\7\0"+
    "\1\107\4\0\1\107\6\0\1\107\20\0\2\7\1\0"+
    "\1\7\1\0\5\7\1\110\26\7\17\0\2\7\1\0"+
    "\1\7\1\0\7\7\1\111\24\7\17\0\2\7\1\0"+
    "\1\7\1\0\11\7\1\112\22\7\17\0\2\7\1\0"+
    "\1\7\1\0\14\7\1\113\17\7\17\0\2\7\1\0"+
    "\1\7\1\0\31\7\1\114\1\115\1\116\17\0\2\7"+
    "\1\0\1\7\1\0\27\7\1\117\4\7\17\0\2\7"+
    "\1\0\1\7\1\0\20\7\1\120\13\7\17\0\2\7"+
    "\1\0\1\7\1\0\20\7\1\121\13\7\17\0\2\7"+
    "\1\0\1\7\1\0\10\7\1\122\23\7\17\0\2\7"+
    "\1\0\1\7\1\0\12\7\1\123\21\7\17\0\2\7"+
    "\1\0\1\7\1\0\27\7\1\124\4\7\17\0\2\7"+
    "\1\0\1\7\1\0\21\7\1\125\5\7\1\126\4\7"+
    "\17\0\2\7\1\0\1\7\1\0\26\7\1\127\5\7"+
    "\17\0\2\7\1\0\1\7\1\0\24\7\1\130\7\7"+
    "\20\0\1\104\1\0\1\47\1\0\1\104\3\0\1\47"+
    "\47\0\1\105\3\0\1\105\52\0\2\7\1\0\1\7"+
    "\1\0\6\7\1\131\25\7\17\0\2\7\1\0\1\7"+
    "\1\0\26\7\1\132\5\7\17\0\2\7\1\0\1\7"+
    "\1\0\17\7\1\133\14\7\17\0\2\7\1\0\1\7"+
    "\1\0\6\7\1\134\25\7\17\0\2\7\1\0\1\7"+
    "\1\0\22\7\1\135\11\7\17\0\2\7\1\0\1\7"+
    "\1\0\24\7\1\136\7\7\17\0\2\7\1\0\1\7"+
    "\1\0\11\7\1\137\22\7\17\0\2\7\1\0\1\7"+
    "\1\0\4\7\1\140\27\7\17\0\2\7\1\0\1\7"+
    "\1\0\15\7\1\141\16\7\17\0\2\7\1\0\1\7"+
    "\1\0\17\7\1\142\14\7\17\0\2\7\1\0\1\7"+
    "\1\0\16\7\1\143\15\7\17\0\2\7\1\0\1\7"+
    "\1\0\4\7\1\144\1\7\1\145\1\7\1\146\4\7"+
    "\1\147\7\7\1\150\6\7\17\0\2\7\1\0\1\7"+
    "\1\0\10\7\1\151\23\7\17\0\2\7\1\0\1\7"+
    "\1\0\7\7\1\152\24\7\17\0\2\7\1\0\1\7"+
    "\1\0\10\7\1\153\23\7\17\0\2\7\1\0\1\7"+
    "\1\0\23\7\1\154\10\7\17\0\2\7\1\0\1\7"+
    "\1\0\10\7\1\155\23\7\17\0\2\7\1\0\1\7"+
    "\1\0\7\7\1\156\24\7\17\0\2\7\1\0\1\7"+
    "\1\0\13\7\1\157\20\7\17\0\2\7\1\0\1\7"+
    "\1\0\10\7\1\160\23\7\17\0\2\7\1\0\1\7"+
    "\1\0\11\7\1\161\22\7\17\0\2\7\1\0\1\7"+
    "\1\0\24\7\1\162\7\7\17\0\2\7\1\0\1\7"+
    "\1\0\20\7\1\163\13\7\17\0\2\7\1\0\1\7"+
    "\1\0\17\7\1\164\14\7\17\0\2\7\1\0\1\7"+
    "\1\0\22\7\1\165\11\7\17\0\2\7\1\0\1\7"+
    "\1\0\7\7\1\166\24\7\17\0\2\7\1\0\1\7"+
    "\1\0\22\7\1\167\11\7\17\0\2\7\1\0\1\7"+
    "\1\0\16\7\1\170\15\7\17\0\2\7\1\0\1\7"+
    "\1\0\24\7\1\171\7\7\17\0\2\7\1\0\1\7"+
    "\1\0\7\7\1\172\24\7\17\0\2\7\1\0\1\7"+
    "\1\0\15\7\1\173\16\7\17\0\2\7\1\0\1\7"+
    "\1\0\17\7\1\174\14\7\17\0\2\7\1\0\1\7"+
    "\1\0\17\7\1\175\14\7\17\0\2\7\1\0\1\7"+
    "\1\0\6\7\1\176\25\7\17\0\2\7\1\0\1\7"+
    "\1\0\4\7\1\177\27\7\17\0\2\7\1\0\1\7"+
    "\1\0\10\7\1\200\23\7\17\0\2\7\1\0\1\7"+
    "\1\0\4\7\1\201\27\7\17\0\2\7\1\0\1\7"+
    "\1\0\12\7\1\202\21\7\17\0\2\7\1\0\1\7"+
    "\1\0\10\7\1\203\23\7\17\0\2\7\1\0\1\7"+
    "\1\0\17\7\1\204\14\7\17\0\2\7\1\0\1\7"+
    "\1\0\24\7\1\205\7\7\17\0\2\7\1\0\1\7"+
    "\1\0\14\7\1\206\17\7\17\0\2\7\1\0\1\7"+
    "\1\0\10\7\1\207\23\7\17\0\2\7\1\0\1\7"+
    "\1\0\6\7\1\210\25\7\17\0\2\7\1\0\1\7"+
    "\1\0\11\7\1\211\22\7\17\0\2\7\1\0\1\7"+
    "\1\0\6\7\1\212\25\7\17\0\2\7\1\0\1\7"+
    "\1\0\23\7\1\213\10\7\17\0\2\7\1\0\1\7"+
    "\1\0\7\7\1\214\24\7\17\0\2\7\1\0\1\7"+
    "\1\0\4\7\1\215\27\7\17\0\2\7\1\0\1\7"+
    "\1\0\20\7\1\216\13\7\17\0\2\7\1\0\1\7"+
    "\1\0\16\7\1\217\15\7\17\0\2\7\1\0\1\7"+
    "\1\0\20\7\1\220\13\7\17\0\2\7\1\0\1\7"+
    "\1\0\11\7\1\221\22\7\17\0\2\7\1\0\1\7"+
    "\1\0\12\7\1\222\21\7\17\0\2\7\1\0\1\7"+
    "\1\0\13\7\1\223\20\7\17\0\2\7\1\0\1\7"+
    "\1\0\22\7\1\224\11\7\17\0\2\7\1\0\1\7"+
    "\1\0\22\7\1\225\11\7\17\0\2\7\1\0\1\7"+
    "\1\0\6\7\1\226\25\7\17\0\2\7\1\0\1\7"+
    "\1\0\23\7\1\227\10\7\17\0\2\7\1\0\1\7"+
    "\1\0\17\7\1\230\14\7\17\0\2\7\1\0\1\7"+
    "\1\0\3\7\1\231\30\7\17\0\2\7\1\0\1\7"+
    "\1\0\15\7\1\232\16\7\17\0\2\7\1\0\1\7"+
    "\1\0\23\7\1\233\10\7\17\0\2\7\1\0\1\7"+
    "\1\0\15\7\1\234\16\7\17\0\2\7\1\0\1\7"+
    "\1\0\4\7\1\235\27\7\17\0\2\7\1\0\1\7"+
    "\1\0\17\7\1\236\14\7\17\0\2\7\1\0\1\7"+
    "\1\0\12\7\1\237\21\7\17\0\2\7\1\0\1\7"+
    "\1\0\17\7\1\240\14\7\17\0\2\7\1\0\1\7"+
    "\1\0\6\7\1\241\25\7\17\0\2\7\1\0\1\7"+
    "\1\0\14\7\1\242\17\7\17\0\2\7\1\0\1\7"+
    "\1\0\12\7\1\243\21\7\17\0\2\7\1\0\1\7"+
    "\1\0\11\7\1\244\22\7\17\0\2\7\1\0\1\7"+
    "\1\0\10\7\1\245\23\7\17\0\2\7\1\0\1\7"+
    "\1\0\13\7\1\246\20\7\17\0\2\7\1\0\1\7"+
    "\1\0\4\7\1\247\27\7\17\0\2\7\1\0\1\7"+
    "\1\0\11\7\1\250\22\7\17\0\2\7\1\0\1\7"+
    "\1\0\15\7\1\251\16\7\17\0\2\7\1\0\1\7"+
    "\1\0\15\7\1\252\16\7\17\0\2\7\1\0\1\7"+
    "\1\0\22\7\1\253\11\7\17\0\2\7\1\0\1\7"+
    "\1\0\13\7\1\254\20\7\17\0\2\7\1\0\1\7"+
    "\1\0\5\7\1\255\26\7\17\0\2\7\1\0\1\7"+
    "\1\0\10\7\1\256\23\7\17\0\2\7\1\0\1\7"+
    "\1\0\16\7\1\257\15\7\17\0\2\7\1\0\1\7"+
    "\1\0\4\7\1\260\27\7\17\0\2\7\1\0\1\7"+
    "\1\0\4\7\1\261\27\7\17\0\2\7\1\0\1\7"+
    "\1\0\4\7\1\262\27\7\17\0\2\7\1\0\1\7"+
    "\1\0\3\7\1\263\30\7\17\0\2\7\1\0\1\7"+
    "\1\0\20\7\1\264\13\7\17\0\2\7\1\0\1\7"+
    "\1\0\11\7\1\265\22\7\17\0\2\7\1\0\1\7"+
    "\1\0\14\7\1\266\17\7\17\0\2\7\1\0\1\7"+
    "\1\0\6\7\1\267\25\7\17\0\2\7\1\0\1\7"+
    "\1\0\7\7\1\270\24\7\17\0\2\7\1\0\1\7"+
    "\1\0\26\7\1\271\5\7\17\0\2\7\1\0\1\7"+
    "\1\0\3\7\1\272\30\7\17\0\2\7\1\0\1\7"+
    "\1\0\3\7\1\273\30\7\17\0\2\7\1\0\1\7"+
    "\1\0\20\7\1\274\13\7\17\0\2\7\1\0\1\7"+
    "\1\0\10\7\1\275\23\7\17\0\2\7\1\0\1\7"+
    "\1\0\4\7\1\276\27\7\17\0\2\7\1\0\1\7"+
    "\1\0\27\7\1\277\4\7\17\0\2\7\1\0\1\7"+
    "\1\0\7\7\1\300\24\7\17\0\2\7\1\0\1\7"+
    "\1\0\15\7\1\301\16\7\17\0\2\7\1\0\1\7"+
    "\1\0\4\7\1\302\27\7\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7296];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\0\1\11\3\1\1\11\23\1\2\11"+
    "\1\1\2\11\3\1\1\11\3\0\17\1\14\11\2\1"+
    "\1\0\174\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  
  private StringBuffer _string = new StringBuffer();
  
  private Token _lastToken; 
  
  private int _lastPseudoCommentLine;
  
  private Position _stringBegin;

  private int createToken(int type) {
    return createToken(type, yytext());
  }

  private int createToken(int type, String text) {
    Token t = new Token(type, text, new Location(getStartPos(), getEndPos()));
    _lastToken = t;
    return type;
  }

  private int createToken(int type, String text, Position begin, Position end) {
    Token t = new Token(type, text, new Location(begin, end));
    _lastToken = t;
    return type;
  }

	@Override
    public Object getLVal() {
        return _lastToken;
    }
    
    @Override
    public Position getStartPos() {
        return new Position(yyline + 1, yycolumn + 1);
    }
    
    @Override
    public Position getEndPos() {
        return new Position(yyline + 1, yycolumn + yylength());
    }
    
    @Override
    public void yyerror(AnnotationParser.Location loc, String s) {
        yyerror(new Location(loc), s);
    }
	
	public void setLocation(int line, int column){
		yyline = line;
		yycolumn = column;
	}

    
    public void yyerror(Location loc, String s) {
        if (_reportError)
            System.err.println(String.format("%1$d:%2$d-%3$d:%4$d:%5$s", 
                loc.getBegin().getLine(), loc.getBegin().getColumn(),
                loc.getEnd().getLine(), loc.getEnd().getColumn(),
                s));
        _allErrors.add(new CompileError(loc, s));
            
    }
    
    
    private boolean _reportError;
    public void setReportError(boolean report){
        _reportError = report;
    }
    
    Collection<CompileError> _allErrors = new LinkedList<CompileError>();
    
  
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnnotationLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AnnotationLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 13: 
          { return createToken(AnnotationParser.IN);
          }
        case 49: break;
        case 25: 
          { _string.append( '\'' );
          }
        case 50: break;
        case 32: 
          { return createToken(AnnotationParser.TOBOOL);
          }
        case 51: break;
        case 6: 
          { yybegin(STRING); _string.setLength(0); _stringBegin = getStartPos();
          }
        case 52: break;
        case 2: 
          { yyerror(new Location(getStartPos(), getEndPos()), "Error: unexpected character '"+yytext()+"'"); return -1;
          }
        case 53: break;
        case 16: 
          { return createToken(AnnotationParser.LEQ);
          }
        case 54: break;
        case 3: 
          { return createToken(AnnotationParser.ID);
          }
        case 55: break;
        case 4: 
          { return createToken(AnnotationParser.INT);
          }
        case 56: break;
        case 46: 
          { return createToken(AnnotationParser.VERSIONCMP);
          }
        case 57: break;
        case 37: 
          { return createToken(AnnotationParser.REQUIRES);
          }
        case 58: break;
        case 36: 
          { return createToken(AnnotationParser.TOSTRING);
          }
        case 59: break;
        case 8: 
          { _string.append( yytext() );
          }
        case 60: break;
        case 31: 
          { return createToken(AnnotationParser.TOINT);
          }
        case 61: break;
        case 11: 
          { yybegin(YYINITIAL);
          }
        case 62: break;
        case 23: 
          { _string.append( '\"' );
          }
        case 63: break;
        case 5: 
          { return createToken((int) yycharat(0));
          }
        case 64: break;
        case 44: 
          { return createToken(AnnotationParser.ISENABLED);
          }
        case 65: break;
        case 12: 
          { return createToken(AnnotationParser.TO);
          }
        case 66: break;
        case 40: 
          { return createToken(AnnotationParser.ISLOADED);
          }
        case 67: break;
        case 7: 
          { yybegin(COMMENT);
          }
        case 68: break;
        case 15: 
          { return createToken(AnnotationParser.GEQ);
          }
        case 69: break;
        case 20: 
          { _string.append( '\r' );
          }
        case 70: break;
        case 29: 
          { return createToken(AnnotationParser.TYPE);
          }
        case 71: break;
        case 24: 
          { _string.append( '\\' );
          }
        case 72: break;
        case 9: 
          { yyerror(new Location(getStartPos(), getEndPos()), "Unterminated string at end of line"); return -1;
          }
        case 73: break;
        case 45: 
          { return createToken(AnnotationParser.ISXSUBSTR);
          }
        case 74: break;
        case 38: 
          { return createToken(AnnotationParser.ACTIVEIF);
          }
        case 75: break;
        case 14: 
          { return createToken(AnnotationParser.NEQ);
          }
        case 76: break;
        case 47: 
          { return createToken(AnnotationParser.LEGALVALUES);
          }
        case 77: break;
        case 21: 
          { _string.append( '\n' );
          }
        case 78: break;
        case 28: 
          { return createToken(AnnotationParser.ENUMTYPE);
          }
        case 79: break;
        case 42: 
          { return createToken(AnnotationParser.REPLACING);
          }
        case 80: break;
        case 27: 
          { return createToken(AnnotationParser.HEXINT);
          }
        case 81: break;
        case 34: 
          { return createToken(AnnotationParser.INTTYPE);
          }
        case 82: break;
        case 48: 
          { return createToken(AnnotationParser.DEFAULT);
          }
        case 83: break;
        case 10: 
          { yybegin(YYINITIAL); return createToken(AnnotationParser.STRING, _string.toString(), _stringBegin, getEndPos());
          }
        case 84: break;
        case 35: 
          { return createToken(AnnotationParser.IMPLIES);
          }
        case 85: break;
        case 18: 
          { _string.append( '\f' );
          }
        case 86: break;
        case 39: 
          { return createToken(AnnotationParser.ISACTIVE);
          }
        case 87: break;
        case 22: 
          { _string.append( '\b' );
          }
        case 88: break;
        case 41: 
          { return createToken(AnnotationParser.ISSUBSTR);
          }
        case 89: break;
        case 17: 
          { yyerror(new Location(getStartPos(), getEndPos()), "Illegal escape sequence \""+yytext()+"\""); return -1;
          }
        case 90: break;
        case 43: 
          { return createToken(AnnotationParser.CALCULATED);
          }
        case 91: break;
        case 30: 
          { return createToken(AnnotationParser.BOOLTYPE);
          }
        case 92: break;
        case 33: 
          { return createToken(AnnotationParser.STRINGTYPE);
          }
        case 93: break;
        case 19: 
          { _string.append( '\t' );
          }
        case 94: break;
        case 26: 
          { return createToken(AnnotationParser.REAL);
          }
        case 95: break;
        case 1: 
          { 
          }
        case 96: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
