
component CYGPKG_REDBOOT_H8300_OPTIONS{
  display "Redboot for H8300 options"
  active_if [CYGPKG_REDBOOT ]
  flavor none 

  component CYGSEM_REDBOOT_H8300_LINUX_BOOT{
    display "Support booting uCinux via RedBoot"
    default_value [1 ]
    flavor bool 

    option CYGDAT_REDBOOT_H8300_LINUX_BOOT_ENTRY{
      display "Default kernel entry address"
      default_value [0x400000 ]
      flavor data 
    }
  }
}

component CYGBLD_GLOBAL_OPTIONS{
  display "Global build options"
  flavor none 

  option CYGBLD_GLOBAL_COMMAND_PREFIX{
    display "Global command prefix"
    default_value ["h8300-elf" ]
    flavor data 
  }

  option CYGBLD_GLOBAL_CFLAGS{
    display "Global compiler flags"
    default_value [CYGBLD_GLOBAL_WARNFLAGS . " -g -O2 -mh -mint32 -fsigned-char -fdata-sections -fno-rtti -fno-exceptions " ]
    flavor data 
  }

  option CYGBLD_GLOBAL_LDFLAGS{
    display "Global linker flags"
    default_value ["-g -nostdlib -Wl,--gc-sections -Wl,-static -mrelax -mh -mint32" ]
    flavor data 
  }

  option CYGBLD_BUILD_GDB_STUBS{
    display "Build GDB stub ROM image"
    default_value [0 ]
    requires [CYGSEM_HAL_ROM_MONITOR ]
    requires [CYGBLD_BUILD_COMMON_GDB_STUBS ]
    requires [CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS ]
    requires [CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT ]
    requires [CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT ]
  }

  option CYGBLD_GLOBAL_WARNFLAGS{
    display "Standard compiler warning flags"
    calculated ["-Wall -Wpointer-arith -Wstrict-prototypes -Wundef -Woverloaded-virtual -Wno-write-strings " ]
    flavor data 
  }

  option CYGBLD_BUILD_COMMON_GDB_STUBS{
    display "Build common GDB stub ROM image"
    default_value [0 ]
    requires [CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS ]
  }
}

component CYGHWR_AKI3068NET_IDE_OPTIONS{
  display "IDE Expand Setting"
  active_if [CYGHWR_HAL_AKI3068NET_IDE ]
  implements [CYGINT_HAL_PLF_IF_IDE ]
  flavor none 

  option CYGHWR_HAL_IDE_REGISTER{
    display "IDE Register base address"
    default_value [0x600000 ]
    flavor data 
  }

  option CYGHWR_HAL_IDE_ALT_REGS{
    display "IDE AlternateRegister base address"
    default_value [0x600020 ]
    flavor data 
  }

  option CYGHWR_HAL_IDE_BUSWIDTH{
    display "IDE bus width"
    legal_values [8 16 ]
    default_value [8 ]
    flavor data 
  }
}

package CYGPKG_DEVICES_WATCHDOG_H8300_H8300H{
  display "H8/300H watchdog driver"
  active_if [CYGPKG_IO_WATCHDOG ]
  requires [CYGPKG_HAL_H8300_H8300H ]
  implements [CYGINT_WATCHDOG_HW_IMPLEMENTATIONS ]
  implements [CYGINT_WATCHDOG_RESETS_ON_TIMEOUT ]
  active_if [CYGIMP_WATCHDOG_HARDWARE ]

  component CYGPKG_DEVICES_WATCHDOG_H8300_H8300H_OPTIONS{
    display "H8/300H watchdog build options"
    flavor none 

    option CYGPKG_DEVICES_WATCHDOG_H8300_H8300H_CFLAGS_ADD{
      display "Additional compiler flags"
      default_value ["" ]
      flavor data 
    }

    option CYGPKG_DEVICES_WATCHDOG_H8300_H8300H_CFLAGS_REMOVE{
      display "Suppressed compiler flags"
      default_value ["" ]
      flavor data 
    }
  }
}

option CYGIMP_WATCHDOG_HARDWARE{
  display "Hardware watchdog"
  default_value [1 ]
  implements [CYGINT_WATCHDOG_IMPLEMENTATIONS ]
}

package CYGPKG_HAL{
  display "eCos HAL"
  requires [CYGPKG_INFRA ]

  component CYGPKG_HAL_COMMON{
    display "Platform-independent HAL options"
    flavor none 

    option CYGFUN_HAL_COMMON_KERNEL_SUPPORT{
      display "Provide eCos kernel support"
      requires [CYGPKG_KERNEL ]
      default_value [CYGPKG_KERNEL ]
    }

    option CYGPKG_HAL_EXCEPTIONS{
      display "HAL exception support"
      requires [CYGPKG_KERNEL_EXCEPTIONS ]
      default_value [CYGPKG_KERNEL_EXCEPTIONS ]
    }

    option CYGSEM_HAL_STOP_CONSTRUCTORS_ON_FLAG{
      display "Stop calling constructors early"
      requires [CYGSEM_LIBC_INVOKE_DEFAULT_STATIC_CONSTRUCTORS ]
      default_value [0 ]
    }

    interface CYGINT_HAL_SUPPORTS_MMU_TABLES{
      display "HAL uses the MMU and allows for CDL manipulation of it's use"
    }

    option CYGSEM_HAL_INSTALL_MMU_TABLES{
      display "Install MMU tables."
      default_value [CYG_HAL_STARTUP != "RAM" ]
      active_if [CYGINT_HAL_SUPPORTS_MMU_TABLES ]
    }

    option CYGSEM_HAL_STATIC_MMU_TABLES{
      display "Use static MMU tables."
      default_value [0 ]
      requires [CYGSEM_HAL_INSTALL_MMU_TABLES ]
    }

    component CYGDBG_HAL_DIAG_TO_DEBUG_CHAN{
      display "Route diagnostic output to debug channel"
      default_value [(CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS || CYG_HAL_STARTUP == "RAM") ? 1 : 0 ]
      active_if [!CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE ]
      active_if [CYGPKG_HAL_ARM || CYGPKG_HAL_POWERPC_MPC8xx || CYGPKG_HAL_V85X_V850 || CYGSEM_HAL_VIRTUAL_VECTOR_DIAG ]

      option CYGSEM_HAL_DIAG_MANGLER{
        display "Mangler used on diag output"
        legal_values ["GDB" "None" ]
        default_value ["GDB" ]
        flavor data 
      }
    }

    component CYGBLD_HAL_LINKER_GROUPED_LIBS{
      display "Grouped libraries for linking"
      default_value [CYGBLD_HAL_LINKER_GROUPED_LIBS_DEFAULT ]
      requires [is_substr(CYGBLD_HAL_LINKER_GROUPED_LIBS, "libtarget.a") ]
      flavor data 

      option CYGBLD_HAL_LINKER_GROUPED_LIBS_DEFAULT{
        display "Default setting"
        default_value ["libtarget.a libgcc.a libsupc++.a" ]
        flavor data 
      }
    }
  }

  component CYGPKG_HAL_COMMON_INTERRUPTS{
    display "HAL interrupt handling"
    flavor none 

    option CYGIMP_HAL_COMMON_INTERRUPTS_USE_INTERRUPT_STACK{
      display "Use separate stack for interrupts"
      default_value [1 ]
    }

    option CYGNUM_HAL_COMMON_INTERRUPTS_STACK_SIZE{
      display "Interrupt stack size"
      default_value [CYGPKG_KERNEL ? 4096 : 32768 ]
      legal_values [128 to 1048576 ]
      flavor data 
    }

    option CYGSEM_HAL_COMMON_INTERRUPTS_ALLOW_NESTING{
      display "Allow nested interrupts"
      default_value [0 ]
    }

    option CYGDBG_HAL_COMMON_INTERRUPTS_SAVE_MINIMUM_CONTEXT{
      display "Save minimum context on interrupt"
      default_value [1 ]
    }

    option CYGIMP_HAL_COMMON_INTERRUPTS_CHAIN{
      display "Chain all interrupts together"
      default_value [0 ]
    }

    option CYGIMP_HAL_COMMON_INTERRUPTS_IGNORE_SPURIOUS{
      display "Ignore spurious [fleeting] interrupts"
      default_value [0 ]
    }
  }

  component CYGPKG_HAL_COMMON_CONTEXT{
    display "HAL context switch support"
    flavor none 

    option CYGDBG_HAL_COMMON_CONTEXT_SAVE_MINIMUM{
      display "Use minimum thread context"
      default_value [1 ]
    }
  }

  component CYGPKG_HAL_CACHE_CONTROL{
    display "Explicit control over cache behaviour"
    flavor none 

    component CYGSEM_HAL_ENABLE_DCACHE_ON_STARTUP{
      display "Enable DATA cache on startup"
      default_value [1 ]

      option CYGSEM_HAL_DCACHE_STARTUP_MODE{
        display "DATA cache mode on startup"
        legal_values ["COPYBACK" "WRITETHRU" ]
        default_value ["COPYBACK" ]
        flavor data 
      }
    }

    option CYGSEM_HAL_ENABLE_ICACHE_ON_STARTUP{
      display "Enable INSTRUCTION cache on startup"
      default_value [1 ]
    }
  }

  component CYGPKG_HAL_DEBUG{
    display "Source-level debugging support"
    flavor none 

    interface CYGINT_HAL_DEBUG_GDB_STUBS{
      display "Support for GDB stubs"
    }

    option CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS{
      display "Include GDB stubs in HAL"
      active_if [CYGINT_HAL_DEBUG_GDB_STUBS ]
      default_value [0 ]
      requires [! CYGSEM_HAL_USE_ROM_MONITOR ]
      requires [! CYGDBG_HAL_COMMON_INTERRUPTS_SAVE_MINIMUM_CONTEXT ]
      requires [! CYGDBG_HAL_COMMON_CONTEXT_SAVE_MINIMUM ]
      requires [!CYGSEM_HAL_VIRTUAL_VECTOR_DIAG || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS ]
    }

    interface CYGINT_HAL_DEBUG_GDB_STUBS_BREAK{
      display "Support for external break support in GDB stubs"
    }

    option CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT{
      display "Include GDB external break support for stubs"
      active_if [CYGINT_HAL_DEBUG_GDB_STUBS_BREAK ]
      requires [CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS ]
      default_value [CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS ]
    }

    interface CYGINT_HAL_DEBUG_GDB_CTRLC_UNSUPPORTED{
      display "Platform does not support CTRLC"
    }

    option CYGDBG_HAL_DEBUG_GDB_CTRLC_SUPPORT{
      display "Include GDB external break support when no stubs"
      requires [!CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT ]
      active_if [CYGSEM_HAL_USE_ROM_MONITOR || CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS ]
      active_if [CYGINT_HAL_DEBUG_GDB_CTRLC_UNSUPPORTED == 0 ]
      default_value [!CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS ]
    }

    option CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT{
      display "Include GDB multi-threading debug support"
      active_if [CYGSEM_HAL_ROM_MONITOR || CYGDBG_KERNEL_DEBUG_GDB_THREAD_SUPPORT ]
      default_value [1 ]
    }

    option CYGNUM_HAL_DEBUG_GDB_PROTOCOL_RETRIES{
      display "Number of times to retry sending a $O packet"
      default_value [0 ]
      flavor data 
    }

    option CYGNUM_HAL_DEBUG_GDB_PROTOCOL_TIMEOUT{
      display "Timeout period for GDB packets"
      default_value [500 ]
      flavor data 
    }

    option CYGDBG_HAL_CRCTABLE_LOCATION{
      display "Location of CRC32 table"
      legal_values ["ROM" "RAM" ]
      default_value ["RAM" ]
      flavor data 
    }
  }

  component CYGPKG_HAL_ROM_MONITOR{
    display "ROM monitor support"
    flavor none 

    interface CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT{
      display "Target has virtual vector support"
    }

    interface CYGINT_HAL_VIRTUAL_VECTOR_COMM_BAUD_SUPPORT{
      display "Target supports baud rate control via vectors"
    }

    component CYGSEM_HAL_VIRTUAL_VECTOR_SUPPORT{
      display "Enable use of virtual vector calling interface"
      active_if [CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT ]
      calculated [1 ]

      option CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE{
        display "Inherit console settings from ROM monitor"
        active_if [CYGSEM_HAL_USE_ROM_MONITOR ]
        default_value [!CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS ]
      }

      option CYGPRI_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL_CONFIGURABLE{
        display "Debug channel is configurable"
        calculated [CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS ]
      }

      option CYGPRI_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL_CONFIGURABLE{
        display "Console channel is configurable"
        calculated [!CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE && !CYGDBG_HAL_DIAG_TO_DEBUG_CHAN ]
      }

      option CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE{
        display "Initialize whole of virtual vector table"
        default_value [CYG_HAL_STARTUP != "RAM" || !CYGSEM_HAL_USE_ROM_MONITOR ]
        requires [CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_RESET ]
        requires [CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DELAY_US ]
        requires [CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DATA ]
        requires [CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS ]
      }

      option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT{
        display "Claim virtual vector table entries by default"
        active_if [!CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE ]
        default_value [1 ]
      }

      option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_RESET{
        display "Claim reset virtual vectors"
        default_value [CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT ]
      }

      option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_VERSION{
        display "Claim version virtual vectors"
        default_value [CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE ]
      }

      option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DELAY_US{
        display "Claim delay_us virtual vector"
        default_value [CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT ]
      }

      option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DATA{
        display "Claim data virtual vectors"
        default_value [CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT ]
      }

      option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS{
        display "Claim comms virtual vectors"
        default_value [CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE || CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS ]
      }

      option CYGSEM_HAL_VIRTUAL_VECTOR_DIAG{
        display "Do diagnostic IO via virtual vector table"
        calculated [1 ]
      }
    }

    option CYGSEM_HAL_H8300_VECTOR_HOOK{
      display "Interrupt Vector Hook"
      default_value [1 ]
      flavor bool 
    }

    option CYGSEM_HAL_H8300_SAVE_STUB_VECTOR{
      display "Save gdb-stub breakpoint vector"
      default_value [0 ]
      flavor bool 
    }

    option CYGSEM_HAL_ROM_MONITOR{
      display "Behave as a ROM monitor"
      default_value [0 ]
      requires [CYG_HAL_STARTUP == "ROM" ]
      flavor bool 
    }

    option CYGHWR_HAL_H8300_VECTOR_ADDRESS{
      display "Hook Vector Address"
      default_value [0xfffd20 ]
      active_if [CYGSEM_HAL_H8300_VECTOR_HOOK ]
      flavor data 
    }
  }

  interface CYGINT_HAL_PLF_IF_INIT{
    display "Platform defined I/O channels."
  }

  interface CYGINT_HAL_PLF_IF_IDE{
    display "Platform IDE I/O support."
  }

  option CYGPKG_HAL_GDB_FILEIO{
    display "File I/O operations via GDB"
    default_value [0 ]
    active_if [CYGSEM_REDBOOT_BSP_SYSCALLS ]
    requires [CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS ]
  }

  option CYGPKG_HAL_BUILD_COMPILER_TESTS{
    display "Build Compiler sanity checking tests"
  }

  component CYGPKG_HAL_TESTS{
    display "Common HAL tests"
    calculated ["tests/context tests/basic" . ((!CYGINT_HAL_TESTS_NO_CACHES) ? " tests/cache" : "") . ((CYGPKG_HAL_BUILD_COMPILER_TESTS) ? " tests/cpp1 tests/vaargs" : "") . ((!CYGVAR_KERNEL_COUNTERS_CLOCK) ? " tests/intr" : "") ]
    flavor data 

    interface CYGINT_HAL_TESTS_NO_CACHES{
      display "Interface for cache presence"
      flavor booldata 
    }
  }

  package CYGPKG_HAL_H8300{
    display "H8/300 architecture"

    interface CYGINT_HAL_H8300_VARIANT{
      display "Number of variant implementations in this configuration"
      requires [1 == CYGINT_HAL_H8300_VARIANT ]
    }

    option CYGDBG_HAL_H8300_DEBUG_GDB_CTRLC_SUPPORT{
      display "Architecture GDB CTRLC support"
      calculated [CYGDBG_HAL_DEBUG_GDB_CTRLC_SUPPORT || CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT ]
      active_if [CYGINT_HAL_DEBUG_GDB_CTRLC_UNSUPPORTED == 0 ]
    }

    option CYGNUM_HAL_H8300_SCI_BAUD_RATE{
      display "SCI serial port default baud rate"
      legal_values [4800 9600 14400 19200 38400 57600 115200 ]
      default_value [38400 ]
      flavor data 
    }

    package CYGPKG_HAL_H8300_H8300H{
      display "H8/300H variant"
      implements [CYGINT_HAL_H8300_VARIANT ]

      option CYGBLD_LINKER_SCRIPT{
        display "Linker script"
        calculated ["src/h8300_h8300h.ld" ]
        flavor data 
      }

      component CYGHWR_HAL_H8300H_CLOCK_SETTINGS{
        display "H8/300H on-chip generic clock controls"
        flavor none 

        option CYGHWR_HAL_H8300_DIVIDER_RATE{
          display "Divider Rate (1/n)"
          legal_values [1 2 4 8 ]
          default_value [1 ]
          flavor data 
        }

        option CYGHWR_HAL_H8300_PROCESSOR_SPEED{
          display "Processor clock speed (MHz)"
          calculated [CYGHWR_HAL_H8300_CPG_INPUT / CYGHWR_HAL_H8300_DIVIDER_RATE ]
          flavor data 
        }
      }
    }

    package CYGPKG_HAL_H8300_H8300H_AKI3068NET{
      display "AKI3068NET"
      requires [CYGPKG_HAL_H8300_H8300H ]
      implements [CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT ]
      implements [CYGINT_HAL_DEBUG_GDB_STUBS ]
      implements [CYGINT_HAL_DEBUG_GDB_STUBS_BREAK ]

      component CYG_HAL_STARTUP{
        display "Startup type"
        legal_values ["ROM" "RAM" ]
        default_value ["ROM" ]
        flavor data 
      }

      option CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS{
        display "Number of communication channels on the board"
        calculated [1 ]
        flavor data 
      }

      option CYGNUM_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL{
        display "Debug serial port"
        legal_values [0 to CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS-1 ]
        default_value [0 ]
        flavor data 
      }

      option CYGNUM_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL{
        display "Diagnostic serial port"
        legal_values [0 to CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS-1 ]
        default_value [0 ]
        flavor data 
      }

      component CYGNUM_HAL_RTC_CONSTANTS{
        display "Real-time clock constants."
        flavor none 

        option CYGNUM_HAL_RTC_NUMERATOR{
          display "Real-time clock numerator"
          default_value [1000000000 ]
          flavor data 
        }

        option CYGNUM_HAL_RTC_DENOMINATOR{
          display "Real-time clock denominator"
          default_value [100 ]
          flavor data 
        }

        option CYGNUM_HAL_H8300_RTC_PRESCALE{
          display "Real-time clock base prescale"
          calculated [8192 ]
          flavor data 
        }

        option CYGNUM_HAL_RTC_PERIOD{
          display "Real-time clock period"
          default_value [10 ]
          flavor data 
        }
      }

      option CYGHWR_HAL_H8300_CPG_INPUT{
        display "OSC/Clock Freqency"
        default_value [20000000 ]
        flavor data 
      }

      option CYGHWR_HAL_AKI3068NET_EXTRAM{
        display "Extend DRAM Using"
        default_value [1 ]
        flavor bool 
      }

      option CYGHWR_HAL_AKI3068NET_IDE{
        display "IDE I/F expand"
        default_value [0 ]
        flavor bool 
      }

      component CYGHWR_MEMORY_LAYOUT{
        display "Memory layout"
        calculated [CYG_HAL_STARTUP == "RAM" ? "h8300_h8300h_aki3068net_ram" : "h8300_h8300h_aki3068net_rom" ]
        flavor data 

        option CYGHWR_MEMORY_LAYOUT_LDI{
          display "Memory layout linker script fragment"
          calculated [CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_h8300_h8300h_aki3068net_ram.ldi>" : "<pkgconf/mlt_h8300_h8300h_aki3068net_rom.ldi>" ]
          flavor data 
        }

        option CYGHWR_MEMORY_LAYOUT_H{
          display "Memory layout header file"
          calculated [CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_h8300_h8300h_aki3068net_ram.h>" : "<pkgconf/mlt_h8300_h8300h_aki3068net_rom.h>" ]
          flavor data 
        }
      }

      option CYGHAL_PLF_SCI_BASE{
        display "SCI Base address"
        default_value [0xffffb8 ]
        flavor data 
      }

      option CYGDAT_REDBOOT_H8300_LINUX_COMMAND_START{
        display "Default kernel command line start address"
        default_value [0x5ffe00 ]
        flavor data 
      }

      option CYGDAT_REDBOOT_H8300_LINUX_BOOT_COMMAND_LINE{
        display "Default command line"
        default_value ["console=/dev/ttySC1" ]
        flavor data 
      }
    }
  }
}

package CYGPKG_IO{
  display "I/O sub-system"
  requires [CYGPKG_ERROR ]

  option CYGDBG_IO_INIT{
    display "Debug I/O sub-system"
    default_value [0 ]
  }

  component CYGPKG_IO_FILE_SUPPORT{
    display "Basic support for file based I/O"
    active_if [!CYGPKG_IO_FILEIO ]
    default_value [1 ]

    option CYGPKG_IO_NFILE{
      display "Number of open files"
      default_value [16 ]
      flavor data 
    }
  }

  package CYGPKG_IO_SERIAL{
    display "Serial device drivers"
    active_if [CYGPKG_IO ]
    requires [CYGPKG_ERROR ]

    option CYGOPT_IO_SERIAL_SUPPORT_NONBLOCKING{
      display "Support non-blocking read and write calls"
      default_value [0 ]
    }

    interface CYGINT_IO_SERIAL_BLOCK_TRANSFER{
      display "Driver requires block transfer callback functions"
    }

    interface CYGINT_IO_SERIAL_LINE_STATUS_HW{
      display "Serial driver supports line status"
    }

    option CYGOPT_IO_SERIAL_SUPPORT_LINE_STATUS{
      display "Support line status callbacks"
      requires [CYGINT_IO_SERIAL_LINE_STATUS_HW > 0 ]
      default_value [0 != CYGINT_IO_SERIAL_LINE_STATUS_HW ]
    }

    component CYGPKG_IO_SERIAL_FLOW_CONTROL{
      display "Flow control"
      requires [(CYGOPT_IO_SERIAL_FLOW_CONTROL_SOFTWARE || CYGOPT_IO_SERIAL_FLOW_CONTROL_HW) ]
      default_value [0 ]
      flavor bool 

      component CYGOPT_IO_SERIAL_FLOW_CONTROL_SOFTWARE{
        display "Software flow control"
        default_value [1 ]

        option CYGDAT_IO_SERIAL_FLOW_CONTROL_XON_CHAR{
          display "Start character"
          default_value [17 ]
          legal_values [0 to 255 ]
          flavor data 
        }

        option CYGDAT_IO_SERIAL_FLOW_CONTROL_XOFF_CHAR{
          display "Stop character"
          default_value [19 ]
          legal_values [0 to 255 ]
          flavor data 
        }
      }

      option CYGOPT_IO_SERIAL_FLOW_CONTROL_HW{
        display "Hardware flow control"
        active_if [CYGINT_IO_SERIAL_FLOW_CONTROL_HW > 0 ]
        requires [CYGINT_IO_SERIAL_FLOW_CONTROL_HW > 0 ]
        requires [CYGOPT_IO_SERIAL_SUPPORT_LINE_STATUS ]
        default_value [CYGINT_IO_SERIAL_FLOW_CONTROL_HW > 0 ? CYGOPT_IO_SERIAL_SUPPORT_LINE_STATUS : 0 ]
      }

      interface CYGINT_IO_SERIAL_FLOW_CONTROL_HW{
        display "Serial h/w supports hardware flow control"
      }

      option CYGDAT_IO_SERIAL_FLOW_CONTROL_DEFAULT{
        display "Default flow control method"
        legal_values ["NONE" "XONXOFF" "RTSCTS" "DSRDTR" ]
        default_value ["NONE" ]
        flavor data 
      }

      option CYGNUM_IO_SERIAL_FLOW_CONTROL_LOW_WATER_PERCENT{
        display "Rx flow control low water mark"
        legal_values [1 to 100 ]
        default_value [33 ]
        flavor data 
      }

      option CYGNUM_IO_SERIAL_FLOW_CONTROL_HIGH_WATER_PERCENT{
        display "Rx flow control high water mark"
        legal_values [1 to 100 ]
        default_value [66 ]
        requires [CYGNUM_IO_SERIAL_FLOW_CONTROL_HIGH_WATER_PERCENT >= CYGNUM_IO_SERIAL_FLOW_CONTROL_LOW_WATER_PERCENT ]
        flavor data 
      }
    }

    component CYGPKG_IO_SERIAL_TTY{
      display "TTY-mode serial device drivers"
      default_value [1 ]
      flavor bool 

      component CYGPKG_IO_SERIAL_HALDIAG{
        display "HAL/diag serial device driver"
        default_value [1 ]
        flavor bool 
      }

      option CYGDAT_IO_SERIAL_TTY_CONSOLE{
        display "Console device name"
        default_value ["\"/dev/ttydiag\"" ]
        flavor data 
      }

      component CYGPKG_IO_SERIAL_TTY_TTYDIAG{
        display "TTY mode HAL/diag channel"
        default_value [1 ]
        flavor bool 
      }

      component CYGPKG_IO_SERIAL_TTY_TTY0{
        display "TTY mode channel #0"
        default_value [0 ]
        flavor bool 

        option CYGDAT_IO_SERIAL_TTY_TTY0_DEV{
          display "TTY mode channel #0 device"
          default_value ["\"/dev/ser0\"" ]
          flavor data 
        }
      }

      component CYGPKG_IO_SERIAL_TTY_TTY1{
        display "TTY mode channel #1"
        default_value [0 ]
        flavor bool 

        option CYGDAT_IO_SERIAL_TTY_TTY1_DEV{
          display "TTY mode channel #1 device"
          default_value ["\"/dev/ser1\"" ]
          flavor data 
        }
      }

      component CYGPKG_IO_SERIAL_TTY_TTY2{
        display "TTY mode channel #2"
        default_value [0 ]
        flavor bool 

        option CYGDAT_IO_SERIAL_TTY_TTY2_DEV{
          display "TTY mode channel #2 device"
          default_value ["\"/dev/ser2\"" ]
          flavor data 
        }
      }

      component CYGPKG_IO_SERIAL_TTY_TTY3{
        display "TTY mode channel #3"
        default_value [0 ]
        flavor bool 

        option CYGDAT_IO_SERIAL_TTY_TTY3_DEV{
          display "TTY mode channel #3 device"
          default_value ["\"/dev/ser3\"" ]
          flavor data 
        }
      }
    }

    component CYGPKG_IO_SERIAL_TERMIOS{
      display "Termios compatible TTY drivers"
      requires [CYGPKG_ISOINFRA ]
      requires [CYGPKG_IO_FILEIO ]
      requires [CYGINT_ISO_ERRNO_CODES ]
      requires [CYGINT_ISO_ERRNO ]
      requires [CYGINT_ISO_MALLOC ]
      default_value [0 != CYGPKG_ISOINFRA && 0 != CYGPKG_IO_FILEIO && 0 != CYGINT_ISO_ERRNO_CODES && 0 != CYGINT_ISO_ERRNO ]
      implements [CYGINT_ISO_TERMIOS ]
      flavor bool 

      interface CYGINT_IO_SERIAL_TERMIOS_TERMIOS_TTY{
        display "Interface for termios tty driver file enabling"
      }

      option CYGBLD_IO_SERIAL_TERMIOS_TERMIOS_TTY{
        display "Build termios tty driver file"
        calculated [1 ]
        active_if [CYGINT_IO_SERIAL_TERMIOS_TERMIOS_TTY > 0 ]
      }

      component CYGPKG_IO_SERIAL_TERMIOS_TERMIOS0{
        display "Termios TTY channel #0"
        default_value [0 ]
        implements [CYGINT_IO_SERIAL_TERMIOS_TERMIOS_TTY ]
        flavor bool 

        option CYGDAT_IO_SERIAL_TERMIOS_TERMIOS0_DEV{
          display "Termios TTY channel #0 device"
          default_value ["\"/dev/ser0\"" ]
          flavor data 
        }
      }

      component CYGPKG_IO_SERIAL_TERMIOS_TERMIOS1{
        display "Termios TTY channel #1"
        default_value [0 ]
        implements [CYGINT_IO_SERIAL_TERMIOS_TERMIOS_TTY ]
        flavor bool 

        option CYGDAT_IO_SERIAL_TERMIOS_TERMIOS1_DEV{
          display "Termios TTY channel #1 device"
          default_value ["\"/dev/ser1\"" ]
          flavor data 
        }
      }

      component CYGPKG_IO_SERIAL_TERMIOS_TERMIOS2{
        display "Termios TTY channel #2"
        default_value [0 ]
        implements [CYGINT_IO_SERIAL_TERMIOS_TERMIOS_TTY ]
        flavor bool 

        option CYGDAT_IO_SERIAL_TERMIOS_TERMIOS2_DEV{
          display "Termios TTY channel #2 device"
          default_value ["\"/dev/ser2\"" ]
          flavor data 
        }
      }

      component CYGPKG_IO_SERIAL_TERMIOS_TERMIOS3{
        display "Termios TTY channel #3"
        default_value [0 ]
        implements [CYGINT_IO_SERIAL_TERMIOS_TERMIOS_TTY ]
        flavor bool 

        option CYGDAT_IO_SERIAL_TERMIOS_TERMIOS3_DEV{
          display "Termios TTY channel #3 device"
          default_value ["\"/dev/ser3\"" ]
          flavor data 
        }
      }

      option CYGSEM_IO_SERIAL_TERMIOS_USE_SIGNALS{
        display "Support signals"
        requires [CYGINT_ISO_SIGNAL_NUMBERS ]
        requires [CYGINT_ISO_SIGNAL_IMPL ]
        default_value [CYGINT_ISO_SIGNAL_NUMBERS != 0 && CYGINT_ISO_SIGNAL_IMPL != 0 ]
        flavor bool 
      }
    }

    component CYGPKG_IO_SERIAL_DEVICES{
      display "Hardware serial device drivers"
      default_value [0 ]
      flavor bool 

      package CYGPKG_IO_SERIAL_H8300_SCI{
        display "H8/300 SCI serial device drivers"
        active_if [CYGPKG_IO_SERIAL ]
        active_if [CYGPKG_HAL_H8300 ]
        active_if [CYGINT_IO_SERIAL_H8300_SCI_REQUIRED ]
        requires [CYGPKG_ERROR ]

        component CYGPKG_IO_SERIAL_SH_SCI_OPTIONS{
          display "SCI serial device driver build options"
          flavor none 

          option CYGPKG_IO_SERIAL_SH_SCI_CFLAGS_ADD{
            display "Additional compiler flags"
            default_value ["" ]
            flavor data 
          }

          option CYGPKG_IO_SERIAL_SH_SCI_CFLAGS_REMOVE{
            display "Suppressed compiler flags"
            default_value ["" ]
            flavor data 
          }
        }
      }
    }

    option CYGBLD_IO_SERIAL_EXTRA_TESTS{
      display "Build extra serial tests"
      default_value [0 ]
    }

    component CYGPKG_IO_SERIAL_OPTIONS{
      display "Serial device driver build options"
      flavor none 

      option CYGPKG_IO_SERIAL_CFLAGS_ADD{
        display "Additional compiler flags"
        default_value ["" ]
        flavor data 
      }

      option CYGPKG_IO_SERIAL_CFLAGS_REMOVE{
        display "Suppressed compiler flags"
        default_value ["" ]
        flavor data 
      }

      option CYGPKG_IO_SERIAL_TESTS{
        display "Serial device driver tests"
        calculated [CYGPKG_IO_SERIAL_DEVICES ? "tests/serial1 tests/serial2 tests/serial3 tests/serial4 tests/serial5 tests/tty1 tests/tty2 tests/flow1 tests/flow2" : "" ]
        flavor data 
      }
    }

    option CYGPKG_IO_SERIAL_SELECT_SUPPORT{
      display "Enable serial device select support"
      active_if [CYGPKG_IO_FILEIO ]
      requires [CYGFUN_IO_FILEIO_SELECT == 1 ]
      default_value [1 ]
      flavor bool 
    }

    component CYGPKG_IO_SERIAL_TEST_SPECS{
      display "Serial testing specification"
      calculated [1 ]
      flavor bool 

      interface CYGINT_IO_SERIAL_TEST_SKIP_9600{
        display "Skip 9600 baud testing"
      }

      interface CYGINT_IO_SERIAL_TEST_SKIP_14400{
        display "Skip 14400 baud testing"
      }

      interface CYGINT_IO_SERIAL_TEST_SKIP_19200{
        display "Skip 19200 baud testing"
      }

      interface CYGINT_IO_SERIAL_TEST_SKIP_38400{
        display "Skip 38400 baud testing"
      }

      interface CYGINT_IO_SERIAL_TEST_SKIP_57600{
        display "Skip 57600 baud testing"
      }

      interface CYGINT_IO_SERIAL_TEST_SKIP_115200{
        display "Skip 115200 baud testing"
      }

      interface CYGINT_IO_SERIAL_TEST_SKIP_PARITY_EVEN{
        display "Skip even-parity testing"
      }

      interface CYGINT_IO_SERIAL_TEST_SKIP_PARITY_ODD{
        display "Skip odd-parity testing"
      }

      interface CYGINT_IO_SERIAL_TEST_SKIP_STOP_2{
        display "Skip 2-stop bit testing"
      }
    }
  }

  package CYGPKG_IO_ETH_DRIVERS{
    display "Common ethernet support"
    implements [CYGPKG_NET_DRIVER_FRAMEWORK ]

    interface CYGHWR_NET_DRIVERS{
      display "Network drivers"
    }

    interface CYGINT_IO_ETH_MULTICAST{
      display "Driver supports multicast addressing"
    }

    component CYGDBG_IO_ETH_DRIVERS_DEBUG{
      display "Support printing driver debug information"
      default_value [1 ]
      flavor bool 

      option CYGDBG_IO_ETH_DRIVERS_DEBUG_VERBOSITY{
        display "Driver debug output verbosity"
        default_value [0 ]
        flavor data 
      }
    }

    option CYGNUM_IO_ETH_DRIVERS_SG_LIST_SIZE{
      display "Size of scatter-gather I/O lists"
      default_value [32 ]
      flavor data 
    }

    component CYGPKG_IO_ETH_DRIVERS_NET{
      display "Support for standard eCos TCP/IP stack."
      active_if [CYGPKG_NET ]
      requires [CYGINT_ISO_STRING_STRFUNCS ]
      implements [CYGINT_IO_ETH_INT_SUPPORT_REQUIRED ]
      default_value [1 ]
      flavor bool 

      component CYGPKG_IO_ETH_DRIVERS_WARN_NO_MBUFS{
        display "Warn when there are no more mbufs"
        default_value [1 ]
        flavor bool 
      }

      component CYGPKG_IO_ETH_DRIVERS_SIMULATED_FAILURES{
        display "Simulate network failures for testing"
        default_value [0 ]
        flavor bool 

        option CYGPKG_IO_ETH_DRIVERS_SIMULATE_DROP_RX{
          display "Drop incoming packets (percentage)"
          legal_values [10 50 80 ]
          default_value [10 ]
          flavor booldata 
        }

        option CYGPKG_IO_ETH_DRIVERS_SIMULATE_CORRUPT_RX{
          display "Corrupt incoming packets (percentage)"
          legal_values [10 50 80 ]
          default_value [10 ]
          flavor booldata 
        }

        option CYGPKG_IO_ETH_DRIVERS_SIMULATE_DROP_TX{
          display "Drop outgoing packets (percentage)"
          legal_values [10 50 80 ]
          default_value [10 ]
          flavor booldata 
        }

        option CYGPKG_IO_ETH_DRIVERS_SIMULATE_LINE_CUT{
          display "Simulate a line cut from time to time"
          default_value [0 ]
          flavor bool 
        }
      }
    }

    component CYGPKG_IO_ETH_DRIVERS_STAND_ALONE{
      display "Support for stand-alone network stack."
      active_if [!CYGPKG_NET ]
      requires [CYGINT_ISO_STRING_MEMFUNCS ]
      default_value [1 ]
      flavor bool 

      option CYGSEM_IO_ETH_DRIVERS_PASS_PACKETS{
        display "Pass packets to an alternate stack"
        default_value [0 != CYGPKG_REDBOOT_NETWORKING ]
        flavor bool 
      }

      option CYGNUM_IO_ETH_DRIVERS_NUM_PKT{
        display "Number of [network] buffers"
        default_value [4 ]
        legal_values [2 to 32 ]
        flavor data 
      }

      option CYGSEM_IO_ETH_DRIVERS_WARN{
        display "Show driver warnings"
        active_if [CYGPKG_REDBOOT ]
        default_value [0 ]
        flavor bool 
      }
    }

    component CYGPKG_IO_ETH_DRIVERS_LWIP{
      display "Support for lwIP network stack."
      requires [!CYGPKG_NET ]
      active_if [CYGPKG_NET_LWIP ]
      default_value [1 ]
      implements [CYGINT_IO_ETH_INT_SUPPORT_REQUIRED ]
      flavor bool 
    }

    interface CYGINT_IO_ETH_INT_SUPPORT_REQUIRED{
      display "Interrupt support required"
      flavor booldata 
    }

    component CYGPKG_IO_ETH_DRIVERS_OPTIONS{
      display "Common ethernet support build options"
      flavor none 

      option CYGPKG_IO_ETH_DRIVERS_CFLAGS_ADD{
        display "Additional compiler flags"
        default_value ["-D_KERNEL -D__ECOS" ]
        flavor data 
      }
    }

    package CYGPKG_DEVS_ETH_H8300_AKI3068NET{
      display "aki3068net board ethernet driver"
      active_if [CYGPKG_IO_ETH_DRIVERS ]
      active_if [CYGPKG_HAL_H8300_H8300H_AKI3068NET ]

      interface CYGINT_DEVS_ETH_NS_DP83902A_REQUIRED{
        display "NS dp83902a ethernet driver required"
      }

      component CYGPKG_DEVS_ETH_H8300_AKI3068NET_ETH0{
        display "Ethernet port 0 driver"
        default_value [1 ]
        implements [CYGHWR_NET_DRIVERS ]
        implements [CYGHWR_NET_DRIVER_ETH0 ]
        implements [CYGINT_DEVS_ETH_NS_DP83902A_REQUIRED ]
        flavor bool 

        option CYGDAT_DEVS_ETH_H8300_AKI3068NET_ETH0_NAME{
          display "Device name for the ETH0 ethernet port 0 driver"
          default_value ["\"eth0\"" ]
          flavor data 
        }

        component CYGSEM_DEVS_ETH_H8300_AKI3068NET_ETH0_SET_ESA{
          display "Set the ethernet station address"
          default_value [0 ]
          flavor bool 

          option CYGDAT_DEVS_ETH_H8300_AKI3068NET_ETH0_ESA{
            display "The ethernet station address"
            default_value ["{0x08, 0x00, 0x00, 0x00, 0x00, 0x01}" ]
            flavor data 
          }
        }
      }

      component CYGPKG_DEVS_ETH_H8300_AKI3068NET_OPTIONS{
        display "PCMCIA ethernet driver build options"
        flavor none 

        option CYGPKG_DEVS_ETH_CF_CFLAGS_ADD{
          display "Additional compiler flags"
          default_value ["-D_KERNEL -D__ECOS" ]
          flavor data 
        }
      }
    }

    package CYGPKG_DEVS_ETH_NS_DP83902A{
      display "NS DP83902A ethernet drivers"
      active_if [CYGPKG_IO_ETH_DRIVERS ]
      implements [CYGHWR_NET_DRIVERS ]
      active_if [CYGINT_DEVS_ETH_NS_DP83902A_REQUIRED ]

      component CYGPKG_DEVS_ETH_NS_DP83902A_OPTIONS{
        display "DP83902A ethernet driver build options"
        flavor none 

        option CYGPKG_DEVS_ETH_NS_DP83902A_CFLAGS_ADD{
          display "Additional compiler flags"
          default_value ["-D_KERNEL -D__ECOS" ]
          flavor data 
        }
      }
    }
  }
}

package CYGPKG_INFRA{
  display "Infrastructure"

  component CYGPKG_INFRA_DEBUG{
    display "Asserts & Tracing"
    default_value [0 ]

    component CYGDBG_USE_ASSERTS{
      display "Use asserts"
      default_value [1 ]
      requires [1 == CYGINT_INFRA_DEBUG_TRACE_IMPL ]

      option CYGDBG_INFRA_DEBUG_PRECONDITIONS{
        display "Preconditions"
        default_value [1 ]
      }

      option CYGDBG_INFRA_DEBUG_POSTCONDITIONS{
        display "Postconditions"
        default_value [1 ]
      }

      option CYGDBG_INFRA_DEBUG_LOOP_INVARIANTS{
        display "Loop invariants"
        default_value [1 ]
      }

      option CYGDBG_INFRA_DEBUG_ASSERT_MESSAGE{
        display "Use assert text"
        default_value [1 ]
      }
    }

    component CYGDBG_USE_TRACING{
      display "Use tracing"
      default_value [0 ]
      requires [1 == CYGINT_INFRA_DEBUG_TRACE_IMPL ]

      option CYGDBG_INFRA_DEBUG_FUNCTION_REPORTS{
        display "Trace function reports"
        default_value [1 ]
      }

      option CYGDBG_INFRA_DEBUG_TRACE_MESSAGE{
        display "Use trace text"
        default_value [1 ]
      }
    }

    interface CYGINT_INFRA_DEBUG_TRACE_IMPL{
      display "Trace output implementations"
    }

    option CYGDBG_INFRA_DEBUG_TRACE_ASSERT_NULL{
      display "Null output"
      default_value [0 ]
      implements [CYGINT_INFRA_DEBUG_TRACE_IMPL ]
    }

    option CYGDBG_INFRA_DEBUG_TRACE_ASSERT_SIMPLE{
      display "Simple output"
      default_value [0 ]
      implements [CYGINT_INFRA_DEBUG_TRACE_IMPL ]
    }

    option CYGDBG_INFRA_DEBUG_TRACE_ASSERT_FANCY{
      display "Fancy output"
      default_value [0 ]
      implements [CYGINT_INFRA_DEBUG_TRACE_IMPL ]
    }

    component CYGDBG_INFRA_DEBUG_TRACE_ASSERT_BUFFER{
      display "Buffered tracing"
      default_value [1 ]
      implements [CYGINT_INFRA_DEBUG_TRACE_IMPL ]

      option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_SIZE{
        display "Trace buffer size"
        active_if [CYGDBG_USE_TRACING ]
        default_value [32 ]
        legal_values [5 to 65535 ]
        flavor data 
      }

      option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_WRAP{
        display "Wrap trace buffer when full"
        active_if [CYGDBG_USE_TRACING ]
        default_value [1 ]
      }

      option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_HALT{
        display "Halt trace buffer when full"
        active_if [CYGDBG_USE_TRACING ]
        default_value [0 ]
      }

      option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_PRINT{
        display "Print trace buffer when full"
        active_if [CYGDBG_USE_TRACING ]
        default_value [0 ]
      }

      option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_PRINT_ON_ASSERT{
        display "Print trace buffer on assert fail"
        active_if [CYGDBG_USE_TRACING ]
        default_value [1 ]
      }
    }

    option CYGDBG_INFRA_DEBUG_FUNCTION_PSEUDOMACRO{
      display "Use function names"
      default_value [1 ]
    }
  }

  component CYGPKG_INFRA_STARTUP{
    display "Startup options"
    flavor none 

    option CYGSEM_START_UITRON_COMPATIBILITY{
      display "Start uITRON subsystem"
      default_value [0 ]
      requires [CYGPKG_UITRON ]
      active_if [CYGPKG_UITRON ]
    }
  }

  option CYGIMP_INFRA_PREFER_SMALL_TO_FAST_MEMCPY{
    display "Smaller slower memcpy()"
    default_value [0 ]
  }

  option CYGIMP_INFRA_PREFER_SMALL_TO_FAST_MEMSET{
    display "Smaller slower memset()"
    default_value [0 ]
  }

  option CYGFUN_INFRA_EMPTY_DELETE_FUNCTIONS{
    display "Provide empty C++ delete functions"
    default_value [1 ]
  }

  option CYGNUM_INFRA_EMPTY_DELETE_THRESHOLD{
    display "Threshold for valid number of delete calls"
    default_value [100 ]
    active_if [CYGPKG_INFRA_DEBUG ]
    flavor data 
  }

  option CYGFUN_INFRA_DUMMY_ABORT{
    display "Provide dummy abort() function"
    requires [!CYGINT_ISO_EXIT ]
    default_value [CYGINT_ISO_EXIT == 0 ]
  }

  option CYGSEM_INFRA_RESET_ON_TEST_EXIT{
    display "Reset platform at end of test case execution"
    default_value [0 ]
  }

  option CYGFUN_INFRA_DUMMY_STRLEN{
    display "Provide dummy strlen() function"
    requires [!CYGINT_ISO_STRING_STRFUNCS ]
    default_value [CYGINT_ISO_STRING_STRFUNCS == 0 ]
  }

  option CYGBLD_INFRA_CFLAGS_WARNINGS_AS_ERRORS{
    display "Make all compiler warnings show as errors"
    requires [is_substr(CYGBLD_GLOBAL_CFLAGS, " -Werror") ]
    default_value [0 ]
  }

  option CYGBLD_INFRA_CFLAGS_PIPE{
    display "Make compiler and assembler communicate by pipe"
    requires [is_substr(CYGBLD_GLOBAL_CFLAGS, " -pipe") ]
    default_value [0 ]
  }

  component CYGPKG_INFRA_OPTIONS{
    display "Infra build options"
    flavor none 

    option CYGPKG_INFRA_CFLAGS_ADD{
      display "Additional compiler flags"
      default_value ["" ]
      flavor data 
    }

    option CYGPKG_INFRA_CFLAGS_REMOVE{
      display "Suppressed compiler flags"
      default_value ["" ]
      flavor data 
    }

    option CYGPKG_INFRA_LDFLAGS_REMOVE{
      display "Suppressed linker flags"
      default_value ["-Wl,--gc-sections" ]
      flavor data 
    }

    option CYGPKG_INFRA_LDFLAGS_ADD{
      display "Additional linker flags"
      default_value ["-Wl,--fatal-warnings" ]
      flavor data 
    }

    component CYGPKG_INFRA_TESTS{
      display "Infra package tests"
      calculated ["tests/cxxsupp tests/diag_sprintf1 tests/diag_sprintf2" ]
      flavor data 

      option CYGNUM_TESTS_RUN_COUNT{
        display "Number of times a test runs"
        default_value [1 ]
        flavor data 
      }
    }
  }
}

package CYGPKG_KERNEL{
  display "eCos kernel"

  component CYGPKG_KERNEL_INTERRUPTS{
    display "Kernel interrupt handling"
    flavor none 

    component CYGIMP_KERNEL_INTERRUPTS_DSRS{
      display "Use delayed service routines (DSRs)"
      default_value [1 ]

      interface CYGINT_KERNEL_INTERRUPTS_DSRS{
        requires [1 == CYGINT_KERNEL_INTERRUPTS_DSRS ]
      }

      component CYGIMP_KERNEL_INTERRUPTS_DSRS_LIST{
        display "Use linked lists for DSRs"
        default_value [1 ]
        implements [CYGINT_KERNEL_INTERRUPTS_DSRS ]

        option CYGSEM_KERNEL_INTERRUPTS_DSRS_LIST_FIFO{
          display "Schedule DSRs in FIFO order"
          default_value [1 ]
          flavor bool 
        }
      }

      component CYGIMP_KERNEL_INTERRUPTS_DSRS_TABLE{
        display "Use fixed-size table for DSRs"
        default_value [0 ]
        implements [CYGINT_KERNEL_INTERRUPTS_DSRS ]

        option CYGNUM_KERNEL_INTERRUPTS_DSRS_TABLE_SIZE{
          display "Number of entries in fixed-size DSR table"
          legal_values [2 to 1024 ]
          default_value [32 ]
          flavor data 
        }
      }

      option CYGIMP_KERNEL_INTERRUPTS_CHAIN{
        display "Chain all interrupts together"
        requires [CYGIMP_HAL_COMMON_INTERRUPTS_CHAIN ]
        default_value [0 ]
      }
    }
  }

  component CYGPKG_KERNEL_EXCEPTIONS{
    display "Exception handling"
    requires [CYGPKG_HAL_EXCEPTIONS ]
    default_value [1 ]

    option CYGSEM_KERNEL_EXCEPTIONS_DECODE{
      display "Decode exception types in kernel"
      default_value [0 ]
    }

    option CYGSEM_KERNEL_EXCEPTIONS_GLOBAL{
      display "Use global exception handlers"
      default_value [1 ]
    }
  }

  component CYGPKG_KERNEL_SCHED{
    display "Kernel schedulers"
    flavor none 

    interface CYGINT_KERNEL_SCHEDULER{
      display "Number of schedulers in this configuration"
      requires [1 == CYGINT_KERNEL_SCHEDULER ]
    }

    interface CYGINT_KERNEL_SCHEDULER_UNIQUE_PRIORITIES{
      display "Non-zero if the active schedule only has unique priorities"
    }

    component CYGSEM_KERNEL_SCHED_MLQUEUE{
      display "Multi-level queue scheduler"
      default_value [1 ]
      implements [CYGINT_KERNEL_SCHEDULER ]

      option CYGDBG_KERNEL_TRACE_TIMESLICE{
        display "Output timeslices when tracing"
        active_if [CYGDBG_USE_TRACING ]
        requires [!CYGDBG_INFRA_DEBUG_TRACE_ASSERT_SIMPLE ]
        requires [!CYGDBG_INFRA_DEBUG_TRACE_ASSERT_FANCY ]
        default_value [0 ]
      }
    }

    option CYGSEM_KERNEL_SCHED_BITMAP{
      display "Bitmap scheduler"
      default_value [0 ]
      implements [CYGINT_KERNEL_SCHEDULER ]
      implements [CYGINT_KERNEL_SCHEDULER_UNIQUE_PRIORITIES ]
      requires [!CYGPKG_KERNEL_SMP_SUPPORT ]
    }

    option CYGPRI_KERNEL_SCHED_IMPL_HXX{
      display "Scheduler header file"
      calculated [CYGSEM_KERNEL_SCHED_BITMAP ? "<cyg/kernel/bitmap.hxx>" : CYGSEM_KERNEL_SCHED_MLQUEUE ? "<cyg/kernel/mlqueue.hxx>" : CYGSEM_KERNEL_SCHED_LOTTERY ? "<cyg/kernel/lottery.hxx>" : "!!!-- Configuration broken - no scheduler selected --!!!" ]
      flavor data 
    }

    component CYGNUM_KERNEL_SCHED_PRIORITIES{
      display "Number of priority levels"
      legal_values [1 to 32 ]
      default_value [32 ]
      flavor data 

      option CYGNUM_KERNEL_SCHED_BITMAP_SIZE{
        display "Bitmap size"
        calculated ["CYGNUM_KERNEL_SCHED_PRIORITIES" ]
        flavor data 
      }

      option CYGIMP_KERNEL_SCHED_SORTED_QUEUES{
        display "Dequeue highest priority threads first"
        default_value [0 ]
        flavor bool 
      }
    }

    component CYGSEM_KERNEL_SCHED_TIMESLICE{
      display "Scheduler timeslicing"
      requires [!CYGSEM_KERNEL_SCHED_BITMAP ]
      requires [CYGVAR_KERNEL_COUNTERS_CLOCK ]
      default_value [1 ]

      option CYGNUM_KERNEL_SCHED_TIMESLICE_TICKS{
        display "Number of clock ticks between timeslices"
        legal_values [1 to 65535 ]
        default_value [5 ]
        flavor data 
      }

      option CYGSEM_KERNEL_SCHED_TIMESLICE_ENABLE{
        display "Support runtime enable of timeslice per-thread"
        default_value [false ]
        flavor bool 
      }
    }

    component CYGSEM_KERNEL_SCHED_ASR_SUPPORT{
      display "Enable ASR support"
      default_value [false ]
      flavor bool 

      option CYGSEM_KERNEL_SCHED_ASR_GLOBAL{
        display "Make ASR function global"
        default_value [true ]
        flavor bool 
      }

      option CYGSEM_KERNEL_SCHED_ASR_DATA_GLOBAL{
        display "Make ASR data global"
        default_value [true ]
        flavor bool 
      }
    }
  }

  component CYGPKG_KERNEL_SMP_SUPPORT{
    display "SMP support"
    requires [CYGPKG_HAL_SMP_SUPPORT ]
    default_value [0 ]
    flavor bool 
  }

  component CYGPKG_KERNEL_COUNTERS{
    display "Counters and clocks"
    flavor none 

    option CYGVAR_KERNEL_COUNTERS_CLOCK{
      display "Provide real-time clock"
      requires [CYGIMP_KERNEL_INTERRUPTS_DSRS ]
      default_value [1 ]
    }

    option CYGNUM_KERNEL_COUNTERS_CLOCK_ISR_PRIORITY{
      display "Interrupt priority for the real-time clock"
      active_if [CYGVAR_KERNEL_COUNTERS_CLOCK ]
      default_value [is_loaded(CYGNUM_HAL_KERNEL_COUNTERS_CLOCK_ISR_DEFAULT_PRIORITY) ? CYGNUM_HAL_KERNEL_COUNTERS_CLOCK_ISR_DEFAULT_PRIORITY : 1 ]
      flavor data 
    }

    interface CYGINT_KERNEL_COUNTERS{
      requires [1 == CYGINT_KERNEL_COUNTERS ]
    }

    option CYGIMP_KERNEL_COUNTERS_SINGLE_LIST{
      display "Implement counters using a single list"
      default_value [1 ]
      implements [CYGINT_KERNEL_COUNTERS ]
    }

    component CYGIMP_KERNEL_COUNTERS_MULTI_LIST{
      display "Implement counters using a table of lists"
      default_value [0 ]
      implements [CYGINT_KERNEL_COUNTERS ]

      option CYGNUM_KERNEL_COUNTERS_MULTI_LIST_SIZE{
        display "Size of counter list table"
        legal_values [1 to 1024 ]
        default_value [8 ]
        flavor data 
      }
    }

    option CYGIMP_KERNEL_COUNTERS_SORT_LIST{
      display "Sort the counter list"
      default_value [0 ]
    }

    option CYGVAR_KERNEL_COUNTERS_CLOCK_LATENCY{
      display "Measure real-time [clock] interrupt latency"
      requires [CYGVAR_KERNEL_COUNTERS_CLOCK ]
      default_value [0 ]
    }

    option CYGVAR_KERNEL_COUNTERS_CLOCK_DSR_LATENCY{
      display "Measure real-time [clock] DSR latency"
      requires [CYGVAR_KERNEL_COUNTERS_CLOCK_LATENCY ]
      default_value [CYGVAR_KERNEL_COUNTERS_CLOCK_LATENCY ]
    }

    option CYGNUM_KERNEL_COUNTERS_RTC_RESOLUTION{
      display "RTC resolution"
      calculated ["{CYGNUM_HAL_RTC_NUMERATOR, CYGNUM_HAL_RTC_DENOMINATOR}" ]
      flavor data 
    }

    option CYGNUM_KERNEL_COUNTERS_RTC_PERIOD{
      display "RTC period"
      calculated ["CYGNUM_HAL_RTC_PERIOD" ]
      flavor data 
    }
  }

  component CYGPKG_KERNEL_THREADS{
    display "Thread-related options"
    flavor none 

    option CYGFUN_KERNEL_THREADS_TIMER{
      display "Allow per-thread timers"
      requires [CYGVAR_KERNEL_COUNTERS_CLOCK ]
      default_value [1 ]
    }

    option CYGVAR_KERNEL_THREADS_NAME{
      display "Support optional name for each thread"
      default_value [1 ]
    }

    option CYGVAR_KERNEL_THREADS_LIST{
      display "Keep track of all threads using a linked list"
      default_value [1 ]
    }

    option CYGFUN_KERNEL_THREADS_STACK_LIMIT{
      display "Keep track of the base of each thread's stack"
      default_value [1 ]
    }

    component CYGFUN_KERNEL_THREADS_STACK_CHECKING{
      display "Check thread stacks for overflows"
      active_if [CYGPKG_INFRA_DEBUG ]
      active_if [CYGDBG_USE_ASSERTS ]
      default_value [1 ]

      option CYGFUN_KERNEL_ALL_THREADS_STACK_CHECKING{
        display "Check all threads whenever possible"
        requires [CYGVAR_KERNEL_THREADS_LIST ]
        default_value [0 ]
      }

      option CYGNUM_KERNEL_THREADS_STACK_CHECK_DATA_SIZE{
        display "Signature size in bytes, at stack top and bottom"
        default_value [32 ]
        legal_values [8 to 512 ]
        flavor data 
      }
    }

    component CYGFUN_KERNEL_THREADS_STACK_MEASUREMENT{
      display "Measure stack usage"
      default_value [0 != CYGPKG_INFRA_DEBUG ]

      option CYGDBG_KERNEL_THREADS_STACK_MEASUREMENT_VERBOSE_EXIT{
        display "Output stack usage on thread exit"
        default_value [0 ]
      }
    }

    component CYGVAR_KERNEL_THREADS_DATA{
      display "Support for per-thread data"
      requires [CYGFUN_KERNEL_THREADS_STACK_LIMIT ]
      default_value [1 ]

      option CYGNUM_KERNEL_THREADS_DATA_MAX{
        display "Number of words of per-thread data"
        legal_values [4 to 32 ]
        default_value [6 ]
        flavor data 
      }

      component CYGNUM_KERNEL_THREADS_DATA_ALL{
        display "Bitmap of preallocated slots of thread data"
        calculated [15 ]
        flavor data 

        option CYGNUM_KERNEL_THREADS_DATA_KERNEL{
          display "Slot 0 preallocated for the kernel"
          calculated [0 ]
          flavor data 
        }

        option CYGNUM_KERNEL_THREADS_DATA_ITRON{
          display "Slot 1 preallocated for uITRON"
          calculated [1 ]
          flavor data 
        }

        option CYGNUM_KERNEL_THREADS_DATA_ERRNO{
          display "Slot 2 preallocated for errno"
          calculated [2 ]
          flavor data 
        }

        option CYGNUM_KERNEL_THREADS_DATA_POSIX{
          display "Slot 3 preallocated for POSIX"
          calculated [3 ]
          flavor data 
        }
      }
    }

    component CYGPKG_KERNEL_THREADS_DESTRUCTORS{
      display "Thread destructors"
      default_value [0 ]

      option CYGNUM_KERNEL_THREADS_DESTRUCTORS{
        display "Number of possible destructors"
        legal_values [1 to 65535 ]
        default_value [8 ]
        flavor data 
      }

      option CYGSEM_KERNEL_THREADS_DESTRUCTORS_PER_THREAD{
        display "Per-thread destructors"
        default_value [1 ]
      }
    }

    option CYGNUM_KERNEL_THREADS_IDLE_STACK_SIZE{
      display "Stack size for the idle thread"
      legal_values [512 to 65536 ]
      default_value [2048 ]
      flavor data 
    }

    option CYGNUM_KERNEL_MAX_SUSPEND_COUNT_ASSERT{
      display "Maximal suspend count"
      default_value [500 ]
      flavor data 
    }

    option CYGNUM_KERNEL_MAX_COUNTED_WAKE_COUNT_ASSERT{
      display "Maximal wake count"
      default_value [500 ]
      flavor data 
    }

    option CYGIMP_IDLE_THREAD_YIELD{
      display "Idle thread must always yield"
      calculated [1 ]
      active_if [(CYGNUM_KERNEL_SCHED_PRIORITIES == 1) ]
    }
  }

  component CYGPKG_KERNEL_SYNCH{
    display "Synchronization primitives"
    flavor none 

    component CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL{
      display "Priority inversion protection protocols"
      legal_values ["SIMPLE" ]
      default_value ["SIMPLE" ]
      active_if [CYGSEM_KERNEL_SCHED_MLQUEUE ]
      requires [CYGINT_KERNEL_SCHEDULER_UNIQUE_PRIORITIES == 0 ]
      flavor booldata 

      option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_INHERIT{
        display "Enable priority inheritance protocol"
        default_value [1 ]
        implements [CYGINT_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_COUNT ]
      }

      component CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_CEILING{
        display "Enable priority ceiling protocol"
        default_value [1 ]
        implements [CYGINT_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_COUNT ]

        option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DEFAULT_PRIORITY{
          display "Default priority ceiling"
          legal_values [0 to CYGNUM_KERNEL_SCHED_PRIORITIES - 1 ]
          default_value [0 ]
          active_if [CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_CEILING ]
          flavor data 
        }
      }

      option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_NONE{
        display "No priority inversion protocol"
        default_value [1 ]
        implements [CYGINT_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_COUNT ]
      }

      option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DEFAULT{
        display "Default priority inversion protocol"
        active_if [CYGINT_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_COUNT > 1 ]
        legal_values ["INHERIT" "CEILING" "NONE" ]
        default_value [CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_INHERIT ? "INHERIT" : CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_CEILING ? "CEILING" : "NONE" ]
        flavor data 
      }

      option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DYNAMIC{
        display "Specify mutex priority inversion protocol at runtime"
        default_value [1 ]
        active_if [CYGINT_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_COUNT > 1 ]
      }

      interface CYGINT_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_COUNT{
        display "Number of protocols selected"
      }
    }

    option CYGIMP_MBOX_USE_MBOXT_PLAIN{
      display "Use mboxt_plain mbox implementation"
      default_value [1 ]
    }

    option CYGMFN_KERNEL_SYNCH_MBOXT_PUT_CAN_WAIT{
      display "Message box blocking put support"
      default_value [1 ]
    }

    option CYGNUM_KERNEL_SYNCH_MBOX_QUEUE_SIZE{
      display "Message box queue size"
      legal_values [1 to 65535 ]
      default_value [10 ]
      flavor data 
    }

    option CYGMFN_KERNEL_SYNCH_CONDVAR_TIMED_WAIT{
      display "Condition variable timed-wait support"
      requires [CYGFUN_KERNEL_THREADS_TIMER ]
      default_value [1 ]
    }

    option CYGMFN_KERNEL_SYNCH_CONDVAR_WAIT_MUTEX{
      display "Condition variable explicit mutex wait support"
      default_value [1 ]
    }

    option CYGIMP_KERNEL_SYNCH_MQUEUE_NOT_INLINE{
      display "Avoid inlines in mqueue implementation"
      default_value [0 ]
    }
  }

  component CYGPKG_KERNEL_INSTRUMENT{
    display "Kernel instrumentation"
    default_value [0 ]
    flavor bool 

    option CYGVAR_KERNEL_INSTRUMENT_EXTERNAL_BUFFER{
      display "Use buffer provided by the application"
      default_value [0 ]
      flavor bool 
    }

    option CYGNUM_KERNEL_INSTRUMENT_BUFFER_SIZE{
      display "Size of instrumentation buffer size"
      legal_values [16 to 0x100000 ]
      default_value [256 ]
      flavor data 
    }

    option CYGDBG_KERNEL_INSTRUMENT_BUFFER_WRAP{
      display "Wrap instrument buffer"
      default_value [1 ]
    }

    option CYGDBG_KERNEL_INSTRUMENT_FLAGS{
      display "Perform selective instrumentation"
      default_value [1 ]
    }

    option CYGDBG_KERNEL_INSTRUMENT_SCHED{
      display "Instrument the scheduler"
      default_value [1 ]
      active_if [CYGPKG_KERNEL_SCHED ]
    }

    option CYGDBG_KERNEL_INSTRUMENT_THREAD{
      display "Instrument thread operations"
      default_value [1 ]
      active_if [CYGPKG_KERNEL_THREADS ]
    }

    option CYGDBG_KERNEL_INSTRUMENT_INTR{
      display "Instrument interrupts"
      default_value [1 ]
      active_if [CYGPKG_KERNEL_INTERRUPTS ]
    }

    option CYGDBG_KERNEL_INSTRUMENT_MUTEX{
      display "Instrument mutex operations"
      default_value [1 ]
      active_if [CYGPKG_KERNEL_SYNCH ]
    }

    option CYGDBG_KERNEL_INSTRUMENT_CONDVAR{
      display "Instrument condition variable operations"
      default_value [1 ]
      active_if [CYGPKG_KERNEL_SYNCH ]
    }

    option CYGDBG_KERNEL_INSTRUMENT_BINSEM{
      display "Instrument binary semaphore operations"
      default_value [1 ]
      active_if [CYGPKG_KERNEL_SYNCH ]
    }

    option CYGDBG_KERNEL_INSTRUMENT_CNTSEM{
      display "Instrument counting semaphore operations"
      default_value [1 ]
      active_if [CYGPKG_KERNEL_SYNCH ]
    }

    option CYGDBG_KERNEL_INSTRUMENT_MBOXT{
      display "Instrument message box operations"
      default_value [1 ]
      active_if [CYGPKG_KERNEL_SYNCH ]
    }

    option CYGDBG_KERNEL_INSTRUMENT_CLOCK{
      display "Instrument clock operations"
      default_value [1 ]
      active_if [CYGVAR_KERNEL_COUNTERS_CLOCK ]
    }

    option CYGDBG_KERNEL_INSTRUMENT_ALARM{
      display "Instrument alarm-related operations"
      default_value [1 ]
      active_if [CYGVAR_KERNEL_COUNTERS_CLOCK ]
    }

    option CYGDBG_KERNEL_INSTRUMENT_SMP{
      display "Instrument SMP-related operations"
      default_value [1 ]
      active_if [CYGVAR_KERNEL_COUNTERS_CLOCK ]
    }

    option CYGDBG_KERNEL_INSTRUMENT_USER{
      display "Support application-level instrumentation"
      default_value [1 ]
    }

    component CYGDBG_KERNEL_INSTRUMENT_MSGS{
      display "Print user friendly instrument messages"
      default_value [1 ]

      option CYGDBG_KERNEL_INSTRUMENT_MSGS_BUILD_HEADERFILE{
        display "Rebuild the header file"
        default_value [0 ]
      }

      component CYGDBG_KERNEL_INSTRUMENT_BUILD_HOST_DUMP{
        display "Build the host tool to print out a dump"
        default_value [0 ]
      }
    }
  }

  component CYGPKG_KERNEL_DEBUG{
    display "Source-level debugging support"
    flavor none 

    option CYGDBG_KERNEL_DEBUG_GDB_THREAD_SUPPORT{
      display "Include GDB multi-threading debug support"
      requires [CYGVAR_KERNEL_THREADS_LIST ]
      requires [CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT ]
      default_value [1 ]
    }
  }

  component CYGPKG_KERNEL_API{
    display "Kernel APIs"
    flavor none 

    option CYGFUN_KERNEL_API_C{
      display "Provide C API"
      default_value [1 ]
    }
  }

  component CYGPKG_KERNEL_OPTIONS{
    display "Kernel build options"
    flavor none 

    option CYGPKG_KERNEL_CFLAGS_ADD{
      display "Additional compiler flags"
      default_value ["" ]
      flavor data 
    }

    option CYGPKG_KERNEL_CFLAGS_REMOVE{
      display "Suppressed compiler flags"
      default_value ["" ]
      flavor data 
    }

    option CYGPKG_KERNEL_TESTS{
      display "Kernel tests"
      calculated ["tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/bin_sem3 tests/clock0 tests/clock1 tests/clockcnv tests/clocktruth tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kill tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/release tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2" . ((CYGFUN_KERNEL_API_C) ? " tests/kclock0 tests/kclock1 tests/kexcept1 tests/kflag0 tests/kflag1 tests/kintr0 tests/klock tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/kmutex3 tests/kmutex4 tests/ksched1 tests/ksem0 tests/ksem1 tests/kthread0 tests/kthread1 tests/stress_threads tests/thread_gdb tests/timeslice tests/timeslice2 tests/tm_basic tests/fptest tests/kalarm0" : "") . ((!CYGPKG_INFRA_DEBUG && !CYGPKG_KERNEL_INSTRUMENT && CYGFUN_KERNEL_API_C) ? " tests/dhrystone" : "") . ((CYGPKG_KERNEL_SMP_SUPPORT && CYGFUN_KERNEL_API_C) ? " tests/smp" : "") . ((!CYGINT_HAL_TESTS_NO_CACHES && CYGFUN_KERNEL_API_C) ? " tests/kcache1 tests/kcache2" : "") ]
      flavor data 
    }
  }
}

package CYGPKG_MEMALLOC{
  display "Dynamic memory allocation"

  component CYGPKG_MEMALLOC_ALLOCATORS{
    display "Memory allocator implementations"
    flavor none 

    component CYGPKG_MEMALLOC_ALLOCATOR_FIXED{
      display "Fixed block allocator"
      flavor none 

      option CYGSEM_MEMALLOC_ALLOCATOR_FIXED_THREADAWARE{
        display "Make thread safe"
        active_if [CYGPKG_KERNEL ]
        default_value [1 ]
      }
    }

    component CYGPKG_MEMALLOC_ALLOCATOR_VARIABLE{
      display "Simple variable block allocator"
      flavor none 

      option CYGSEM_MEMALLOC_ALLOCATOR_VARIABLE_THREADAWARE{
        display "Make thread safe"
        active_if [CYGPKG_KERNEL ]
        default_value [1 ]
      }

      option CYGSEM_MEMALLOC_ALLOCATOR_VARIABLE_COALESCE{
        display "Coalesce memory"
        default_value [1 ]
      }
    }

    component CYGPKG_MEMALLOC_ALLOCATOR_DLMALLOC{
      display "Doug Lea's malloc"
      flavor none 

      option CYGDBG_MEMALLOC_ALLOCATOR_DLMALLOC_DEBUG{
        display "Debug build"
        requires [CYGDBG_USE_ASSERTS ]
        default_value [0 != CYGDBG_USE_ASSERTS ]
      }

      option CYGIMP_MEMALLOC_ALLOCATOR_DLMALLOC_THREADAWARE{
        display "Make thread safe"
        active_if [CYGPKG_KERNEL ]
        requires [CYGPKG_KERNEL ]
        default_value [1 ]
      }

      option CYGIMP_MEMALLOC_ALLOCATOR_DLMALLOC_SAFE_MULTIPLE{
        display "Support more than one instance"
        default_value [1 ]
      }

      option CYGIMP_MEMALLOC_ALLOCATOR_DLMALLOC_USE_MEMCPY{
        display "Use system memmove() and memset()"
        requires [CYGPKG_ISOINFRA ]
        requires [CYGINT_ISO_STRING_MEMFUNCS ]
        default_value [(0 != CYGPKG_ISOINFRA) && (0 != CYGINT_ISO_STRING_MEMFUNCS) ]
      }

      option CYGNUM_MEMALLOC_ALLOCATOR_DLMALLOC_ALIGNMENT{
        display "Minimum alignment of allocated blocks"
        legal_values [3 to 10 ]
        default_value [3 ]
        flavor data 
      }
    }

    component CYGPKG_MEMALLOC_ALLOCATOR_SEPMETA{
      display "Variable block allocator with separate metadata"
      flavor none 

      option CYGSEM_MEMALLOC_ALLOCATOR_SEPMETA_THREADAWARE{
        display "Make thread safe"
        active_if [CYGPKG_KERNEL ]
        default_value [1 ]
      }
    }
  }

  option CYGFUN_MEMALLOC_KAPI{
    display "Kernel C API support for memory allocation"
    active_if [CYGPKG_KERNEL ]
    default_value [CYGFUN_KERNEL_API_C ]
  }

  option CYGSEM_MEMALLOC_MALLOC_ZERO_RETURNS_NULL{
    display "malloc(0) returns NULL"
    default_value [0 ]
  }

  option CYGSEM_MEMALLOC_INVOKE_OUT_OF_MEMORY{
    display "Breakpoint site when running out of memory"
    default_value [0 ]
  }

  component CYGPKG_MEMALLOC_MALLOC_ALLOCATORS{
    display "malloc() and supporting allocators"
    active_if [CYGPKG_ISOINFRA ]
    implements [CYGINT_ISO_MALLOC ]
    implements [CYGINT_ISO_MALLINFO ]
    default_value [1 ]
    flavor bool 

    component CYGBLD_MEMALLOC_MALLOC_EXTERNAL_HEAP_H{
      display "Use external heap definition"
      default_value [0 ]
      flavor booldata 
    }

    component CYGBLD_MEMALLOC_MALLOC_EXTERNAL_JOIN_H{
      display "Use external implementation of joining multiple heaps"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_MEMALLOC_MALLOC_ALLOCATORS{
      display "malloc() allocator implementations"
      requires [CYGINT_MEMALLOC_MALLOC_ALLOCATORS == 1 ]
    }

    option CYGBLD_MEMALLOC_MALLOC_IMPLEMENTATION_HEADER{
      display "malloc() implementation instantiation data"
      default_value ["<cyg/memalloc/dlmalloc.hxx>" ]
      flavor data 
    }

    option CYGIMP_MEMALLOC_MALLOC_VARIABLE_SIMPLE{
      display "Simple variable block implementation"
      default_value [0 ]
      implements [CYGINT_MEMALLOC_MALLOC_ALLOCATORS ]
      requires [CYGBLD_MEMALLOC_MALLOC_IMPLEMENTATION_HEADER == "<cyg/memalloc/memvar.hxx>" ]
      requires [CYGSEM_MEMALLOC_ALLOCATOR_VARIABLE_COALESCE ]
    }

    option CYGIMP_MEMALLOC_MALLOC_DLMALLOC{
      display "Doug Lea's malloc implementation"
      default_value [1 ]
      implements [CYGINT_MEMALLOC_MALLOC_ALLOCATORS ]
      requires [CYGBLD_MEMALLOC_MALLOC_IMPLEMENTATION_HEADER == "<cyg/memalloc/dlmalloc.hxx>" ]
    }
  }

  option CYGNUM_MEMALLOC_FALLBACK_MALLOC_POOL_SIZE{
    display "Size of the fallback dynamic memory pool in bytes"
    legal_values [32 to 0x7fffffff ]
    default_value [16384 ]
    flavor data 
  }

  component CYGPKG_MEMALLOC_OPTIONS{
    display "Common memory allocator package build options"
    flavor none 

    option CYGPKG_MEMALLOC_CFLAGS_ADD{
      display "Additional compiler flags"
      default_value ["" ]
      flavor data 
    }

    option CYGPKG_MEMALLOC_CFLAGS_REMOVE{
      display "Suppressed compiler flags"
      default_value ["" ]
      flavor data 
    }

    option CYGPKG_MEMALLOC_TESTS{
      display "Tests"
      calculated ["tests/dlmalloc1 tests/dlmalloc2 tests/heaptest tests/kmemfix1 tests/kmemvar1 tests/malloc1 tests/malloc2 tests/malloc3 tests/malloc4 tests/memfix1 tests/memfix2 tests/memvar1 tests/memvar2 tests/realloc tests/sepmeta1 tests/sepmeta2" ]
      flavor data 
    }
  }
}

package CYGPKG_ISOINFRA{
  display "ISO C and POSIX infrastructure"

  component CYGPKG_ISO_STARTUP{
    display "Startup and termination"
    flavor none 

    interface CYGINT_ISO_MAIN_STARTUP{
      display "main() startup implementations"
      requires [1 >= CYGINT_ISO_MAIN_STARTUP ]
    }

    interface CYGINT_ISO_ENVIRON{
      display "environ implementations"
      requires [1 >= CYGINT_ISO_ENVIRON ]
    }
  }

  component CYGPKG_ISO_CTYPE_H{
    display "ctype.h functions"
    flavor none 

    interface CYGINT_ISO_CTYPE{
      display "Number of implementations of ctype functions"
      requires [1 >= CYGINT_ISO_CTYPE ]
    }

    option CYGBLD_ISO_CTYPE_HEADER{
      display "Ctype implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_ERRNO{
    display "Error handling"
    flavor none 

    interface CYGINT_ISO_ERRNO_CODES{
      display "Number of implementations of error codes"
      requires [1 >= CYGINT_ISO_ERRNO_CODES ]
    }

    option CYGBLD_ISO_ERRNO_CODES_HEADER{
      display "Error codes implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_ERRNO{
      display "Number of implementations of errno variable"
      requires [1 >= CYGINT_ISO_ERRNO ]
    }

    option CYGBLD_ISO_ERRNO_HEADER{
      display "errno variable implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_LOCALE{
    display "Locale-related functions"
    flavor none 

    interface CYGINT_ISO_LOCALE{
      display "Number of implementations of locale functions"
      requires [1 >= CYGINT_ISO_LOCALE ]
    }

    option CYGBLD_ISO_LOCALE_HEADER{
      display "Locale implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_STDIO{
    display "Standard I/O-related functionality"
    flavor none 

    interface CYGINT_ISO_STDIO_FILETYPES{
      display "Number of implementations of stdio file types"
      requires [1 >= CYGINT_ISO_STDIO_FILETYPES ]
      flavor booldata 
    }

    option CYGBLD_ISO_STDIO_FILETYPES_HEADER{
      display "Stdio file types implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDIO_STREAMS{
      display "Stdio standard streams implementations"
      requires [1 >= CYGINT_ISO_STDIO_STREAMS ]
      flavor booldata 
    }

    option CYGBLD_ISO_STDIO_STREAMS_HEADER{
      display "Stdio standard streams implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDIO_FILEOPS{
      display "Number of implementations of stdio file operations"
      requires [1 >= CYGINT_ISO_STDIO_FILEOPS ]
      flavor booldata 
    }

    option CYGBLD_ISO_STDIO_FILEOPS_HEADER{
      display "Stdio file operations implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDIO_FILEACCESS{
      display "Number of implementations of stdio file access  functionals"
      requires [1 >= CYGINT_ISO_STDIO_FILEACCESS ]
      flavor booldata 
    }

    option CYGBLD_ISO_STDIO_FILEACCESS_HEADER{
      display "Stdio file access implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDIO_FORMATTED_IO{
      display "Number of implementations of stdio formatted I/O"
      requires [1 >= CYGINT_ISO_STDIO_FORMATTED_IO ]
      flavor booldata 
    }

    option CYGBLD_ISO_STDIO_FORMATTED_IO_HEADER{
      display "Stdio formatted I/O implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDIO_CHAR_IO{
      display "Number of implementations of stdio character I/O"
      requires [1 >= CYGINT_ISO_STDIO_CHAR_IO ]
      flavor booldata 
    }

    option CYGBLD_ISO_STDIO_CHAR_IO_HEADER{
      display "Stdio character I/O implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDIO_DIRECT_IO{
      display "Number of implementations of stdio direct I/O"
      requires [1 >= CYGINT_ISO_STDIO_DIRECT_IO ]
      flavor booldata 
    }

    option CYGBLD_ISO_STDIO_DIRECT_IO_HEADER{
      display "Stdio direct I/O implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDIO_FILEPOS{
      display "Number of implementations of stdio file positioning"
      requires [1 >= CYGINT_ISO_STDIO_FILEPOS ]
      flavor booldata 
    }

    option CYGBLD_ISO_STDIO_FILEPOS_HEADER{
      display "Stdio file positioning implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDIO_ERROR{
      display "Number of implementations of stdio error handling"
      requires [1 >= CYGINT_ISO_STDIO_ERROR ]
      flavor booldata 
    }

    option CYGBLD_ISO_STDIO_ERROR_HEADER{
      display "Stdio error handling implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDIO_POSIX_FDFUNCS{
      display "POSIX fd-related function implementations"
      requires [1 >= CYGINT_ISO_STDIO_POSIX_FDFUNCS ]
      flavor booldata 
    }

    option CYGBLD_ISO_STDIO_POSIX_FDFUNCS_HEADER{
      display "POSIX fd-related function implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_STDLIB{
    display "Standard general utility functions"
    flavor none 

    interface CYGINT_ISO_STDLIB_STRCONV{
      display "String conversion function implementations"
      requires [1 >= CYGINT_ISO_STDLIB_STRCONV ]
    }

    option CYGBLD_ISO_STDLIB_STRCONV_HEADER{
      display "String conversion function implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDLIB_STRCONV_FLOAT{
      display "String to FP conversion function implementations"
      requires [1 >= CYGINT_ISO_STDLIB_STRCONV_FLOAT ]
    }

    option CYGBLD_ISO_STDLIB_STRCONV_FLOAT_HEADER{
      display "String to FP conversion function implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_RAND{
      display "Random number generator implementations"
      requires [1 >= CYGINT_ISO_RAND ]
    }

    option CYGBLD_ISO_RAND_HEADER{
      display "Random number generator implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_MALLOC{
      display "Malloc implementations"
      requires [1 >= CYGINT_ISO_MALLOC ]
    }

    option CYGBLD_ISO_MALLOC_HEADER{
      display "Malloc implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_MALLINFO{
      display "Mallinfo() implementations"
      requires [1 >= CYGINT_ISO_MALLINFO ]
    }

    option CYGBLD_ISO_MALLINFO_HEADER{
      display "Mallinfo() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_EXIT{
      display "Program exit functionality implementations"
      requires [1 >= CYGINT_ISO_EXIT ]
    }

    option CYGBLD_ISO_EXIT_HEADER{
      display "Program exit functionality implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDLIB_ENVIRON{
      display "Program environment implementations"
      requires [1 >= CYGINT_ISO_STDLIB_ENVIRON ]
    }

    option CYGBLD_ISO_STDLIB_ENVIRON_HEADER{
      display "Program environment implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDLIB_SYSTEM{
      display "system() implementations"
      requires [1 >= CYGINT_ISO_STDLIB_SYSTEM ]
    }

    option CYGBLD_ISO_STDLIB_SYSTEM_HEADER{
      display "system() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_BSEARCH{
      display "bsearch() implementations"
      requires [1 >= CYGINT_ISO_BSEARCH ]
    }

    option CYGBLD_ISO_BSEARCH_HEADER{
      display "bsearch() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_QSORT{
      display "qsort() implementations"
      requires [1 >= CYGINT_ISO_STDLIB_QSORT ]
    }

    option CYGBLD_ISO_QSORT_HEADER{
      display "qsort() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_ABS{
      display "abs()/labs() implementations"
      requires [1 >= CYGINT_ISO_STDLIB_ABS ]
    }

    option CYGBLD_ISO_STDLIB_ABS_HEADER{
      display "abs()/labs() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_DIV{
      display "div()/ldiv() implementations"
      requires [1 >= CYGINT_ISO_STDLIB_DIV ]
    }

    option CYGBLD_ISO_STDLIB_DIV_HEADER{
      display "div()/ldiv() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_STDLIB_MB_CUR_MAX_HEADER{
      display "Header defining the implementation's MB_CUR_MAX"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDLIB_MULTIBYTE{
      display "Multibyte character implementations"
      requires [1 >= CYGINT_ISO_STDLIB_MULTIBYTE ]
    }

    option CYGBLD_ISO_STDLIB_MULTIBYTE_HEADER{
      display "Multibyte character implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_STRING{
    display "String functions"
    flavor none 

    interface CYGINT_ISO_STRERROR{
      display "Number of implementations of strerror() function"
      requires [1 >= CYGINT_ISO_STRERROR ]
      flavor booldata 
    }

    option CYGBLD_ISO_STRERROR_HEADER{
      display "strerror() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_MEMCPY_HEADER{
      display "memcpy() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_MEMSET_HEADER{
      display "memset() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STRTOK_R{
      display "Number of implementations of strtok_r() function"
      requires [1 >= CYGINT_ISO_STRTOK_R ]
      flavor booldata 
    }

    option CYGBLD_ISO_STRTOK_R_HEADER{
      display "strtok_r() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STRING_LOCALE_FUNCS{
      display "Number of implementations of locale-specific string  functions"
      requires [1 >= CYGINT_ISO_STRING_LOCALE_FUNCS ]
      flavor booldata 
    }

    option CYGBLD_ISO_STRING_LOCALE_FUNCS_HEADER{
      display "Locale-specific string functions' implementation  header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STRING_BSD_FUNCS{
      display "Number of implementations of BSD string functions"
      requires [1 >= CYGINT_ISO_STRING_BSD_FUNCS ]
      flavor booldata 
    }

    option CYGBLD_ISO_STRING_BSD_FUNCS_HEADER{
      display "BSD string functions' implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STRING_MEMFUNCS{
      display "Number of implementations of other mem*() functions"
      requires [1 >= CYGINT_ISO_STRING_MEMFUNCS ]
      flavor booldata 
    }

    option CYGBLD_ISO_STRING_MEMFUNCS_HEADER{
      display "Other mem*() functions' implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STRING_STRFUNCS{
      display "Number of implementations of other ISO C str*()  functions"
      requires [1 >= CYGINT_ISO_STRING_STRFUNCS ]
      flavor booldata 
    }

    option CYGBLD_ISO_STRING_STRFUNCS_HEADER{
      display "Other ISO C str*() functions' implementation  header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_TIME{
    display "Clock and time functionality"
    flavor none 

    option CYGBLD_ISO_TIME_T_HEADER{
      display "time_t implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_CLOCK_T_HEADER{
      display "clock_t implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_STRUCTTIMEVAL_HEADER{
      display "struct timeval implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_FNMATCH_HEADER{
      display "fnmatch implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_POSIX_TIMER_TYPES{
      display "Number of implementations of POSIX timer types"
      requires [1 >= CYGINT_ISO_POSIX_TIMER_TYPES ]
      flavor booldata 
    }

    option CYGBLD_ISO_POSIX_TIMER_TYPES_HEADER{
      display "POSIX timer types implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_POSIX_CLOCK_TYPES{
      display "Number of implementations of POSIX clock types"
      requires [1 >= CYGINT_ISO_POSIX_CLOCK_TYPES ]
      flavor booldata 
    }

    option CYGBLD_ISO_POSIX_CLOCK_TYPES_HEADER{
      display "POSIX clock types implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_C_TIME_TYPES{
      display "Number of implementations of ISO C types"
      requires [1 >= CYGINT_ISO_C_TIME_TYPES ]
      flavor booldata 
    }

    option CYGBLD_ISO_C_TIME_TYPES_HEADER{
      display "ISO C time types implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_POSIX_TIMERS{
      display "Number of implementations of POSIX timers"
      requires [1 >= CYGINT_ISO_POSIX_TIMERS ]
      flavor booldata 
    }

    option CYGBLD_ISO_POSIX_TIMERS_HEADER{
      display "POSIX timer implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_POSIX_CLOCKS{
      display "Number of implementations of POSIX clocks"
      requires [1 >= CYGINT_ISO_POSIX_CLOCKS ]
      flavor booldata 
    }

    option CYGBLD_ISO_POSIX_CLOCKS_HEADER{
      display "POSIX clocks implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_C_CLOCK_FUNCS{
      display "Number of implementations of ISO C clock functions"
      requires [1 >= CYGINT_ISO_C_CLOCK_FUNCS ]
      flavor booldata 
    }

    option CYGBLD_ISO_C_CLOCK_FUNCS_HEADER{
      display "ISO C clock functions' implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_TZSET{
      display "Number of implementations of tzset() function"
      requires [1 >= CYGINT_ISO_TZSET ]
      flavor booldata 
    }

    option CYGBLD_ISO_TZSET_HEADER{
      display "tzset() implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_SIGNAL{
    display "Signal functionality"
    flavor none 

    interface CYGINT_ISO_SIGNAL_NUMBERS{
      display "Number of implementations of signal numbers"
      requires [1 >= CYGINT_ISO_SIGNAL_NUMBERS ]
    }

    option CYGBLD_ISO_SIGNAL_NUMBERS_HEADER{
      display "Signal numbering implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_SIGNAL_IMPL{
      display "Number of signal implementations"
      requires [1 >= CYGINT_ISO_SIGNAL_IMPL ]
    }

    option CYGBLD_ISO_SIGNAL_IMPL_HEADER{
      display "Signals implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_POSIX_REALTIME_SIGNALS{
      display "POSIX real time signals feature test macro"
      requires [1 >= CYGINT_POSIX_REALTIME_SIGNALS ]
    }
  }

  component CYGPKG_ISO_SETJMP{
    display "Non-local jumps functionality"
    flavor none 

    interface CYGINT_ISO_SETJMP{
      display "setjmp() / longjmp() implementations"
      requires [1 >= CYGINT_ISO_SETJMP ]
    }

    option CYGBLD_ISO_SETJMP_HEADER{
      display "setjmp() / longjmp() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_SIGSETJMP{
      display "sigsetjmp() / siglongjmp() implementations"
      requires [1 >= CYGINT_ISO_SIGSETJMP ]
    }

    option CYGBLD_ISO_SIGSETJMP_HEADER{
      display "sigsetjmp() / siglongjmp() implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  option CYGBLD_ISO_ASSERT_HEADER{
    display "Assertions implementation header"
    default_value [0 ]
    flavor booldata 
  }

  component CYGPKG_ISO_POSIX_FCNTL{
    display "POSIX file control"
    flavor none 

    option CYGBLD_ISO_OFLAG_HEADER{
      display "POSIX open flags implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_FCNTL{
      display "POSIX fcntl() implementations"
      requires [1 >= CYGINT_ISO_FCNTL ]
    }

    option CYGBLD_ISO_FCNTL_HEADER{
      display "POSIX fcntl() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_OPEN{
      display "POSIX file open implementations"
      requires [1 >= CYGINT_ISO_OPEN ]
    }

    option CYGBLD_ISO_OPEN_HEADER{
      display "POSIX file open implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  option CYGBLD_ISO_STAT_DEFS_HEADER{
    display "<sys/stat.h> definitions implementation header"
    default_value [0 ]
    flavor booldata 
  }

  interface CYGINT_ISO_DIRENT{
    display "POSIX directory reading implementation"
    requires [1 >= CYGINT_ISO_DIRENT ]
  }

  option CYGBLD_ISO_DIRENT_HEADER{
    display "<dirent.h> definitions implementation header"
    default_value [0 ]
    flavor booldata 
  }

  component CYGPKG_ISO_POSIX_TYPES{
    display "POSIX <sys/types.h> contents"
    flavor none 

    interface CYGINT_ISO_PTHREADTYPES{
      display "POSIX thread types implementations"
      requires [1 >= CYGINT_ISO_PTHREADTYPES ]
    }

    option CYGBLD_ISO_PTHREADTYPES_HEADER{
      display "POSIX thread types implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_PMUTEXTYPES{
      display "POSIX mutex types implementations"
      requires [1 >= CYGINT_ISO_PTHREADTYPES ]
    }

    option CYGBLD_ISO_PMUTEXTYPES_HEADER{
      display "POSIX mutex types implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_SSIZE_T_HEADER{
      display "ssize_t implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_FSTYPES_HEADER{
      display "Filesystem types implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_SCHEDTYPES_HEADER{
      display "gid_t, pid_t, uid_t implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_EXTRA_TYPES{
    display "Non-POSIX <sys/types.h> contents"
    flavor none 

    interface CYGINT_ISO_BSDTYPES{
      display "BSD compatible types"
      requires [1 >= CYGINT_ISO_BSDTYPES ]
    }

    option CYGBLD_ISO_BSDTYPES_HEADER{
      display "BSD types header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_UTSNAME{
    display "Utsname structure"
    flavor none 

    option CYGBLD_ISO_UTSNAME_HEADER{
      display "Utsname header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_SCHED{
    display "POSIX scheduler"
    flavor none 

    interface CYGINT_ISO_SCHED_IMPL{
      display "POSIX scheduler implementations"
      requires [1 >= CYGINT_ISO_SCHED_IMPL ]
    }

    option CYGBLD_ISO_SCHED_IMPL_HEADER{
      display "POSIX scheduler implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_SEMAPHORES{
    display "POSIX semaphores"
    flavor none 

    interface CYGINT_ISO_SEMAPHORES{
      display "POSIX semaphore implementations"
      requires [1 >= CYGINT_ISO_SEMAPHORES ]
    }

    option CYGBLD_ISO_SEMAPHORES_HEADER{
      display "POSIX semaphore implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_MQUEUE{
    display "POSIX message queues"
    flavor none 

    interface CYGINT_ISO_MQUEUE{
      display "Implementations"
      requires [1 >= CYGINT_ISO_MQUEUE ]
    }

    option CYGBLD_ISO_MQUEUE_HEADER{
      display "Implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGNUM_ISO_MQUEUE_OPEN_MAX{
      display "Maximum number of open message queues"
      active_if [CYGINT_ISO_MQUEUE ]
      default_value [CYGNUM_POSIX_MQUEUE_OPEN_MAX > 0 ? CYGNUM_POSIX_MQUEUE_OPEN_MAX : 0 ]
      flavor booldata 
    }

    option CYGNUM_ISO_MQUEUE_PRIO_MAX{
      display "Maximum number of message priorities"
      default_value [65535 ]
      active_if [CYGINT_ISO_MQUEUE ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_PTHREAD{
    display "POSIX threads"
    flavor none 

    interface CYGINT_ISO_PTHREAD_IMPL{
      display "POSIX pthread implementations"
      requires [1 >= CYGINT_ISO_PTHREAD_IMPL ]
      flavor booldata 
    }

    option CYGBLD_ISO_PTHREAD_IMPL_HEADER{
      display "POSIX pthread implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_PTHREAD_MUTEX{
      display "POSIX mutex/cond var implementations"
      requires [1 >= CYGINT_ISO_PTHREAD_MUTEX ]
      flavor booldata 
    }

    option CYGBLD_ISO_PTHREAD_MUTEX_HEADER{
      display "POSIX mutex/cond var implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_LIMITS{
    display "Limits"
    flavor none 

    interface CYGINT_ISO_POSIX_LIMITS{
      display "POSIX pthread limits implementations"
      requires [1 >= CYGINT_ISO_POSIX_LIMITS ]
    }

    option CYGBLD_ISO_POSIX_LIMITS_HEADER{
      display "POSIX pthread limits implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_OPEN_MAX_HEADER{
      display "OPEN_MAX implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_LINK_MAX_HEADER{
      display "LINK_MAX implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_NAME_MAX_HEADER{
      display "NAME_MAX implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_PATH_MAX_HEADER{
      display "PATH_MAX implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_TERMIOS{
    display "POSIX termios"
    flavor none 

    interface CYGINT_ISO_TERMIOS{
      display "POSIX termios implementations"
      requires [1 >= CYGINT_ISO_TERMIOS ]
    }

    option CYGBLD_ISO_TERMIOS_HEADER{
      display "POSIX termios implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_DLFCN{
    display "Dynamic load API"
    flavor none 

    interface CYGINT_ISO_DLFCN{
      display "Dynamic load implementations"
      requires [1 >= CYGINT_ISO_DLFCN ]
    }

    option CYGBLD_ISO_DLFCN_HEADER{
      display "Dynamic load implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_UNISTD{
    display "UNIX standard functions"
    flavor none 

    interface CYGINT_ISO_POSIX_TIMER_OPS{
      display "POSIX timer operations implementations"
      requires [1 >= CYGINT_ISO_POSIX_TIMER_OPS ]
      flavor booldata 
    }

    option CYGBLD_ISO_POSIX_TIMER_OPS_HEADER{
      display "POSIX timer operations implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_POSIX_SLEEP{
      display "POSIX sleep() implementations"
      requires [1 >= CYGINT_ISO_POSIX_SLEEP ]
      flavor booldata 
    }

    option CYGBLD_ISO_POSIX_SLEEP_HEADER{
      display "POSIX sleep() implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_SELECT{
    display "select()/poll() functions"
    flavor none 

    interface CYGINT_ISO_SELECT{
      display "select() implementations"
      requires [1 >= CYGINT_ISO_SELECT ]
      flavor booldata 
    }

    option CYGBLD_ISO_SELECT_HEADER{
      display "select() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_POLL{
      display "poll() implementations"
      requires [1 >= CYGINT_ISO_POLL ]
      flavor booldata 
    }

    option CYGBLD_ISO_POLL_HEADER{
      display "poll() implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_NETDB{
    display "NetDB utility functions"
    flavor none 

    interface CYGINT_ISO_DNS{
      display "DNS implementations"
      requires [1 >= CYGINT_ISO_DNS ]
      flavor bool 
    }

    option CYGBLD_ISO_DNS_HEADER{
      display "DNS implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_NETDB_PROTO{
      display "Protocol network database implementations"
      requires [1 >= CYGINT_ISO_NETDB_PROTO ]
      flavor bool 
    }

    option CYGBLD_ISO_NETDB_PROTO_HEADER{
      display "Protocol network database implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_NETDB_SERV{
      display "Services network database implementations"
      requires [1 >= CYGINT_ISO_NETDB_SERV ]
      flavor bool 
    }

    option CYGBLD_ISO_NETDB_SERV_HEADER{
      display "Services network database implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISOINFRA_OPTIONS{
    display "Build options"
    flavor none 

    option CYGPKG_ISOINFRA_CFLAGS_ADD{
      display "Additional compiler flags"
      default_value ["" ]
      flavor data 
    }

    option CYGPKG_ISOINFRA_CFLAGS_REMOVE{
      display "Suppressed compiler flags"
      default_value ["" ]
      flavor data 
    }
  }
}

package CYGPKG_LIBC{
  display "ISO C library"

  package CYGPKG_LIBC_I18N{
    display "ISO C library internationalization functions"
    implements [CYGINT_ISO_LOCALE ]
    implements [CYGINT_ISO_CTYPE ]
    implements [CYGINT_ISO_STDLIB_MULTIBYTE ]
    requires [CYGPKG_ISOINFRA ]

    component CYGPKG_LIBC_I18N_LOCALES{
      display "Supported locales"
      flavor none 

      interface CYGINT_LIBC_I18N_MB_REQUIRED{
        display "Support for multiple locales required"
        requires [CYGBLD_ISO_STDLIB_MB_CUR_MAX_HEADER == "<cyg/libc/i18n/mb.h>" ]
        flavor booldata 
      }

      option CYGFUN_LIBC_I18N_LOCALE_C_SJIS{
        display "C-SJIS locale support"
        default_value [0 ]
        implements [CYGINT_LIBC_I18N_MB_REQUIRED ]
      }

      option CYGFUN_LIBC_I18N_LOCALE_C_JIS{
        display "C-JIS locale support"
        default_value [0 ]
        implements [CYGINT_LIBC_I18N_MB_REQUIRED ]
      }

      option CYGFUN_LIBC_I18N_LOCALE_C_EUCJP{
        display "C-EUCJP locale support"
        default_value [0 ]
        implements [CYGINT_LIBC_I18N_MB_REQUIRED ]
      }
    }

    option CYGPKG_LIBC_I18N_NEWLIB_CTYPE{
      display "Newlib's ctype implementation"
      default_value [0 ]
      requires [CYGBLD_ISO_CTYPE_HEADER == "<cyg/libc/i18n/newlibctype.h>" ]
    }

    option CYGSEM_LIBC_I18N_PER_THREAD_MB{
      display "Per-thread multibyte state"
      active_if [CYGPKG_KERNEL ]
      requires [CYGVAR_KERNEL_THREADS_DATA ]
      default_value [CYGVAR_KERNEL_THREADS_DATA != 0 ]
    }

    option CYGNUM_LIBC_I18N_MAX_LOCALE_NAME_SIZE{
      display "Size of locale name strings"
      legal_values [(CYGFUN_LIBC_I18N_LOCALE_C_EUCJP ? 8 : (CYGFUN_LIBC_I18N_LOCALE_C_SJIS ? 7 : (CYGFUN_LIBC_I18N_LOCALE_C_JIS ? 6 : 2))) to 0x7fffffff ]
      default_value [(CYGFUN_LIBC_I18N_LOCALE_C_EUCJP ? 8 : (CYGFUN_LIBC_I18N_LOCALE_C_SJIS ? 7 : (CYGFUN_LIBC_I18N_LOCALE_C_JIS ? 6 : 2))) ]
      flavor data 
    }

    option CYGIMP_LIBC_I18N_CTYPE_INLINES{
      display "Inline versions of <ctype.h> functions"
      default_value [1 ]
      requires [CYGBLD_ISO_CTYPE_HEADER == "<cyg/libc/i18n/ctype.inl>" ]
    }

    component CYGPKG_LIBC_I18N_OPTIONS{
      display "C library i18n functions build options"
      flavor none 

      option CYGPKG_LIBC_I18N_CFLAGS_ADD{
        display "Additional compiler flags"
        default_value ["" ]
        flavor data 
      }

      option CYGPKG_LIBC_I18N_CFLAGS_REMOVE{
        display "Suppressed compiler flags"
        default_value ["" ]
        flavor data 
      }

      option CYGPKG_LIBC_I18N_TESTS{
        display "C library i18n function tests"
        calculated ["tests/ctype tests/setlocale tests/i18nmb" ]
        flavor data 
      }
    }
  }

  package CYGPKG_LIBC_SETJMP{
    display "ISO C library setjmp/longjmp functions"
    requires [CYGPKG_ISOINFRA ]
    implements [CYGINT_ISO_SETJMP ]
    requires [CYGBLD_ISO_SETJMP_HEADER == "<cyg/libc/setjmp/setjmp.h>" ]

    component CYGPKG_LIBC_SETJMP_OPTIONS{
      display "C library setjmp build options"
      flavor none 

      option CYGPKG_LIBC_SETJMP_CFLAGS_ADD{
        display "Additional compiler flags"
        default_value ["" ]
        flavor data 
      }

      option CYGPKG_LIBC_SETJMP_CFLAGS_REMOVE{
        display "Suppressed compiler flags"
        default_value ["" ]
        flavor data 
      }

      option CYGPKG_LIBC_SETJMP_TESTS{
        display "C library setjmp tests"
        calculated ["tests/setjmp" ]
        flavor data 
      }
    }
  }

  package CYGPKG_LIBC_SIGNALS{
    display "ISO C library signal functions"
    implements [CYGINT_ISO_SIGNAL_NUMBERS ]
    implements [CYGINT_ISO_SIGNAL_IMPL ]
    requires [CYGBLD_ISO_SIGNAL_NUMBERS_HEADER == "<cyg/libc/signals/signal.h>" ]
    requires [CYGBLD_ISO_SIGNAL_IMPL_HEADER == "<cyg/libc/signals/signal.h>" ]
    requires [CYGPKG_ISOINFRA ]

    option CYGSEM_LIBC_SIGNALS_THREAD_SAFE{
      display "Thread safe signals"
      requires [CYGPKG_KERNEL ]
      default_value [1 ]
    }

    component CYGSEM_LIBC_SIGNALS_HWEXCEPTIONS{
      display "Hardware exceptions cause signals"
      requires [CYGSEM_KERNEL_EXCEPTIONS_GLOBAL ]
      requires [CYGSEM_KERNEL_EXCEPTIONS_DECODE ]
      default_value [0 ]
      flavor bool 

      option CYGSEM_LIBC_SIGNALS_CHAIN_HWEXCEPTIONS{
        display "Chain old exception handlers"
        default_value [1 ]
      }
    }

    component CYGPKG_LIBC_SIGNALS_INLINE{
      display "Inline versions of functions"
      flavor none 

      option CYGIMP_LIBC_SIGNALS_RAISE_INLINE{
        display "raise()"
        default_value [1 ]
      }

      option CYGIMP_LIBC_SIGNALS_SIGNAL_INLINE{
        display "signal()"
        default_value [1 ]
      }
    }

    component CYGPKG_LIBC_SIGNALS_ERROR_HANDLING{
      display "Error handling"
      flavor none 

      option CYGSEM_LIBC_SIGNALS_BAD_SIGNAL_FATAL{
        display "Bad signal fatal"
        requires [CYGDBG_USE_ASSERTS ]
        default_value [0 ]
      }

      option CYGSEM_LIBC_SIGNALS_RAISE_SETS_ERRNO{
        display "raise() sets errno"
        requires [CYGINT_ISO_ERRNO ]
        requires [CYGINT_ISO_ERRNO_CODES ]
        default_value [1 ]
      }

      option CYGSEM_LIBC_SIGNALS_SIGNAL_SETS_ERRNO{
        display "signal() sets errno"
        requires [CYGINT_ISO_ERRNO ]
        requires [CYGINT_ISO_ERRNO_CODES ]
        default_value [1 ]
      }
    }

    component CYGPKG_LIBC_SIGNALS_TRACING{
      display "Tracing"
      flavor none 

      option CYGNUM_LIBC_SIGNALS_RAISE_TRACE_LEVEL{
        display "Default trace level for raise()"
        legal_values [0 to 1 ]
        default_value [0 ]
        flavor data 
      }

      option CYGNUM_LIBC_SIGNALS_HWHANDLER_TRACE_LEVEL{
        display "Default hardware exception handler trace level"
        legal_values [0 to 1 ]
        default_value [0 ]
        flavor data 
      }
    }

    component CYGPKG_LIBC_SIGNALS_OPTIONS{
      display "C library signal functions build options"
      flavor none 

      option CYGPKG_LIBC_SIGNALS_CFLAGS_ADD{
        display "Additional compiler flags"
        default_value ["" ]
        flavor data 
      }

      option CYGPKG_LIBC_SIGNALS_CFLAGS_REMOVE{
        display "Suppressed compiler flags"
        default_value ["" ]
        flavor data 
      }

      option CYGPKG_LIBC_SIGNALS_TESTS{
        display "C library signal function tests"
        calculated ["tests/signal1" . ((CYGSEM_LIBC_SIGNALS_HWEXCEPTIONS) ? " tests/signal2" : "") ]
        flavor data 
      }
    }
  }

  package CYGPKG_LIBC_STARTUP{
    display "ISO environment startup/termination"
    requires [CYGPKG_ISOINFRA ]
    requires [CYGINT_LIBC_STARTUP_CONTEXT == 1 ]
    implements [CYGINT_ISO_EXIT ]
    implements [CYGINT_ISO_MAIN_STARTUP ]
    implements [CYGINT_ISO_ENVIRON ]

    interface CYGINT_LIBC_STARTUP_EXTERNAL_INVOKE_MAIN_POSSIBLE{
      display "main() can be invoked elsewhere"
      flavor bool 
    }

    option CYGDAT_LIBC_ARGUMENTS{
      display "Arguments to main()"
      default_value ["{(char *)\"\", (char *)NULL}" ]
      flavor data 
    }

    component CYGPKG_LIBC_STARTUP_CONTEXT{
      display "Startup context for main()"
      flavor none 

      interface CYGINT_LIBC_STARTUP_CONTEXT{
        display "Startup context implementors"
      }

      option CYGSEM_LIBC_STARTUP_MAIN_INITCONTEXT{
        display "Invoked from initialization context"
        default_value [0 == CYGPKG_KERNEL && 0 == CYGINT_LIBC_STARTUP_EXTERNAL_INVOKE_MAIN_POSSIBLE ]
        implements [CYGINT_LIBC_STARTUP_CONTEXT ]
        implements [CYGINT_LIBC_STARTUP_MAIN_NO_STACK_SIZE ]
        flavor bool 
      }

      component CYGSEM_LIBC_STARTUP_MAIN_THREAD{
        display "Invoked as eCos thread"
        requires [CYGPKG_KERNEL ]
        default_value [0 != CYGPKG_KERNEL && 0 == CYGINT_LIBC_STARTUP_EXTERNAL_INVOKE_MAIN_POSSIBLE ]
        implements [CYGINT_LIBC_STARTUP_CONTEXT ]
        flavor bool 

        option CYGSEM_LIBC_MAIN_STACK_FROM_SYSTEM{
          display "System provides stack for main()'s thread"
          default_value [1 ]
          flavor bool 
        }

        option CYGNUM_LIBC_MAIN_THREAD_PRIORITY{
          display "Priority of main()'s thread"
          legal_values [0 to 0x7fffffff ]
          default_value [10 ]
          flavor data 
        }
      }

      option CYGSEM_LIBC_STARTUP_MAIN_OTHER{
        display "Invoked elsewhere"
        default_value [0 != CYGINT_LIBC_STARTUP_EXTERNAL_INVOKE_MAIN_POSSIBLE ]
        requires [CYGINT_LIBC_STARTUP_EXTERNAL_INVOKE_MAIN_POSSIBLE ]
        implements [CYGINT_LIBC_STARTUP_CONTEXT ]
        flavor bool 
      }
    }

    interface CYGINT_LIBC_STARTUP_MAIN_NO_STACK_SIZE{
      display "Don't allow main()'s stack size to be set"
      flavor bool 
    }

    option CYGNUM_LIBC_MAIN_DEFAULT_STACK_SIZE{
      display "main()'s default thread stack size"
      legal_values [16 to 0x7fffffff ]
      default_value [8192 ]
      active_if [!CYGINT_LIBC_STARTUP_MAIN_NO_STACK_SIZE ]
      flavor data 
    }

    component CYGFUN_LIBC_ATEXIT{
      display "Include atexit() function"
      default_value [1 ]
      flavor bool 

      option CYGNUM_LIBC_ATEXIT_HANDLERS{
        display "Number of functions atexit() supports"
        legal_values [1 to 0x7fffffff ]
        default_value [32 ]
        flavor data 
      }
    }

    option CYGSEM_LIBC_EXIT_CALLS_FFLUSH{
      display "Make exit() call fflush()"
      requires [CYGINT_ISO_STDIO_FILEACCESS ]
      default_value [0 != CYGINT_ISO_STDIO_FILEACCESS ]
    }

    option CYGSEM_LIBC_EXIT_STOPS_SYSTEM{
      display "_exit() stops all threads"
      requires [CYGPKG_KERNEL ]
      default_value [0 ]
    }

    option CYGDAT_LIBC_DEFAULT_ENVIRONMENT{
      display "Default environment"
      default_value ["{ NULL }" ]
      flavor data 
    }

    option CYGSEM_LIBC_INVOKE_DEFAULT_STATIC_CONSTRUCTORS{
      display "Invoke default static constructors"
      requires [CYGSEM_HAL_STOP_CONSTRUCTORS_ON_FLAG ]
      requires [CYGSEM_LIBC_STARTUP_MAIN_THREAD || (CYGSEM_LIBC_STARTUP_MAIN_OTHER && CYGPKG_POSIX_PTHREAD) ]
      default_value [0 ]
    }

    component CYGPKG_LIBC_STARTUP_OPTIONS{
      display "ISO environment startup/termination build options"
      flavor none 

      option CYGPKG_LIBC_STARTUP_CFLAGS_ADD{
        display "Additional compiler flags"
        default_value ["" ]
        flavor data 
      }

      option CYGPKG_LIBC_STARTUP_CFLAGS_REMOVE{
        display "Suppressed compiler flags"
        default_value ["" ]
        flavor data 
      }

      option CYGPKG_LIBC_STARTUP_TESTS{
        display "ISO environment startup/termination tests"
        calculated ["tests/atexit" ]
        flavor data 
      }
    }
  }

  package CYGPKG_LIBC_STDIO{
    display "ISO C library standard input/output functions"
    requires [CYGPKG_IO ]
    requires [CYGPKG_LIBC_I18N ]
    implements [CYGINT_ISO_STDIO_FILETYPES ]
    implements [CYGINT_ISO_STDIO_FILEACCESS ]
    implements [CYGINT_ISO_STDIO_FILEPOS ]
    implements [CYGINT_ISO_STDIO_FILEOPS ]
    implements [CYGINT_ISO_STDIO_FORMATTED_IO ]
    implements [CYGINT_ISO_STDIO_CHAR_IO ]
    implements [CYGINT_ISO_STDIO_DIRECT_IO ]
    implements [CYGINT_ISO_STDIO_ERROR ]
    implements [CYGINT_ISO_STDIO_STREAMS ]
    requires [(CYGDAT_LIBC_STDIO_DEFAULT_CONSOLE == "\"/dev/ttydiag\"" ? CYGPKG_IO_SERIAL_HALDIAG : 1) ]
    requires [CYGBLD_ISO_STDIO_FILETYPES_HEADER == "<cyg/libc/stdio/stdio.h>" ]
    requires [CYGBLD_ISO_STDIO_FILEACCESS_HEADER == "<cyg/libc/stdio/stdio.h>" ]
    requires [CYGBLD_ISO_STDIO_FILEPOS_HEADER == "<cyg/libc/stdio/stdio.h>" ]
    requires [CYGBLD_ISO_STDIO_FILEOPS_HEADER == "<cyg/libc/stdio/stdio.h>" ]
    requires [CYGBLD_ISO_STDIO_FORMATTED_IO_HEADER == "<cyg/libc/stdio/stdio.h>" ]
    requires [CYGBLD_ISO_STDIO_CHAR_IO_HEADER == "<cyg/libc/stdio/stdio.h>" ]
    requires [CYGBLD_ISO_STDIO_DIRECT_IO_HEADER == "<cyg/libc/stdio/stdio.h>" ]
    requires [CYGBLD_ISO_STDIO_ERROR_HEADER == "<cyg/libc/stdio/stdio.h>" ]
    requires [CYGBLD_ISO_STDIO_STREAMS_HEADER == "<cyg/libc/stdio/stdio.h>" ]
    requires [CYGPKG_ISOINFRA ]
    requires [CYGINT_ISO_ERRNO_CODES ]
    requires [CYGINT_ISO_ERRNO ]
    requires [CYGINT_ISO_STRERROR ]
    requires [CYGINT_ISO_STRING_STRFUNCS ]
    requires [CYGINT_ISO_STRING_MEMFUNCS ]
    requires [CYGINT_ISO_STDLIB_STRCONV ]

    option CYGIMP_LIBC_STDIO_INLINES{
      display "Inline versions of <stdio.h> functions"
      default_value [1 ]
    }

    option FOPEN_MAX{
      display "Permitted number of open files"
      legal_values [3 to 0x7fffffff ]
      default_value [8 ]
      flavor data 
    }

    option FILENAME_MAX{
      display "Maximum length of filename"
      legal_values [1 to 0x7fffffff ]
      default_value [16 ]
      flavor data 
    }

    option L_tmpnam{
      display "Maximum length of filenames for temporary files"
      legal_values [4 to 0x7fffffff ]
      default_value [16 ]
      flavor data 
    }

    option TMP_MAX{
      display "Unique file names generated by tmpnam()"
      legal_values [1 to 0x7fffffff ]
      default_value [25 ]
      flavor data 
    }

    component CYGSEM_LIBC_STDIO_WANT_BUFFERED_IO{
      display "Buffered I/O"
      default_value [1 ]
      flavor bool 

      option CYGNUM_LIBC_STDIO_BUFSIZE{
        display "Default buffer size"
        legal_values [1 to 0x7fffffff ]
        default_value [256 ]
        flavor data 
      }

      option CYGSEM_LIBC_STDIO_DYNAMIC_SETVBUF{
        display "setbuf()/setvbuf() allows dynamic setting"
        default_value [1 ]
      }

      option CYGSEM_LIBC_STDIO_SETVBUF_MALLOC{
        display "setbuf()/setvbuf() uses malloc()"
        requires [CYGINT_ISO_MALLOC ]
        requires [CYGSEM_LIBC_STDIO_DYNAMIC_SETVBUF ]
        default_value [0 != CYGINT_ISO_MALLOC ]
      }
    }

    option BUFSIZ{
      display "Default buffer size (BUFSIZ)"
      calculated [CYGSEM_LIBC_STDIO_WANT_BUFFERED_IO ? CYGNUM_LIBC_STDIO_BUFSIZE : 0 ]
      flavor data 
    }

    option CYGFUN_LIBC_STDIO_ungetc{
      display "Support for ungetc()"
      default_value [1 ]
    }

    component CYGPKG_LIBC_STDIO_OPEN{
      display "Dynamic opening/closing of files"
      requires [CYGINT_ISO_MALLOC ]
      default_value [0 != CYGINT_ISO_MALLOC ]

      option CYGFUN_LIBC_STDIO_OPEN_POSIX_FDFUNCS{
        display "POSIX fdopen/fileno functions"
        active_if [CYGPKG_LIBC_STDIO_FILEIO ]
        implements [CYGINT_ISO_STDIO_POSIX_FDFUNCS ]
        calculated [1 ]
      }
    }

    option CYGDAT_LIBC_STDIO_DEFAULT_CONSOLE{
      display "Default console device"
      default_value [CYGDAT_IO_SERIAL_TTY_CONSOLE ? CYGDAT_IO_SERIAL_TTY_CONSOLE : "\"/dev/null\"" ]
      flavor data 
    }

    component CYGPKG_LIBC_STDIO_FLOATING_POINT{
      display "Floating point support"
      flavor none 

      option CYGSEM_LIBC_STDIO_PRINTF_FLOATING_POINT{
        display "printf() family"
        requires [CYGPKG_LIBM ]
        default_value [0 != CYGPKG_LIBM ]
      }

      option CYGSEM_LIBC_STDIO_SCANF_FLOATING_POINT{
        display "scanf() family"
        requires [CYGPKG_LIBM ]
        requires [CYGINT_ISO_STDLIB_STRCONV_FLOAT ]
        default_value [0 != CYGPKG_LIBM && 0 != CYGINT_ISO_STDLIB_STRCONV_FLOAT ]
      }
    }

    option CYGFUN_LIBC_STDIO_LONGLONG{
      display "Long long support"
      requires [CYGFUN_LIBC_STDLIB_CONV_LONGLONG ]
      default_value [1 ]
    }

    option CYGSEM_LIBC_STDIO_THREAD_SAFE_STREAMS{
      display "Thread safe I/O streams"
      active_if [CYGPKG_KERNEL ]
      default_value [1 ]
    }

    option CYGPKG_LIBC_STDIO_FILEIO{
      display "Enable use of FILEIO package for IO operations."
      active_if [CYGPKG_IO_FILEIO ]
      requires [CYGSEM_LIBC_STDIO_WANT_BUFFERED_IO ]
      requires [CYGSEM_LIBC_STDIO_DYNAMIC_SETVBUF ]
      calculated [1 ]
    }

    component CYGPKG_LIBC_STDIO_OPTIONS{
      display "C library stdio functions build options"
      flavor none 

      option CYGPKG_LIBC_STDIO_CFLAGS_ADD{
        display "Additional compiler flags"
        default_value ["" ]
        flavor data 
      }

      option CYGPKG_LIBC_STDIO_CFLAGS_REMOVE{
        display "Suppressed compiler flags"
        default_value ["" ]
        flavor data 
      }

      option CYGPKG_LIBC_STDIO_TESTS{
        display "C library stdio function tests"
        calculated ["tests/sprintf1 tests/sprintf2 tests/sscanf tests/stdiooutput " . ((CYGPKG_IO_FILEIO && CYGPKG_FS_RAM) ? "tests/fileio " : "") ]
        flavor data 
      }
    }
  }

  package CYGPKG_LIBC_STDLIB{
    display "ISO C library general utility functions"
    requires [CYGPKG_ISOINFRA ]
    implements [CYGINT_ISO_STDLIB_STRCONV ]
    implements [CYGINT_ISO_STDLIB_ENVIRON ]
    implements [CYGINT_ISO_STDLIB_SYSTEM ]
    implements [CYGINT_ISO_BSEARCH ]
    implements [CYGINT_ISO_QSORT ]
    implements [CYGINT_ISO_ABS ]
    implements [CYGINT_ISO_DIV ]
    requires [CYGINT_ISO_CTYPE ]
    requires [CYGINT_ISO_STRING_STRFUNCS ]

    component CYGIMP_LIBC_STDLIB_INLINES{
      display "Inline versions of <stdlib.h> functions"
      flavor none 

      option CYGIMP_LIBC_STDLIB_INLINE_ABS{
        display "abs() / labs()"
        default_value [1 ]
        requires [CYGBLD_ISO_STDLIB_ABS_HEADER == "<cyg/libc/stdlib/abs.inl>" ]
      }

      option CYGIMP_LIBC_STDLIB_INLINE_DIV{
        display "div() / ldiv()"
        default_value [1 ]
        requires [CYGBLD_ISO_STDLIB_DIV_HEADER == "<cyg/libc/stdlib/div.inl>" ]
      }

      option CYGIMP_LIBC_STDLIB_INLINE_ATOX{
        display "atof() / atoi() / atol()"
        default_value [1 ]
        requires [CYGBLD_ISO_STDLIB_STRCONV_HEADER == "<cyg/libc/stdlib/atox.inl>" ]
      }
    }

    component CYGPKG_LIBC_RAND{
      display "Random number generation"
      flavor none 

      option CYGSEM_LIBC_PER_THREAD_RAND{
        display "Per-thread random seed"
        requires [CYGVAR_KERNEL_THREADS_DATA ]
        default_value [0 ]
      }

      option CYGNUM_LIBC_RAND_SEED{
        display "Random number seed"
        legal_values [0 to 0x7fffffff ]
        default_value [1 ]
        flavor data 
      }

      option CYGNUM_LIBC_RAND_TRACE_LEVEL{
        display "Tracing level"
        legal_values [0 to 1 ]
        default_value [0 ]
        flavor data 
      }

      option CYGIMP_LIBC_RAND_SIMPLEST{
        display "Simplest implementation"
        default_value [0 ]
        implements [CYGINT_ISO_RAND ]
        flavor bool 
      }

      option CYGIMP_LIBC_RAND_SIMPLE1{
        display "Simple implementation #1"
        default_value [1 ]
        implements [CYGINT_ISO_RAND ]
        flavor bool 
      }

      option CYGIMP_LIBC_RAND_KNUTH1{
        display "Knuth implementation #1"
        default_value [0 ]
        implements [CYGINT_ISO_RAND ]
        flavor bool 
      }
    }

    option CYGFUN_LIBC_strtod{
      display "Provides strtod()"
      requires [CYGPKG_LIBM ]
      default_value [0 != CYGPKG_LIBM ]
      implements [CYGINT_ISO_STDLIB_STRCONV_FLOAT ]
    }

    option CYGFUN_LIBC_STDLIB_CONV_LONGLONG{
      display "Provides long long conversion functions"
      default_value [1 ]
    }

    option CYGNUM_LIBC_BSEARCH_TRACE_LEVEL{
      display "bsearch() tracing level"
      legal_values [0 to 1 ]
      default_value [0 ]
      flavor data 
    }

    option CYGNUM_LIBC_QSORT_TRACE_LEVEL{
      display "qsort() tracing level"
      legal_values [0 to 1 ]
      default_value [0 ]
      flavor data 
    }

    component CYGPKG_LIBC_STDLIB_OPTIONS{
      display "C library stdlib build options"
      flavor none 

      option CYGPKG_LIBC_STDLIB_CFLAGS_ADD{
        display "Additional compiler flags"
        default_value ["" ]
        flavor data 
      }

      option CYGPKG_LIBC_STDLIB_CFLAGS_REMOVE{
        display "Suppressed compiler flags"
        default_value ["" ]
        flavor data 
      }

      option CYGPKG_LIBC_STDLIB_TESTS{
        display "C library stdlib tests"
        calculated ["tests/abs tests/atoi tests/atol tests/bsearch tests/div tests/getenv tests/labs tests/ldiv tests/qsort tests/rand1 tests/rand2 tests/rand3 tests/rand4 tests/srand tests/strtol tests/strtoul" ]
        flavor data 
      }
    }
  }

  package CYGPKG_LIBC_STRING{
    display "ISO C library string functions"
    implements [CYGINT_ISO_STRTOK_R ]
    implements [CYGINT_ISO_STRING_LOCALE_FUNCS ]
    implements [CYGINT_ISO_STRING_MEMFUNCS ]
    implements [CYGINT_ISO_STRING_STRFUNCS ]
    requires [CYGBLD_ISO_STRING_LOCALE_FUNCS_HEADER == "<cyg/libc/string/string.h>" ]
    requires [CYGBLD_ISO_STRING_MEMFUNCS_HEADER == "<cyg/libc/string/string.h>" ]
    requires [CYGBLD_ISO_STRING_STRFUNCS_HEADER == "<cyg/libc/string/string.h>" ]
    requires [CYGBLD_ISO_STRTOK_R_HEADER == "<cyg/libc/string/string.h>" ]
    requires [CYGPKG_ISOINFRA ]

    option CYGIMP_LIBC_STRING_INLINES{
      display "Inline versions of <string.h> functions"
      default_value [1 ]
    }

    option CYGIMP_LIBC_STRING_PREFER_SMALL_TO_FAST{
      display "Optimize string functions for code size"
      default_value [0 ]
      flavor bool 
    }

    option CYGFUN_LIBC_STRING_BSD_FUNCS{
      display "Provide BSD compatibility functions"
      default_value [1 ]
      implements [CYGINT_ISO_STRING_BSD_FUNCS ]
      requires [CYGBLD_ISO_STRING_BSD_FUNCS_HEADER == "<cyg/libc/string/bsdstring.h>" ]
      requires [CYGINT_ISO_CTYPE ]
      flavor bool 
    }

    component CYGPKG_LIBC_STRING_STRTOK{
      display "strtok"
      flavor none 

      option CYGSEM_LIBC_STRING_PER_THREAD_STRTOK{
        display "Per-thread strtok()"
        active_if [CYGPKG_KERNEL ]
        requires [CYGVAR_KERNEL_THREADS_DATA ]
        default_value [CYGVAR_KERNEL_THREADS_DATA ]
      }

      option CYGNUM_LIBC_STRING_STRTOK_TRACE_LEVEL{
        display "Tracing level"
        legal_values [0 to 1 ]
        default_value [0 ]
        flavor data 
      }
    }

    option CYGFUN_LIBC_STRING_STRDUP{
      display "strdup"
      active_if [CYGINT_ISO_MALLOC ]
      calculated [1 ]
    }

    component CYGPKG_LIBC_STRING_OPTIONS{
      display "C library string functions build options"
      flavor none 

      option CYGPKG_LIBC_STRING_CFLAGS_ADD{
        display "Additional compiler flags"
        default_value ["" ]
        flavor data 
      }

      option CYGPKG_LIBC_STRING_CFLAGS_REMOVE{
        display "Suppressed compiler flags"
        default_value ["" ]
        flavor data 
      }

      option CYGPKG_LIBC_STRING_TESTS{
        display "C library string function tests"
        calculated ["tests/memchr tests/memcmp1 tests/memcmp2 tests/memcpy1 tests/memcpy2 tests/memmove1 tests/memmove2 tests/memset tests/strcat1 tests/strcat2 tests/strchr tests/strcmp1 tests/strcmp2 tests/strcoll1 tests/strcoll2 tests/strcpy1 tests/strcpy2 tests/strcspn tests/strcspn tests/strlen tests/strncat1 tests/strncat2 tests/strncpy1 tests/strncpy2 tests/strpbrk tests/strrchr tests/strspn tests/strstr tests/strtok tests/strxfrm1 tests/strxfrm2" ]
        flavor data 
      }
    }
  }

  package CYGPKG_LIBC_TIME{
    display "ISO C library date and time functions"
    implements [CYGINT_ISO_C_TIME_TYPES ]
    implements [CYGINT_ISO_C_CLOCK_FUNCS ]
    requires [CYGBLD_ISO_C_TIME_TYPES_HEADER == "<cyg/libc/time/time.h>" ]
    requires [CYGBLD_ISO_C_CLOCK_FUNCS_HEADER == "<cyg/libc/time/time.h>" ]
    requires [CYGPKG_ISOINFRA ]
    requires [CYGINT_ISO_DIV ]
    requires [CYGINT_ISO_ABS ]

    option CYGSEM_LIBC_TIME_CLOCK_WORKING{
      display "Working clock() function"
      requires [CYGFUN_KERNEL_THREADS_TIMER ]
      requires [CYGVAR_KERNEL_COUNTERS_CLOCK ]
      default_value [1 ]
    }

    option CYGSEM_LIBC_TIME_TIME_WORKING{
      display "Working time() function"
      requires [CYGPKG_IO_WALLCLOCK ]
      default_value [1 ]
    }

    option CYGSEM_LIBC_TIME_SETTIME_WORKING{
      display "Working cyg_libc_time_settime() function"
      requires [CYGPKG_IO_WALLCLOCK ]
      default_value [1 ]
    }

    option CYGFUN_LIBC_TIME_POSIX{
      display "POSIX time functions"
      default_value [1 ]
      requires [CYGINT_ISO_STRING_BSD_FUNCS ]
    }

    option CYGFUN_LIBC_TIME_SUS_EXTNS{
      display "Single UNIX extensions"
      default_value [0 ]
    }

    component CYGPKG_LIBC_TIME_ZONES{
      display "Time zone offsets"
      flavor none 

      option CYGNUM_LIBC_TIME_DST_DEFAULT_STATE{
        display "Default Daylight Savings Time state"
        legal_values [-- -1 to 1 ]
        default_value [-- -1 ]
        flavor data 
      }

      option CYGNUM_LIBC_TIME_STD_DEFAULT_OFFSET{
        display "Default Standard Time offset"
        legal_values [-- -90000 to 90000 ]
        default_value [-- 0 ]
        flavor data 
      }

      option CYGNUM_LIBC_TIME_DST_DEFAULT_OFFSET{
        display "Default Daylight Savings Time offset"
        legal_values [-- -90000 to 90000 ]
        default_value [-- 3600 ]
        flavor data 
      }
    }

    component CYGPKG_LIBC_TIME_INLINES{
      display "Inline functions"
      flavor none 

      option CYGIMP_LIBC_TIME_ASCTIME_INLINE{
        display "asctime()"
        default_value [1 ]
      }

      option CYGIMP_LIBC_TIME_CTIME_INLINE{
        display "ctime()"
        default_value [1 ]
      }

      option CYGIMP_LIBC_TIME_DIFFTIME_INLINE{
        display "difftime()"
        default_value [1 ]
      }

      option CYGIMP_LIBC_TIME_GMTIME_INLINE{
        display "gmtime()"
        default_value [1 ]
      }

      option CYGIMP_LIBC_TIME_LOCALTIME_INLINE{
        display "localtime()"
        default_value [1 ]
      }

      option CYGIMP_LIBC_TIME_MKTIME_INLINE{
        display "mktime()"
        default_value [0 ]
      }

      option CYGIMP_LIBC_TIME_ASCTIME_R_INLINE{
        display "asctime_r()"
        requires [CYGFUN_LIBC_TIME_POSIX ]
        default_value [1 ]
      }

      option CYGIMP_LIBC_TIME_CTIME_R_INLINE{
        display "ctime_r()"
        requires [CYGFUN_LIBC_TIME_POSIX ]
        default_value [1 ]
      }

      option CYGIMP_LIBC_TIME_GMTIME_R_INLINE{
        display "gmtime_r()"
        requires [CYGFUN_LIBC_TIME_POSIX ]
        default_value [0 ]
      }

      option CYGIMP_LIBC_TIME_LOCALTIME_R_INLINE{
        display "localtime_r()"
        requires [CYGFUN_LIBC_TIME_POSIX ]
        default_value [1 ]
      }
    }

    option CYGNUM_LIBC_TIME_CLOCK_TRACE_LEVEL{
      display "clock() tracing level"
      legal_values [0 to 1 ]
      default_value [0 ]
      flavor data 
    }

    component CYGPKG_LIBC_TIME_OPTIONS{
      display "C library time functions build options"
      flavor none 

      option CYGPKG_LIBC_TIME_CFLAGS_ADD{
        display "Additional compiler flags"
        default_value ["-Wno-format" ]
        flavor data 
      }

      option CYGPKG_LIBC_TIME_CFLAGS_REMOVE{
        display "Suppressed compiler flags"
        default_value ["" ]
        flavor data 
      }

      option CYGPKG_LIBC_TIME_TESTS{
        display "C library time and date function tests"
        calculated ["tests/asctime tests/clock tests/ctime tests/gmtime tests/localtime tests/mktime tests/strftime tests/time " . (CYGFUN_LIBC_TIME_POSIX ? "tests/strptime" : "") ]
        flavor data 
      }
    }
  }
}

package CYGPKG_LIBM{
  display "Math library"

  component CYGPKG_LIBM_COMPATIBILITY{
    display "Compatibility mode"
    flavor none 

    interface CYGINT_LIBM_COMPAT{
      requires [1 == CYGINT_LIBM_COMPAT ]
    }

    option CYGSEM_LIBM_COMPAT_IEEE_ONLY{
      display "IEEE-only"
      default_value [0 ]
      implements [CYGINT_LIBM_COMPAT ]
    }

    component CYGNUM_LIBM_COMPATIBILITY{
      display "Default mode"
      requires [CYGPKG_LIBC ]
      implements [CYGINT_LIBM_COMPAT ]
      legal_values ["POSIX" "IEEE" "XOPEN" "SVID" ]
      default_value ["POSIX" ]
      flavor booldata 

      option CYGNUM_LIBM_COMPAT_DEFAULT{
        display "Numeric representation"
        calculated [CYGNUM_LIBM_COMPATIBILITY == "POSIX" ? "CYGNUM_LIBM_COMPAT_POSIX" : CYGNUM_LIBM_COMPATIBILITY == "IEEE" ? "CYGNUM_LIBM_COMPAT_IEEE" : CYGNUM_LIBM_COMPATIBILITY == "XOPEN" ? "CYGNUM_LIBM_COMPAT_XOPEN" : CYGNUM_LIBM_COMPATIBILITY == "SVID" ? "CYGNUM_LIBM_COMPAT_SVID" : "<undefined>" ]
        flavor data 
      }
    }

    option CYGFUN_LIBM_SVID3_scalb{
      display "SVID3-style scalb()"
      default_value [1 ]
    }

    option CYGSYM_LIBM_NO_XOPEN_SVID_NAMESPACE_POLLUTION{
      display "Reduce namespace pollution"
      default_value [0 ]
    }

    option CYGSEM_LIBM_USE_STDERR{
      display "Output to stderr for math errors"
      requires [!CYGSEM_LIBM_COMPAT_IEEE_ONLY ]
      requires [CYGPKG_LIBC_STDIO ]
      default_value [0 ]
    }
  }

  component CYGPKG_LIBM_THREAD_SAFETY{
    display "Thread safety"
    flavor none 

    option CYGSEM_LIBM_THREAD_SAFE_COMPAT_MODE{
      display "Compatibility mode setting"
      requires [!CYGSEM_LIBM_COMPAT_IEEE_ONLY ]
      requires [CYGVAR_KERNEL_THREADS_DATA ]
      default_value [0 ]
    }

    option CYGSEM_LIBM_THREAD_SAFE_GAMMA_FUNCTIONS{
      display "gamma() and lgamma()"
      requires [CYGVAR_KERNEL_THREADS_DATA ]
      default_value [0 ]
    }
  }

  component CYGPKG_LIBM_TRACE{
    display "Tracing output levels in math library"
    requires [CYGDBG_USE_TRACING ]
    default_value [0 ]
    flavor bool 

    option CYGNUM_LIBM_COMPATMODE_TRACE_LEVEL{
      display "Compatibility mode get/set"
      requires [CYGSEM_LIBM_THREAD_SAFE_COMPAT_MODE ]
      legal_values [0 to 1 ]
      default_value [0 ]
      flavor data 
    }

    option CYGNUM_LIBM_SIGNGAM_TRACE_LEVEL{
      display "signgam variable access"
      requires [CYGSEM_LIBM_THREAD_SAFE_GAMMA_FUNCTIONS ]
      legal_values [0 to 1 ]
      default_value [0 ]
      flavor data 
    }
  }

  option CYGNUM_LIBM_X_TLOSS{
    display "Bessel function limit of significance"
    default_value [14 ]
    legal_values [1 to 1000 ]
    flavor data 
  }

  component CYGPKG_LIBM_OPTIONS{
    display "Math library build options"
    flavor none 

    option CYGPKG_LIBM_CFLAGS_ADD{
      display "Additional compiler flags"
      default_value [((0 == CYGPKG_HAL_I386) && (0 == CYGPKG_HAL_SYNTH_I386)) ? "" : "-ffloat-store" ]
      flavor data 
    }

    option CYGPKG_LIBM_CFLAGS_REMOVE{
      display "Suppressed compiler flags"
      default_value ["" ]
      flavor data 
    }

    option CYGPKG_LIBM_TESTS{
      display "Math library tests"
      calculated ["tests/vectors/acos tests/vectors/asin tests/vectors/atan tests/vectors/atan2 tests/vectors/ceil tests/vectors/cos tests/vectors/cosh tests/vectors/exp tests/vectors/fabs tests/vectors/floor tests/vectors/fmod tests/vectors/frexp tests/vectors/ldexp tests/vectors/log tests/vectors/log10 tests/vectors/modf tests/vectors/pow tests/vectors/sin tests/vectors/sinh tests/vectors/sqrt tests/vectors/tan tests/vectors/tanh" ]
      flavor data 
    }
  }
}

package CYGPKG_IO_WALLCLOCK{
  display "Wallclock device"

  interface CYGINT_WALLCLOCK_HW_IMPLEMENTATIONS{
    display "Number of wallclock hardware implementations"
  }

  interface CYGINT_WALLCLOCK_IMPLEMENTATIONS{
    display "Number of wallclock implementations"
    requires [1 == CYGINT_WALLCLOCK_IMPLEMENTATIONS ]
  }

  interface CYGINT_WALLCLOCK_SET_GET_MODE_SUPPORTED{
    display "Wallclock driver supports set/get mode"
  }

  option CYGSEM_WALLCLOCK_MODE{
    display "Wallclock mode"
    legal_values ["init_get" "set_get" ]
    default_value [CYGINT_WALLCLOCK_SET_GET_MODE_SUPPORTED ? "set_get" : "init_get" ]
    requires [CYGINT_WALLCLOCK_SET_GET_MODE_SUPPORTED || CYGSEM_WALLCLOCK_MODE == "init_get" ]
    flavor data 
  }

  option CYGSEM_WALLCLOCK_SET_GET_MODE{
    display "Wallclock set/get mode"
    calculated [CYGSEM_WALLCLOCK_MODE == "set_get" ? 1 : 0 ]
  }

  component CYGPKG_IO_WALLCLOCK_IMPLEMENTATION{
    display "Wallclock implementation"
    flavor none 

    option CYGPKG_WALLCLOCK_EMULATE{
      display "Wallclock emulator"
      default_value [0 == CYGINT_WALLCLOCK_HW_IMPLEMENTATIONS ]
      implements [CYGINT_WALLCLOCK_IMPLEMENTATIONS ]
      requires [CYGPKG_KERNEL ]
    }

    option CYGIMP_WALLCLOCK_NONE{
      display "No wallclock"
      default_value [!CYGPKG_KERNEL && 0 == CYGINT_WALLCLOCK_HW_IMPLEMENTATIONS ]
      implements [CYGINT_WALLCLOCK_IMPLEMENTATIONS ]
    }
  }

  component CYGPKG_IO_WALLCLOCK_OPTIONS{
    display "Wallclock build options"
    flavor none 

    option CYGPKG_IO_WALLCLOCK_CFLAGS_ADD{
      display "Additional compiler flags"
      default_value ["" ]
      flavor data 
    }

    option CYGPKG_IO_WALLCLOCK_CFLAGS_REMOVE{
      display "Suppressed compiler flags"
      default_value ["" ]
      flavor data 
    }

    option CYGPKG_IO_WALLCLOCK_TESTS{
      display "Wallclock tests"
      calculated [CYGPKG_KERNEL ? "tests/wallclock tests/wallclock2" : "" ]
      flavor data 
    }
  }
}

package CYGPKG_ERROR{
  display "Common error code support"
  implements [CYGINT_ISO_ERRNO_CODES ]
  requires [CYGBLD_ISO_ERRNO_CODES_HEADER == "<cyg/error/codes.h>" ]

  component CYGPKG_ERROR_ERRNO{
    display "errno variable"
    implements [CYGINT_ISO_ERRNO ]
    requires [CYGBLD_ISO_ERRNO_HEADER == "<cyg/error/errno.h>" ]
    default_value [1 ]
    flavor bool 

    option CYGSEM_ERROR_PER_THREAD_ERRNO{
      display "Per-thread errno"
      requires [CYGVAR_KERNEL_THREADS_DATA ]
      default_value [1 ]
    }

    option CYGNUM_ERROR_ERRNO_TRACE_LEVEL{
      display "Tracing level"
      legal_values [0 to 1 ]
      default_value [0 ]
      flavor data 
    }
  }

  option CYGPKG_ERROR_STRERROR{
    display "strerror function"
    implements [CYGINT_ISO_STRERROR ]
    requires [CYGBLD_ISO_STRERROR_HEADER == "<cyg/error/strerror.h>" ]
    default_value [1 ]
    flavor bool 
  }

  component CYGPKG_ERROR_OPTIONS{
    display "Error package build options"
    flavor none 

    option CYGPKG_ERROR_CFLAGS_ADD{
      display "Additional compiler flags"
      default_value ["" ]
      flavor data 
    }

    option CYGPKG_ERROR_CFLAGS_REMOVE{
      display "Suppressed compiler flags"
      default_value ["" ]
      flavor data 
    }
  }
}

package CYGPKG_NET_LWIP{
  display "lwIP"
  requires [(CYGPKG_LWIP_ETH == 1) || (CYGPKG_LWIP_SLIP == 1) || (CYGPKG_LWIP_PPP == 1) ]
  implements [CYGPKG_NET_STACK ]
  implements [CYGPKG_NET_STACK_INET ]

  interface CYGPKG_NET_STACK{
    display "Suitable network stack implementation"
  }

  interface CYGPKG_NET_STACK_INET{
    display "Network stack support for IPv4"
  }

  interface CYGPKG_NET_STACK_INET6{
    display "Network stack support for IPv6"
  }

  option CYGDBG_LWIP_STATS{
    display "Maintain traffic statistics"
    default_value [0 ]
    flavor bool 
  }

  component CYGDBG_LWIP_DEBUG{
    display "Support printing debug information"
    default_value [0 ]
    flavor bool 

    option CYGDBG_LWIP_DEBUG_TCP{
      display "Control TCP debug"
      default_value [0 ]
      flavor bool 
    }
  }

  option CYGDBG_LWIP_ASSERTS{
    display "Enable assertions"
    default_value [0 ]
    flavor bool 
  }

  component CYGPKG_LWIP_IPV4_CONF{
    display "IPV4 netconf"
    flavor none 

    option CYGDAT_LWIP_SERV_ADDR{
      display "Gateway IP"
      default_value ["192,168,1,1" ]
      flavor data 
    }

    option CYGDAT_LWIP_MY_ADDR{
      display "My IP"
      default_value ["192,168,1,222" ]
      flavor data 
    }

    option CYGDAT_LWIP_NETMASK{
      display "Netmask"
      default_value ["255,255,255,0" ]
      flavor data 
    }
  }

  component CYGPKG_LWIP_MEM_OPTIONS{
    display "Memory options"
    flavor none 

    option CYGNUM_LWIP_MEM_ALIGNMENT{
      display "Memory alignment"
      default_value [4 ]
      flavor data 
    }

    option CYGNUM_LWIP_MEM_SIZE{
      display "Memory size"
      default_value [4000 ]
      flavor data 
    }

    option CYGNUM_LWIP_MEMP_NUM_PBUF{
      display "Number of memp struct pbufs"
      default_value [8 ]
      flavor data 
    }

    option CYGNUM_LWIP_MEMP_NUM_UDP_PCB{
      display "Simultaneous UDP control blocks "
      default_value [4 ]
      flavor data 
    }

    option CYGNUM_LWIP_MEMP_NUM_TCP_PCB{
      display "Simultaneous active TCP connections "
      default_value [5 ]
      flavor data 
    }

    option CYGNUM_LWIP_MEMP_NUM_TCP_PCB_LISTEN{
      display "Listening TCP connections"
      default_value [8 ]
      flavor data 
    }

    option CYGNUM_LWIP_MEMP_NUM_TCP_SEG{
      display "Simultaneous TCP segments queued"
      default_value [8 ]
      flavor data 
    }

    option CYGNUM_LWIP_MEMP_NUM_SYS_TIMEOUT{
      display "Simultaneous active timeouts"
      default_value [CYGPKG_LWIP_DHCP ? 6 : 4 ]
      flavor data 
    }

    component CYGPKG_LWIP_MEM_SEQ_API{
      display "Sequential API settings"
      flavor none 

      option CYGNUM_LWIP_MEMP_NUM_NETBUF{
        display "Struct netbufs"
        default_value [2 ]
        flavor data 
      }

      option CYGNUM_LWIP_MEMP_NUM_NETCONN{
        display "Struct netconns"
        default_value [4 ]
        flavor data 
      }

      option CYGNUM_LWIP_MEMP_NUM_APIMSG{
        display "Struct api_msgs"
        default_value [8 ]
        flavor data 
      }

      option CYGNUM_LWIP_MEMP_NUM_TCPIP_MSG{
        display "Struct tcpip_msgs"
        default_value [8 ]
        flavor data 
      }
    }
  }

  component CYGPKG_LWIP_PBUF_OPTIONS{
    display "PBUF"
    flavor none 

    option CYGNUM_LWIP_PBUF_POOL_SIZE{
      display "PBUF pool size"
      default_value [60 ]
      flavor data 
    }

    option CYGNUM_LWIP_PBUF_POOL_BUFSIZE{
      display "PBUF buffer size"
      default_value [1024 ]
      flavor data 
    }

    option CYGNUM_LWIP_PBUF_LINK_HLEN{
      display "Allocation for a link level header"
      calculated [CYGPKG_LWIP_SLIP || CYGPKG_LWIP_PPP ? 0 : 16 ]
      flavor data 
    }
  }

  component CYGPKG_LWIP_TCP{
    display "TCP"
    default_value [1 ]
    flavor bool 

    option CYGNUM_LWIP_TCP_TTL{
      display "Time To Live"
      default_value [255 ]
      flavor data 
    }

    option CYGIMP_LWIP_TCP_QUEUE_OOSEQ{
      display "Queue segments"
      default_value [1 ]
      flavor bool 
    }

    option CYGNUM_LWIP_TCP_MSS{
      display "Maximum segment size"
      default_value [2048 ]
      flavor data 
    }

    option CYGNUM_LWIP_TCP_SND_BUF{
      display "Sender buffer space"
      default_value [2048 ]
      flavor data 
    }

    option CYGNUM_LWIP_TCP_SND_QUEUELEN{
      display "Sender pbufs"
      calculated [CYGPKG_LWIP_TCP ? 4 * CYGNUM_LWIP_TCP_SND_BUF/CYGNUM_LWIP_TCP_MSS : 0 ]
      flavor data 
    }

    option CYGNUM_LWIP_TCP_WND{
      display "Receive window"
      default_value [4096 ]
      flavor data 
    }

    option CYGNUM_LWIP_TCP_MAXRTX{
      display "Segment retransmissions"
      default_value [12 ]
      flavor data 
    }

    option CYGNUM_LWIP_TCP_SYNMAXRTX{
      display "Syn retransmissions"
      default_value [4 ]
      flavor data 
    }
  }

  component CYGPKG_LWIP_ARP_OPTIONS{
    display "ARP"
    flavor none 

    option CYGNUM_LWIP_ARP_TABLE_SIZE{
      display "ARP table size"
      default_value [10 ]
      flavor data 
    }
  }

  component CYGPKG_LWIP_IP{
    display "IP"
    flavor none 

    option CYGFUN_LWIP_IP_FORWARD{
      display "Support IP forwarding"
      default_value [1 ]
      flavor bool 
    }

    option CYGFUN_LWIP_IP_OPTIONS{
      display "Allow IP options"
      default_value [1 ]
      flavor bool 
    }

    option CYGFUN_LWIP_IP_FRAG{
      display "Support IP fragmentation"
      default_value [1 ]
      flavor bool 
    }

    option CYGFUN_LWIP_IP_REASS{
      display "Support IP reassembly"
      default_value [1 ]
      flavor bool 
    }
  }

  component CYGPKG_LWIP_ICMP_OPTIONS{
    display "ICMP"
    flavor none 

    option CYGNUM_LWIP_ICMP_TTL{
      display "ICMP Time To Live"
      default_value [255 ]
      flavor data 
    }
  }

  component CYGPKG_LWIP_DHCP{
    display "DHCP"
    requires [CYGPKG_LWIP_UDP ]
    default_value [0 ]
    requires [CYGNUM_LWIP_MEMP_NUM_SYS_TIMEOUT >= 6 ]
    flavor bool 

    option CYGOPT_LWIP_DHCP_MANAGEMENT{
      display "DHCP management"
      default_value [1 ]
      flavor bool 
    }

    option CYGOPT_LWIP_DHCP_DOES_ARP_CHECK{
      display "Check offered address"
      default_value [1 ]
      flavor bool 
    }
  }

  component CYGFUN_LWIP_LOOPIF{
    display "Support loop interface (127.0.0.1)"
    default_value [1 ]
    flavor bool 
  }

  component CYGPKG_LWIP_ETH{
    display "Ethernet support"
    requires [CYGPKG_IO_ETH_DRIVERS ]
    default_value [1 ]
    flavor bool 

    option CYGNUM_LWIP_ETH_THREAD_PRIORITY{
      display "ethernet input thread priority"
      default_value [6 ]
      flavor data 
    }
  }

  option CYGNUM_LWIP_NETWORK_THREAD_PRIORITY{
    display "Network thread priority"
    default_value [7 ]
    flavor data 
  }

  component CYGPKG_LWIP_SLIP{
    display "SLIP"
    requires [CYGPKG_IO_SERIAL_DEVICES ]
    default_value [0 ]
    flavor bool 

    option CYGNUM_LWIP_SLIPIF_THREAD_PRIORITY{
      display "SLIP thread priority"
      default_value [8 ]
      flavor data 
    }

    option CYGDAT_LWIP_SLIP_DEV{
      display "Serial device"
      default_value ["\"/dev/ser0\"" ]
      flavor data 
    }
  }

  component CYGPKG_LWIP_PPP{
    display "PPP"
    requires [CYGPKG_IO_SERIAL_DEVICES ]
    default_value [0 ]
    flavor bool 

    option CYGIMP_LWIP_PPP_PAP_AUTH{
      display "Support PAP authentication"
      default_value [1 ]
      flavor bool 
    }

    option CYGIMP_LWIP_PPP_CHAP_AUTH{
      display "Support CHAP authentication"
      default_value [1 ]
      flavor bool 
    }

    option CYGDAT_LWIP_PPP_DEV{
      display "Serial device for PPP"
      default_value ["\"/dev/ser0\"" ]
      flavor data 
    }

    option CYGNUM_LWIP_PPP_THREAD_PRIORITY{
      display "PPP main thread priority"
      default_value [8 ]
      flavor data 
    }
  }

  component CYGPKG_LWIP_UDP{
    display "UDP"
    default_value [1 ]
    flavor bool 

    option CYGNUM_LWIP_UDP_TTL{
      display "Time To Live"
      default_value [255 ]
      flavor data 
    }
  }

  option CYGFUN_LWIP_RAW{
    display "Enable RAW socket support"
    default_value [1 ]
    flavor bool 
  }

  option CYGFUN_LWIP_COMPAT_SOCKETS{
    display "Provide compatible socket API"
    default_value [1 ]
    flavor bool 
  }

  component CYGPKG_LWIP_APP_MEM_OPTIONS{
    display "Memory options for apps"
    flavor none 

    option CYGNUM_LWIP_VARMEMPOOL_SIZE{
      display "Size of variable memory pool"
      default_value [2048 ]
      flavor data 
    }

    option CYGNUM_LWIP_APP_THREADS{
      display "Number of network threads in application"
      default_value [1 ]
      flavor data 
    }

    option CYGNUM_LWIP_THREAD_STACK_SIZE{
      display "Size of per thread stack in lwIP"
      default_value [4096 ]
      flavor data 
    }
  }

  option CYGPKG_NET_LWIP_TESTS{
    display "Some lwIP tests"
    calculated ["tests/tcpecho tests/udpecho tests/httpd tests/socket tests/nc_test_slave tests/sys_timeout" ]
    flavor data 
  }
}
