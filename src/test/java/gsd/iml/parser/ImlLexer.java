/* The following code was generated by JFlex 1.4.3 on 04/08/11 2:54 PM */

package gsd.iml.parser;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 04/08/11 2:54 PM from the specification file
 * <tt>src/gsd/iml/parser/ImlLexer.jflex</tt>
 */
public class ImlLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\52"+
    "\1\71\1\0\1\6\1\61\1\56\1\72\1\62\1\63\1\5\1\13"+
    "\1\70\1\20\1\17\1\4\1\10\3\73\4\16\2\11\1\54\1\0"+
    "\1\51\1\55\1\50\1\53\1\0\4\15\1\12\1\15\21\6\1\14"+
    "\2\6\1\66\1\21\1\67\1\60\1\46\1\0\1\24\1\44\1\36"+
    "\1\30\1\35\1\22\1\43\1\6\1\31\1\6\1\42\1\23\1\41"+
    "\1\40\1\26\1\33\1\47\1\27\1\32\1\37\1\45\1\25\1\6"+
    "\1\14\1\34\1\6\1\64\1\57\1\65\1\0\41\7\2\0\4\6"+
    "\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6"+
    "\1\0\37\6\1\0\u013f\6\31\0\162\6\4\0\14\6\16\0\5\6"+
    "\11\0\1\6\21\0\130\7\5\0\23\7\12\0\1\6\13\0\1\6"+
    "\1\0\3\6\1\0\1\6\1\0\24\6\1\0\54\6\1\0\46\6"+
    "\1\0\5\6\4\0\202\6\1\0\4\7\3\0\105\6\1\0\46\6"+
    "\2\0\2\6\6\0\20\6\41\0\46\6\2\0\1\6\7\0\47\6"+
    "\11\0\21\7\1\0\27\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\1\0\1\7\13\0\33\6\5\0\3\6\15\0\4\7\14\0\6\7"+
    "\13\0\32\6\5\0\13\6\16\7\7\0\12\7\4\0\2\6\1\7"+
    "\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7"+
    "\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6"+
    "\33\7\2\0\3\6\60\0\46\6\13\7\1\6\u014f\0\3\7\66\6"+
    "\2\0\1\7\1\6\20\7\2\0\1\6\4\7\3\0\12\6\2\7"+
    "\2\0\12\7\21\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7"+
    "\2\0\2\7\2\0\3\7\11\0\1\7\4\0\2\6\1\0\3\6"+
    "\2\7\2\0\12\7\4\6\15\0\3\7\1\0\6\6\4\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\13\0\4\6"+
    "\1\0\1\6\7\0\14\7\3\6\14\0\3\7\1\0\11\6\1\0"+
    "\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0"+
    "\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0"+
    "\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\7\1\6\6\7\3\0\2\7\2\0\3\7\10\0\2\7"+
    "\4\0\2\6\1\0\3\6\4\0\12\7\1\0\1\6\20\0\1\7"+
    "\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0"+
    "\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\10\6\1\0"+
    "\3\6\4\0\5\7\3\0\3\7\1\0\4\7\11\0\1\7\17\0"+
    "\11\7\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6\1\0"+
    "\27\6\1\0\12\6\1\0\5\6\4\0\7\7\1\0\3\7\1\0"+
    "\4\7\7\0\2\7\11\0\2\6\4\0\12\7\22\0\2\7\1\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0"+
    "\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0"+
    "\1\6\1\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\20\6\4\0\6\7\2\0\3\7\1\0"+
    "\4\7\11\0\1\7\10\0\2\6\4\0\12\7\22\0\2\7\1\0"+
    "\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0"+
    "\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7\15\0"+
    "\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7\47\0"+
    "\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0"+
    "\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0"+
    "\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0"+
    "\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0\2\6\42\0"+
    "\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0"+
    "\1\7\4\0\2\7\10\6\1\0\42\6\6\0\24\7\1\0\2\7"+
    "\4\6\4\0\10\7\1\0\44\7\11\0\1\7\71\0\42\6\1\0"+
    "\5\6\1\0\2\6\1\0\7\7\3\0\4\7\6\0\12\7\6\0"+
    "\6\6\4\7\106\0\46\6\12\0\51\6\7\0\132\6\5\0\104\6"+
    "\5\0\122\6\6\0\7\6\1\0\77\6\1\0\1\6\1\0\4\6"+
    "\2\0\7\6\1\0\1\6\1\0\4\6\2\0\47\6\1\0\1\6"+
    "\1\0\4\6\2\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6"+
    "\1\0\1\6\1\0\4\6\2\0\7\6\1\0\7\6\1\0\27\6"+
    "\1\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\47\6"+
    "\1\0\23\6\16\0\11\7\56\0\125\6\14\0\u026c\6\2\0\10\6"+
    "\12\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6"+
    "\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0"+
    "\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6"+
    "\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6\10\0"+
    "\51\6\1\7\126\0\35\6\3\0\14\7\4\0\14\7\12\0\12\7"+
    "\36\6\2\0\5\6\u038b\0\154\6\224\0\234\6\4\0\132\6\6\0"+
    "\26\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0"+
    "\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0"+
    "\6\6\4\0\15\6\5\0\3\6\1\0\7\6\17\0\4\7\32\0"+
    "\5\7\20\0\2\6\23\0\1\6\13\0\4\7\6\0\6\7\1\0"+
    "\1\6\15\0\1\6\40\0\22\6\36\0\15\7\4\0\1\7\3\0"+
    "\6\7\27\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0"+
    "\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\3\6\1\0\7\6\3\0\3\6\5\0\5\6\26\0\44\6\u0e81\0"+
    "\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6"+
    "\2\0\2\7\2\0\3\6\1\0\137\6\5\0\50\6\4\0\136\6"+
    "\21\0\30\6\70\0\20\6\u0200\0\u19b6\6\112\0\u51a6\6\132\0\u048d\6"+
    "\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0\7\6\14\0\5\6"+
    "\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6"+
    "\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6"+
    "\2\0\66\6\50\0\15\6\3\0\20\7\20\0\4\7\17\0\2\6"+
    "\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7"+
    "\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6"+
    "\12\0\132\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6"+
    "\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\1\11\14\5\1\12\1\13\1\14\1\15\1\16"+
    "\1\1\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\2\34\1\1"+
    "\1\35\1\2\1\0\1\36\2\0\1\37\1\0\1\40"+
    "\16\5\1\41\2\5\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\2\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\2\0\1\64\1\0"+
    "\1\65\1\0\21\5\1\53\1\0\1\37\1\0\5\5"+
    "\1\66\14\5\1\67\1\70\23\5\1\71\2\5\1\72"+
    "\22\5\1\73\7\5\1\74\1\5\1\75\5\5\1\76"+
    "\12\5\1\77\1\5\1\100\2\5\1\101\1\102\1\103"+
    "\1\5\1\104\2\5\1\105\3\5\1\106\1\107\1\110"+
    "\2\5\1\111\1\112\1\5\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\170\0\360\0\170\0\u012c"+
    "\0\u0168\0\u01a4\0\170\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0"+
    "\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0"+
    "\0\u04ec\0\u0528\0\u0564\0\u05a0\0\170\0\170\0\u05dc\0\u0618"+
    "\0\u0654\0\170\0\170\0\170\0\170\0\170\0\170\0\170"+
    "\0\170\0\170\0\170\0\u0690\0\u06cc\0\170\0\u0708\0\170"+
    "\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\170"+
    "\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c"+
    "\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u012c\0\u0c30"+
    "\0\u0c6c\0\170\0\170\0\170\0\170\0\170\0\170\0\170"+
    "\0\170\0\170\0\u0ca8\0\u0ce4\0\170\0\170\0\170\0\170"+
    "\0\170\0\170\0\170\0\170\0\u0d20\0\u0d5c\0\u0834\0\u0d98"+
    "\0\u0dd4\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c"+
    "\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c"+
    "\0\u1158\0\u1194\0\u11d0\0\170\0\u120c\0\u1248\0\u1248\0\u1284"+
    "\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u012c\0\u13b0\0\u13ec\0\u1428"+
    "\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608"+
    "\0\u1644\0\u012c\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac"+
    "\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c"+
    "\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u012c\0\u1b30"+
    "\0\u1b6c\0\u012c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4"+
    "\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4"+
    "\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u012c\0\u1fe0\0\u201c\0\u2058"+
    "\0\u2094\0\u20d0\0\u210c\0\u2148\0\u012c\0\u2184\0\u012c\0\u21c0"+
    "\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u012c\0\u22ec\0\u2328\0\u2364"+
    "\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u012c"+
    "\0\u2544\0\u012c\0\u2580\0\u25bc\0\u012c\0\u012c\0\u012c\0\u25f8"+
    "\0\u012c\0\u2634\0\u2670\0\u012c\0\u26ac\0\u26e8\0\u2724\0\u012c"+
    "\0\u012c\0\u012c\0\u2760\0\u279c\0\u012c\0\u012c\0\u27d8\0\u012c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\1\10\1\13\2\10\1\12\1\14\1\15\1\3"+
    "\1\16\1\17\1\20\1\10\1\21\1\22\1\23\1\24"+
    "\1\10\1\25\2\10\1\26\1\27\1\30\3\10\1\31"+
    "\3\10\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\3\1\12\1\54\1\55\1\56"+
    "\16\54\1\57\47\54\1\60\2\54\76\0\1\5\75\0"+
    "\1\61\1\62\74\0\5\10\1\0\3\10\3\0\26\10"+
    "\23\0\1\10\10\0\1\63\1\64\2\0\1\65\1\0"+
    "\1\63\1\66\53\0\1\63\10\0\2\12\1\67\3\0"+
    "\1\12\1\66\15\0\1\67\35\0\1\12\10\0\2\66"+
    "\4\0\1\66\54\0\1\66\20\0\1\70\61\0\5\10"+
    "\1\0\3\10\3\0\1\10\1\71\24\10\23\0\1\10"+
    "\6\0\5\10\1\0\3\10\3\0\13\10\1\72\12\10"+
    "\23\0\1\10\6\0\5\10\1\0\3\10\3\0\14\10"+
    "\1\73\11\10\23\0\1\10\6\0\5\10\1\0\3\10"+
    "\3\0\11\10\1\74\14\10\23\0\1\10\6\0\5\10"+
    "\1\0\3\10\3\0\13\10\1\75\12\10\23\0\1\10"+
    "\6\0\5\10\1\0\3\10\3\0\2\10\1\76\4\10"+
    "\1\77\3\10\1\100\12\10\23\0\1\10\6\0\5\10"+
    "\1\0\3\10\3\0\10\10\1\101\5\10\1\102\1\103"+
    "\6\10\23\0\1\10\6\0\5\10\1\0\3\10\3\0"+
    "\2\10\1\104\23\10\23\0\1\10\6\0\5\10\1\0"+
    "\3\10\3\0\2\10\1\105\1\10\1\106\21\10\23\0"+
    "\1\10\6\0\5\10\1\0\3\10\3\0\4\10\1\107"+
    "\21\10\23\0\1\10\6\0\5\10\1\0\3\10\3\0"+
    "\4\10\1\110\21\10\23\0\1\10\6\0\5\10\1\0"+
    "\3\10\3\0\4\10\1\111\21\10\23\0\1\10\50\0"+
    "\1\112\4\0\1\113\67\0\1\114\3\0\1\115\73\0"+
    "\1\116\73\0\1\117\74\0\1\120\74\0\1\121\14\0"+
    "\1\54\2\0\16\54\1\0\47\54\1\0\2\54\2\0"+
    "\1\56\71\0\2\122\1\0\5\122\1\123\5\122\1\124"+
    "\2\122\1\125\1\126\4\122\1\127\7\122\1\130\1\131"+
    "\3\122\1\132\24\122\1\133\1\134\1\123\1\61\1\4"+
    "\1\5\71\61\5\135\1\136\66\135\10\0\1\63\1\64"+
    "\4\0\1\63\1\66\53\0\1\63\10\0\2\64\4\0"+
    "\1\64\1\66\53\0\1\64\10\0\3\137\2\0\2\137"+
    "\3\0\1\137\1\0\1\137\3\0\1\137\4\0\2\137"+
    "\5\0\1\137\26\0\1\137\10\0\2\66\1\140\3\0"+
    "\1\66\16\0\1\140\35\0\1\66\10\0\2\141\1\0"+
    "\1\142\2\0\1\141\54\0\1\141\6\0\5\10\1\0"+
    "\3\10\3\0\2\10\1\143\23\10\23\0\1\10\6\0"+
    "\5\10\1\0\3\10\3\0\21\10\1\144\4\10\23\0"+
    "\1\10\6\0\5\10\1\0\3\10\3\0\15\10\1\145"+
    "\10\10\23\0\1\10\6\0\5\10\1\0\3\10\3\0"+
    "\15\10\1\146\10\10\23\0\1\10\6\0\5\10\1\0"+
    "\3\10\3\0\25\10\1\147\23\0\1\10\6\0\5\10"+
    "\1\0\3\10\3\0\15\10\1\150\10\10\23\0\1\10"+
    "\6\0\5\10\1\0\3\10\3\0\10\10\1\151\15\10"+
    "\23\0\1\10\6\0\5\10\1\0\3\10\3\0\1\152"+
    "\7\10\1\153\15\10\23\0\1\10\6\0\5\10\1\0"+
    "\3\10\3\0\24\10\1\154\1\10\23\0\1\10\6\0"+
    "\5\10\1\0\3\10\3\0\15\10\1\155\10\10\23\0"+
    "\1\10\6\0\5\10\1\0\3\10\3\0\11\10\1\156"+
    "\14\10\23\0\1\10\6\0\5\10\1\0\3\10\3\0"+
    "\14\10\1\157\11\10\23\0\1\10\6\0\5\10\1\0"+
    "\3\10\3\0\1\10\1\160\24\10\23\0\1\10\6\0"+
    "\5\10\1\0\3\10\3\0\17\10\1\161\6\10\23\0"+
    "\1\10\6\0\5\10\1\0\3\10\3\0\16\10\1\162"+
    "\7\10\23\0\1\10\6\0\5\10\1\0\3\10\3\0"+
    "\4\10\1\163\21\10\23\0\1\10\10\0\1\124\5\0"+
    "\1\124\54\0\1\124\10\0\1\164\5\0\1\164\54\0"+
    "\1\164\5\135\1\165\66\135\4\0\1\5\1\136\76\0"+
    "\2\166\1\0\1\167\2\0\1\166\1\0\1\167\52\0"+
    "\1\166\10\0\2\141\4\0\1\141\54\0\1\141\6\0"+
    "\5\10\1\0\3\10\3\0\3\10\1\170\22\10\23\0"+
    "\1\10\6\0\5\10\1\0\3\10\3\0\2\10\1\171"+
    "\23\10\23\0\1\10\6\0\5\10\1\0\3\10\3\0"+
    "\7\10\1\172\16\10\23\0\1\10\6\0\5\10\1\0"+
    "\3\10\3\0\7\10\1\173\16\10\23\0\1\10\6\0"+
    "\5\10\1\0\3\10\3\0\23\10\1\174\2\10\23\0"+
    "\1\10\6\0\5\10\1\0\3\10\3\0\2\10\1\175"+
    "\23\10\23\0\1\10\6\0\5\10\1\0\3\10\3\0"+
    "\11\10\1\176\14\10\23\0\1\10\6\0\5\10\1\0"+
    "\3\10\3\0\2\10\1\177\23\10\23\0\1\10\6\0"+
    "\5\10\1\0\3\10\3\0\14\10\1\200\11\10\23\0"+
    "\1\10\6\0\5\10\1\0\3\10\3\0\1\10\1\201"+
    "\1\202\5\10\1\203\2\10\1\204\12\10\23\0\1\10"+
    "\6\0\5\10\1\0\3\10\3\0\13\10\1\205\12\10"+
    "\23\0\1\10\6\0\5\10\1\0\3\10\3\0\1\10"+
    "\1\206\24\10\23\0\1\10\6\0\5\10\1\0\3\10"+
    "\3\0\20\10\1\207\5\10\23\0\1\10\6\0\5\10"+
    "\1\0\3\10\3\0\14\10\1\210\11\10\23\0\1\10"+
    "\6\0\5\10\1\0\3\10\3\0\11\10\1\211\14\10"+
    "\23\0\1\10\6\0\5\10\1\0\3\10\3\0\13\10"+
    "\1\212\12\10\23\0\1\10\6\0\5\10\1\0\3\10"+
    "\3\0\1\10\1\213\24\10\23\0\1\10\4\135\1\5"+
    "\1\165\66\135\10\0\2\166\4\0\1\166\54\0\1\166"+
    "\6\0\5\10\1\0\3\10\3\0\4\10\1\214\21\10"+
    "\23\0\1\10\6\0\5\10\1\0\3\10\3\0\1\10"+
    "\1\215\24\10\23\0\1\10\6\0\5\10\1\0\3\10"+
    "\3\0\3\10\1\216\22\10\23\0\1\10\6\0\5\10"+
    "\1\0\3\10\3\0\4\10\1\217\21\10\23\0\1\10"+
    "\6\0\5\10\1\0\3\10\3\0\7\10\1\220\16\10"+
    "\23\0\1\10\6\0\5\10\1\0\3\10\3\0\1\10"+
    "\1\221\24\10\23\0\1\10\6\0\5\10\1\0\3\10"+
    "\3\0\23\10\1\222\2\10\23\0\1\10\6\0\5\10"+
    "\1\0\3\10\3\0\5\10\1\223\20\10\23\0\1\10"+
    "\6\0\5\10\1\0\3\10\3\0\4\10\1\224\21\10"+
    "\23\0\1\10\6\0\5\10\1\0\3\10\3\0\14\10"+
    "\1\225\11\10\23\0\1\10\6\0\5\10\1\0\3\10"+
    "\3\0\23\10\1\226\2\10\23\0\1\10\6\0\5\10"+
    "\1\0\3\10\3\0\16\10\1\227\7\10\23\0\1\10"+
    "\6\0\5\10\1\0\3\10\3\0\5\10\1\230\20\10"+
    "\23\0\1\10\6\0\5\10\1\0\3\10\3\0\7\10"+
    "\1\231\3\10\1\232\12\10\23\0\1\10\6\0\5\10"+
    "\1\0\3\10\3\0\2\10\1\233\23\10\23\0\1\10"+
    "\6\0\5\10\1\0\3\10\3\0\23\10\1\234\2\10"+
    "\23\0\1\10\6\0\5\10\1\0\3\10\3\0\4\10"+
    "\1\235\21\10\23\0\1\10\6\0\5\10\1\0\3\10"+
    "\3\0\6\10\1\236\17\10\23\0\1\10\6\0\5\10"+
    "\1\0\3\10\3\0\5\10\1\237\20\10\23\0\1\10"+
    "\6\0\5\10\1\0\3\10\3\0\24\10\1\240\1\10"+
    "\23\0\1\10\6\0\5\10\1\0\3\10\3\0\13\10"+
    "\1\241\12\10\23\0\1\10\6\0\5\10\1\0\3\10"+
    "\3\0\16\10\1\242\7\10\23\0\1\10\6\0\5\10"+
    "\1\0\3\10\3\0\5\10\1\243\20\10\23\0\1\10"+
    "\6\0\5\10\1\0\3\10\3\0\2\10\1\244\23\10"+
    "\23\0\1\10\6\0\5\10\1\0\3\10\3\0\1\10"+
    "\1\245\24\10\23\0\1\10\6\0\5\10\1\0\3\10"+
    "\3\0\7\10\1\246\16\10\23\0\1\10\6\0\5\10"+
    "\1\0\3\10\3\0\2\10\1\247\23\10\23\0\1\10"+
    "\6\0\5\10\1\0\3\10\3\0\15\10\1\250\10\10"+
    "\23\0\1\10\6\0\5\10\1\0\3\10\3\0\22\10"+
    "\1\251\3\10\23\0\1\10\6\0\5\10\1\0\3\10"+
    "\3\0\2\10\1\252\23\10\23\0\1\10\6\0\5\10"+
    "\1\0\3\10\3\0\1\253\25\10\23\0\1\10\6\0"+
    "\5\10\1\0\3\10\3\0\13\10\1\254\12\10\23\0"+
    "\1\10\6\0\5\10\1\0\3\10\3\0\17\10\1\255"+
    "\6\10\23\0\1\10\6\0\5\10\1\0\3\10\3\0"+
    "\21\10\1\256\4\10\23\0\1\10\6\0\5\10\1\0"+
    "\3\10\3\0\1\10\1\257\24\10\23\0\1\10\6\0"+
    "\5\10\1\0\3\10\3\0\16\10\1\260\7\10\23\0"+
    "\1\10\6\0\5\10\1\0\3\10\3\0\2\10\1\261"+
    "\23\10\23\0\1\10\6\0\5\10\1\0\3\10\3\0"+
    "\3\10\1\262\22\10\23\0\1\10\6\0\5\10\1\0"+
    "\3\10\3\0\24\10\1\263\1\10\23\0\1\10\6\0"+
    "\5\10\1\0\3\10\3\0\13\10\1\264\12\10\23\0"+
    "\1\10\6\0\5\10\1\0\3\10\3\0\12\10\1\265"+
    "\13\10\23\0\1\10\6\0\5\10\1\0\3\10\3\0"+
    "\15\10\1\266\10\10\23\0\1\10\6\0\5\10\1\0"+
    "\3\10\3\0\11\10\1\267\14\10\23\0\1\10\6\0"+
    "\5\10\1\0\3\10\3\0\6\10\1\270\17\10\23\0"+
    "\1\10\6\0\5\10\1\0\3\10\3\0\7\10\1\271"+
    "\16\10\23\0\1\10\6\0\5\10\1\0\3\10\3\0"+
    "\10\10\1\272\15\10\23\0\1\10\6\0\5\10\1\0"+
    "\3\10\3\0\22\10\1\273\3\10\23\0\1\10\6\0"+
    "\5\10\1\0\3\10\3\0\2\10\1\274\23\10\23\0"+
    "\1\10\6\0\5\10\1\0\3\10\3\0\10\10\1\275"+
    "\15\10\23\0\1\10\6\0\5\10\1\0\3\10\3\0"+
    "\13\10\1\276\12\10\23\0\1\10\6\0\5\10\1\0"+
    "\3\10\3\0\13\10\1\277\12\10\23\0\1\10\6\0"+
    "\5\10\1\0\3\10\3\0\2\10\1\300\23\10\23\0"+
    "\1\10\6\0\5\10\1\0\3\10\3\0\13\10\1\301"+
    "\12\10\23\0\1\10\6\0\5\10\1\0\3\10\3\0"+
    "\15\10\1\302\10\10\23\0\1\10\6\0\5\10\1\0"+
    "\3\10\3\0\2\10\1\303\23\10\23\0\1\10\6\0"+
    "\5\10\1\0\3\10\3\0\7\10\1\304\16\10\23\0"+
    "\1\10\6\0\5\10\1\0\3\10\3\0\10\10\1\305"+
    "\15\10\23\0\1\10\6\0\5\10\1\0\3\10\3\0"+
    "\24\10\1\306\1\10\23\0\1\10\6\0\5\10\1\0"+
    "\3\10\3\0\15\10\1\307\10\10\23\0\1\10\6\0"+
    "\5\10\1\0\3\10\3\0\13\10\1\310\12\10\23\0"+
    "\1\10\6\0\5\10\1\0\3\10\3\0\3\10\1\311"+
    "\22\10\23\0\1\10\6\0\5\10\1\0\3\10\3\0"+
    "\15\10\1\312\10\10\23\0\1\10\6\0\5\10\1\0"+
    "\3\10\3\0\1\10\1\313\24\10\23\0\1\10\6\0"+
    "\5\10\1\0\3\10\3\0\14\10\1\314\11\10\23\0"+
    "\1\10\6\0\5\10\1\0\3\10\3\0\16\10\1\315"+
    "\7\10\23\0\1\10\6\0\5\10\1\0\3\10\3\0"+
    "\15\10\1\316\10\10\23\0\1\10\6\0\5\10\1\0"+
    "\3\10\3\0\16\10\1\317\7\10\23\0\1\10\6\0"+
    "\5\10\1\0\3\10\3\0\2\10\1\320\23\10\23\0"+
    "\1\10\6\0\5\10\1\0\3\10\3\0\1\10\1\321"+
    "\24\10\23\0\1\10\6\0\5\10\1\0\3\10\3\0"+
    "\1\322\25\10\23\0\1\10\6\0\5\10\1\0\3\10"+
    "\3\0\3\10\1\323\22\10\23\0\1\10\6\0\5\10"+
    "\1\0\3\10\3\0\7\10\1\324\16\10\23\0\1\10"+
    "\6\0\5\10\1\0\3\10\3\0\6\10\1\325\17\10"+
    "\23\0\1\10\6\0\5\10\1\0\3\10\3\0\13\10"+
    "\1\326\12\10\23\0\1\10\6\0\5\10\1\0\3\10"+
    "\3\0\5\10\1\327\20\10\23\0\1\10\6\0\5\10"+
    "\1\0\3\10\3\0\13\10\1\330\12\10\23\0\1\10"+
    "\6\0\5\10\1\0\3\10\3\0\13\10\1\331\12\10"+
    "\23\0\1\10\6\0\5\10\1\0\3\10\3\0\15\10"+
    "\1\332\10\10\23\0\1\10\6\0\5\10\1\0\3\10"+
    "\3\0\13\10\1\333\12\10\23\0\1\10\6\0\5\10"+
    "\1\0\3\10\3\0\15\10\1\334\10\10\23\0\1\10"+
    "\6\0\5\10\1\0\3\10\3\0\23\10\1\335\2\10"+
    "\23\0\1\10\6\0\5\10\1\0\3\10\3\0\2\10"+
    "\1\336\23\10\23\0\1\10\6\0\5\10\1\0\3\10"+
    "\3\0\4\10\1\337\21\10\23\0\1\10\6\0\5\10"+
    "\1\0\3\10\3\0\6\10\1\340\17\10\23\0\1\10"+
    "\6\0\5\10\1\0\3\10\3\0\10\10\1\341\15\10"+
    "\23\0\1\10\6\0\5\10\1\0\3\10\3\0\6\10"+
    "\1\342\17\10\23\0\1\10\6\0\5\10\1\0\3\10"+
    "\3\0\13\10\1\343\12\10\23\0\1\10\6\0\5\10"+
    "\1\0\3\10\3\0\1\10\1\344\24\10\23\0\1\10"+
    "\6\0\5\10\1\0\3\10\3\0\16\10\1\345\7\10"+
    "\23\0\1\10\6\0\5\10\1\0\3\10\3\0\10\10"+
    "\1\346\15\10\23\0\1\10\6\0\5\10\1\0\3\10"+
    "\3\0\23\10\1\347\2\10\23\0\1\10\6\0\5\10"+
    "\1\0\3\10\3\0\13\10\1\350\12\10\23\0\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10260];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\3\1\1\11"+
    "\21\1\2\11\3\1\12\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\0\1\1\2\0\1\1\1\0\1\11\21\1"+
    "\11\11\2\1\10\11\2\0\1\1\1\0\1\1\1\0"+
    "\21\1\1\11\1\0\1\1\1\0\161\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer buffer = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }

  /**
   * Assumes correct representation of a long value for
   * specified radix in scanner buffer from <code>start</code>
   * to <code>end</code>.
   */
  private Long parseLong(String value, int radix) {
    long result = 0;
    long digit;

    int start = 0 ;
    int end = value.length() ;

    for (int i = start ; i < end; i++) {
      digit  = Character.digit(value.charAt(i),radix);
      result*= radix;
      result+= digit;
    }

    return new Long(result);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ImlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ImlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1774) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return symbol(Token.ID, yytext());
          }
        case 76: break;
        case 12: 
          { return symbol(Token.NOT);
          }
        case 77: break;
        case 27: 
          { buffer.append( yytext() );
          }
        case 78: break;
        case 34: 
          { return symbol(Token.BT_RIGHT);
          }
        case 79: break;
        case 66: 
          { return symbol(Token.IS_ACTIVE) ;
          }
        case 80: break;
        case 46: 
          { buffer.append( '\r' );
          }
        case 81: break;
        case 29: 
          { yybegin(YYINITIAL); return symbol(Token.STRING_LITERAL, buffer.toString());
          }
        case 82: break;
        case 6: 
          { return symbol(Token.LONG_LITERAL, parseLong(yytext(), 10));
          }
        case 83: break;
        case 49: 
          { buffer.append( '\b' );
          }
        case 84: break;
        case 24: 
          { return symbol(Token.RBRACK);
          }
        case 85: break;
        case 72: 
          { return symbol(Token.CALCULATED) ;
          }
        case 86: break;
        case 7: 
          { return symbol(Token.PLUS);
          }
        case 87: break;
        case 31: 
          { System.err.println(ImlParseMessage.warning
                                        ("Double value found: " + yytext(), yyline+1, yycolumn+1)) ;
                                   return symbol(Token.DOUBLE_FLOATING_POINT_LITERAL, new Double(yytext())) ;
          }
        case 88: break;
        case 17: 
          { return symbol(Token.BT_XOR);
          }
        case 89: break;
        case 50: 
          { buffer.append( '\"' );
          }
        case 90: break;
        case 20: 
          { return symbol(Token.RPAR);
          }
        case 91: break;
        case 61: 
          { return symbol(Token.PACKAGE) ;
          }
        case 92: break;
        case 51: 
          { buffer.append( '\'' );
          }
        case 93: break;
        case 44: 
          { buffer.append( '\\' );
          }
        case 94: break;
        case 19: 
          { return symbol(Token.LPAR);
          }
        case 95: break;
        case 58: 
          { return symbol(Token.OPTION) ;
          }
        case 96: break;
        case 64: 
          { return symbol(Token.ACTIVE_IF) ;
          }
        case 97: break;
        case 59: 
          { return symbol(Token.DISPLAY);
          }
        case 98: break;
        case 9: 
          { return symbol(Token.MINUS);
          }
        case 99: break;
        case 22: 
          { return symbol(Token.RBRACE);
          }
        case 100: break;
        case 23: 
          { return symbol(Token.LBRACK);
          }
        case 101: break;
        case 45: 
          { buffer.append( '\f' );
          }
        case 102: break;
        case 43: 
          { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   buffer.append( val );
          }
        case 103: break;
        case 36: 
          { return symbol(Token.BT_LEFT);
          }
        case 104: break;
        case 14: 
          { return symbol(Token.COLON);
          }
        case 105: break;
        case 55: 
          { return symbol(Token.NONE) ;
          }
        case 106: break;
        case 52: 
          { return symbol(Token.LONG_LITERAL, parseLong(yytext().substring(2, yytext().length()), 16)) ;
          }
        case 107: break;
        case 21: 
          { return symbol(Token.LBRACE);
          }
        case 108: break;
        case 69: 
          { return symbol(Token.COMPONENT) ;
          }
        case 109: break;
        case 30: 
          { return symbol(Token.LONG_LITERAL, parseLong(yytext().substring(1, yytext().length()), 8)) ;
          }
        case 110: break;
        case 25: 
          { return symbol(Token.COMMA);
          }
        case 111: break;
        case 63: 
          { return symbol(Token.BOOLDATA) ;
          }
        case 112: break;
        case 10: 
          { return symbol(Token.GT);
          }
        case 113: break;
        case 56: 
          { return symbol(Token.BOOL) ;
          }
        case 114: break;
        case 3: 
          { return symbol(Token.DIVIDE);
          }
        case 115: break;
        case 26: 
          { yybegin(STRING); buffer = new StringBuffer() ;
          }
        case 116: break;
        case 39: 
          { return symbol(Token.EQ);
          }
        case 117: break;
        case 37: 
          { return symbol(Token.LTEQ);
          }
        case 118: break;
        case 42: 
          { throw new RuntimeException(ImlParseMessage.error("Illegal escape sequence \""+yytext()+"\"", yyline+1, yycolumn+1));
          }
        case 119: break;
        case 75: 
          { return symbol(Token.DEFAULT_VALUE) ;
          }
        case 120: break;
        case 57: 
          { return symbol(Token.FLAVOR) ;
          }
        case 121: break;
        case 67: 
          { return symbol(Token.IS_SUBSTRING) ;
          }
        case 122: break;
        case 65: 
          { return symbol(Token.IS_LOADED) ;
          }
        case 123: break;
        case 70: 
          { return symbol(Token.IS_ENABLED) ;
          }
        case 124: break;
        case 33: 
          { return symbol(Token.TO) ;
          }
        case 125: break;
        case 11: 
          { return symbol(Token.LT);
          }
        case 126: break;
        case 16: 
          { return symbol(Token.BT_OR);
          }
        case 127: break;
        case 18: 
          { return symbol(Token.MOD);
          }
        case 128: break;
        case 73: 
          { return symbol(Token.DESCRIPTION) ;
          }
        case 129: break;
        case 47: 
          { buffer.append( '\t' );
          }
        case 130: break;
        case 74: 
          { return symbol(Token.LEGAL_VALUES) ;
          }
        case 131: break;
        case 1: 
          { throw new RuntimeException(ImlParseMessage.error("Unrecognized character \"" + yytext() + "\"", yyline+1, yycolumn+1));
          }
        case 132: break;
        case 71: 
          { return symbol(Token.IMPLEMENTS) ;
          }
        case 133: break;
        case 54: 
          { return symbol(Token.DATA) ;
          }
        case 134: break;
        case 4: 
          { return symbol(Token.TIMES);
          }
        case 135: break;
        case 32: 
          { return symbol(Token.MINUS_MINUS) ;
          }
        case 136: break;
        case 53: 
          { return symbol(Token.LONG_LITERAL, (long) Double.parseDouble(yytext()));
          }
        case 137: break;
        case 62: 
          { return symbol(Token.REQUIRES) ;
          }
        case 138: break;
        case 2: 
          { /* ignore */
          }
        case 139: break;
        case 35: 
          { return symbol(Token.GTEQ);
          }
        case 140: break;
        case 41: 
          { return symbol(Token.OR);
          }
        case 141: break;
        case 48: 
          { buffer.append( '\n' );
          }
        case 142: break;
        case 38: 
          { return symbol(Token.NEQ);
          }
        case 143: break;
        case 13: 
          { return symbol(Token.QUESTION);
          }
        case 144: break;
        case 8: 
          { return symbol(Token.DOT);
          }
        case 145: break;
        case 15: 
          { return symbol(Token.BT_AND);
          }
        case 146: break;
        case 40: 
          { return symbol(Token.AND);
          }
        case 147: break;
        case 28: 
          { throw new RuntimeException(ImlParseMessage.error("Unterminated string at end of line", yyline+1, yycolumn+1));
          }
        case 148: break;
        case 60: 
          { return symbol(Token.IMPLIES) ;
          }
        case 149: break;
        case 68: 
          { return symbol(Token.INTERFACE) ;
          }
        case 150: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return new Symbol(Token.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
