config X86_32 boolean {
 default [y] if []
}
config GENERIC_TIME boolean {
 default [y] if []
}
config LOCKDEP_SUPPORT boolean {
 default [y] if []
}
config STACKTRACE_SUPPORT boolean {
 default [y] if []
}
config SEMAPHORE_SLEEPERS boolean {
 default [y] if []
}
config X86 boolean {
 default [y] if []
}
config MMU boolean {
 default [y] if []
}
config SBUS boolean {
}
config GENERIC_ISA_DMA boolean {
 default [y] if []
}
config GENERIC_IOMAP boolean {
 default [y] if []
}
config GENERIC_BUG boolean {
 default [y] if [BUG]
 depends on [BUG]
 inherited [BUG]
}
config GENERIC_HWEIGHT boolean {
 default [y] if []
}
config ARCH_MAY_HAVE_PC_FDC boolean {
 default [y] if []
}
config DMI boolean {
 default [y] if []
}
config DEFCONFIG_LIST string {
 depends on [!UML]
 default ["/lib/modules/$UNAME_RELEASE/.config"] if [!UML]
 default ["/etc/kernel-config"] if [!UML]
 default ["/boot/config-$UNAME_RELEASE"] if [!UML]
 default ["arch/$ARCH/defconfig"] if [!UML]
 inherited [!UML]
}
menu "Code maturity level options" {
 config EXPERIMENTAL boolean {
  prompt "Prompt for development and/or incomplete code/drivers" if []
 }
 config BROKEN boolean {
 }
 config BROKEN_ON_SMP boolean {
  depends on [BROKEN || !SMP]
  default [y] if [BROKEN || !SMP]
  inherited [BROKEN || !SMP]
 }
 config LOCK_KERNEL boolean {
  depends on [SMP || PREEMPT]
  default [y] if [SMP || PREEMPT]
  inherited [SMP || PREEMPT]
 }
 config INIT_ENV_ARG_LIMIT integer {
  default [32] if [!UML]
  default [128] if [UML]
 }
}
menu "General setup" {
 config LOCALVERSION string {
  prompt "Local version - append to kernel release" if []
 }
 config LOCALVERSION_AUTO boolean {
  prompt "Automatically append version information to the version string" if []
  default [y] if []
 }
 config SWAP boolean {
  prompt "Support for paging of anonymous memory (swap)" if [MMU && BLOCK]
  depends on [MMU && BLOCK]
  default [y] if [MMU && BLOCK]
  inherited [MMU && BLOCK]
 }
 config SYSVIPC boolean {
  prompt "System V IPC" if []
  config IPC_NS boolean {
   prompt "IPC Namespaces" if [SYSVIPC]
   depends on [SYSVIPC]
   default [n] if [SYSVIPC]
   inherited [SYSVIPC]
  }
 }
 config POSIX_MQUEUE boolean {
  prompt "POSIX Message Queues" if [NET && EXPERIMENTAL]
  depends on [NET && EXPERIMENTAL]
  inherited [NET && EXPERIMENTAL]
 }
 config BSD_PROCESS_ACCT boolean {
  prompt "BSD Process Accounting" if []
  config BSD_PROCESS_ACCT_V3 boolean {
   prompt "BSD Process Accounting version 3 file format" if [BSD_PROCESS_ACCT]
   depends on [BSD_PROCESS_ACCT]
   default [n] if [BSD_PROCESS_ACCT]
   inherited [BSD_PROCESS_ACCT]
  }
 }
 config TASKSTATS boolean {
  prompt "Export task/process statistics through netlink (EXPERIMENTAL)" if [NET]
  depends on [NET]
  default [n] if [NET]
  inherited [NET]
  config TASK_DELAY_ACCT boolean {
   prompt "Enable per-task delay accounting (EXPERIMENTAL)" if [TASKSTATS]
   depends on [TASKSTATS]
   inherited [TASKSTATS]
  }
 }
 config UTS_NS boolean {
  prompt "UTS Namespaces" if []
  default [n] if []
 }
 config AUDIT boolean {
  prompt "Auditing support" if [NET]
  depends on [NET]
  inherited [NET]
  config AUDITSYSCALL boolean {
   prompt "Enable system-call auditing support" if [AUDIT && (X86 || PPC || PPC64 || S390 || IA64 || UML || SPARC64)]
   depends on [AUDIT && (X86 || PPC || PPC64 || S390 || IA64 || UML || SPARC64)]
   default [y] if [AUDIT && (X86 || PPC || PPC64 || S390 || IA64 || UML || SPARC64) && SECURITY_SELINUX]
   inherited [AUDIT && (X86 || PPC || PPC64 || S390 || IA64 || UML || SPARC64)]
  }
 }
 config IKCONFIG tristate {
  prompt "Kernel .config support" if []
  config IKCONFIG_PROC boolean {
   prompt "Enable access to .config through /proc/config.gz" if [IKCONFIG && PROC_FS]
   depends on [IKCONFIG && PROC_FS]
   inherited [IKCONFIG && PROC_FS]
  }
 }
 config CPUSETS boolean {
  prompt "Cpuset support" if [SMP]
  depends on [SMP]
  inherited [SMP]
 }
 config SYSFS_DEPRECATED boolean {
  prompt "Create deprecated sysfs files" if []
  default [y] if []
 }
 config RELAY boolean {
  prompt "Kernel->user space relay support (formerly relayfs)" if []
 }
 config INITRAMFS_SOURCE string {
  prompt "Initramfs source file(s)" if []
  default [""] if []
  config INITRAMFS_ROOT_UID integer {
   prompt "User ID to map to 0 (user root)" if [INITRAMFS_SOURCE!=""]
   depends on [INITRAMFS_SOURCE!=""]
   default [0] if [INITRAMFS_SOURCE!=""]
   inherited [INITRAMFS_SOURCE!=""]
  }
  config INITRAMFS_ROOT_GID integer {
   prompt "Group ID to map to 0 (group root)" if [INITRAMFS_SOURCE!=""]
   depends on [INITRAMFS_SOURCE!=""]
   default [0] if [INITRAMFS_SOURCE!=""]
   inherited [INITRAMFS_SOURCE!=""]
  }
 }
 config CC_OPTIMIZE_FOR_SIZE boolean {
  prompt "Optimize for size (Look out for broken compilers!)" if [ARM || H8300 || EXPERIMENTAL]
  default [y] if [ARM || H8300 || EXPERIMENTAL]
  depends on [ARM || H8300 || EXPERIMENTAL]
  inherited [ARM || H8300 || EXPERIMENTAL]
 }
 config TASK_XACCT boolean {
  prompt "Enable extended accounting over taskstats (EXPERIMENTAL)" if [TASKSTATS]
  depends on [TASKSTATS]
  inherited [TASKSTATS]
  config TASK_IO_ACCOUNTING boolean {
   prompt "Enable per-task storage I/O accounting (EXPERIMENTAL)" if [TASK_XACCT]
   depends on [TASK_XACCT]
   inherited [TASK_XACCT]
  }
 }
 config SYSCTL boolean {
 }
 menuconfig EMBEDDED boolean {
  prompt "Configure standard kernel features (for small systems)" if []
  config UID16 boolean {
   prompt "Enable 16-bit UID system calls" if [(ARM || CRIS || FRV || H8300 || X86_32 || M68K || S390 && !64BIT || SUPERH || SPARC32 || SPARC64 && SPARC32_COMPAT || UML || X86_64 && IA32_EMULATION) && EMBEDDED]
   depends on [ARM || CRIS || FRV || H8300 || X86_32 || M68K || S390 && !64BIT || SUPERH || SPARC32 || SPARC64 && SPARC32_COMPAT || UML || X86_64 && IA32_EMULATION]
   default [y] if [ARM || CRIS || FRV || H8300 || X86_32 || M68K || S390 && !64BIT || SUPERH || SPARC32 || SPARC64 && SPARC32_COMPAT || UML || X86_64 && IA32_EMULATION]
   inherited [ARM || CRIS || FRV || H8300 || X86_32 || M68K || S390 && !64BIT || SUPERH || SPARC32 || SPARC64 && SPARC32_COMPAT || UML || X86_64 && IA32_EMULATION]
  }
  config SYSCTL_SYSCALL boolean {
   prompt "Sysctl syscall support" if [EMBEDDED]
   default [y] if []
   select SYSCTL if []
  }
  config KALLSYMS boolean {
   prompt "Load all symbols for debugging/ksymoops" if [EMBEDDED]
   default [y] if []
   config KALLSYMS_ALL boolean {
    prompt "Include all symbols in kallsyms" if [DEBUG_KERNEL && KALLSYMS]
    depends on [DEBUG_KERNEL && KALLSYMS]
    inherited [DEBUG_KERNEL && KALLSYMS]
   }
   config KALLSYMS_EXTRA_PASS boolean {
    prompt "Do an extra kallsyms pass" if [KALLSYMS]
    depends on [KALLSYMS]
    inherited [KALLSYMS]
   }
  }
  config HOTPLUG boolean {
   prompt "Support for hot-pluggable devices" if [EMBEDDED]
   default [y] if []
  }
  config PRINTK boolean {
   default [y] if []
   prompt "Enable support for printk" if [EMBEDDED]
  }
  config BUG boolean {
   prompt "BUG() support" if [EMBEDDED]
   default [y] if []
  }
  config ELF_CORE boolean {
   default [y] if []
   prompt "Enable ELF core dumps" if [EMBEDDED]
  }
  config BASE_FULL boolean {
   default [y] if []
   prompt "Enable full-sized data structures for core" if [EMBEDDED]
  }
  config FUTEX boolean {
   prompt "Enable futex support" if [EMBEDDED]
   default [y] if []
   select RT_MUTEXES if []
  }
  config EPOLL boolean {
   prompt "Enable eventpoll support" if [EMBEDDED]
   default [y] if []
  }
  config SHMEM boolean {
   prompt "Use full shmem filesystem" if [MMU && EMBEDDED]
   default [y] if [MMU]
   depends on [MMU]
   inherited [MMU]
  }
  config SLAB boolean {
   default [y] if []
   prompt "Use full SLAB allocator" if [EMBEDDED && !SMP && !SPARSEMEM]
  }
  config VM_EVENT_COUNTERS boolean {
   default [y] if []
   prompt "Enable VM event counters for /proc/vmstat" if [EMBEDDED]
  }
 }
}
config RT_MUTEXES boolean {
 select PLIST if []
}
config TINY_SHMEM boolean {
 default [!SHMEM] if []
}
config BASE_SMALL integer {
 default [0] if [BASE_FULL]
 default [1] if [!BASE_FULL]
}
config SLOB boolean {
 default [!SLAB] if []
}
menu "Loadable module support" {
 config MODULES boolean {
  prompt "Enable loadable module support" if []
  config MODULE_UNLOAD boolean {
   prompt "Module unloading" if [MODULES]
   depends on [MODULES]
   inherited [MODULES]
   config MODULE_FORCE_UNLOAD boolean {
    prompt "Forced module unloading" if [MODULE_UNLOAD && EXPERIMENTAL]
    depends on [MODULE_UNLOAD && EXPERIMENTAL]
    inherited [MODULE_UNLOAD && EXPERIMENTAL]
   }
  }
  config MODVERSIONS boolean {
   prompt "Module versioning support" if [MODULES]
   depends on [MODULES]
   inherited [MODULES]
  }
  config MODULE_SRCVERSION_ALL boolean {
   prompt "Source checksum for all modules" if [MODULES]
   depends on [MODULES]
   inherited [MODULES]
  }
  config KMOD boolean {
   prompt "Automatic kernel module loading" if [MODULES]
   depends on [MODULES]
   inherited [MODULES]
  }
 }
 config STOP_MACHINE boolean {
  default [y] if [SMP && MODULE_UNLOAD || HOTPLUG_CPU]
  depends on [SMP && MODULE_UNLOAD || HOTPLUG_CPU]
  inherited [SMP && MODULE_UNLOAD || HOTPLUG_CPU]
 }
}
menu "Block layer" {
 config BLOCK boolean {
  prompt "Enable the block layer" if [EMBEDDED]
  default [y] if []
  if [BLOCK] {
   config LBD boolean {
    prompt "Support for Large Block Devices" if [BLOCK && !64BIT]
    depends on [!64BIT]
    inherited [BLOCK && !64BIT]
   }
   config BLK_DEV_IO_TRACE boolean {
    prompt "Support for tracing block io actions" if [BLOCK && SYSFS]
    depends on [SYSFS]
    select RELAY if [BLOCK && SYSFS]
    select DEBUG_FS if [BLOCK && SYSFS]
    inherited [BLOCK && SYSFS]
   }
   config LSF boolean {
    prompt "Support for Large Single Files" if [BLOCK && !64BIT]
    depends on [!64BIT]
    inherited [BLOCK && !64BIT]
   }
  }
  if [BLOCK] {
   menu "IO Schedulers" {
    depends on [BLOCK]
    config IOSCHED_NOOP boolean {
     default [y] if [BLOCK]
     inherited [BLOCK]
    }
    config IOSCHED_AS tristate {
     prompt "Anticipatory I/O scheduler" if [BLOCK]
     default [y] if [BLOCK]
     inherited [BLOCK]
    }
    config IOSCHED_DEADLINE tristate {
     prompt "Deadline I/O scheduler" if [BLOCK]
     default [y] if [BLOCK]
     inherited [BLOCK]
    }
    config IOSCHED_CFQ tristate {
     prompt "CFQ I/O scheduler" if [BLOCK]
     default [y] if [BLOCK]
     inherited [BLOCK]
    }
    choice boolean {
     prompt "Default I/O scheduler" if [BLOCK]
     default [DEFAULT_CFQ] if [BLOCK]
     config DEFAULT_AS boolean {
      prompt "Anticipatory" if [<choice> && IOSCHED_AS="y"]
      inherited [<choice>]
     }
     config DEFAULT_DEADLINE boolean {
      prompt "Deadline" if [<choice> && IOSCHED_DEADLINE="y"]
      inherited [<choice>]
     }
     config DEFAULT_CFQ boolean {
      prompt "CFQ" if [<choice> && IOSCHED_CFQ="y"]
      inherited [<choice>]
     }
     config DEFAULT_NOOP boolean {
      prompt "No-op" if [<choice>]
      inherited [<choice>]
     }
    }
    config DEFAULT_IOSCHED string {
     default ["anticipatory"] if [BLOCK && DEFAULT_AS]
     default ["deadline"] if [BLOCK && DEFAULT_DEADLINE]
     default ["cfq"] if [BLOCK && DEFAULT_CFQ]
     default ["noop"] if [BLOCK && DEFAULT_NOOP]
     inherited [BLOCK]
    }
   }
  }
 }
}
menu "Processor type and features" {
 config SMP boolean {
  prompt "Symmetric multi-processing support" if []
 }
 choice boolean {
  prompt "Subarchitecture Type" if []
  default [X86_PC] if []
  config X86_PC boolean {
   prompt "PC-compatible" if [<choice>]
   inherited [<choice>]
  }
  config X86_ELAN boolean {
   prompt "AMD Elan" if [<choice>]
   inherited [<choice>]
  }
  config X86_VOYAGER boolean {
   prompt "Voyager (NCR)" if [<choice>]
   inherited [<choice>]
  }
  config X86_NUMAQ boolean {
   prompt "NUMAQ (IBM/Sequent)" if [<choice>]
   select SMP if [<choice>]
   select NUMA if [<choice>]
   inherited [<choice>]
  }
  config X86_SUMMIT boolean {
   prompt "Summit/EXA (IBM x440)" if [<choice> && SMP]
   depends on [SMP]
   inherited [<choice> && SMP]
  }
  config X86_BIGSMP boolean {
   prompt "Support for other sub-arch SMP systems with more than 8 CPUs" if [<choice> && SMP]
   depends on [SMP]
   inherited [<choice> && SMP]
  }
  config X86_VISWS boolean {
   prompt "SGI 320/540 (Visual Workstation)" if [<choice>]
   inherited [<choice>]
  }
  config X86_GENERICARCH boolean {
   prompt "Generic architecture (Summit, bigsmp, ES7000, default)" if [<choice>]
   inherited [<choice>]
  }
  config X86_ES7000 boolean {
   prompt "Support for Unisys ES7000 IA32 series" if [<choice> && SMP]
   depends on [SMP]
   inherited [<choice> && SMP]
  }
 }
 config PARAVIRT boolean {
  prompt "Paravirtualization support (EXPERIMENTAL)" if [EXPERIMENTAL && !X86_VISWS && !X86_VOYAGER]
  depends on [EXPERIMENTAL]
  depends on [!(X86_VISWS || X86_VOYAGER)]
  inherited [EXPERIMENTAL && !X86_VISWS && !X86_VOYAGER]
 }
 config ACPI_SRAT boolean {
  default [y] if [ACPI && NUMA && (X86_SUMMIT || X86_GENERICARCH)]
  depends on [ACPI && NUMA && (X86_SUMMIT || X86_GENERICARCH)]
  select ACPI_NUMA if [ACPI && NUMA && (X86_SUMMIT || X86_GENERICARCH)]
  inherited [ACPI && NUMA && (X86_SUMMIT || X86_GENERICARCH)]
 }
 config HAVE_ARCH_PARSE_SRAT boolean {
  default [y] if [ACPI_SRAT]
  depends on [ACPI_SRAT]
  inherited [ACPI_SRAT]
 }
 config X86_SUMMIT_NUMA boolean {
  default [y] if [NUMA && (X86_SUMMIT || X86_GENERICARCH)]
  depends on [NUMA && (X86_SUMMIT || X86_GENERICARCH)]
  inherited [NUMA && (X86_SUMMIT || X86_GENERICARCH)]
 }
 config X86_CYCLONE_TIMER boolean {
  default [y] if [X86_SUMMIT || X86_GENERICARCH]
  depends on [X86_SUMMIT || X86_GENERICARCH]
  inherited [X86_SUMMIT || X86_GENERICARCH]
 }
 config ES7000_CLUSTERED_APIC boolean {
  default [y] if [SMP && X86_ES7000 && MPENTIUMIII]
  depends on [SMP && X86_ES7000 && MPENTIUMIII]
  inherited [SMP && X86_ES7000 && MPENTIUMIII]
 }
 if [!X86_ELAN] {
  choice boolean {
   prompt "Processor family" if [!X86_ELAN]
   default [M686] if [!X86_ELAN]
   config M386 boolean {
    prompt "386" if [<choice> && !UML]
    depends on [!UML]
    inherited [<choice> && !UML]
   }
   config M486 boolean {
    prompt "486" if [<choice>]
    inherited [<choice>]
   }
   config M586 boolean {
    prompt "586/K5/5x86/6x86/6x86MX" if [<choice>]
    inherited [<choice>]
   }
   config M586TSC boolean {
    prompt "Pentium-Classic" if [<choice>]
    inherited [<choice>]
   }
   config M586MMX boolean {
    prompt "Pentium-MMX" if [<choice>]
    inherited [<choice>]
   }
   config M686 boolean {
    prompt "Pentium-Pro" if [<choice>]
    inherited [<choice>]
   }
   config MPENTIUMII boolean {
    prompt "Pentium-II/Celeron(pre-Coppermine)" if [<choice>]
    inherited [<choice>]
   }
   config MPENTIUMIII boolean {
    prompt "Pentium-III/Celeron(Coppermine)/Pentium-III Xeon" if [<choice>]
    inherited [<choice>]
   }
   config MPENTIUMM boolean {
    prompt "Pentium M" if [<choice>]
    inherited [<choice>]
   }
   config MCORE2 boolean {
    prompt "Core 2/newer Xeon" if [<choice>]
    inherited [<choice>]
   }
   config MPENTIUM4 boolean {
    prompt "Pentium-4/Celeron(P4-based)/Pentium-4 M/older Xeon" if [<choice>]
    inherited [<choice>]
   }
   config MK6 boolean {
    prompt "K6/K6-II/K6-III" if [<choice>]
    inherited [<choice>]
   }
   config MK7 boolean {
    prompt "Athlon/Duron/K7" if [<choice>]
    inherited [<choice>]
   }
   config MK8 boolean {
    prompt "Opteron/Athlon64/Hammer/K8" if [<choice>]
    inherited [<choice>]
   }
   config MCRUSOE boolean {
    prompt "Crusoe" if [<choice>]
    inherited [<choice>]
   }
   config MEFFICEON boolean {
    prompt "Efficeon" if [<choice>]
    inherited [<choice>]
   }
   config MWINCHIPC6 boolean {
    prompt "Winchip-C6" if [<choice>]
    inherited [<choice>]
   }
   config MWINCHIP2 boolean {
    prompt "Winchip-2" if [<choice>]
    inherited [<choice>]
   }
   config MWINCHIP3D boolean {
    prompt "Winchip-2A/Winchip-3" if [<choice>]
    inherited [<choice>]
   }
   config MGEODEGX1 boolean {
    prompt "GeodeGX1" if [<choice>]
    inherited [<choice>]
   }
   config MGEODE_LX boolean {
    prompt "Geode GX/LX" if [<choice>]
    inherited [<choice>]
   }
   config MCYRIXIII boolean {
    prompt "CyrixIII/VIA-C3" if [<choice>]
    inherited [<choice>]
   }
   config MVIAC3_2 boolean {
    prompt "VIA C3-2 (Nehemiah)" if [<choice>]
    inherited [<choice>]
   }
  }
  config X86_GENERIC boolean {
   prompt "Generic x86 support" if [!X86_ELAN]
   inherited [!X86_ELAN]
  }
 }
 config X86_CMPXCHG boolean {
  depends on [!M386]
  default [y] if [!M386]
  inherited [!M386]
 }
 config X86_XADD boolean {
  depends on [!M386]
  default [y] if [!M386]
  inherited [!M386]
 }
 config X86_L1_CACHE_SHIFT integer {
  default [7] if [MPENTIUM4 || X86_GENERIC]
  default [4] if [X86_ELAN || M486 || M386 || MGEODEGX1]
  default [5] if [MWINCHIP3D || MWINCHIP2 || MWINCHIPC6 || MCRUSOE || MEFFICEON || MCYRIXIII || MK6 || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || M586TSC || M586 || MVIAC3_2 || MGEODE_LX]
  default [6] if [MK7 || MK8 || MPENTIUMM || MCORE2]
 }
 config RWSEM_GENERIC_SPINLOCK boolean {
  depends on [M386]
  default [y] if [M386]
  inherited [M386]
 }
 config RWSEM_XCHGADD_ALGORITHM boolean {
  depends on [!M386]
  default [y] if [!M386]
  inherited [!M386]
 }
 config ARCH_HAS_ILOG2_U32 boolean {
  default [n] if []
 }
 config ARCH_HAS_ILOG2_U64 boolean {
  default [n] if []
 }
 config GENERIC_CALIBRATE_DELAY boolean {
  default [y] if []
 }
 config X86_PPRO_FENCE boolean {
  depends on [M686 || M586MMX || M586TSC || M586 || M486 || M386 || MGEODEGX1]
  default [y] if [M686 || M586MMX || M586TSC || M586 || M486 || M386 || MGEODEGX1]
  inherited [M686 || M586MMX || M586TSC || M586 || M486 || M386 || MGEODEGX1]
 }
 config X86_F00F_BUG boolean {
  depends on [M586MMX || M586TSC || M586 || M486 || M386]
  default [y] if [M586MMX || M586TSC || M586 || M486 || M386]
  inherited [M586MMX || M586TSC || M586 || M486 || M386]
 }
 config X86_WP_WORKS_OK boolean {
  depends on [!M386]
  default [y] if [!M386]
  inherited [!M386]
 }
 config X86_INVLPG boolean {
  depends on [!M386]
  default [y] if [!M386]
  inherited [!M386]
 }
 config X86_BSWAP boolean {
  depends on [!M386]
  default [y] if [!M386]
  inherited [!M386]
 }
 config X86_POPAD_OK boolean {
  depends on [!M386]
  default [y] if [!M386]
  inherited [!M386]
 }
 config X86_CMPXCHG64 boolean {
  depends on [!M386 && !M486]
  default [y] if [!M386 && !M486]
  inherited [!M386 && !M486]
 }
 config X86_ALIGNMENT_16 boolean {
  depends on [MWINCHIP3D || MWINCHIP2 || MWINCHIPC6 || MCYRIXIII || X86_ELAN || MK6 || M586MMX || M586TSC || M586 || M486 || MVIAC3_2 || MGEODEGX1]
  default [y] if [MWINCHIP3D || MWINCHIP2 || MWINCHIPC6 || MCYRIXIII || X86_ELAN || MK6 || M586MMX || M586TSC || M586 || M486 || MVIAC3_2 || MGEODEGX1]
  inherited [MWINCHIP3D || MWINCHIP2 || MWINCHIPC6 || MCYRIXIII || X86_ELAN || MK6 || M586MMX || M586TSC || M586 || M486 || MVIAC3_2 || MGEODEGX1]
 }
 config X86_GOOD_APIC boolean {
  depends on [MK7 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || MK8 || MEFFICEON || MCORE2]
  default [y] if [MK7 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || MK8 || MEFFICEON || MCORE2]
  inherited [MK7 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || MK8 || MEFFICEON || MCORE2]
 }
 config X86_INTEL_USERCOPY boolean {
  depends on [MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M586MMX || X86_GENERIC || MK8 || MK7 || MEFFICEON || MCORE2]
  default [y] if [MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M586MMX || X86_GENERIC || MK8 || MK7 || MEFFICEON || MCORE2]
  inherited [MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M586MMX || X86_GENERIC || MK8 || MK7 || MEFFICEON || MCORE2]
 }
 config X86_USE_PPRO_CHECKSUM boolean {
  depends on [MWINCHIP3D || MWINCHIP2 || MWINCHIPC6 || MCYRIXIII || MK7 || MK6 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MK8 || MVIAC3_2 || MEFFICEON || MGEODE_LX || MCORE2]
  default [y] if [MWINCHIP3D || MWINCHIP2 || MWINCHIPC6 || MCYRIXIII || MK7 || MK6 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MK8 || MVIAC3_2 || MEFFICEON || MGEODE_LX || MCORE2]
  inherited [MWINCHIP3D || MWINCHIP2 || MWINCHIPC6 || MCYRIXIII || MK7 || MK6 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MK8 || MVIAC3_2 || MEFFICEON || MGEODE_LX || MCORE2]
 }
 config X86_USE_3DNOW boolean {
  depends on [(MCYRIXIII || MK7 || MGEODE_LX) && !UML]
  default [y] if [(MCYRIXIII || MK7 || MGEODE_LX) && !UML]
  inherited [(MCYRIXIII || MK7 || MGEODE_LX) && !UML]
 }
 config X86_OOSTORE boolean {
  depends on [(MWINCHIP3D || MWINCHIP2 || MWINCHIPC6) && MTRR]
  default [y] if [(MWINCHIP3D || MWINCHIP2 || MWINCHIPC6) && MTRR]
  inherited [(MWINCHIP3D || MWINCHIP2 || MWINCHIPC6) && MTRR]
 }
 config X86_TSC boolean {
  depends on [(MWINCHIP3D || MWINCHIP2 || MCRUSOE || MEFFICEON || MCYRIXIII || MK7 || MK6 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || M586TSC || MK8 || MVIAC3_2 || MGEODEGX1 || MGEODE_LX || MCORE2) && !X86_NUMAQ]
  default [y] if [(MWINCHIP3D || MWINCHIP2 || MCRUSOE || MEFFICEON || MCYRIXIII || MK7 || MK6 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || M586TSC || MK8 || MVIAC3_2 || MGEODEGX1 || MGEODE_LX || MCORE2) && !X86_NUMAQ]
  inherited [(MWINCHIP3D || MWINCHIP2 || MCRUSOE || MEFFICEON || MCYRIXIII || MK7 || MK6 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || M586TSC || MK8 || MVIAC3_2 || MGEODEGX1 || MGEODE_LX || MCORE2) && !X86_NUMAQ]
 }
 config HPET_TIMER boolean {
  prompt "HPET Timer Support" if []
  config HPET_EMULATE_RTC boolean {
   depends on [HPET_TIMER && RTC="y"]
   default [y] if [HPET_TIMER && RTC="y"]
   inherited [HPET_TIMER && RTC="y"]
  }
 }
 config NR_CPUS integer {
  prompt "Maximum number of CPUs (2-255)" if [SMP]
  range [2 255] if [SMP]
  depends on [SMP]
  default [32] if [SMP && (X86_NUMAQ || X86_SUMMIT || X86_BIGSMP || X86_ES7000)]
  default [8] if [SMP]
  inherited [SMP]
 }
 config SCHED_SMT boolean {
  prompt "SMT (Hyperthreading) scheduler support" if [X86_HT]
  depends on [X86_HT]
  inherited [X86_HT]
 }
 config SCHED_MC boolean {
  prompt "Multi-core scheduler support" if [X86_HT]
  depends on [X86_HT]
  default [y] if [X86_HT]
  inherited [X86_HT]
 }
 choice boolean {
  prompt "Preemption Model" if []
  default [PREEMPT_NONE] if []
  config PREEMPT_NONE boolean {
   prompt "No Forced Preemption (Server)" if [<choice>]
   inherited [<choice>]
  }
  config PREEMPT_VOLUNTARY boolean {
   prompt "Voluntary Kernel Preemption (Desktop)" if [<choice>]
   inherited [<choice>]
  }
  config PREEMPT boolean {
   prompt "Preemptible Kernel (Low-Latency Desktop)" if [<choice>]
   inherited [<choice>]
  }
 }
 config PREEMPT_BKL boolean {
  prompt "Preempt The Big Kernel Lock" if [SMP || PREEMPT]
  depends on [SMP || PREEMPT]
  default [y] if [SMP || PREEMPT]
  inherited [SMP || PREEMPT]
 }
 config X86_UP_APIC boolean {
  prompt "Local APIC support on uniprocessors" if [!SMP && !X86_VISWS && !X86_VOYAGER && !X86_GENERICARCH]
  depends on [!SMP && !(X86_VISWS || X86_VOYAGER || X86_GENERICARCH)]
  inherited [!SMP && !X86_VISWS && !X86_VOYAGER && !X86_GENERICARCH]
  config X86_UP_IOAPIC boolean {
   prompt "IO-APIC support on uniprocessors" if [X86_UP_APIC]
   depends on [X86_UP_APIC]
   inherited [X86_UP_APIC]
  }
 }
 config X86_LOCAL_APIC boolean {
  depends on [X86_UP_APIC || (X86_VISWS || SMP) && !X86_VOYAGER || X86_GENERICARCH]
  default [y] if [X86_UP_APIC || (X86_VISWS || SMP) && !X86_VOYAGER || X86_GENERICARCH]
  inherited [X86_UP_APIC || (X86_VISWS || SMP) && !X86_VOYAGER || X86_GENERICARCH]
 }
 config X86_IO_APIC boolean {
  depends on [X86_UP_IOAPIC || SMP && !(X86_VISWS || X86_VOYAGER) || X86_GENERICARCH]
  default [y] if [X86_UP_IOAPIC || SMP && !X86_VISWS && !X86_VOYAGER || X86_GENERICARCH]
  inherited [X86_UP_IOAPIC || SMP && !X86_VISWS && !X86_VOYAGER || X86_GENERICARCH]
 }
 config X86_VISWS_APIC boolean {
  depends on [X86_VISWS]
  default [y] if [X86_VISWS]
  inherited [X86_VISWS]
 }
 config X86_MCE boolean {
  prompt "Machine Check Exception" if [!X86_VOYAGER]
  depends on [!X86_VOYAGER]
  inherited [!X86_VOYAGER]
  config X86_MCE_NONFATAL tristate {
   prompt "Check for non-fatal errors on AMD Athlon/Duron / Intel Pentium 4" if [X86_MCE]
   depends on [X86_MCE]
   inherited [X86_MCE]
  }
  config X86_MCE_P4THERMAL boolean {
   prompt "check for P4 thermal throttling interrupt." if [X86_MCE && (X86_UP_APIC || SMP) && !X86_VISWS]
   depends on [X86_MCE && (X86_UP_APIC || SMP) && !X86_VISWS]
   inherited [X86_MCE && (X86_UP_APIC || SMP) && !X86_VISWS]
  }
 }
 config VM86 boolean {
  default [y] if []
  prompt "Enable VM86 support" if [EMBEDDED]
 }
 config TOSHIBA tristate {
  prompt "Toshiba Laptop support" if []
 }
 config I8K tristate {
  prompt "Dell laptop support" if []
 }
 config X86_REBOOTFIXUPS boolean {
  prompt "Enable X86 board specific fixups for reboot" if [X86]
  depends on [X86]
  default [n] if [X86]
  inherited [X86]
 }
 config MICROCODE tristate {
  prompt "/dev/cpu/microcode - Intel IA32 CPU microcode support" if []
  select FW_LOADER if []
  config MICROCODE_OLD_INTERFACE boolean {
   depends on [MICROCODE]
   default [y] if [MICROCODE]
   inherited [MICROCODE]
  }
 }
 config X86_MSR tristate {
  prompt "/dev/cpu/*/msr - Model-specific register support" if []
 }
 config X86_CPUID tristate {
  prompt "/dev/cpu/*/cpuid - CPU information support" if []
 }
 menu "Firmware Drivers" {
  config EDD tristate {
   prompt "BIOS Enhanced Disk Drive calls determine boot disk" if [!IA64]
   depends on [!IA64]
   inherited [!IA64]
  }
  config EFI_VARS tristate {
   prompt "EFI Variable Support via sysfs" if [EFI]
   depends on [EFI]
   default [n] if [EFI]
   inherited [EFI]
  }
  config EFI_PCDP boolean {
   prompt "Console device selection via EFI PCDP or HCDP table" if [ACPI && EFI && IA64]
   depends on [ACPI && EFI && IA64]
   default [y] if [ACPI && EFI && IA64]
   inherited [ACPI && EFI && IA64]
  }
  config DELL_RBU tristate {
   prompt "BIOS update support for DELL systems via sysfs" if [X86]
   depends on [X86]
   select FW_LOADER if [X86]
   inherited [X86]
  }
  config DCDBAS tristate {
   prompt "Dell Systems Management Base Driver" if [X86]
   depends on [X86]
   inherited [X86]
  }
 }
 choice boolean {
  prompt "High Memory Support" if []
  default [HIGHMEM4G] if [!X86_NUMAQ]
  default [HIGHMEM64G] if [X86_NUMAQ]
  config NOHIGHMEM boolean {
   prompt "off" if [<choice> && !X86_NUMAQ]
   depends on [!X86_NUMAQ]
   inherited [<choice> && !X86_NUMAQ]
  }
  config HIGHMEM4G boolean {
   prompt "4GB" if [<choice> && !X86_NUMAQ]
   depends on [!X86_NUMAQ]
   inherited [<choice> && !X86_NUMAQ]
  }
  config HIGHMEM64G boolean {
   prompt "64GB" if [<choice> && X86_CMPXCHG64]
   depends on [X86_CMPXCHG64]
   inherited [<choice> && X86_CMPXCHG64]
  }
 }
 choice boolean {
  depends on [EXPERIMENTAL]
  prompt "Memory split" if [EXPERIMENTAL && EMBEDDED]
  default [VMSPLIT_3G] if [EXPERIMENTAL]
  config VMSPLIT_3G boolean {
   prompt "3G/1G user/kernel split" if [<choice>]
   inherited [<choice>]
  }
  config VMSPLIT_3G_OPT boolean {
   depends on [!HIGHMEM]
   prompt "3G/1G user/kernel split (for full 1G low memory)" if [<choice> && !HIGHMEM]
   inherited [<choice> && !HIGHMEM]
  }
  config VMSPLIT_2G boolean {
   prompt "2G/2G user/kernel split" if [<choice>]
   inherited [<choice>]
  }
  config VMSPLIT_1G boolean {
   prompt "1G/3G user/kernel split" if [<choice>]
   inherited [<choice>]
  }
 }
 config PAGE_OFFSET hex {
  default [0xB0000000] if [VMSPLIT_3G_OPT]
  default [0x78000000] if [VMSPLIT_2G]
  default [0x40000000] if [VMSPLIT_1G]
  default [0xC0000000] if []
 }
 config HIGHMEM boolean {
  depends on [HIGHMEM64G || HIGHMEM4G]
  default [y] if [HIGHMEM64G || HIGHMEM4G]
  inherited [HIGHMEM64G || HIGHMEM4G]
 }
 config X86_PAE boolean {
  depends on [HIGHMEM64G]
  default [y] if [HIGHMEM64G]
  select RESOURCES_64BIT if [HIGHMEM64G]
  inherited [HIGHMEM64G]
 }
 config NUMA boolean {
  prompt "Numa Memory Allocation and Scheduler Support" if [SMP && HIGHMEM64G && (X86_NUMAQ || (X86_SUMMIT || X86_GENERICARCH) && ACPI)]
  depends on [SMP && HIGHMEM64G && (X86_NUMAQ || (X86_SUMMIT || X86_GENERICARCH) && ACPI)]
  default [n] if [SMP && HIGHMEM64G && (X86_NUMAQ || (X86_SUMMIT || X86_GENERICARCH) && ACPI) && X86_PC]
  default [y] if [SMP && HIGHMEM64G && (X86_NUMAQ || (X86_SUMMIT || X86_GENERICARCH) && ACPI) && (X86_NUMAQ || X86_SUMMIT)]
  inherited [SMP && HIGHMEM64G && (X86_NUMAQ || (X86_SUMMIT || X86_GENERICARCH) && ACPI)]
 }
 config NODES_SHIFT integer {
  default [4] if [NEED_MULTIPLE_NODES && X86_NUMAQ]
  default [3] if [NEED_MULTIPLE_NODES]
  depends on [NEED_MULTIPLE_NODES]
  inherited [NEED_MULTIPLE_NODES]
 }
 config HAVE_ARCH_BOOTMEM_NODE boolean {
  depends on [NUMA]
  default [y] if [NUMA]
  inherited [NUMA]
 }
 config ARCH_HAVE_MEMORY_PRESENT boolean {
  depends on [DISCONTIGMEM]
  default [y] if [DISCONTIGMEM]
  inherited [DISCONTIGMEM]
 }
 config NEED_NODE_MEMMAP_SIZE boolean {
  depends on [DISCONTIGMEM || SPARSEMEM]
  default [y] if [DISCONTIGMEM || SPARSEMEM]
  inherited [DISCONTIGMEM || SPARSEMEM]
 }
 config HAVE_ARCH_ALLOC_REMAP boolean {
  depends on [NUMA]
  default [y] if [NUMA]
  inherited [NUMA]
 }
 config ARCH_FLATMEM_ENABLE boolean {
  default [y] if [ARCH_SELECT_MEMORY_MODEL && X86_PC]
  depends on [ARCH_SELECT_MEMORY_MODEL && X86_PC]
  inherited [ARCH_SELECT_MEMORY_MODEL && X86_PC]
 }
 config ARCH_DISCONTIGMEM_ENABLE boolean {
  default [y] if [NUMA]
  depends on [NUMA]
  inherited [NUMA]
 }
 config ARCH_DISCONTIGMEM_DEFAULT boolean {
  default [y] if [NUMA]
  depends on [NUMA]
  inherited [NUMA]
 }
 config ARCH_SPARSEMEM_ENABLE boolean {
  default [y] if [NUMA || X86_PC && EXPERIMENTAL]
  depends on [NUMA || X86_PC && EXPERIMENTAL]
  select SPARSEMEM_STATIC if [NUMA || X86_PC && EXPERIMENTAL]
  inherited [NUMA || X86_PC && EXPERIMENTAL]
 }
 config ARCH_SELECT_MEMORY_MODEL boolean {
  default [y] if [ARCH_SPARSEMEM_ENABLE]
  depends on [ARCH_SPARSEMEM_ENABLE]
  inherited [ARCH_SPARSEMEM_ENABLE]
 }
 config ARCH_POPULATES_NODE_MAP boolean {
  default [y] if []
 }
 config SELECT_MEMORY_MODEL boolean {
  default [y] if [EXPERIMENTAL || ARCH_SELECT_MEMORY_MODEL]
  depends on [EXPERIMENTAL || ARCH_SELECT_MEMORY_MODEL]
  inherited [EXPERIMENTAL || ARCH_SELECT_MEMORY_MODEL]
 }
 choice boolean {
  prompt "Memory model" if [SELECT_MEMORY_MODEL]
  depends on [SELECT_MEMORY_MODEL]
  default [DISCONTIGMEM_MANUAL] if [SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_DEFAULT]
  default [SPARSEMEM_MANUAL] if [SELECT_MEMORY_MODEL && ARCH_SPARSEMEM_DEFAULT]
  default [FLATMEM_MANUAL] if [SELECT_MEMORY_MODEL]
  config FLATMEM_MANUAL boolean {
   prompt "Flat Memory" if [<choice> && (!ARCH_DISCONTIGMEM_ENABLE && !ARCH_SPARSEMEM_ENABLE || ARCH_FLATMEM_ENABLE)]
   depends on [!(ARCH_DISCONTIGMEM_ENABLE || ARCH_SPARSEMEM_ENABLE) || ARCH_FLATMEM_ENABLE]
   inherited [<choice> && (!ARCH_DISCONTIGMEM_ENABLE && !ARCH_SPARSEMEM_ENABLE || ARCH_FLATMEM_ENABLE)]
  }
  config DISCONTIGMEM_MANUAL boolean {
   prompt "Discontiguous Memory" if [<choice> && ARCH_DISCONTIGMEM_ENABLE]
   depends on [ARCH_DISCONTIGMEM_ENABLE]
   inherited [<choice> && ARCH_DISCONTIGMEM_ENABLE]
  }
  config SPARSEMEM_MANUAL boolean {
   prompt "Sparse Memory" if [<choice> && ARCH_SPARSEMEM_ENABLE]
   depends on [ARCH_SPARSEMEM_ENABLE]
   inherited [<choice> && ARCH_SPARSEMEM_ENABLE]
  }
 }
 config DISCONTIGMEM boolean {
  default [y] if [!SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_ENABLE || DISCONTIGMEM_MANUAL]
  depends on [!SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_ENABLE || DISCONTIGMEM_MANUAL]
  inherited [!SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_ENABLE || DISCONTIGMEM_MANUAL]
 }
 config SPARSEMEM boolean {
  default [y] if [SPARSEMEM_MANUAL]
  depends on [SPARSEMEM_MANUAL]
  inherited [SPARSEMEM_MANUAL]
 }
 config FLATMEM boolean {
  default [y] if [!DISCONTIGMEM && !SPARSEMEM || FLATMEM_MANUAL]
  depends on [!DISCONTIGMEM && !SPARSEMEM || FLATMEM_MANUAL]
  inherited [!DISCONTIGMEM && !SPARSEMEM || FLATMEM_MANUAL]
 }
 config FLAT_NODE_MEM_MAP boolean {
  default [y] if [!SPARSEMEM]
  depends on [!SPARSEMEM]
  inherited [!SPARSEMEM]
 }
 config NEED_MULTIPLE_NODES boolean {
  default [y] if [DISCONTIGMEM || NUMA]
  depends on [DISCONTIGMEM || NUMA]
  inherited [DISCONTIGMEM || NUMA]
 }
 config HAVE_MEMORY_PRESENT boolean {
  default [y] if [ARCH_HAVE_MEMORY_PRESENT || SPARSEMEM]
  depends on [ARCH_HAVE_MEMORY_PRESENT || SPARSEMEM]
  inherited [ARCH_HAVE_MEMORY_PRESENT || SPARSEMEM]
 }
 config SPARSEMEM_STATIC boolean {
  default [n] if []
 }
 config SPARSEMEM_EXTREME boolean {
  default [y] if [SPARSEMEM && !SPARSEMEM_STATIC]
  depends on [SPARSEMEM && !SPARSEMEM_STATIC]
  inherited [SPARSEMEM && !SPARSEMEM_STATIC]
 }
 config MEMORY_HOTPLUG boolean {
  prompt "Allow for memory hot-add" if [(SPARSEMEM || X86_64_ACPI_NUMA) && HOTPLUG && !SOFTWARE_SUSPEND && ARCH_ENABLE_MEMORY_HOTPLUG && (IA64 || X86 || PPC64)]
  depends on [SPARSEMEM || X86_64_ACPI_NUMA]
  depends on [HOTPLUG && !SOFTWARE_SUSPEND && ARCH_ENABLE_MEMORY_HOTPLUG]
  depends on [IA64 || X86 || PPC64]
  inherited [(SPARSEMEM || X86_64_ACPI_NUMA) && HOTPLUG && !SOFTWARE_SUSPEND && ARCH_ENABLE_MEMORY_HOTPLUG && (IA64 || X86 || PPC64)]
 }
 config MEMORY_HOTPLUG_SPARSE boolean {
  default [y] if [SPARSEMEM && MEMORY_HOTPLUG]
  depends on [SPARSEMEM && MEMORY_HOTPLUG]
  inherited [SPARSEMEM && MEMORY_HOTPLUG]
 }
 config SPLIT_PTLOCK_CPUS integer {
  default [4096] if [ARM && !CPU_CACHE_VIPT]
  default [4096] if [PARISC && !PA20]
  default [4] if []
 }
 config MIGRATION boolean {
  prompt "Page migration" if [NUMA]
  default [y] if [NUMA]
  depends on [NUMA]
  inherited [NUMA]
 }
 config RESOURCES_64BIT boolean {
  prompt "64 bit Memory and IO resources (EXPERIMENTAL)" if [!64BIT && EXPERIMENTAL]
  default [64BIT] if []
 }
 config HIGHPTE boolean {
  prompt "Allocate 3rd-level pagetables from highmem" if [HIGHMEM4G || HIGHMEM64G]
  depends on [HIGHMEM4G || HIGHMEM64G]
  inherited [HIGHMEM4G || HIGHMEM64G]
 }
 config MATH_EMULATION boolean {
  prompt "Math emulation" if []
 }
 config MTRR boolean {
  prompt "MTRR (Memory Type Range Register) support" if []
 }
 config EFI boolean {
  prompt "Boot from EFI support" if [ACPI]
  depends on [ACPI]
  default [n] if [ACPI]
  inherited [ACPI]
 }
 config IRQBALANCE boolean {
  prompt "Enable kernel irq balancing" if [SMP && X86_IO_APIC]
  depends on [SMP && X86_IO_APIC]
  default [y] if [SMP && X86_IO_APIC]
  inherited [SMP && X86_IO_APIC]
 }
 config BOOT_IOREMAP boolean {
  depends on [(X86_SUMMIT || X86_GENERICARCH) && NUMA || X86 && EFI]
  default [y] if [(X86_SUMMIT || X86_GENERICARCH) && NUMA || X86 && EFI]
  inherited [(X86_SUMMIT || X86_GENERICARCH) && NUMA || X86 && EFI]
 }
 config SECCOMP boolean {
  prompt "Enable seccomp to safely compute untrusted bytecode" if [PROC_FS]
  depends on [PROC_FS]
  default [y] if [PROC_FS]
  inherited [PROC_FS]
 }
 choice boolean {
  prompt "Timer frequency" if []
  default [HZ_250] if []
  config HZ_100 boolean {
   prompt "100 HZ" if [<choice>]
   inherited [<choice>]
  }
  config HZ_250 boolean {
   prompt "250 HZ" if [<choice>]
   inherited [<choice>]
  }
  config HZ_300 boolean {
   prompt "300 HZ" if [<choice>]
   inherited [<choice>]
  }
  config HZ_1000 boolean {
   prompt "1000 HZ" if [<choice>]
   inherited [<choice>]
  }
 }
 config HZ integer {
  default [100] if [HZ_100]
  default [250] if [HZ_250]
  default [300] if [HZ_300]
  default [1000] if [HZ_1000]
 }
 config KEXEC boolean {
  prompt "kexec system call" if []
 }
 config CRASH_DUMP boolean {
  prompt "kernel crash dumps (EXPERIMENTAL)" if [EXPERIMENTAL && HIGHMEM]
  depends on [EXPERIMENTAL]
  depends on [HIGHMEM]
  inherited [EXPERIMENTAL && HIGHMEM]
 }
 config PHYSICAL_START hex {
  prompt "Physical address where the kernel is loaded" if [EMBEDDED || CRASH_DUMP]
  default [0x100000] if []
 }
 config RELOCATABLE boolean {
  prompt "Build a relocatable kernel(EXPERIMENTAL)" if [EXPERIMENTAL]
  depends on [EXPERIMENTAL]
  inherited [EXPERIMENTAL]
 }
 config PHYSICAL_ALIGN hex {
  prompt "Alignment value to which kernel should be aligned" if []
  default [0x100000] if []
  range [0x2000 0x400000] if []
 }
 config HOTPLUG_CPU boolean {
  prompt "Support for hot-pluggable CPUs (EXPERIMENTAL)" if [SMP && HOTPLUG && EXPERIMENTAL && !X86_VOYAGER]
  depends on [SMP && HOTPLUG && EXPERIMENTAL && !X86_VOYAGER]
  inherited [SMP && HOTPLUG && EXPERIMENTAL && !X86_VOYAGER]
 }
 config COMPAT_VDSO boolean {
  prompt "Compat VDSO support" if [!PARAVIRT]
  default [y] if [!PARAVIRT]
  depends on [!PARAVIRT]
  inherited [!PARAVIRT]
 }
}
config ARCH_ENABLE_MEMORY_HOTPLUG boolean {
 default [y] if [HIGHMEM]
 depends on [HIGHMEM]
 inherited [HIGHMEM]
}
menu "Power management options (ACPI, APM)" {
 depends on [!X86_VOYAGER]
 config PM boolean {
  prompt "Power Management support" if [!X86_VOYAGER && !IA64_HP_SIM]
  depends on [!IA64_HP_SIM]
  inherited [!X86_VOYAGER && !IA64_HP_SIM]
  config PM_LEGACY boolean {
   prompt "Legacy Power Management API (DEPRECATED)" if [!X86_VOYAGER && PM]
   depends on [PM]
   default [n] if [!X86_VOYAGER && PM]
   inherited [!X86_VOYAGER && PM]
  }
  config PM_DEBUG boolean {
   prompt "Power Management Debug Support" if [!X86_VOYAGER && PM]
   depends on [PM]
   inherited [!X86_VOYAGER && PM]
   config DISABLE_CONSOLE_SUSPEND boolean {
    prompt "Keep console(s) enabled during suspend/resume (DANGEROUS)" if [!X86_VOYAGER && PM && PM_DEBUG]
    depends on [PM && PM_DEBUG]
    default [n] if [!X86_VOYAGER && PM && PM_DEBUG]
    inherited [!X86_VOYAGER && PM && PM_DEBUG]
   }
   config PM_TRACE boolean {
    prompt "Suspend/resume event tracing" if [!X86_VOYAGER && PM && PM_DEBUG && X86_32 && EXPERIMENTAL]
    depends on [PM && PM_DEBUG && X86_32 && EXPERIMENTAL]
    default [n] if [!X86_VOYAGER && PM && PM_DEBUG && X86_32 && EXPERIMENTAL]
    inherited [!X86_VOYAGER && PM && PM_DEBUG && X86_32 && EXPERIMENTAL]
   }
  }
  config PM_SYSFS_DEPRECATED boolean {
   prompt "Driver model /sys/devices/.../power/state files (DEPRECATED)" if [!X86_VOYAGER && PM && SYSFS]
   depends on [PM && SYSFS]
   default [n] if [!X86_VOYAGER && PM && SYSFS]
   inherited [!X86_VOYAGER && PM && SYSFS]
  }
  config SOFTWARE_SUSPEND boolean {
   prompt "Software Suspend" if [!X86_VOYAGER && PM && SWAP && (X86 && (!SMP || SUSPEND_SMP) || (FRV || PPC32) && !SMP)]
   depends on [PM && SWAP && (X86 && (!SMP || SUSPEND_SMP) || (FRV || PPC32) && !SMP)]
   inherited [!X86_VOYAGER && PM && SWAP && (X86 && (!SMP || SUSPEND_SMP) || (FRV || PPC32) && !SMP)]
   config PM_STD_PARTITION string {
    prompt "Default resume partition" if [!X86_VOYAGER && SOFTWARE_SUSPEND]
    depends on [SOFTWARE_SUSPEND]
    default [""] if [!X86_VOYAGER && SOFTWARE_SUSPEND]
    inherited [!X86_VOYAGER && SOFTWARE_SUSPEND]
   }
  }
  config SUSPEND_SMP boolean {
   depends on [HOTPLUG_CPU && X86 && PM]
   default [y] if [!X86_VOYAGER && HOTPLUG_CPU && X86 && PM]
   inherited [!X86_VOYAGER && HOTPLUG_CPU && X86 && PM]
  }
 }
 menu "ACPI (Advanced Configuration and Power Interface) Support" {
  depends on [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86)]
  config ACPI boolean {
   prompt "ACPI Support" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && PCI && PM]
   depends on [IA64 || X86]
   depends on [PCI]
   depends on [PM]
   default [y] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && PCI && PM]
   inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && PCI && PM]
   if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI] {
    config ACPI_SLEEP boolean {
     prompt "Sleep States" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86 && (!SMP || SUSPEND_SMP) && PM]
     depends on [X86 && (!SMP || SUSPEND_SMP)]
     depends on [PM]
     default [y] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86 && (!SMP || SUSPEND_SMP) && PM]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86 && (!SMP || SUSPEND_SMP) && PM]
     config ACPI_SLEEP_PROC_FS boolean {
      depends on [ACPI_SLEEP && PROC_FS]
      default [y] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_SLEEP && PROC_FS]
      inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_SLEEP && PROC_FS]
     }
     config ACPI_SLEEP_PROC_SLEEP boolean {
      prompt "/proc/acpi/sleep (deprecated)" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_SLEEP_PROC_FS]
      depends on [ACPI_SLEEP_PROC_FS]
      default [n] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_SLEEP_PROC_FS]
      inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_SLEEP_PROC_FS]
     }
    }
    config ACPI_AC tristate {
     prompt "AC Adapter" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86]
     depends on [X86]
     default [y] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86]
    }
    config ACPI_BATTERY tristate {
     prompt "Battery" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86]
     depends on [X86]
     default [y] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86]
    }
    config ACPI_BUTTON tristate {
     prompt "Button" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && INPUT]
     depends on [INPUT]
     default [y] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && INPUT]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && INPUT]
    }
    config ACPI_VIDEO tristate {
     prompt "Video" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86]
     depends on [X86]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86]
    }
    config ACPI_HOTKEY tristate {
     prompt "Generic Hotkey (EXPERIMENTAL)" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && EXPERIMENTAL && X86]
     depends on [EXPERIMENTAL]
     depends on [X86]
     default [n] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && EXPERIMENTAL && X86]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && EXPERIMENTAL && X86]
    }
    config ACPI_FAN tristate {
     prompt "Fan" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI]
     default [y] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI]
    }
    config ACPI_DOCK tristate {
     prompt "Dock" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && EXPERIMENTAL]
    }
    config ACPI_PROCESSOR tristate {
     prompt "Processor" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI]
     default [y] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI]
     config ACPI_HOTPLUG_CPU boolean {
      depends on [ACPI_PROCESSOR && HOTPLUG_CPU]
      select ACPI_CONTAINER if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_PROCESSOR && HOTPLUG_CPU]
      default [y] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_PROCESSOR && HOTPLUG_CPU]
      inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_PROCESSOR && HOTPLUG_CPU]
     }
     config ACPI_THERMAL tristate {
      prompt "Thermal Zone" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_PROCESSOR]
      depends on [ACPI_PROCESSOR]
      default [y] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_PROCESSOR]
      inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_PROCESSOR]
     }
    }
    config ACPI_NUMA boolean {
     prompt "NUMA support" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && ACPI && NUMA && (IA64 || X86)]
     depends on [NUMA]
     depends on [X86 || IA64]
     default [y] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && ACPI && NUMA && (IA64 || X86) && (IA64_GENERIC || IA64_SGI_SN2)]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && ACPI && NUMA && (IA64 || X86)]
    }
    config ACPI_ASUS tristate {
     prompt "ASUS/Medion Laptop Extras" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86]
     depends on [X86]
     select BACKLIGHT_CLASS_DEVICE if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86]
    }
    config ACPI_IBM tristate {
     prompt "IBM ThinkPad Laptop Extras" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86]
     depends on [X86]
     select BACKLIGHT_CLASS_DEVICE if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86]
     config ACPI_IBM_DOCK boolean {
      prompt "Legacy Docking Station Support" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_IBM && ACPI_DOCK="n"]
      depends on [ACPI_IBM]
      depends on [ACPI_DOCK="n"]
      default [n] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_IBM && ACPI_DOCK="n"]
      inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_IBM && ACPI_DOCK="n"]
     }
    }
    config ACPI_TOSHIBA tristate {
     prompt "Toshiba Laptop Extras" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86]
     depends on [X86]
     select BACKLIGHT_CLASS_DEVICE if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86]
    }
    config ACPI_CUSTOM_DSDT boolean {
     prompt "Include Custom DSDT" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && !STANDALONE]
     depends on [!STANDALONE]
     default [n] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && !STANDALONE]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && !STANDALONE]
     config ACPI_CUSTOM_DSDT_FILE string {
      prompt "Custom DSDT Table file to include" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_CUSTOM_DSDT]
      depends on [ACPI_CUSTOM_DSDT]
      default [""] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_CUSTOM_DSDT]
      inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && ACPI_CUSTOM_DSDT]
     }
    }
    config ACPI_BLACKLIST_YEAR integer {
     prompt "Disable ACPI for systems before Jan 1st this year" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86_32]
     default [0] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI]
    }
    config ACPI_DEBUG boolean {
     prompt "Debug Statements" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI]
     default [n] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI]
    }
    config ACPI_EC boolean {
     default [y] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI]
    }
    config ACPI_POWER boolean {
     default [y] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI]
    }
    config ACPI_SYSTEM boolean {
     default [y] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI]
    }
    config X86_PM_TIMER boolean {
     prompt "Power Management Timer Support" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86 && EMBEDDED]
     depends on [X86]
     default [y] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86]
    }
    config ACPI_CONTAINER tristate {
     prompt "ACPI0004,PNP0A05 and PNP0A06 Container Driver (EXPERIMENTAL)" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     default [ACPI_HOTPLUG_MEMORY || ACPI_HOTPLUG_CPU || ACPI_HOTPLUG_IO] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && EXPERIMENTAL]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && EXPERIMENTAL]
    }
    config ACPI_HOTPLUG_MEMORY tristate {
     prompt "Memory Hotplug" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && MEMORY_HOTPLUG]
     depends on [ACPI]
     depends on [MEMORY_HOTPLUG]
     default [n] if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && MEMORY_HOTPLUG]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && MEMORY_HOTPLUG]
    }
    config ACPI_SBS tristate {
     prompt "Smart Battery System (EXPERIMENTAL)" if [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86 && I2C && EXPERIMENTAL]
     depends on [X86 && I2C]
     depends on [EXPERIMENTAL]
     inherited [!X86_VOYAGER && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && ACPI && X86 && I2C && EXPERIMENTAL]
    }
   }
  }
 }
 menu "APM (Advanced Power Management) BIOS Support" {
  depends on [!X86_VOYAGER && PM && !X86_VISWS]
  config APM tristate {
   prompt "APM (Advanced Power Management) BIOS support" if [!X86_VOYAGER && !X86_VISWS && PM]
   depends on [PM]
   inherited [!X86_VOYAGER && !X86_VISWS && PM]
   config APM_IGNORE_USER_SUSPEND boolean {
    prompt "Ignore USER SUSPEND" if [!X86_VOYAGER && PM && !X86_VISWS && APM]
    depends on [APM]
    inherited [!X86_VOYAGER && PM && !X86_VISWS && APM]
   }
   config APM_DO_ENABLE boolean {
    prompt "Enable PM at boot time" if [!X86_VOYAGER && PM && !X86_VISWS && APM]
    depends on [APM]
    inherited [!X86_VOYAGER && PM && !X86_VISWS && APM]
   }
   config APM_CPU_IDLE boolean {
    prompt "Make CPU Idle calls when idle" if [!X86_VOYAGER && PM && !X86_VISWS && APM]
    depends on [APM]
    inherited [!X86_VOYAGER && PM && !X86_VISWS && APM]
   }
   config APM_DISPLAY_BLANK boolean {
    prompt "Enable console blanking using APM" if [!X86_VOYAGER && PM && !X86_VISWS && APM]
    depends on [APM]
    inherited [!X86_VOYAGER && PM && !X86_VISWS && APM]
   }
   config APM_RTC_IS_GMT boolean {
    prompt "RTC stores time in GMT" if [!X86_VOYAGER && PM && !X86_VISWS && APM]
    depends on [APM]
    inherited [!X86_VOYAGER && PM && !X86_VISWS && APM]
   }
   config APM_ALLOW_INTS boolean {
    prompt "Allow interrupts during APM BIOS calls" if [!X86_VOYAGER && PM && !X86_VISWS && APM]
    depends on [APM]
    inherited [!X86_VOYAGER && PM && !X86_VISWS && APM]
   }
   config APM_REAL_MODE_POWER_OFF boolean {
    prompt "Use real mode APM BIOS call to power off" if [!X86_VOYAGER && PM && !X86_VISWS && APM]
    depends on [APM]
    inherited [!X86_VOYAGER && PM && !X86_VISWS && APM]
   }
  }
 }
 menu "CPU Frequency scaling" {
  depends on [!X86_VOYAGER]
  config CPU_FREQ boolean {
   prompt "CPU Frequency scaling" if [!X86_VOYAGER]
   inherited [!X86_VOYAGER]
   if [!X86_VOYAGER && CPU_FREQ] {
    config CPU_FREQ_TABLE tristate {
     default [m] if [!X86_VOYAGER && CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
    }
    config CPU_FREQ_DEBUG boolean {
     prompt "Enable CPUfreq debugging" if [!X86_VOYAGER && CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
    }
    config CPU_FREQ_STAT tristate {
     prompt "CPU frequency translation statistics" if [!X86_VOYAGER && CPU_FREQ]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ]
     default [y] if [!X86_VOYAGER && CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
     config CPU_FREQ_STAT_DETAILS boolean {
      prompt "CPU frequency translation statistics details" if [!X86_VOYAGER && CPU_FREQ && CPU_FREQ_STAT]
      depends on [CPU_FREQ_STAT]
      inherited [!X86_VOYAGER && CPU_FREQ && CPU_FREQ_STAT]
     }
    }
    choice boolean {
     prompt "Default CPUFreq governor" if [!X86_VOYAGER && CPU_FREQ]
     default [CPU_FREQ_DEFAULT_GOV_USERSPACE] if [!X86_VOYAGER && CPU_FREQ && (CPU_FREQ_SA1100 || CPU_FREQ_SA1110)]
     default [CPU_FREQ_DEFAULT_GOV_PERFORMANCE] if [!X86_VOYAGER && CPU_FREQ]
     config CPU_FREQ_DEFAULT_GOV_PERFORMANCE boolean {
      prompt "performance" if [<choice>]
      select CPU_FREQ_GOV_PERFORMANCE if [<choice>]
      inherited [<choice>]
     }
     config CPU_FREQ_DEFAULT_GOV_USERSPACE boolean {
      prompt "userspace" if [<choice>]
      select CPU_FREQ_GOV_USERSPACE if [<choice>]
      inherited [<choice>]
     }
    }
    config CPU_FREQ_GOV_PERFORMANCE tristate {
     prompt "'performance' governor" if [!X86_VOYAGER && CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
    }
    config CPU_FREQ_GOV_POWERSAVE tristate {
     prompt "'powersave' governor" if [!X86_VOYAGER && CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
    }
    config CPU_FREQ_GOV_USERSPACE tristate {
     prompt "'userspace' governor for userspace frequency scaling" if [!X86_VOYAGER && CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
    }
    config CPU_FREQ_GOV_ONDEMAND tristate {
     prompt "'ondemand' cpufreq policy governor" if [!X86_VOYAGER && CPU_FREQ]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
    }
    config CPU_FREQ_GOV_CONSERVATIVE tristate {
     prompt "'conservative' cpufreq governor" if [!X86_VOYAGER && CPU_FREQ]
     depends on [CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
    }
   }
   if [!X86_VOYAGER && CPU_FREQ] {
    config X86_ACPI_CPUFREQ tristate {
     prompt "ACPI Processor P-States driver" if [!X86_VOYAGER && CPU_FREQ && ACPI_PROCESSOR]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ && ACPI_PROCESSOR]
     depends on [ACPI_PROCESSOR]
     inherited [!X86_VOYAGER && CPU_FREQ && ACPI_PROCESSOR]
    }
    config ELAN_CPUFREQ tristate {
     prompt "AMD Elan SC400 and SC410" if [!X86_VOYAGER && CPU_FREQ && X86_ELAN]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ && X86_ELAN]
     depends on [X86_ELAN]
     inherited [!X86_VOYAGER && CPU_FREQ && X86_ELAN]
    }
    config SC520_CPUFREQ tristate {
     prompt "AMD Elan SC520" if [!X86_VOYAGER && CPU_FREQ && X86_ELAN]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ && X86_ELAN]
     depends on [X86_ELAN]
     inherited [!X86_VOYAGER && CPU_FREQ && X86_ELAN]
    }
    config X86_POWERNOW_K6 tristate {
     prompt "AMD Mobile K6-2/K6-3 PowerNow!" if [!X86_VOYAGER && CPU_FREQ]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
    }
    config X86_POWERNOW_K7 tristate {
     prompt "AMD Mobile Athlon/Duron PowerNow!" if [!X86_VOYAGER && CPU_FREQ]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
     config X86_POWERNOW_K7_ACPI boolean {
      depends on [X86_POWERNOW_K7 && ACPI_PROCESSOR]
      depends on [!(X86_POWERNOW_K7="y" && ACPI_PROCESSOR="m")]
      default [y] if [!X86_VOYAGER && CPU_FREQ && X86_POWERNOW_K7 && ACPI_PROCESSOR && (X86_POWERNOW_K7!="y" || ACPI_PROCESSOR!="m")]
      inherited [!X86_VOYAGER && CPU_FREQ && X86_POWERNOW_K7 && ACPI_PROCESSOR && (X86_POWERNOW_K7!="y" || ACPI_PROCESSOR!="m")]
     }
    }
    config X86_POWERNOW_K8 tristate {
     prompt "AMD Opteron/Athlon64 PowerNow!" if [!X86_VOYAGER && CPU_FREQ && EXPERIMENTAL]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [!X86_VOYAGER && CPU_FREQ && EXPERIMENTAL]
     config X86_POWERNOW_K8_ACPI boolean {
      depends on [X86_POWERNOW_K8 && ACPI_PROCESSOR]
      depends on [!(X86_POWERNOW_K8="y" && ACPI_PROCESSOR="m")]
      default [y] if [!X86_VOYAGER && CPU_FREQ && X86_POWERNOW_K8 && ACPI_PROCESSOR && (X86_POWERNOW_K8!="y" || ACPI_PROCESSOR!="m")]
      inherited [!X86_VOYAGER && CPU_FREQ && X86_POWERNOW_K8 && ACPI_PROCESSOR && (X86_POWERNOW_K8!="y" || ACPI_PROCESSOR!="m")]
     }
    }
    config X86_GX_SUSPMOD tristate {
     prompt "Cyrix MediaGX/NatSemi Geode Suspend Modulation" if [!X86_VOYAGER && CPU_FREQ && PCI]
     depends on [PCI]
     inherited [!X86_VOYAGER && CPU_FREQ && PCI]
    }
    config X86_SPEEDSTEP_CENTRINO tristate {
     prompt "Intel Enhanced SpeedStep" if [!X86_VOYAGER && CPU_FREQ]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ]
     select X86_SPEEDSTEP_CENTRINO_TABLE if [!X86_VOYAGER && CPU_FREQ && !X86_SPEEDSTEP_CENTRINO_ACPI]
     inherited [!X86_VOYAGER && CPU_FREQ]
     config X86_SPEEDSTEP_CENTRINO_ACPI boolean {
      prompt "Use ACPI tables to decode valid frequency/voltage (deprecated)" if [!X86_VOYAGER && CPU_FREQ && X86_SPEEDSTEP_CENTRINO && ACPI_PROCESSOR && (X86_SPEEDSTEP_CENTRINO!="y" || ACPI_PROCESSOR!="m")]
      depends on [X86_SPEEDSTEP_CENTRINO && ACPI_PROCESSOR]
      depends on [!(X86_SPEEDSTEP_CENTRINO="y" && ACPI_PROCESSOR="m")]
      default [y] if [!X86_VOYAGER && CPU_FREQ && X86_SPEEDSTEP_CENTRINO && ACPI_PROCESSOR && (X86_SPEEDSTEP_CENTRINO!="y" || ACPI_PROCESSOR!="m")]
      inherited [!X86_VOYAGER && CPU_FREQ && X86_SPEEDSTEP_CENTRINO && ACPI_PROCESSOR && (X86_SPEEDSTEP_CENTRINO!="y" || ACPI_PROCESSOR!="m")]
     }
     config X86_SPEEDSTEP_CENTRINO_TABLE boolean {
      prompt "Built-in tables for Banias CPUs" if [!X86_VOYAGER && CPU_FREQ && X86_SPEEDSTEP_CENTRINO]
      depends on [X86_SPEEDSTEP_CENTRINO]
      default [y] if [!X86_VOYAGER && CPU_FREQ && X86_SPEEDSTEP_CENTRINO]
      inherited [!X86_VOYAGER && CPU_FREQ && X86_SPEEDSTEP_CENTRINO]
     }
    }
    config X86_SPEEDSTEP_ICH tristate {
     prompt "Intel Speedstep on ICH-M chipsets (ioport interface)" if [!X86_VOYAGER && CPU_FREQ]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
    }
    config X86_SPEEDSTEP_SMI tristate {
     prompt "Intel SpeedStep on 440BX/ZX/MX chipsets (SMI interface)" if [!X86_VOYAGER && CPU_FREQ && EXPERIMENTAL]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [!X86_VOYAGER && CPU_FREQ && EXPERIMENTAL]
    }
    config X86_P4_CLOCKMOD tristate {
     prompt "Intel Pentium 4 clock modulation" if [!X86_VOYAGER && CPU_FREQ]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
    }
    config X86_CPUFREQ_NFORCE2 tristate {
     prompt "nVidia nForce2 FSB changing" if [!X86_VOYAGER && CPU_FREQ && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [!X86_VOYAGER && CPU_FREQ && EXPERIMENTAL]
    }
    config X86_LONGRUN tristate {
     prompt "Transmeta LongRun" if [!X86_VOYAGER && CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
    }
    config X86_LONGHAUL tristate {
     prompt "VIA Cyrix III Longhaul" if [!X86_VOYAGER && CPU_FREQ && ACPI_PROCESSOR]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ && ACPI_PROCESSOR]
     depends on [ACPI_PROCESSOR]
     inherited [!X86_VOYAGER && CPU_FREQ && ACPI_PROCESSOR]
    }
    config X86_ACPI_CPUFREQ_PROC_INTF boolean {
     prompt "/proc/acpi/processor/../performance interface (deprecated)" if [!X86_VOYAGER && CPU_FREQ && PROC_FS && (X86_ACPI_CPUFREQ || X86_SPEEDSTEP_CENTRINO_ACPI || X86_POWERNOW_K7_ACPI || X86_POWERNOW_K8_ACPI)]
     depends on [PROC_FS]
     depends on [X86_ACPI_CPUFREQ || X86_SPEEDSTEP_CENTRINO_ACPI || X86_POWERNOW_K7_ACPI || X86_POWERNOW_K8_ACPI]
     inherited [!X86_VOYAGER && CPU_FREQ && PROC_FS && (X86_ACPI_CPUFREQ || X86_SPEEDSTEP_CENTRINO_ACPI || X86_POWERNOW_K7_ACPI || X86_POWERNOW_K8_ACPI)]
    }
    config X86_SPEEDSTEP_LIB tristate {
     default [X86_SPEEDSTEP_ICH || X86_SPEEDSTEP_SMI || X86_P4_CLOCKMOD] if [!X86_VOYAGER && CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
    }
    config X86_SPEEDSTEP_RELAXED_CAP_CHECK boolean {
     prompt "Relaxed speedstep capability checks" if [!X86_VOYAGER && CPU_FREQ && (X86_SPEEDSTEP_SMI || X86_SPEEDSTEP_ICH)]
     depends on [X86_SPEEDSTEP_SMI || X86_SPEEDSTEP_ICH]
     inherited [!X86_VOYAGER && CPU_FREQ && (X86_SPEEDSTEP_SMI || X86_SPEEDSTEP_ICH)]
    }
   }
  }
 }
}
menu "Bus options (PCI, PCMCIA, EISA, MCA, ISA)" {
 config PCI boolean {
  prompt "PCI support" if [!X86_VOYAGER && !X86_VISWS]
  depends on [!X86_VOYAGER]
  default [y] if [!X86_VOYAGER && X86_VISWS]
  inherited [!X86_VOYAGER]
  choice boolean {
   prompt "PCI access mode" if [PCI && !X86_VISWS]
   depends on [PCI && !X86_VISWS]
   default [PCI_GOANY] if [PCI && !X86_VISWS]
   config PCI_GOBIOS boolean {
    prompt "BIOS" if [<choice>]
    inherited [<choice>]
   }
   config PCI_GOMMCONFIG boolean {
    prompt "MMConfig" if [<choice>]
    inherited [<choice>]
   }
   config PCI_GODIRECT boolean {
    prompt "Direct" if [<choice>]
    inherited [<choice>]
   }
   config PCI_GOANY boolean {
    prompt "Any" if [<choice>]
    inherited [<choice>]
   }
  }
  config PCI_BIOS boolean {
   depends on [!X86_VISWS && PCI && (PCI_GOBIOS || PCI_GOANY)]
   default [y] if [!X86_VISWS && PCI && (PCI_GOBIOS || PCI_GOANY)]
   inherited [!X86_VISWS && PCI && (PCI_GOBIOS || PCI_GOANY)]
  }
  config PCI_DIRECT boolean {
   depends on [PCI && (PCI_GODIRECT || PCI_GOANY || X86_VISWS)]
   default [y] if [PCI && (PCI_GODIRECT || PCI_GOANY || X86_VISWS)]
   inherited [PCI && (PCI_GODIRECT || PCI_GOANY || X86_VISWS)]
  }
  config PCI_MMCONFIG boolean {
   depends on [PCI && ACPI && (PCI_GOMMCONFIG || PCI_GOANY)]
   default [y] if [PCI && ACPI && (PCI_GOMMCONFIG || PCI_GOANY)]
   inherited [PCI && ACPI && (PCI_GOMMCONFIG || PCI_GOANY)]
  }
  config PCIEPORTBUS boolean {
   prompt "PCI Express support" if [PCI]
   depends on [PCI]
   inherited [PCI]
   config HOTPLUG_PCI_PCIE tristate {
    prompt "PCI Express Hotplug driver" if [HOTPLUG_PCI && PCIEPORTBUS]
    depends on [HOTPLUG_PCI && PCIEPORTBUS]
    inherited [HOTPLUG_PCI && PCIEPORTBUS]
    config HOTPLUG_PCI_PCIE_POLL_EVENT_MODE boolean {
     prompt "Use polling mechanism for hot-plug events (for testing purpose)" if [HOTPLUG_PCI_PCIE]
     depends on [HOTPLUG_PCI_PCIE]
     inherited [HOTPLUG_PCI_PCIE]
    }
   }
   config PCIEAER boolean {
    prompt "Root Port Advanced Error Reporting support" if [PCIEPORTBUS && ACPI]
    depends on [PCIEPORTBUS && ACPI]
    default [y] if [PCIEPORTBUS && ACPI]
    inherited [PCIEPORTBUS && ACPI]
   }
  }
  config PCI_MSI boolean {
   prompt "Message Signaled Interrupts (MSI and MSI-X)" if [PCI && (X86_LOCAL_APIC && X86_IO_APIC || IA64)]
   depends on [PCI]
   depends on [X86_LOCAL_APIC && X86_IO_APIC || IA64]
   inherited [PCI && (X86_LOCAL_APIC && X86_IO_APIC || IA64)]
  }
  config PCI_MULTITHREAD_PROBE boolean {
   prompt "PCI Multi-threaded probe (EXPERIMENTAL)" if [PCI && EXPERIMENTAL && BROKEN]
   depends on [PCI && EXPERIMENTAL && BROKEN]
   inherited [PCI && EXPERIMENTAL && BROKEN]
  }
  config PCI_DEBUG boolean {
   prompt "PCI Debugging" if [PCI && DEBUG_KERNEL]
   depends on [PCI && DEBUG_KERNEL]
   inherited [PCI && DEBUG_KERNEL]
  }
  config HT_IRQ boolean {
   prompt "Interrupts on hypertransport devices" if [PCI && X86_LOCAL_APIC && X86_IO_APIC]
   default [y] if [PCI && X86_LOCAL_APIC && X86_IO_APIC]
   depends on [PCI && X86_LOCAL_APIC && X86_IO_APIC]
   inherited [PCI && X86_LOCAL_APIC && X86_IO_APIC]
  }
 }
 config ISA_DMA_API boolean {
  default [y] if []
 }
 config ISA boolean {
  prompt "ISA support" if [!X86_VOYAGER && !X86_VISWS]
  depends on [!(X86_VOYAGER || X86_VISWS)]
  inherited [!X86_VOYAGER && !X86_VISWS]
  config EISA boolean {
   prompt "EISA support" if [ISA]
   depends on [ISA]
   inherited [ISA]
   config EISA_VLB_PRIMING boolean {
    prompt "Vesa Local Bus priming" if [X86_PC && EISA]
    depends on [X86_PC && EISA]
    default [n] if [X86_PC && EISA]
    inherited [X86_PC && EISA]
   }
   config EISA_PCI_EISA boolean {
    prompt "Generic PCI/EISA bridge" if [!PARISC && PCI && EISA]
    depends on [!PARISC && PCI && EISA]
    default [y] if [!PARISC && PCI && EISA]
    inherited [!PARISC && PCI && EISA]
   }
   config EISA_VIRTUAL_ROOT boolean {
    prompt "EISA virtual root device" if [EISA && (ALPHA || X86_PC)]
    depends on [EISA && (ALPHA || X86_PC)]
    default [y] if [EISA && (ALPHA || X86_PC)]
    inherited [EISA && (ALPHA || X86_PC)]
   }
   config EISA_NAMES boolean {
    prompt "EISA device name database" if [EISA]
    depends on [EISA]
    default [y] if [EISA]
    inherited [EISA]
   }
  }
 }
 config MCA boolean {
  prompt "MCA support" if [!X86_VISWS && !X86_VOYAGER]
  default [y] if [X86_VOYAGER]
  config MCA_LEGACY boolean {
   prompt "Legacy MCA API Support" if [MCA]
   depends on [MCA]
   inherited [MCA]
   config MCA_PROC_FS boolean {
    prompt "Support for the mca entry in /proc" if [MCA_LEGACY && PROC_FS]
    depends on [MCA_LEGACY && PROC_FS]
    inherited [MCA_LEGACY && PROC_FS]
   }
  }
 }
 config SCx200 tristate {
  prompt "NatSemi SCx200 support" if [!X86_VOYAGER]
  depends on [!X86_VOYAGER]
  inherited [!X86_VOYAGER]
  config SCx200HR_TIMER tristate {
   prompt "NatSemi SCx200 27MHz High-Resolution Timer Support" if [SCx200 && GENERIC_TIME]
   depends on [SCx200 && GENERIC_TIME]
   default [y] if [SCx200 && GENERIC_TIME]
   inherited [SCx200 && GENERIC_TIME]
  }
 }
 config K8_NB boolean {
  default [y] if [AGP_AMD64]
  depends on [AGP_AMD64]
  inherited [AGP_AMD64]
 }
 menu "PCCARD (PCMCIA/CardBus) support" {
  config PCCARD tristate {
   prompt "PCCard (PCMCIA/CardBus) support" if [HOTPLUG]
   depends on [HOTPLUG]
   inherited [HOTPLUG]
   if [PCCARD] {
    config PCMCIA_DEBUG boolean {
     prompt "Enable PCCARD debugging" if [PCCARD]
     inherited [PCCARD]
    }
    config PCMCIA tristate {
     prompt "16-bit PCMCIA support" if [PCCARD]
     select CRC32 if [PCCARD]
     default [y] if [PCCARD]
     inherited [PCCARD]
     config PCMCIA_LOAD_CIS boolean {
      prompt "Load CIS updates from userspace (EXPERIMENTAL)" if [PCCARD && PCMCIA && EXPERIMENTAL]
      depends on [PCMCIA && EXPERIMENTAL]
      select FW_LOADER if [PCCARD && PCMCIA && EXPERIMENTAL]
      default [y] if [PCCARD && PCMCIA && EXPERIMENTAL]
      inherited [PCCARD && PCMCIA && EXPERIMENTAL]
     }
     config PCMCIA_IOCTL boolean {
      prompt "PCMCIA control ioctl (obsolete)" if [PCCARD && PCMCIA]
      depends on [PCMCIA]
      default [y] if [PCCARD && PCMCIA]
      inherited [PCCARD && PCMCIA]
     }
    }
    config CARDBUS boolean {
     prompt "32-bit CardBus support" if [PCCARD && PCI]
     depends on [PCI]
     default [y] if [PCCARD && PCI]
     inherited [PCCARD && PCI]
    }
    config YENTA tristate {
     prompt "CardBus yenta-compatible bridge support" if [PCCARD && PCI]
     depends on [PCI]
     select CARDBUS if [PCCARD && PCI && !EMBEDDED]
     select PCCARD_NONSTATIC if [PCCARD && PCI]
     inherited [PCCARD && PCI]
     config YENTA_O2 boolean {
      default [y] if [PCCARD && YENTA]
      prompt "Special initialization for O2Micro bridges" if [PCCARD && YENTA && EMBEDDED]
      depends on [YENTA]
      inherited [PCCARD && YENTA]
     }
     config YENTA_RICOH boolean {
      default [y] if [PCCARD && YENTA]
      prompt "Special initialization for Ricoh bridges" if [PCCARD && YENTA && EMBEDDED]
      depends on [YENTA]
      inherited [PCCARD && YENTA]
     }
     config YENTA_TI boolean {
      default [y] if [PCCARD && YENTA]
      prompt "Special initialization for TI and EnE bridges" if [PCCARD && YENTA && EMBEDDED]
      depends on [YENTA]
      inherited [PCCARD && YENTA]
      config YENTA_ENE_TUNE boolean {
       default [y] if [PCCARD && YENTA_TI && CARDBUS]
       prompt "Auto-tune EnE bridges for CB cards" if [PCCARD && YENTA_TI && CARDBUS && EMBEDDED]
       depends on [YENTA_TI && CARDBUS]
       inherited [PCCARD && YENTA_TI && CARDBUS]
      }
     }
     config YENTA_TOSHIBA boolean {
      default [y] if [PCCARD && YENTA]
      prompt "Special initialization for Toshiba ToPIC bridges" if [PCCARD && YENTA && EMBEDDED]
      depends on [YENTA]
      inherited [PCCARD && YENTA]
     }
    }
    config PD6729 tristate {
     prompt "Cirrus PD6729 compatible bridge support" if [PCCARD && PCMCIA && PCI]
     depends on [PCMCIA && PCI]
     select PCCARD_NONSTATIC if [PCCARD && PCMCIA && PCI]
     inherited [PCCARD && PCMCIA && PCI]
    }
    config I82092 tristate {
     prompt "i82092 compatible bridge support" if [PCCARD && PCMCIA && PCI]
     depends on [PCMCIA && PCI]
     select PCCARD_NONSTATIC if [PCCARD && PCMCIA && PCI]
     inherited [PCCARD && PCMCIA && PCI]
    }
    config I82365 tristate {
     prompt "i82365 compatible bridge support" if [PCCARD && PCMCIA && ISA]
     depends on [PCMCIA && ISA]
     select PCCARD_NONSTATIC if [PCCARD && PCMCIA && ISA]
     inherited [PCCARD && PCMCIA && ISA]
    }
    config TCIC tristate {
     prompt "Databook TCIC host bridge support" if [PCCARD && PCMCIA && ISA]
     depends on [PCMCIA && ISA]
     select PCCARD_NONSTATIC if [PCCARD && PCMCIA && ISA]
     inherited [PCCARD && PCMCIA && ISA]
    }
    config PCMCIA_M8XX tristate {
     prompt "MPC8xx PCMCIA support" if [PCCARD && PCMCIA && PPC && 8xx]
     depends on [PCMCIA && PPC && 8xx]
     select PCCARD_IODYN if [PCCARD && PCMCIA && PPC && 8xx]
     inherited [PCCARD && PCMCIA && PPC && 8xx]
    }
    config HD64465_PCMCIA tristate {
     prompt "HD64465 host bridge support" if [PCCARD && HD64465 && PCMCIA]
     depends on [HD64465 && PCMCIA]
     inherited [PCCARD && HD64465 && PCMCIA]
    }
    config PCMCIA_AU1X00 tristate {
     prompt "Au1x00 pcmcia support" if [PCCARD && SOC_AU1X00 && PCMCIA]
     depends on [SOC_AU1X00 && PCMCIA]
     inherited [PCCARD && SOC_AU1X00 && PCMCIA]
    }
    config PCMCIA_SA1100 tristate {
     prompt "SA1100 support" if [PCCARD && ARM && ARCH_SA1100 && PCMCIA]
     depends on [ARM && ARCH_SA1100 && PCMCIA]
     inherited [PCCARD && ARM && ARCH_SA1100 && PCMCIA]
    }
    config PCMCIA_SA1111 tristate {
     prompt "SA1111 support" if [PCCARD && ARM && ARCH_SA1100 && SA1111 && PCMCIA]
     depends on [ARM && ARCH_SA1100 && SA1111 && PCMCIA]
     inherited [PCCARD && ARM && ARCH_SA1100 && SA1111 && PCMCIA]
    }
    config PCMCIA_PXA2XX tristate {
     prompt "PXA2xx support" if [PCCARD && ARM && ARCH_PXA && PCMCIA]
     depends on [ARM && ARCH_PXA && PCMCIA]
     inherited [PCCARD && ARM && ARCH_PXA && PCMCIA]
    }
    config PCMCIA_PROBE boolean {
     default [y] if [PCCARD && ISA && !ARCH_SA1100 && !ARCH_CLPS711X && !PARISC]
     inherited [PCCARD]
    }
    config M32R_PCC boolean {
     prompt "M32R PCMCIA I/F" if [PCCARD && M32R && CHIP_M32700 && PCMCIA]
     depends on [M32R && CHIP_M32700 && PCMCIA]
     select PCCARD_NONSTATIC if [PCCARD && M32R && CHIP_M32700 && PCMCIA]
     inherited [PCCARD && M32R && CHIP_M32700 && PCMCIA]
    }
    config M32R_CFC boolean {
     prompt "M32R CF I/F Controller" if [PCCARD && M32R && (PLAT_USRV || PLAT_M32700UT || PLAT_MAPPI2 || PLAT_MAPPI3 || PLAT_OPSPUT)]
     depends on [M32R && (PLAT_USRV || PLAT_M32700UT || PLAT_MAPPI2 || PLAT_MAPPI3 || PLAT_OPSPUT)]
     select PCCARD_NONSTATIC if [PCCARD && M32R && (PLAT_USRV || PLAT_M32700UT || PLAT_MAPPI2 || PLAT_MAPPI3 || PLAT_OPSPUT)]
     inherited [PCCARD && M32R && (PLAT_USRV || PLAT_M32700UT || PLAT_MAPPI2 || PLAT_MAPPI3 || PLAT_OPSPUT)]
     config M32R_CFC_NUM integer {
      prompt "M32R CF I/F number" if [PCCARD && M32R_CFC]
      depends on [M32R_CFC]
      default [1] if [PCCARD && M32R_CFC && (PLAT_USRV || PLAT_M32700UT || PLAT_MAPPI2 || PLAT_MAPPI3 || PLAT_OPSPUT)]
      inherited [PCCARD && M32R_CFC]
     }
    }
    config PCMCIA_VRC4171 tristate {
     prompt "NEC VRC4171 Card Controllers support" if [PCCARD && CPU_VR41XX && ISA && PCMCIA]
     depends on [CPU_VR41XX && ISA && PCMCIA]
     inherited [PCCARD && CPU_VR41XX && ISA && PCMCIA]
    }
    config PCMCIA_VRC4173 tristate {
     prompt "NEC VRC4173 CARDU support" if [PCCARD && CPU_VR41XX && PCI && PCMCIA]
     depends on [CPU_VR41XX && PCI && PCMCIA]
     inherited [PCCARD && CPU_VR41XX && PCI && PCMCIA]
    }
    config OMAP_CF tristate {
     prompt "OMAP CompactFlash Controller" if [PCCARD && PCMCIA && ARCH_OMAP16XX]
     depends on [PCMCIA && ARCH_OMAP16XX]
     inherited [PCCARD && PCMCIA && ARCH_OMAP16XX]
    }
    config AT91_CF tristate {
     prompt "AT91 CompactFlash Controller" if [PCCARD && PCMCIA && ARCH_AT91RM9200]
     depends on [PCMCIA && ARCH_AT91RM9200]
     inherited [PCCARD && PCMCIA && ARCH_AT91RM9200]
    }
    config PCCARD_NONSTATIC tristate {
     inherited [PCCARD]
    }
    config PCCARD_IODYN boolean {
     inherited [PCCARD]
    }
   }
  }
 }
 menu "PCI Hotplug Support" {
  config HOTPLUG_PCI tristate {
   prompt "Support for PCI Hotplug (EXPERIMENTAL)" if [PCI && EXPERIMENTAL && HOTPLUG]
   depends on [PCI && EXPERIMENTAL && HOTPLUG]
   inherited [PCI && EXPERIMENTAL && HOTPLUG]
   config HOTPLUG_PCI_FAKE tristate {
    prompt "Fake PCI Hotplug driver" if [HOTPLUG_PCI]
    depends on [HOTPLUG_PCI]
    inherited [HOTPLUG_PCI]
   }
   config HOTPLUG_PCI_COMPAQ tristate {
    prompt "Compaq PCI Hotplug driver" if [HOTPLUG_PCI && X86 && PCI_BIOS]
    depends on [HOTPLUG_PCI && X86 && PCI_BIOS]
    inherited [HOTPLUG_PCI && X86 && PCI_BIOS]
    config HOTPLUG_PCI_COMPAQ_NVRAM boolean {
     prompt "Save configuration into NVRAM on Compaq servers" if [HOTPLUG_PCI_COMPAQ]
     depends on [HOTPLUG_PCI_COMPAQ]
     inherited [HOTPLUG_PCI_COMPAQ]
    }
   }
   config HOTPLUG_PCI_IBM tristate {
    prompt "IBM PCI Hotplug driver" if [HOTPLUG_PCI && X86_IO_APIC && X86 && PCI_BIOS]
    depends on [HOTPLUG_PCI && X86_IO_APIC && X86 && PCI_BIOS]
    inherited [HOTPLUG_PCI && X86_IO_APIC && X86 && PCI_BIOS]
   }
   config HOTPLUG_PCI_ACPI tristate {
    prompt "ACPI PCI Hotplug driver" if [HOTPLUG_PCI && (!ACPI_DOCK && ACPI || ACPI_DOCK)]
    depends on [HOTPLUG_PCI]
    depends on [!ACPI_DOCK && ACPI || ACPI_DOCK]
    inherited [HOTPLUG_PCI && (!ACPI_DOCK && ACPI || ACPI_DOCK)]
    config HOTPLUG_PCI_ACPI_IBM tristate {
     prompt "ACPI PCI Hotplug driver IBM extensions" if [HOTPLUG_PCI_ACPI]
     depends on [HOTPLUG_PCI_ACPI]
     inherited [HOTPLUG_PCI_ACPI]
    }
   }
   config HOTPLUG_PCI_CPCI boolean {
    prompt "CompactPCI Hotplug driver" if [HOTPLUG_PCI]
    depends on [HOTPLUG_PCI]
    inherited [HOTPLUG_PCI]
    config HOTPLUG_PCI_CPCI_ZT5550 tristate {
     prompt "Ziatech ZT5550 CompactPCI Hotplug driver" if [HOTPLUG_PCI && HOTPLUG_PCI_CPCI && X86]
     depends on [HOTPLUG_PCI && HOTPLUG_PCI_CPCI && X86]
     inherited [HOTPLUG_PCI && HOTPLUG_PCI_CPCI && X86]
    }
    config HOTPLUG_PCI_CPCI_GENERIC tristate {
     prompt "Generic port I/O CompactPCI Hotplug driver" if [HOTPLUG_PCI && HOTPLUG_PCI_CPCI && X86]
     depends on [HOTPLUG_PCI && HOTPLUG_PCI_CPCI && X86]
     inherited [HOTPLUG_PCI && HOTPLUG_PCI_CPCI && X86]
    }
   }
   config HOTPLUG_PCI_SHPC tristate {
    prompt "SHPC PCI Hotplug driver" if [HOTPLUG_PCI]
    depends on [HOTPLUG_PCI]
    inherited [HOTPLUG_PCI]
    config HOTPLUG_PCI_SHPC_POLL_EVENT_MODE boolean {
     prompt "Use polling mechanism for hot-plug events (for testing purpose)" if [HOTPLUG_PCI_SHPC]
     depends on [HOTPLUG_PCI_SHPC]
     inherited [HOTPLUG_PCI_SHPC]
    }
   }
   config HOTPLUG_PCI_RPA tristate {
    prompt "RPA PCI Hotplug driver" if [HOTPLUG_PCI && PPC_PSERIES && PPC64 && !HOTPLUG_PCI_FAKE]
    depends on [HOTPLUG_PCI && PPC_PSERIES && PPC64 && !HOTPLUG_PCI_FAKE]
    inherited [HOTPLUG_PCI && PPC_PSERIES && PPC64 && !HOTPLUG_PCI_FAKE]
    config HOTPLUG_PCI_RPA_DLPAR tristate {
     prompt "RPA Dynamic Logical Partitioning for I/O slots" if [HOTPLUG_PCI_RPA]
     depends on [HOTPLUG_PCI_RPA]
     inherited [HOTPLUG_PCI_RPA]
    }
   }
   config HOTPLUG_PCI_SGI tristate {
    prompt "SGI PCI Hotplug Support" if [HOTPLUG_PCI && (IA64_SGI_SN2 || IA64_GENERIC)]
    depends on [HOTPLUG_PCI && (IA64_SGI_SN2 || IA64_GENERIC)]
    inherited [HOTPLUG_PCI && (IA64_SGI_SN2 || IA64_GENERIC)]
   }
  }
 }
}
menu "Executable file formats" {
 config BINFMT_ELF boolean {
  prompt "Kernel support for ELF binaries" if [MMU && (BROKEN || !FRV)]
  depends on [MMU && (BROKEN || !FRV)]
  default [y] if [MMU && (BROKEN || !FRV)]
  inherited [MMU && (BROKEN || !FRV)]
 }
 config BINFMT_ELF_FDPIC boolean {
  prompt "Kernel support for FDPIC ELF binaries" if [FRV]
  default [y] if [FRV]
  depends on [FRV]
  inherited [FRV]
 }
 config BINFMT_FLAT tristate {
  prompt "Kernel support for flat binaries" if [!MMU || SUPERH]
  depends on [!MMU || SUPERH]
  inherited [!MMU || SUPERH]
  config BINFMT_ZFLAT boolean {
   prompt "Enable ZFLAT support" if [BINFMT_FLAT]
   depends on [BINFMT_FLAT]
   select ZLIB_INFLATE if [BINFMT_FLAT]
   inherited [BINFMT_FLAT]
  }
  config BINFMT_SHARED_FLAT boolean {
   prompt "Enable shared FLAT support" if [BINFMT_FLAT]
   depends on [BINFMT_FLAT]
   inherited [BINFMT_FLAT]
  }
 }
 config BINFMT_AOUT tristate {
  prompt "Kernel support for a.out and ECOFF binaries" if [X86_32 || ALPHA || ARM || M68K || SPARC32]
  depends on [X86_32 || ALPHA || ARM || M68K || SPARC32]
  inherited [X86_32 || ALPHA || ARM || M68K || SPARC32]
  config OSF4_COMPAT boolean {
   prompt "OSF/1 v4 readv/writev compatibility" if [ALPHA && BINFMT_AOUT]
   depends on [ALPHA && BINFMT_AOUT]
   inherited [ALPHA && BINFMT_AOUT]
  }
 }
 config BINFMT_EM86 tristate {
  prompt "Kernel support for Linux/Intel ELF binaries" if [ALPHA]
  depends on [ALPHA]
  inherited [ALPHA]
 }
 config BINFMT_SOM tristate {
  prompt "Kernel support for SOM binaries" if [PARISC && HPUX]
  depends on [PARISC && HPUX]
  inherited [PARISC && HPUX]
 }
 config BINFMT_MISC tristate {
  prompt "Kernel support for MISC binaries" if []
 }
}
menu "Networking" {
 config NET boolean {
  prompt "Networking support" if []
  if [NET] {
   menu "Networking options" {
    depends on [NET]
    config NETDEBUG boolean {
     prompt "Network packet debugging" if [NET]
     inherited [NET]
    }
    config PACKET tristate {
     prompt "Packet socket" if [NET]
     inherited [NET]
     config PACKET_MMAP boolean {
      prompt "Packet socket: mmapped IO" if [NET && PACKET]
      depends on [PACKET]
      inherited [NET && PACKET]
     }
    }
    config UNIX tristate {
     prompt "Unix domain sockets" if [NET]
     inherited [NET]
    }
    config XFRM boolean {
     depends on [NET]
     inherited [NET]
    }
    config XFRM_USER tristate {
     prompt "Transformation user configuration interface" if [NET && INET && XFRM]
     depends on [INET && XFRM]
     inherited [NET && INET && XFRM]
    }
    config XFRM_SUB_POLICY boolean {
     prompt "Transformation sub policy support (EXPERIMENTAL)" if [NET && XFRM && EXPERIMENTAL]
     depends on [XFRM && EXPERIMENTAL]
     inherited [NET && XFRM && EXPERIMENTAL]
    }
    config NET_KEY tristate {
     prompt "PF_KEY sockets" if [NET]
     select XFRM if [NET]
     inherited [NET]
    }
    config INET boolean {
     prompt "TCP/IP networking" if [NET]
     inherited [NET]
     if [NET && INET] {
      config IP_MULTICAST boolean {
       prompt "IP: multicasting" if [NET && INET]
       inherited [NET && INET]
      }
      config IP_ADVANCED_ROUTER boolean {
       prompt "IP: advanced router" if [NET && INET]
       inherited [NET && INET]
       choice boolean {
        prompt "Choose IP: FIB lookup algorithm (choose FIB_HASH if unsure)" if [NET && INET && IP_ADVANCED_ROUTER]
        depends on [IP_ADVANCED_ROUTER]
        default [ASK_IP_FIB_HASH] if [NET && INET && IP_ADVANCED_ROUTER]
        config ASK_IP_FIB_HASH boolean {
         prompt "FIB_HASH" if [<choice>]
         inherited [<choice>]
        }
        config IP_FIB_TRIE boolean {
         prompt "FIB_TRIE" if [<choice>]
         inherited [<choice>]
        }
       }
      }
      config IP_FIB_HASH boolean {
       default [ASK_IP_FIB_HASH || !IP_ADVANCED_ROUTER] if [NET && INET]
       inherited [NET && INET]
      }
      config IP_MULTIPLE_TABLES boolean {
       prompt "IP: policy routing" if [NET && INET && IP_ADVANCED_ROUTER]
       depends on [IP_ADVANCED_ROUTER]
       select FIB_RULES if [NET && INET && IP_ADVANCED_ROUTER]
       inherited [NET && INET && IP_ADVANCED_ROUTER]
      }
      config IP_ROUTE_MULTIPATH boolean {
       prompt "IP: equal cost multipath" if [NET && INET && IP_ADVANCED_ROUTER]
       depends on [IP_ADVANCED_ROUTER]
       inherited [NET && INET && IP_ADVANCED_ROUTER]
       config IP_ROUTE_MULTIPATH_CACHED boolean {
        prompt "IP: equal cost multipath with caching support (EXPERIMENTAL)" if [NET && INET && IP_ROUTE_MULTIPATH]
        depends on [IP_ROUTE_MULTIPATH]
        inherited [NET && INET && IP_ROUTE_MULTIPATH]
        config IP_ROUTE_MULTIPATH_RR tristate {
         prompt "MULTIPATH: round robin algorithm" if [NET && INET && IP_ROUTE_MULTIPATH_CACHED]
         depends on [IP_ROUTE_MULTIPATH_CACHED]
         inherited [NET && INET && IP_ROUTE_MULTIPATH_CACHED]
        }
        config IP_ROUTE_MULTIPATH_RANDOM tristate {
         prompt "MULTIPATH: random algorithm" if [NET && INET && IP_ROUTE_MULTIPATH_CACHED]
         depends on [IP_ROUTE_MULTIPATH_CACHED]
         inherited [NET && INET && IP_ROUTE_MULTIPATH_CACHED]
        }
        config IP_ROUTE_MULTIPATH_WRANDOM tristate {
         prompt "MULTIPATH: weighted random algorithm" if [NET && INET && IP_ROUTE_MULTIPATH_CACHED]
         depends on [IP_ROUTE_MULTIPATH_CACHED]
         inherited [NET && INET && IP_ROUTE_MULTIPATH_CACHED]
        }
        config IP_ROUTE_MULTIPATH_DRR tristate {
         prompt "MULTIPATH: interface round robin algorithm" if [NET && INET && IP_ROUTE_MULTIPATH_CACHED]
         depends on [IP_ROUTE_MULTIPATH_CACHED]
         inherited [NET && INET && IP_ROUTE_MULTIPATH_CACHED]
        }
       }
      }
      config IP_ROUTE_VERBOSE boolean {
       prompt "IP: verbose route monitoring" if [NET && INET && IP_ADVANCED_ROUTER]
       depends on [IP_ADVANCED_ROUTER]
       inherited [NET && INET && IP_ADVANCED_ROUTER]
      }
      config IP_PNP boolean {
       prompt "IP: kernel level autoconfiguration" if [NET && INET]
       inherited [NET && INET]
       config IP_PNP_DHCP boolean {
        prompt "IP: DHCP support" if [NET && INET && IP_PNP]
        depends on [IP_PNP]
        inherited [NET && INET && IP_PNP]
       }
       config IP_PNP_BOOTP boolean {
        prompt "IP: BOOTP support" if [NET && INET && IP_PNP]
        depends on [IP_PNP]
        inherited [NET && INET && IP_PNP]
       }
       config IP_PNP_RARP boolean {
        prompt "IP: RARP support" if [NET && INET && IP_PNP]
        depends on [IP_PNP]
        inherited [NET && INET && IP_PNP]
       }
      }
      config NET_IPIP tristate {
       prompt "IP: tunneling" if [NET && INET]
       select INET_TUNNEL if [NET && INET]
       inherited [NET && INET]
      }
      config NET_IPGRE tristate {
       prompt "IP: GRE tunnels over IP" if [NET && INET]
       inherited [NET && INET]
       config NET_IPGRE_BROADCAST boolean {
        prompt "IP: broadcast GRE over IP" if [NET && INET && IP_MULTICAST && NET_IPGRE]
        depends on [IP_MULTICAST && NET_IPGRE]
        inherited [NET && INET && IP_MULTICAST && NET_IPGRE]
       }
      }
      config IP_MROUTE boolean {
       prompt "IP: multicast routing" if [NET && INET && IP_MULTICAST]
       depends on [IP_MULTICAST]
       inherited [NET && INET && IP_MULTICAST]
       config IP_PIMSM_V1 boolean {
        prompt "IP: PIM-SM version 1 support" if [NET && INET && IP_MROUTE]
        depends on [IP_MROUTE]
        inherited [NET && INET && IP_MROUTE]
       }
       config IP_PIMSM_V2 boolean {
        prompt "IP: PIM-SM version 2 support" if [NET && INET && IP_MROUTE]
        depends on [IP_MROUTE]
        inherited [NET && INET && IP_MROUTE]
       }
      }
      config ARPD boolean {
       prompt "IP: ARP daemon support (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL]
       depends on [EXPERIMENTAL]
       inherited [NET && INET && EXPERIMENTAL]
      }
      config SYN_COOKIES boolean {
       prompt "IP: TCP syncookie support (disabled per default)" if [NET && INET]
       inherited [NET && INET]
      }
      config INET_AH tristate {
       prompt "IP: AH transformation" if [NET && INET]
       select XFRM if [NET && INET]
       select CRYPTO if [NET && INET]
       select CRYPTO_HMAC if [NET && INET]
       select CRYPTO_MD5 if [NET && INET]
       select CRYPTO_SHA1 if [NET && INET]
       inherited [NET && INET]
      }
      config INET_ESP tristate {
       prompt "IP: ESP transformation" if [NET && INET]
       select XFRM if [NET && INET]
       select CRYPTO if [NET && INET]
       select CRYPTO_HMAC if [NET && INET]
       select CRYPTO_MD5 if [NET && INET]
       select CRYPTO_CBC if [NET && INET]
       select CRYPTO_SHA1 if [NET && INET]
       select CRYPTO_DES if [NET && INET]
       inherited [NET && INET]
      }
      config INET_IPCOMP tristate {
       prompt "IP: IPComp transformation" if [NET && INET]
       select XFRM if [NET && INET]
       select INET_XFRM_TUNNEL if [NET && INET]
       select CRYPTO if [NET && INET]
       select CRYPTO_DEFLATE if [NET && INET]
       inherited [NET && INET]
      }
      config INET_XFRM_TUNNEL tristate {
       select INET_TUNNEL if [NET && INET]
       default [n] if [NET && INET]
       inherited [NET && INET]
      }
      config INET_TUNNEL tristate {
       default [n] if [NET && INET]
       inherited [NET && INET]
      }
      config INET_XFRM_MODE_TRANSPORT tristate {
       prompt "IP: IPsec transport mode" if [NET && INET]
       default [y] if [NET && INET]
       select XFRM if [NET && INET]
       inherited [NET && INET]
      }
      config INET_XFRM_MODE_TUNNEL tristate {
       prompt "IP: IPsec tunnel mode" if [NET && INET]
       default [y] if [NET && INET]
       select XFRM if [NET && INET]
       inherited [NET && INET]
      }
      config INET_XFRM_MODE_BEET tristate {
       prompt "IP: IPsec BEET mode" if [NET && INET]
       default [y] if [NET && INET]
       select XFRM if [NET && INET]
       inherited [NET && INET]
      }
      config INET_DIAG tristate {
       prompt "INET: socket monitoring interface" if [NET && INET]
       default [y] if [NET && INET]
       inherited [NET && INET]
       config INET_TCP_DIAG tristate {
        depends on [INET_DIAG]
        default [INET_DIAG] if [NET && INET && INET_DIAG]
        inherited [NET && INET && INET_DIAG]
       }
      }
      menuconfig TCP_CONG_ADVANCED boolean {
       prompt "TCP: advanced congestion control" if [NET && INET]
       inherited [NET && INET]
       if [NET && INET && TCP_CONG_ADVANCED] {
        config TCP_CONG_BIC tristate {
         prompt "Binary Increase Congestion (BIC) control" if [NET && INET && TCP_CONG_ADVANCED]
         default [m] if [NET && INET && TCP_CONG_ADVANCED]
         inherited [NET && INET && TCP_CONG_ADVANCED]
        }
        config TCP_CONG_CUBIC tristate {
         prompt "CUBIC TCP" if [NET && INET && TCP_CONG_ADVANCED]
         default [y] if [NET && INET && TCP_CONG_ADVANCED]
         depends on [!TCP_CONG_ADVANCED]
         default [y] if [NET && INET && !TCP_CONG_ADVANCED]
         inherited [NET && INET && TCP_CONG_ADVANCED]
        }
        config TCP_CONG_WESTWOOD tristate {
         prompt "TCP Westwood+" if [NET && INET && TCP_CONG_ADVANCED]
         default [m] if [NET && INET && TCP_CONG_ADVANCED]
         inherited [NET && INET && TCP_CONG_ADVANCED]
        }
        config TCP_CONG_HTCP tristate {
         prompt "H-TCP" if [NET && INET && TCP_CONG_ADVANCED]
         default [m] if [NET && INET && TCP_CONG_ADVANCED]
         inherited [NET && INET && TCP_CONG_ADVANCED]
        }
        config TCP_CONG_HSTCP tristate {
         prompt "High Speed TCP" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         depends on [EXPERIMENTAL]
         default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        }
        config TCP_CONG_HYBLA tristate {
         prompt "TCP-Hybla congestion control algorithm" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         depends on [EXPERIMENTAL]
         default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        }
        config TCP_CONG_VEGAS tristate {
         prompt "TCP Vegas" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         depends on [EXPERIMENTAL]
         default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        }
        config TCP_CONG_SCALABLE tristate {
         prompt "Scalable TCP" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         depends on [EXPERIMENTAL]
         default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        }
        config TCP_CONG_LP tristate {
         prompt "TCP Low Priority" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         depends on [EXPERIMENTAL]
         default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        }
        config TCP_CONG_VENO tristate {
         prompt "TCP Veno" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         depends on [EXPERIMENTAL]
         default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        }
        choice boolean {
         prompt "Default TCP congestion control" if [NET && INET && TCP_CONG_ADVANCED]
         default [DEFAULT_CUBIC] if [NET && INET && TCP_CONG_ADVANCED]
         config DEFAULT_BIC boolean {
          prompt "Bic" if [<choice> && TCP_CONG_BIC="y"]
          inherited [<choice>]
         }
         config DEFAULT_CUBIC boolean {
          prompt "Cubic" if [<choice> && TCP_CONG_CUBIC="y"]
          inherited [<choice>]
         }
         config DEFAULT_HTCP boolean {
          prompt "Htcp" if [<choice> && TCP_CONG_HTCP="y"]
          inherited [<choice>]
         }
         config DEFAULT_VEGAS boolean {
          prompt "Vegas" if [<choice> && TCP_CONG_VEGAS="y"]
          inherited [<choice>]
         }
         config DEFAULT_WESTWOOD boolean {
          prompt "Westwood" if [<choice> && TCP_CONG_WESTWOOD="y"]
          inherited [<choice>]
         }
         config DEFAULT_RENO boolean {
          prompt "Reno" if [<choice>]
          inherited [<choice>]
         }
        }
       }
       config TCP_CONG_CUBIC tristate {
        prompt "CUBIC TCP" if [NET && INET && TCP_CONG_ADVANCED]
        default [y] if [NET && INET && TCP_CONG_ADVANCED]
        depends on [!TCP_CONG_ADVANCED]
        default [y] if [NET && INET && !TCP_CONG_ADVANCED]
        inherited [NET && INET && !TCP_CONG_ADVANCED]
       }
      }
      config DEFAULT_TCP_CONG string {
       default ["bic"] if [NET && INET && DEFAULT_BIC]
       default ["cubic"] if [NET && INET && DEFAULT_CUBIC]
       default ["htcp"] if [NET && INET && DEFAULT_HTCP]
       default ["vegas"] if [NET && INET && DEFAULT_VEGAS]
       default ["westwood"] if [NET && INET && DEFAULT_WESTWOOD]
       default ["reno"] if [NET && INET && DEFAULT_RENO]
       default ["cubic"] if [NET && INET]
       inherited [NET && INET]
      }
      config TCP_MD5SIG boolean {
       prompt "TCP: MD5 Signature Option support (RFC2385) (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL]
       depends on [EXPERIMENTAL]
       select CRYPTO if [NET && INET && EXPERIMENTAL]
       select CRYPTO_MD5 if [NET && INET && EXPERIMENTAL]
       inherited [NET && INET && EXPERIMENTAL]
      }
      menu "IP: Virtual Server Configuration" {
       depends on [NET && INET && NETFILTER]
       config IP_VS tristate {
        prompt "IP virtual server support (EXPERIMENTAL)" if [NET && INET && NETFILTER]
        depends on [NETFILTER]
        inherited [NET && INET && NETFILTER]
        config IP_VS_DEBUG boolean {
         prompt "IP virtual server debugging" if [NET && INET && NETFILTER && IP_VS]
         depends on [IP_VS]
         inherited [NET && INET && NETFILTER && IP_VS]
        }
        config IP_VS_TAB_BITS integer {
         prompt "IPVS connection table size (the Nth power of 2)" if [NET && INET && NETFILTER && IP_VS]
         depends on [IP_VS]
         default [12] if [NET && INET && NETFILTER && IP_VS]
         inherited [NET && INET && NETFILTER && IP_VS]
        }
        config IP_VS_PROTO_TCP boolean {
         prompt "TCP load balancing support" if [NET && INET && NETFILTER && IP_VS]
         depends on [IP_VS]
         inherited [NET && INET && NETFILTER && IP_VS]
        }
        config IP_VS_PROTO_UDP boolean {
         prompt "UDP load balancing support" if [NET && INET && NETFILTER && IP_VS]
         depends on [IP_VS]
         inherited [NET && INET && NETFILTER && IP_VS]
        }
        config IP_VS_PROTO_ESP boolean {
         prompt "ESP load balancing support" if [NET && INET && NETFILTER && IP_VS]
         depends on [IP_VS]
         inherited [NET && INET && NETFILTER && IP_VS]
        }
        config IP_VS_PROTO_AH boolean {
         prompt "AH load balancing support" if [NET && INET && NETFILTER && IP_VS]
         depends on [IP_VS]
         inherited [NET && INET && NETFILTER && IP_VS]
        }
        config IP_VS_RR tristate {
         prompt "round-robin scheduling" if [NET && INET && NETFILTER && IP_VS]
         depends on [IP_VS]
         inherited [NET && INET && NETFILTER && IP_VS]
        }
        config IP_VS_WRR tristate {
         prompt "weighted round-robin scheduling" if [NET && INET && NETFILTER && IP_VS]
         depends on [IP_VS]
         inherited [NET && INET && NETFILTER && IP_VS]
        }
        config IP_VS_LC tristate {
         prompt "least-connection scheduling" if [NET && INET && NETFILTER && IP_VS]
         depends on [IP_VS]
         inherited [NET && INET && NETFILTER && IP_VS]
        }
        config IP_VS_WLC tristate {
         prompt "weighted least-connection scheduling" if [NET && INET && NETFILTER && IP_VS]
         depends on [IP_VS]
         inherited [NET && INET && NETFILTER && IP_VS]
        }
        config IP_VS_LBLC tristate {
         prompt "locality-based least-connection scheduling" if [NET && INET && NETFILTER && IP_VS]
         depends on [IP_VS]
         inherited [NET && INET && NETFILTER && IP_VS]
        }
        config IP_VS_LBLCR tristate {
         prompt "locality-based least-connection with replication scheduling" if [NET && INET && NETFILTER && IP_VS]
         depends on [IP_VS]
         inherited [NET && INET && NETFILTER && IP_VS]
        }
        config IP_VS_DH tristate {
         prompt "destination hashing scheduling" if [NET && INET && NETFILTER && IP_VS]
         depends on [IP_VS]
         inherited [NET && INET && NETFILTER && IP_VS]
        }
        config IP_VS_SH tristate {
         prompt "source hashing scheduling" if [NET && INET && NETFILTER && IP_VS]
         depends on [IP_VS]
         inherited [NET && INET && NETFILTER && IP_VS]
        }
        config IP_VS_SED tristate {
         prompt "shortest expected delay scheduling" if [NET && INET && NETFILTER && IP_VS]
         depends on [IP_VS]
         inherited [NET && INET && NETFILTER && IP_VS]
        }
        config IP_VS_NQ tristate {
         prompt "never queue scheduling" if [NET && INET && NETFILTER && IP_VS]
         depends on [IP_VS]
         inherited [NET && INET && NETFILTER && IP_VS]
        }
        config IP_VS_FTP tristate {
         prompt "FTP protocol helper" if [NET && INET && NETFILTER && IP_VS && IP_VS_PROTO_TCP]
         depends on [IP_VS && IP_VS_PROTO_TCP]
         inherited [NET && INET && NETFILTER && IP_VS && IP_VS_PROTO_TCP]
        }
       }
      }
      config IPV6 tristate {
       prompt "The IPv6 protocol" if [NET && INET]
       default [m] if [NET && INET]
       inherited [NET && INET]
       config IPV6_PRIVACY boolean {
        prompt "IPv6: Privacy Extensions support" if [NET && INET && IPV6]
        depends on [IPV6]
        inherited [NET && INET && IPV6]
       }
       config IPV6_ROUTER_PREF boolean {
        prompt "IPv6: Router Preference (RFC 4191) support" if [NET && INET && IPV6]
        depends on [IPV6]
        inherited [NET && INET && IPV6]
        config IPV6_ROUTE_INFO boolean {
         prompt "IPv6: Route Information (RFC 4191) support (EXPERIMENTAL)" if [NET && INET && IPV6_ROUTER_PREF && EXPERIMENTAL]
         depends on [IPV6_ROUTER_PREF && EXPERIMENTAL]
         inherited [NET && INET && IPV6_ROUTER_PREF && EXPERIMENTAL]
        }
       }
       config INET6_AH tristate {
        prompt "IPv6: AH transformation" if [NET && INET && IPV6]
        depends on [IPV6]
        select XFRM if [NET && INET && IPV6]
        select CRYPTO if [NET && INET && IPV6]
        select CRYPTO_HMAC if [NET && INET && IPV6]
        select CRYPTO_MD5 if [NET && INET && IPV6]
        select CRYPTO_SHA1 if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config INET6_ESP tristate {
        prompt "IPv6: ESP transformation" if [NET && INET && IPV6]
        depends on [IPV6]
        select XFRM if [NET && INET && IPV6]
        select CRYPTO if [NET && INET && IPV6]
        select CRYPTO_HMAC if [NET && INET && IPV6]
        select CRYPTO_MD5 if [NET && INET && IPV6]
        select CRYPTO_CBC if [NET && INET && IPV6]
        select CRYPTO_SHA1 if [NET && INET && IPV6]
        select CRYPTO_DES if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config INET6_IPCOMP tristate {
        prompt "IPv6: IPComp transformation" if [NET && INET && IPV6]
        depends on [IPV6]
        select XFRM if [NET && INET && IPV6]
        select INET6_XFRM_TUNNEL if [NET && INET && IPV6]
        select CRYPTO if [NET && INET && IPV6]
        select CRYPTO_DEFLATE if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config IPV6_MIP6 boolean {
        prompt "IPv6: Mobility (EXPERIMENTAL)" if [NET && INET && IPV6 && EXPERIMENTAL]
        depends on [IPV6 && EXPERIMENTAL]
        select XFRM if [NET && INET && IPV6 && EXPERIMENTAL]
        inherited [NET && INET && IPV6 && EXPERIMENTAL]
       }
      }
      config INET6_XFRM_TUNNEL tristate {
       select INET6_TUNNEL if [NET && INET]
       default [n] if [NET && INET]
       inherited [NET && INET]
      }
      config INET6_TUNNEL tristate {
       default [n] if [NET && INET]
       inherited [NET && INET]
      }
      config INET6_XFRM_MODE_TRANSPORT tristate {
       prompt "IPv6: IPsec transport mode" if [NET && INET && IPV6]
       depends on [IPV6]
       default [IPV6] if [NET && INET && IPV6]
       select XFRM if [NET && INET && IPV6]
       inherited [NET && INET && IPV6]
      }
      config INET6_XFRM_MODE_TUNNEL tristate {
       prompt "IPv6: IPsec tunnel mode" if [NET && INET && IPV6]
       depends on [IPV6]
       default [IPV6] if [NET && INET && IPV6]
       select XFRM if [NET && INET && IPV6]
       inherited [NET && INET && IPV6]
      }
      config INET6_XFRM_MODE_BEET tristate {
       prompt "IPv6: IPsec BEET mode" if [NET && INET && IPV6]
       depends on [IPV6]
       default [IPV6] if [NET && INET && IPV6]
       select XFRM if [NET && INET && IPV6]
       inherited [NET && INET && IPV6]
      }
      config INET6_XFRM_MODE_ROUTEOPTIMIZATION tristate {
       prompt "IPv6: MIPv6 route optimization mode (EXPERIMENTAL)" if [NET && INET && IPV6 && EXPERIMENTAL]
       depends on [IPV6 && EXPERIMENTAL]
       select XFRM if [NET && INET && IPV6 && EXPERIMENTAL]
       inherited [NET && INET && IPV6 && EXPERIMENTAL]
      }
      config IPV6_SIT tristate {
       prompt "IPv6: IPv6-in-IPv4 tunnel (SIT driver)" if [NET && INET && IPV6]
       depends on [IPV6]
       default [y] if [NET && INET && IPV6]
       inherited [NET && INET && IPV6]
      }
      config IPV6_TUNNEL tristate {
       prompt "IPv6: IPv6-in-IPv6 tunnel" if [NET && INET && IPV6]
       select INET6_TUNNEL if [NET && INET && IPV6]
       depends on [IPV6]
       inherited [NET && INET && IPV6]
      }
      config IPV6_MULTIPLE_TABLES boolean {
       prompt "IPv6: Multiple Routing Tables" if [NET && INET && IPV6 && EXPERIMENTAL]
       depends on [IPV6 && EXPERIMENTAL]
       select FIB_RULES if [NET && INET && IPV6 && EXPERIMENTAL]
       inherited [NET && INET && IPV6 && EXPERIMENTAL]
       config IPV6_SUBTREES boolean {
        prompt "IPv6: source address based routing" if [NET && INET && IPV6_MULTIPLE_TABLES]
        depends on [IPV6_MULTIPLE_TABLES]
        inherited [NET && INET && IPV6_MULTIPLE_TABLES]
       }
      }
      config NETLABEL boolean {
       prompt "NetLabel subsystem support" if [NET && INET && SECURITY]
       depends on [SECURITY]
       default [n] if [NET && INET && SECURITY]
       inherited [NET && INET && SECURITY]
      }
     }
    }
    config NETWORK_SECMARK boolean {
     prompt "Security Marking" if [NET]
     inherited [NET]
    }
    menuconfig NETFILTER boolean {
     prompt "Network packet filtering framework (Netfilter)" if [NET]
     inherited [NET]
     if [NET && NETFILTER] {
      config NETFILTER_DEBUG boolean {
       prompt "Network packet filtering debugging" if [NET && NETFILTER]
       depends on [NETFILTER]
       inherited [NET && NETFILTER]
      }
      config BRIDGE_NETFILTER boolean {
       prompt "Bridged IP/ARP packets filtering" if [NET && BRIDGE && NETFILTER && INET]
       depends on [BRIDGE && NETFILTER && INET]
       default [y] if [NET && BRIDGE && NETFILTER && INET]
       inherited [NET && BRIDGE && NETFILTER && INET]
      }
      menu "Core Netfilter Configuration" {
       depends on [NET && INET && NETFILTER]
       config NETFILTER_NETLINK tristate {
        prompt "Netfilter netlink interface" if [NET && INET && NETFILTER]
        inherited [NET && INET && NETFILTER]
        config NETFILTER_NETLINK_QUEUE tristate {
         prompt "Netfilter NFQUEUE over NFNETLINK interface" if [NET && INET && NETFILTER && NETFILTER_NETLINK]
         depends on [NETFILTER_NETLINK]
         inherited [NET && INET && NETFILTER && NETFILTER_NETLINK]
        }
        config NETFILTER_NETLINK_LOG tristate {
         prompt "Netfilter LOG over NFNETLINK interface" if [NET && INET && NETFILTER && NETFILTER_NETLINK]
         depends on [NETFILTER_NETLINK]
         inherited [NET && INET && NETFILTER && NETFILTER_NETLINK]
        }
       }
       config NF_CONNTRACK_ENABLED tristate {
        prompt "Netfilter connection tracking support" if [NET && INET && NETFILTER]
        inherited [NET && INET && NETFILTER]
        choice boolean {
         prompt "Netfilter connection tracking support" if [NET && INET && NETFILTER && NF_CONNTRACK_ENABLED]
         depends on [NF_CONNTRACK_ENABLED]
         config NF_CONNTRACK_SUPPORT boolean {
          prompt "Layer 3 Independent Connection tracking" if [<choice>]
          inherited [<choice>]
         }
         config IP_NF_CONNTRACK_SUPPORT boolean {
          prompt "Layer 3 Dependent Connection tracking (OBSOLETE)" if [<choice>]
          inherited [<choice>]
         }
        }
       }
       config NF_CONNTRACK tristate {
        default [m] if [NET && INET && NETFILTER && NF_CONNTRACK_SUPPORT && NF_CONNTRACK_ENABLED="m"]
        default [y] if [NET && INET && NETFILTER && NF_CONNTRACK_SUPPORT && NF_CONNTRACK_ENABLED="y"]
        inherited [NET && INET && NETFILTER]
       }
       config IP_NF_CONNTRACK tristate {
        default [m] if [NET && INET && NETFILTER && IP_NF_CONNTRACK_SUPPORT && NF_CONNTRACK_ENABLED="m"]
        default [y] if [NET && INET && NETFILTER && IP_NF_CONNTRACK_SUPPORT && NF_CONNTRACK_ENABLED="y"]
        inherited [NET && INET && NETFILTER]
       }
       config NF_CT_ACCT boolean {
        prompt "Connection tracking flow accounting" if [NET && INET && NETFILTER && NF_CONNTRACK]
        depends on [NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && NF_CONNTRACK]
       }
       config NF_CONNTRACK_MARK boolean {
        prompt "Connection mark tracking support" if [NET && INET && NETFILTER && NF_CONNTRACK]
        depends on [NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && NF_CONNTRACK]
       }
       config NF_CONNTRACK_SECMARK boolean {
        prompt "Connection tracking security mark support" if [NET && INET && NETFILTER && NF_CONNTRACK && NETWORK_SECMARK]
        depends on [NF_CONNTRACK && NETWORK_SECMARK]
        inherited [NET && INET && NETFILTER && NF_CONNTRACK && NETWORK_SECMARK]
       }
       config NF_CONNTRACK_EVENTS boolean {
        prompt "Connection tracking events (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK]
        depends on [EXPERIMENTAL && NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK]
       }
       config NF_CT_PROTO_GRE tristate {
        depends on [NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && NF_CONNTRACK]
       }
       config NF_CT_PROTO_SCTP tristate {
        prompt "SCTP protocol connection tracking support (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK]
        depends on [EXPERIMENTAL && NF_CONNTRACK]
        default [n] if [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK]
       }
       config NF_CONNTRACK_AMANDA tristate {
        prompt "Amanda backup protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK]
        depends on [NF_CONNTRACK]
        select TEXTSEARCH if [NET && INET && NETFILTER && NF_CONNTRACK]
        select TEXTSEARCH_KMP if [NET && INET && NETFILTER && NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && NF_CONNTRACK]
       }
       config NF_CONNTRACK_FTP tristate {
        prompt "FTP protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK]
        depends on [NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && NF_CONNTRACK]
       }
       config NF_CONNTRACK_H323 tristate {
        prompt "H.323 protocol support (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK && (IPV6 || IPV6="n")]
        depends on [EXPERIMENTAL && NF_CONNTRACK && (IPV6 || IPV6="n")]
        inherited [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK && (IPV6 || IPV6="n")]
       }
       config NF_CONNTRACK_IRC tristate {
        prompt "IRC protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK]
        depends on [NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && NF_CONNTRACK]
       }
       config NF_CONNTRACK_NETBIOS_NS tristate {
        prompt "NetBIOS name service protocol support (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK]
        depends on [EXPERIMENTAL && NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK]
       }
       config NF_CONNTRACK_PPTP tristate {
        prompt "PPtP protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK]
        depends on [NF_CONNTRACK]
        select NF_CT_PROTO_GRE if [NET && INET && NETFILTER && NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && NF_CONNTRACK]
       }
       config NF_CONNTRACK_SIP tristate {
        prompt "SIP protocol support (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK]
        depends on [EXPERIMENTAL && NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK]
       }
       config NF_CONNTRACK_TFTP tristate {
        prompt "TFTP protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK]
        depends on [NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && NF_CONNTRACK]
       }
       config NF_CT_NETLINK tristate {
        prompt "Connection tracking netlink interface (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK && NETFILTER_NETLINK && (NF_CONNTRACK!="y" || NETFILTER_NETLINK!="m")]
        depends on [EXPERIMENTAL && NF_CONNTRACK && NETFILTER_NETLINK]
        depends on [NF_CONNTRACK!="y" || NETFILTER_NETLINK!="m"]
        inherited [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK && NETFILTER_NETLINK && (NF_CONNTRACK!="y" || NETFILTER_NETLINK!="m")]
       }
       config NETFILTER_XTABLES tristate {
        prompt "Netfilter Xtables support (required for ip_tables)" if [NET && INET && NETFILTER]
        inherited [NET && INET && NETFILTER]
        config NETFILTER_XT_TARGET_CLASSIFY tristate {
         prompt "\"CLASSIFY\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_TARGET_CONNMARK tristate {
         prompt "\"CONNMARK\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_MANGLE || IP6_NF_MANGLE) && (IP_NF_CONNTRACK && IP_NF_CONNTRACK_MARK || NF_CONNTRACK_MARK && NF_CONNTRACK)]
         depends on [NETFILTER_XTABLES]
         depends on [IP_NF_MANGLE || IP6_NF_MANGLE]
         depends on [IP_NF_CONNTRACK && IP_NF_CONNTRACK_MARK || NF_CONNTRACK_MARK && NF_CONNTRACK]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_MANGLE || IP6_NF_MANGLE) && (IP_NF_CONNTRACK && IP_NF_CONNTRACK_MARK || NF_CONNTRACK_MARK && NF_CONNTRACK)]
        }
        config NETFILTER_XT_TARGET_DSCP tristate {
         prompt "\"DSCP\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_MANGLE || IP6_NF_MANGLE)]
         depends on [NETFILTER_XTABLES]
         depends on [IP_NF_MANGLE || IP6_NF_MANGLE]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_MANGLE || IP6_NF_MANGLE)]
        }
        config NETFILTER_XT_TARGET_MARK tristate {
         prompt "\"MARK\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_TARGET_NFQUEUE tristate {
         prompt "\"NFQUEUE\" target Support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_TARGET_NFLOG tristate {
         prompt "\"NFLOG\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_TARGET_NOTRACK tristate {
         prompt "\"NOTRACK\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_RAW || IP6_NF_RAW) && (IP_NF_CONNTRACK || NF_CONNTRACK)]
         depends on [NETFILTER_XTABLES]
         depends on [IP_NF_RAW || IP6_NF_RAW]
         depends on [IP_NF_CONNTRACK || NF_CONNTRACK]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_RAW || IP6_NF_RAW) && (IP_NF_CONNTRACK || NF_CONNTRACK)]
        }
        config NETFILTER_XT_TARGET_SECMARK tristate {
         prompt "\"SECMARK\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETWORK_SECMARK]
         depends on [NETFILTER_XTABLES && NETWORK_SECMARK]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETWORK_SECMARK]
        }
        config NETFILTER_XT_TARGET_CONNSECMARK tristate {
         prompt "\"CONNSECMARK\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (NF_CONNTRACK && NF_CONNTRACK_SECMARK || IP_NF_CONNTRACK && IP_NF_CONNTRACK_SECMARK)]
         depends on [NETFILTER_XTABLES && (NF_CONNTRACK && NF_CONNTRACK_SECMARK || IP_NF_CONNTRACK && IP_NF_CONNTRACK_SECMARK)]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (NF_CONNTRACK && NF_CONNTRACK_SECMARK || IP_NF_CONNTRACK && IP_NF_CONNTRACK_SECMARK)]
        }
        config NETFILTER_XT_MATCH_COMMENT tristate {
         prompt "\"comment\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_CONNBYTES tristate {
         prompt "\"connbytes\" per-connection counter match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_CONNTRACK && IP_NF_CT_ACCT || NF_CT_ACCT && NF_CONNTRACK)]
         depends on [NETFILTER_XTABLES]
         depends on [IP_NF_CONNTRACK && IP_NF_CT_ACCT || NF_CT_ACCT && NF_CONNTRACK]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_CONNTRACK && IP_NF_CT_ACCT || NF_CT_ACCT && NF_CONNTRACK)]
        }
        config NETFILTER_XT_MATCH_CONNMARK tristate {
         prompt "\"connmark\" connection mark match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_CONNTRACK && IP_NF_CONNTRACK_MARK || NF_CONNTRACK_MARK && NF_CONNTRACK)]
         depends on [NETFILTER_XTABLES]
         depends on [IP_NF_CONNTRACK && IP_NF_CONNTRACK_MARK || NF_CONNTRACK_MARK && NF_CONNTRACK]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_CONNTRACK && IP_NF_CONNTRACK_MARK || NF_CONNTRACK_MARK && NF_CONNTRACK)]
        }
        config NETFILTER_XT_MATCH_CONNTRACK tristate {
         prompt "\"conntrack\" connection tracking match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_CONNTRACK || NF_CONNTRACK)]
         depends on [NETFILTER_XTABLES]
         depends on [IP_NF_CONNTRACK || NF_CONNTRACK]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_CONNTRACK || NF_CONNTRACK)]
        }
        config NETFILTER_XT_MATCH_DCCP tristate {
         prompt "\"DCCP\" protocol match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_DSCP tristate {
         prompt "\"DSCP\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_ESP tristate {
         prompt "\"ESP\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_HELPER tristate {
         prompt "\"helper\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_CONNTRACK || NF_CONNTRACK)]
         depends on [NETFILTER_XTABLES]
         depends on [IP_NF_CONNTRACK || NF_CONNTRACK]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_CONNTRACK || NF_CONNTRACK)]
        }
        config NETFILTER_XT_MATCH_LENGTH tristate {
         prompt "\"length\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_LIMIT tristate {
         prompt "\"limit\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_MAC tristate {
         prompt "\"mac\" address match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_MARK tristate {
         prompt "\"mark\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_POLICY tristate {
         prompt "IPsec \"policy\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && XFRM]
         depends on [NETFILTER_XTABLES && XFRM]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && XFRM]
        }
        config NETFILTER_XT_MATCH_MULTIPORT tristate {
         prompt "Multiple port match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_PHYSDEV tristate {
         prompt "\"physdev\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && BRIDGE && BRIDGE_NETFILTER]
         depends on [NETFILTER_XTABLES && BRIDGE && BRIDGE_NETFILTER]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && BRIDGE && BRIDGE_NETFILTER]
        }
        config NETFILTER_XT_MATCH_PKTTYPE tristate {
         prompt "\"pkttype\" packet type match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_QUOTA tristate {
         prompt "\"quota\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_REALM tristate {
         prompt "\"realm\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         select NET_CLS_ROUTE if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_SCTP tristate {
         prompt "\"sctp\" protocol match support (EXPERIMENTAL)" if [NET && INET && NETFILTER && NETFILTER_XTABLES && EXPERIMENTAL]
         depends on [NETFILTER_XTABLES && EXPERIMENTAL]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && EXPERIMENTAL]
        }
        config NETFILTER_XT_MATCH_STATE tristate {
         prompt "\"state\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_CONNTRACK || NF_CONNTRACK)]
         depends on [NETFILTER_XTABLES]
         depends on [IP_NF_CONNTRACK || NF_CONNTRACK]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_CONNTRACK || NF_CONNTRACK)]
        }
        config NETFILTER_XT_MATCH_STATISTIC tristate {
         prompt "\"statistic\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_STRING tristate {
         prompt "\"string\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         select TEXTSEARCH if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         select TEXTSEARCH_KMP if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         select TEXTSEARCH_BM if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         select TEXTSEARCH_FSM if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_TCPMSS tristate {
         prompt "\"tcpmss\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_HASHLIMIT tristate {
         prompt "\"hashlimit\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP6_NF_IPTABLES || IP6_NF_IPTABLES="n")]
         depends on [NETFILTER_XTABLES && (IP6_NF_IPTABLES || IP6_NF_IPTABLES="n")]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP6_NF_IPTABLES || IP6_NF_IPTABLES="n")]
        }
       }
      }
      menu "IP: Netfilter Configuration" {
       depends on [NET && INET && NETFILTER]
       config NF_CONNTRACK_IPV4 tristate {
        prompt "IPv4 connection tracking support (required for NAT)" if [NET && INET && NETFILTER && NF_CONNTRACK]
        depends on [NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && NF_CONNTRACK]
        config NF_CONNTRACK_PROC_COMPAT boolean {
         prompt "proc/sysctl compatibility with old connection tracking" if [NET && INET && NETFILTER && NF_CONNTRACK_IPV4]
         depends on [NF_CONNTRACK_IPV4]
         default [y] if [NET && INET && NETFILTER && NF_CONNTRACK_IPV4]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK_IPV4]
        }
       }
       config IP_NF_CT_ACCT boolean {
        prompt "Connection tracking flow accounting" if [NET && INET && NETFILTER && IP_NF_CONNTRACK]
        depends on [IP_NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && IP_NF_CONNTRACK]
       }
       config IP_NF_CONNTRACK_MARK boolean {
        prompt "Connection mark tracking support" if [NET && INET && NETFILTER && IP_NF_CONNTRACK]
        depends on [IP_NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && IP_NF_CONNTRACK]
       }
       config IP_NF_CONNTRACK_SECMARK boolean {
        prompt "Connection tracking security mark support" if [NET && INET && NETFILTER && IP_NF_CONNTRACK && NETWORK_SECMARK]
        depends on [IP_NF_CONNTRACK && NETWORK_SECMARK]
        inherited [NET && INET && NETFILTER && IP_NF_CONNTRACK && NETWORK_SECMARK]
       }
       config IP_NF_CONNTRACK_EVENTS boolean {
        prompt "Connection tracking events (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && IP_NF_CONNTRACK]
        depends on [EXPERIMENTAL && IP_NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && EXPERIMENTAL && IP_NF_CONNTRACK]
       }
       config IP_NF_CONNTRACK_NETLINK tristate {
        prompt "Connection tracking netlink interface (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && IP_NF_CONNTRACK && NETFILTER_NETLINK && (IP_NF_CONNTRACK!="y" || NETFILTER_NETLINK!="m") && (IP_NF_NAT="n" || IP_NF_NAT)]
        depends on [EXPERIMENTAL && IP_NF_CONNTRACK && NETFILTER_NETLINK]
        depends on [IP_NF_CONNTRACK!="y" || NETFILTER_NETLINK!="m"]
        depends on [IP_NF_NAT="n" || IP_NF_NAT]
        inherited [NET && INET && NETFILTER && EXPERIMENTAL && IP_NF_CONNTRACK && NETFILTER_NETLINK && (IP_NF_CONNTRACK!="y" || NETFILTER_NETLINK!="m") && (IP_NF_NAT="n" || IP_NF_NAT)]
       }
       config IP_NF_CT_PROTO_SCTP tristate {
        prompt "SCTP protocol connection tracking support (EXPERIMENTAL)" if [NET && INET && NETFILTER && IP_NF_CONNTRACK && EXPERIMENTAL]
        depends on [IP_NF_CONNTRACK && EXPERIMENTAL]
        inherited [NET && INET && NETFILTER && IP_NF_CONNTRACK && EXPERIMENTAL]
       }
       config IP_NF_FTP tristate {
        prompt "FTP protocol support" if [NET && INET && NETFILTER && IP_NF_CONNTRACK]
        depends on [IP_NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && IP_NF_CONNTRACK]
       }
       config IP_NF_IRC tristate {
        prompt "IRC protocol support" if [NET && INET && NETFILTER && IP_NF_CONNTRACK]
        depends on [IP_NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && IP_NF_CONNTRACK]
       }
       config IP_NF_NETBIOS_NS tristate {
        prompt "NetBIOS name service protocol support (EXPERIMENTAL)" if [NET && INET && NETFILTER && IP_NF_CONNTRACK && EXPERIMENTAL]
        depends on [IP_NF_CONNTRACK && EXPERIMENTAL]
        inherited [NET && INET && NETFILTER && IP_NF_CONNTRACK && EXPERIMENTAL]
       }
       config IP_NF_TFTP tristate {
        prompt "TFTP protocol support" if [NET && INET && NETFILTER && IP_NF_CONNTRACK]
        depends on [IP_NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && IP_NF_CONNTRACK]
       }
       config IP_NF_AMANDA tristate {
        prompt "Amanda backup protocol support" if [NET && INET && NETFILTER && IP_NF_CONNTRACK]
        depends on [IP_NF_CONNTRACK]
        select TEXTSEARCH if [NET && INET && NETFILTER && IP_NF_CONNTRACK]
        select TEXTSEARCH_KMP if [NET && INET && NETFILTER && IP_NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && IP_NF_CONNTRACK]
       }
       config IP_NF_PPTP tristate {
        prompt "PPTP protocol support" if [NET && INET && NETFILTER && IP_NF_CONNTRACK]
        depends on [IP_NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && IP_NF_CONNTRACK]
       }
       config IP_NF_H323 tristate {
        prompt "H.323 protocol support (EXPERIMENTAL)" if [NET && INET && NETFILTER && IP_NF_CONNTRACK && EXPERIMENTAL]
        depends on [IP_NF_CONNTRACK && EXPERIMENTAL]
        inherited [NET && INET && NETFILTER && IP_NF_CONNTRACK && EXPERIMENTAL]
       }
       config IP_NF_SIP tristate {
        prompt "SIP protocol support (EXPERIMENTAL)" if [NET && INET && NETFILTER && IP_NF_CONNTRACK && EXPERIMENTAL]
        depends on [IP_NF_CONNTRACK && EXPERIMENTAL]
        inherited [NET && INET && NETFILTER && IP_NF_CONNTRACK && EXPERIMENTAL]
       }
       config IP_NF_QUEUE tristate {
        prompt "IP Userspace queueing via NETLINK (OBSOLETE)" if [NET && INET && NETFILTER]
        inherited [NET && INET && NETFILTER]
       }
       config IP_NF_IPTABLES tristate {
        prompt "IP tables support (required for filtering/masq/NAT)" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
        depends on [NETFILTER_XTABLES]
        inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        config IP_NF_MATCH_IPRANGE tristate {
         prompt "IP range match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config IP_NF_MATCH_TOS tristate {
         prompt "TOS match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config IP_NF_MATCH_RECENT tristate {
         prompt "recent match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config IP_NF_MATCH_ECN tristate {
         prompt "ECN match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config IP_NF_MATCH_AH tristate {
         prompt "AH match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config IP_NF_MATCH_TTL tristate {
         prompt "TTL match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config IP_NF_MATCH_OWNER tristate {
         prompt "Owner match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config IP_NF_MATCH_ADDRTYPE tristate {
         prompt "address type match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config IP_NF_FILTER tristate {
         prompt "Packet filtering" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
         config IP_NF_TARGET_REJECT tristate {
          prompt "REJECT target support" if [NET && INET && NETFILTER && IP_NF_FILTER]
          depends on [IP_NF_FILTER]
          inherited [NET && INET && NETFILTER && IP_NF_FILTER]
         }
        }
        config IP_NF_TARGET_LOG tristate {
         prompt "LOG target support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config IP_NF_TARGET_ULOG tristate {
         prompt "ULOG target support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config IP_NF_TARGET_TCPMSS tristate {
         prompt "TCPMSS target support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config IP_NF_NAT tristate {
         prompt "Full NAT" if [NET && INET && NETFILTER && IP_NF_IPTABLES && IP_NF_CONNTRACK]
         depends on [IP_NF_IPTABLES && IP_NF_CONNTRACK]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && IP_NF_CONNTRACK]
        }
        config NF_NAT tristate {
         prompt "Full NAT" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK_IPV4]
         depends on [IP_NF_IPTABLES && NF_CONNTRACK_IPV4]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK_IPV4]
        }
       }
       config IP_NF_NAT_NEEDED boolean {
        depends on [IP_NF_NAT]
        default [y] if [NET && INET && NETFILTER && IP_NF_NAT]
        inherited [NET && INET && NETFILTER && IP_NF_NAT]
       }
       config NF_NAT_NEEDED boolean {
        depends on [NF_NAT]
        default [y] if [NET && INET && NETFILTER && NF_NAT]
        inherited [NET && INET && NETFILTER && NF_NAT]
       }
       config IP_NF_TARGET_MASQUERADE tristate {
        prompt "MASQUERADE target support" if [NET && INET && NETFILTER && (NF_NAT || IP_NF_NAT)]
        depends on [NF_NAT || IP_NF_NAT]
        inherited [NET && INET && NETFILTER && (NF_NAT || IP_NF_NAT)]
       }
       config IP_NF_TARGET_REDIRECT tristate {
        prompt "REDIRECT target support" if [NET && INET && NETFILTER && (NF_NAT || IP_NF_NAT)]
        depends on [NF_NAT || IP_NF_NAT]
        inherited [NET && INET && NETFILTER && (NF_NAT || IP_NF_NAT)]
       }
       config IP_NF_TARGET_NETMAP tristate {
        prompt "NETMAP target support" if [NET && INET && NETFILTER && (NF_NAT || IP_NF_NAT)]
        depends on [NF_NAT || IP_NF_NAT]
        inherited [NET && INET && NETFILTER && (NF_NAT || IP_NF_NAT)]
       }
       config IP_NF_TARGET_SAME tristate {
        prompt "SAME target support" if [NET && INET && NETFILTER && (NF_NAT || IP_NF_NAT)]
        depends on [NF_NAT || IP_NF_NAT]
        inherited [NET && INET && NETFILTER && (NF_NAT || IP_NF_NAT)]
       }
       config IP_NF_NAT_SNMP_BASIC tristate {
        prompt "Basic SNMP-ALG support (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && IP_NF_NAT]
        depends on [EXPERIMENTAL && IP_NF_NAT]
        inherited [NET && INET && NETFILTER && EXPERIMENTAL && IP_NF_NAT]
       }
       config NF_NAT_SNMP_BASIC tristate {
        prompt "Basic SNMP-ALG support (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && NF_NAT]
        depends on [EXPERIMENTAL && NF_NAT]
        inherited [NET && INET && NETFILTER && EXPERIMENTAL && NF_NAT]
       }
       config NF_NAT_PROTO_GRE tristate {
        depends on [NF_NAT && NF_CT_PROTO_GRE]
        inherited [NET && INET && NETFILTER && NF_NAT && NF_CT_PROTO_GRE]
       }
       config IP_NF_NAT_FTP tristate {
        depends on [IP_NF_IPTABLES && IP_NF_CONNTRACK && IP_NF_NAT]
        default [IP_NF_NAT && IP_NF_FTP] if [NET && INET && NETFILTER && IP_NF_IPTABLES && IP_NF_CONNTRACK && IP_NF_NAT]
        inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && IP_NF_CONNTRACK && IP_NF_NAT]
       }
       config NF_NAT_FTP tristate {
        depends on [IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
        default [NF_NAT && NF_CONNTRACK_FTP] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
        inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
       }
       config IP_NF_NAT_IRC tristate {
        depends on [IP_NF_IPTABLES!="n" && IP_NF_CONNTRACK!="n" && IP_NF_NAT!="n"]
        default [IP_NF_NAT] if [NET && INET && NETFILTER && IP_NF_IPTABLES!="n" && IP_NF_CONNTRACK!="n" && IP_NF_NAT!="n" && IP_NF_IRC="y"]
        default [m] if [NET && INET && NETFILTER && IP_NF_IPTABLES!="n" && IP_NF_CONNTRACK!="n" && IP_NF_NAT!="n" && IP_NF_IRC="m"]
        inherited [NET && INET && NETFILTER && IP_NF_IPTABLES!="n" && IP_NF_CONNTRACK!="n" && IP_NF_NAT!="n"]
       }
       config NF_NAT_IRC tristate {
        depends on [IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
        default [NF_NAT && NF_CONNTRACK_IRC] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
        inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
       }
       config IP_NF_NAT_TFTP tristate {
        depends on [IP_NF_IPTABLES!="n" && IP_NF_CONNTRACK!="n" && IP_NF_NAT!="n"]
        default [IP_NF_NAT] if [NET && INET && NETFILTER && IP_NF_IPTABLES!="n" && IP_NF_CONNTRACK!="n" && IP_NF_NAT!="n" && IP_NF_TFTP="y"]
        default [m] if [NET && INET && NETFILTER && IP_NF_IPTABLES!="n" && IP_NF_CONNTRACK!="n" && IP_NF_NAT!="n" && IP_NF_TFTP="m"]
        inherited [NET && INET && NETFILTER && IP_NF_IPTABLES!="n" && IP_NF_CONNTRACK!="n" && IP_NF_NAT!="n"]
       }
       config NF_NAT_TFTP tristate {
        depends on [IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
        default [NF_NAT && NF_CONNTRACK_TFTP] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
        inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
       }
       config IP_NF_NAT_AMANDA tristate {
        depends on [IP_NF_IPTABLES!="n" && IP_NF_CONNTRACK!="n" && IP_NF_NAT!="n"]
        default [IP_NF_NAT] if [NET && INET && NETFILTER && IP_NF_IPTABLES!="n" && IP_NF_CONNTRACK!="n" && IP_NF_NAT!="n" && IP_NF_AMANDA="y"]
        default [m] if [NET && INET && NETFILTER && IP_NF_IPTABLES!="n" && IP_NF_CONNTRACK!="n" && IP_NF_NAT!="n" && IP_NF_AMANDA="m"]
        inherited [NET && INET && NETFILTER && IP_NF_IPTABLES!="n" && IP_NF_CONNTRACK!="n" && IP_NF_NAT!="n"]
       }
       config NF_NAT_AMANDA tristate {
        depends on [IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
        default [NF_NAT && NF_CONNTRACK_AMANDA] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
        inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
       }
       config IP_NF_NAT_PPTP tristate {
        depends on [IP_NF_NAT!="n" && IP_NF_PPTP!="n"]
        default [IP_NF_NAT] if [NET && INET && NETFILTER && IP_NF_NAT!="n" && IP_NF_PPTP="y"]
        default [m] if [NET && INET && NETFILTER && IP_NF_NAT!="n" && IP_NF_PPTP="m"]
        inherited [NET && INET && NETFILTER && IP_NF_NAT!="n" && IP_NF_PPTP!="n"]
       }
       config NF_NAT_PPTP tristate {
        depends on [IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
        default [NF_NAT && NF_CONNTRACK_PPTP] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
        select NF_NAT_PROTO_GRE if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
        inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
       }
       config IP_NF_NAT_H323 tristate {
        depends on [IP_NF_IPTABLES!="n" && IP_NF_CONNTRACK!="n" && IP_NF_NAT!="n"]
        default [IP_NF_NAT] if [NET && INET && NETFILTER && IP_NF_IPTABLES!="n" && IP_NF_CONNTRACK!="n" && IP_NF_NAT!="n" && IP_NF_H323="y"]
        default [m] if [NET && INET && NETFILTER && IP_NF_IPTABLES!="n" && IP_NF_CONNTRACK!="n" && IP_NF_NAT!="n" && IP_NF_H323="m"]
        inherited [NET && INET && NETFILTER && IP_NF_IPTABLES!="n" && IP_NF_CONNTRACK!="n" && IP_NF_NAT!="n"]
       }
       config NF_NAT_H323 tristate {
        depends on [IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
        default [NF_NAT && NF_CONNTRACK_H323] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
        inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
       }
       config IP_NF_NAT_SIP tristate {
        depends on [IP_NF_IPTABLES!="n" && IP_NF_CONNTRACK!="n" && IP_NF_NAT!="n"]
        default [IP_NF_NAT] if [NET && INET && NETFILTER && IP_NF_IPTABLES!="n" && IP_NF_CONNTRACK!="n" && IP_NF_NAT!="n" && IP_NF_SIP="y"]
        default [m] if [NET && INET && NETFILTER && IP_NF_IPTABLES!="n" && IP_NF_CONNTRACK!="n" && IP_NF_NAT!="n" && IP_NF_SIP="m"]
        inherited [NET && INET && NETFILTER && IP_NF_IPTABLES!="n" && IP_NF_CONNTRACK!="n" && IP_NF_NAT!="n"]
       }
       config NF_NAT_SIP tristate {
        depends on [IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
        default [NF_NAT && NF_CONNTRACK_SIP] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
        inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
       }
       config IP_NF_MANGLE tristate {
        prompt "Packet mangling" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
        depends on [IP_NF_IPTABLES]
        inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        config IP_NF_TARGET_TOS tristate {
         prompt "TOS target support" if [NET && INET && NETFILTER && IP_NF_MANGLE]
         depends on [IP_NF_MANGLE]
         inherited [NET && INET && NETFILTER && IP_NF_MANGLE]
        }
        config IP_NF_TARGET_ECN tristate {
         prompt "ECN target support" if [NET && INET && NETFILTER && IP_NF_MANGLE]
         depends on [IP_NF_MANGLE]
         inherited [NET && INET && NETFILTER && IP_NF_MANGLE]
        }
        config IP_NF_TARGET_TTL tristate {
         prompt "TTL target support" if [NET && INET && NETFILTER && IP_NF_MANGLE]
         depends on [IP_NF_MANGLE]
         inherited [NET && INET && NETFILTER && IP_NF_MANGLE]
        }
        config IP_NF_TARGET_CLUSTERIP tristate {
         prompt "CLUSTERIP target support (EXPERIMENTAL)" if [NET && INET && NETFILTER && IP_NF_MANGLE && EXPERIMENTAL && (IP_NF_CONNTRACK && IP_NF_CONNTRACK_MARK || NF_CONNTRACK_MARK && NF_CONNTRACK_IPV4)]
         depends on [IP_NF_MANGLE && EXPERIMENTAL]
         depends on [IP_NF_CONNTRACK && IP_NF_CONNTRACK_MARK || NF_CONNTRACK_MARK && NF_CONNTRACK_IPV4]
         inherited [NET && INET && NETFILTER && IP_NF_MANGLE && EXPERIMENTAL && (IP_NF_CONNTRACK && IP_NF_CONNTRACK_MARK || NF_CONNTRACK_MARK && NF_CONNTRACK_IPV4)]
        }
       }
       config IP_NF_RAW tristate {
        prompt "raw table support (required for NOTRACK/TRACE)" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
        depends on [IP_NF_IPTABLES]
        inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
       }
       config IP_NF_ARPTABLES tristate {
        prompt "ARP tables support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
        depends on [NETFILTER_XTABLES]
        inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        config IP_NF_ARPFILTER tristate {
         prompt "ARP packet filtering" if [NET && INET && NETFILTER && IP_NF_ARPTABLES]
         depends on [IP_NF_ARPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_ARPTABLES]
        }
        config IP_NF_ARP_MANGLE tristate {
         prompt "ARP payload mangling" if [NET && INET && NETFILTER && IP_NF_ARPTABLES]
         depends on [IP_NF_ARPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_ARPTABLES]
        }
       }
      }
      menu "IPv6: Netfilter Configuration (EXPERIMENTAL)" {
       depends on [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL]
       config NF_CONNTRACK_IPV6 tristate {
        prompt "IPv6 connection tracking support (EXPERIMENTAL)" if [NET && NETFILTER && INET && IPV6 && EXPERIMENTAL && NF_CONNTRACK]
        depends on [INET && IPV6 && EXPERIMENTAL && NF_CONNTRACK]
        inherited [NET && NETFILTER && INET && IPV6 && EXPERIMENTAL && NF_CONNTRACK]
       }
       config IP6_NF_QUEUE tristate {
        prompt "IP6 Userspace queueing via NETLINK (OBSOLETE)" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL]
        depends on [INET && IPV6 && NETFILTER && EXPERIMENTAL]
        inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL]
       }
       config IP6_NF_IPTABLES tristate {
        prompt "IP6 tables support (required for filtering)" if [NET && NETFILTER && INET && IPV6 && EXPERIMENTAL && NETFILTER_XTABLES]
        depends on [INET && IPV6 && EXPERIMENTAL && NETFILTER_XTABLES]
        inherited [NET && NETFILTER && INET && IPV6 && EXPERIMENTAL && NETFILTER_XTABLES]
        config IP6_NF_MATCH_RT tristate {
         prompt "Routing header match support" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
        }
        config IP6_NF_MATCH_OPTS tristate {
         prompt "Hop-by-hop and Dst opts header match support" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
        }
        config IP6_NF_MATCH_FRAG tristate {
         prompt "Fragmentation header match support" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
        }
        config IP6_NF_MATCH_HL tristate {
         prompt "HL match support" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
        }
        config IP6_NF_MATCH_OWNER tristate {
         prompt "Owner match support" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
        }
        config IP6_NF_MATCH_IPV6HEADER tristate {
         prompt "IPv6 Extension Headers Match" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
        }
        config IP6_NF_MATCH_AH tristate {
         prompt "AH match support" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
        }
        config IP6_NF_MATCH_EUI64 tristate {
         prompt "EUI64 address check" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
        }
        config IP6_NF_FILTER tristate {
         prompt "Packet filtering" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         config IP6_NF_TARGET_LOG tristate {
          prompt "LOG target support" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_FILTER]
          depends on [IP6_NF_FILTER]
          inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_FILTER]
         }
         config IP6_NF_TARGET_REJECT tristate {
          prompt "REJECT target support" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_FILTER]
          depends on [IP6_NF_FILTER]
          inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_FILTER]
         }
        }
        config IP6_NF_MANGLE tristate {
         prompt "Packet mangling" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         config IP6_NF_TARGET_HL tristate {
          prompt "HL (hoplimit) target support" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_MANGLE]
          depends on [IP6_NF_MANGLE]
          inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_MANGLE]
         }
        }
        config IP6_NF_RAW tristate {
         prompt "raw table support (required for TRACE)" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
        }
       }
      }
      menu "DECnet: Netfilter Configuration" {
       depends on [NET && DECNET && NETFILTER && EXPERIMENTAL]
       config DECNET_NF_GRABULATOR tristate {
        prompt "Routing message grabulator (for userland routing daemon)" if [NET && DECNET && NETFILTER && EXPERIMENTAL]
        inherited [NET && DECNET && NETFILTER && EXPERIMENTAL]
       }
      }
      menu "Bridge: Netfilter Configuration" {
       depends on [NET && BRIDGE && NETFILTER]
       config BRIDGE_NF_EBTABLES tristate {
        prompt "Ethernet Bridge tables (ebtables) support" if [NET && BRIDGE && NETFILTER]
        inherited [NET && BRIDGE && NETFILTER]
        config BRIDGE_EBT_BROUTE tristate {
         prompt "ebt: broute table support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_T_FILTER tristate {
         prompt "ebt: filter table support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_T_NAT tristate {
         prompt "ebt: nat table support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_802_3 tristate {
         prompt "ebt: 802.3 filter support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_AMONG tristate {
         prompt "ebt: among filter support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_ARP tristate {
         prompt "ebt: ARP filter support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_IP tristate {
         prompt "ebt: IP filter support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_LIMIT tristate {
         prompt "ebt: limit match support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_MARK tristate {
         prompt "ebt: mark filter support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_PKTTYPE tristate {
         prompt "ebt: packet type filter support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_STP tristate {
         prompt "ebt: STP filter support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_VLAN tristate {
         prompt "ebt: 802.1Q VLAN filter support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_ARPREPLY tristate {
         prompt "ebt: arp reply target support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES && INET]
         depends on [BRIDGE_NF_EBTABLES && INET]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES && INET]
        }
        config BRIDGE_EBT_DNAT tristate {
         prompt "ebt: dnat target support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_MARK_T tristate {
         prompt "ebt: mark target support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_REDIRECT tristate {
         prompt "ebt: redirect target support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_SNAT tristate {
         prompt "ebt: snat target support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_LOG tristate {
         prompt "ebt: log support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_ULOG tristate {
         prompt "ebt: ulog support (OBSOLETE)" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
       }
      }
     }
    }
    menu "DCCP Configuration (EXPERIMENTAL)" {
     depends on [NET && INET && EXPERIMENTAL]
     config IP_DCCP tristate {
      prompt "The DCCP Protocol (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL]
      inherited [NET && INET && EXPERIMENTAL]
      config INET_DCCP_DIAG tristate {
       depends on [IP_DCCP && INET_DIAG]
       default [y] if [NET && INET && EXPERIMENTAL && IP_DCCP="y" && INET_DIAG="y"]
       default [m] if [NET && INET && EXPERIMENTAL && IP_DCCP && INET_DIAG]
       inherited [NET && INET && EXPERIMENTAL && IP_DCCP && INET_DIAG]
      }
      config IP_DCCP_ACKVEC boolean {
       depends on [IP_DCCP]
       inherited [NET && INET && EXPERIMENTAL && IP_DCCP]
      }
      menu "DCCP CCIDs Configuration (EXPERIMENTAL)" {
       depends on [NET && INET && IP_DCCP && EXPERIMENTAL]
       config IP_DCCP_CCID2 tristate {
        prompt "CCID2 (TCP-Like) (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL && IP_DCCP]
        depends on [IP_DCCP]
        default [IP_DCCP] if [NET && INET && EXPERIMENTAL && IP_DCCP]
        select IP_DCCP_ACKVEC if [NET && INET && EXPERIMENTAL && IP_DCCP]
        inherited [NET && INET && EXPERIMENTAL && IP_DCCP]
        config IP_DCCP_CCID2_DEBUG boolean {
         prompt "CCID2 debugging messages" if [NET && INET && IP_DCCP && EXPERIMENTAL && IP_DCCP_CCID2]
         depends on [IP_DCCP_CCID2]
         inherited [NET && INET && IP_DCCP && EXPERIMENTAL && IP_DCCP_CCID2]
        }
       }
       config IP_DCCP_CCID3 tristate {
        prompt "CCID3 (TCP-Friendly) (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL && IP_DCCP]
        depends on [IP_DCCP]
        default [IP_DCCP] if [NET && INET && EXPERIMENTAL && IP_DCCP]
        inherited [NET && INET && EXPERIMENTAL && IP_DCCP]
        config IP_DCCP_TFRC_LIB tristate {
         depends on [IP_DCCP_CCID3]
         default [IP_DCCP_CCID3] if [NET && INET && IP_DCCP && EXPERIMENTAL && IP_DCCP_CCID3]
         inherited [NET && INET && IP_DCCP && EXPERIMENTAL && IP_DCCP_CCID3]
        }
        config IP_DCCP_CCID3_DEBUG boolean {
         prompt "CCID3 debugging messages" if [NET && INET && IP_DCCP && EXPERIMENTAL && IP_DCCP_CCID3]
         depends on [IP_DCCP_CCID3]
         inherited [NET && INET && IP_DCCP && EXPERIMENTAL && IP_DCCP_CCID3]
        }
        config IP_DCCP_CCID3_RTO integer {
         prompt "Use higher bound for nofeedback timer" if [NET && INET && IP_DCCP && IP_DCCP_CCID3 && EXPERIMENTAL]
         default [100] if [NET && INET && IP_DCCP && IP_DCCP_CCID3 && EXPERIMENTAL]
         depends on [IP_DCCP_CCID3 && EXPERIMENTAL]
         inherited [NET && INET && IP_DCCP && IP_DCCP_CCID3 && EXPERIMENTAL]
        }
       }
      }
      menu "DCCP Kernel Hacking" {
       depends on [NET && INET && EXPERIMENTAL && IP_DCCP && DEBUG_KERNEL]
       config IP_DCCP_DEBUG boolean {
        prompt "DCCP debug messages" if [NET && INET && EXPERIMENTAL && IP_DCCP && DEBUG_KERNEL]
        inherited [NET && INET && EXPERIMENTAL && IP_DCCP && DEBUG_KERNEL]
       }
       config NET_DCCPPROBE tristate {
        prompt "DCCP connection probing" if [NET && INET && EXPERIMENTAL && IP_DCCP && DEBUG_KERNEL && PROC_FS && KPROBES]
        depends on [PROC_FS && KPROBES]
        inherited [NET && INET && EXPERIMENTAL && IP_DCCP && DEBUG_KERNEL && PROC_FS && KPROBES]
       }
      }
     }
    }
    menu "SCTP Configuration (EXPERIMENTAL)" {
     depends on [NET && INET && EXPERIMENTAL]
     config IP_SCTP tristate {
      prompt "The SCTP Protocol (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n")]
      depends on [IPV6 || IPV6="n"]
      select CRYPTO if [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n") && (SCTP_HMAC_SHA1 || SCTP_HMAC_MD5)]
      select CRYPTO_HMAC if [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n") && (SCTP_HMAC_SHA1 || SCTP_HMAC_MD5)]
      select CRYPTO_SHA1 if [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n") && SCTP_HMAC_SHA1]
      select CRYPTO_MD5 if [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n") && SCTP_HMAC_MD5]
      inherited [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n")]
      config SCTP_DBG_MSG boolean {
       prompt "SCTP: Debug messages" if [NET && INET && EXPERIMENTAL && IP_SCTP]
       depends on [IP_SCTP]
       inherited [NET && INET && EXPERIMENTAL && IP_SCTP]
      }
      config SCTP_DBG_OBJCNT boolean {
       prompt "SCTP: Debug object counts" if [NET && INET && EXPERIMENTAL && IP_SCTP]
       depends on [IP_SCTP]
       inherited [NET && INET && EXPERIMENTAL && IP_SCTP]
      }
      choice boolean {
       prompt "SCTP: Cookie HMAC Algorithm" if [NET && INET && EXPERIMENTAL && IP_SCTP]
       depends on [IP_SCTP]
       default [SCTP_HMAC_MD5] if [NET && INET && EXPERIMENTAL && IP_SCTP]
       config SCTP_HMAC_NONE boolean {
        prompt "None" if [<choice>]
        inherited [<choice>]
       }
       config SCTP_HMAC_SHA1 boolean {
        prompt "HMAC-SHA1" if [<choice>]
        inherited [<choice>]
       }
       config SCTP_HMAC_MD5 boolean {
        prompt "HMAC-MD5" if [<choice>]
        inherited [<choice>]
       }
      }
     }
    }
    menu "TIPC Configuration (EXPERIMENTAL)" {
     depends on [NET && INET && EXPERIMENTAL]
     config TIPC tristate {
      prompt "The TIPC Protocol (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL]
      inherited [NET && INET && EXPERIMENTAL]
      config TIPC_ADVANCED boolean {
       prompt "TIPC: Advanced configuration" if [NET && INET && EXPERIMENTAL && TIPC]
       depends on [TIPC]
       default [n] if [NET && INET && EXPERIMENTAL && TIPC]
       inherited [NET && INET && EXPERIMENTAL && TIPC]
       config TIPC_ZONES integer {
        prompt "Maximum number of zones in network" if [NET && INET && EXPERIMENTAL && TIPC && TIPC_ADVANCED]
        depends on [TIPC && TIPC_ADVANCED]
        default [3] if [NET && INET && EXPERIMENTAL && TIPC && TIPC_ADVANCED]
        inherited [NET && INET && EXPERIMENTAL && TIPC && TIPC_ADVANCED]
       }
       config TIPC_CLUSTERS integer {
        prompt "Maximum number of clusters in a zone" if [NET && INET && EXPERIMENTAL && TIPC && TIPC_ADVANCED]
        depends on [TIPC && TIPC_ADVANCED]
        default [1] if [NET && INET && EXPERIMENTAL && TIPC && TIPC_ADVANCED]
        inherited [NET && INET && EXPERIMENTAL && TIPC && TIPC_ADVANCED]
       }
       config TIPC_NODES integer {
        prompt "Maximum number of nodes in cluster" if [NET && INET && EXPERIMENTAL && TIPC && TIPC_ADVANCED]
        depends on [TIPC && TIPC_ADVANCED]
        default [255] if [NET && INET && EXPERIMENTAL && TIPC && TIPC_ADVANCED]
        inherited [NET && INET && EXPERIMENTAL && TIPC && TIPC_ADVANCED]
       }
       config TIPC_SLAVE_NODES integer {
        prompt "Maximum number of slave nodes in cluster" if [NET && INET && EXPERIMENTAL && TIPC && TIPC_ADVANCED]
        depends on [TIPC && TIPC_ADVANCED]
        default [0] if [NET && INET && EXPERIMENTAL && TIPC && TIPC_ADVANCED]
        inherited [NET && INET && EXPERIMENTAL && TIPC && TIPC_ADVANCED]
       }
       config TIPC_PORTS integer {
        prompt "Maximum number of ports in a node" if [NET && INET && EXPERIMENTAL && TIPC && TIPC_ADVANCED]
        depends on [TIPC && TIPC_ADVANCED]
        default [8191] if [NET && INET && EXPERIMENTAL && TIPC && TIPC_ADVANCED]
        inherited [NET && INET && EXPERIMENTAL && TIPC && TIPC_ADVANCED]
       }
       config TIPC_LOG integer {
        prompt "Size of log buffer" if [NET && INET && EXPERIMENTAL && TIPC && TIPC_ADVANCED]
        depends on [TIPC && TIPC_ADVANCED]
        default [0] if [NET && INET && EXPERIMENTAL && TIPC && TIPC_ADVANCED]
        inherited [NET && INET && EXPERIMENTAL && TIPC && TIPC_ADVANCED]
       }
      }
      config TIPC_DEBUG boolean {
       prompt "Enable debugging support" if [NET && INET && EXPERIMENTAL && TIPC]
       depends on [TIPC]
       default [n] if [NET && INET && EXPERIMENTAL && TIPC]
       inherited [NET && INET && EXPERIMENTAL && TIPC]
      }
     }
    }
    config ATM tristate {
     prompt "Asynchronous Transfer Mode (ATM) (EXPERIMENTAL)" if [NET && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [NET && EXPERIMENTAL]
     config ATM_CLIP tristate {
      prompt "Classical IP over ATM (EXPERIMENTAL)" if [NET && ATM && INET]
      depends on [ATM && INET]
      inherited [NET && ATM && INET]
      config ATM_CLIP_NO_ICMP boolean {
       prompt "Do NOT send ICMP if no neighbour (EXPERIMENTAL)" if [NET && ATM_CLIP]
       depends on [ATM_CLIP]
       inherited [NET && ATM_CLIP]
      }
     }
     config ATM_LANE tristate {
      prompt "LAN Emulation (LANE) support (EXPERIMENTAL)" if [NET && ATM]
      depends on [ATM]
      inherited [NET && ATM]
      config ATM_MPOA tristate {
       prompt "Multi-Protocol Over ATM (MPOA) support (EXPERIMENTAL)" if [NET && ATM && INET && ATM_LANE!="n"]
       depends on [ATM && INET && ATM_LANE!="n"]
       inherited [NET && ATM && INET && ATM_LANE!="n"]
      }
     }
     config ATM_BR2684 tristate {
      prompt "RFC1483/2684 Bridged protocols" if [NET && ATM && INET]
      depends on [ATM && INET]
      inherited [NET && ATM && INET]
      config ATM_BR2684_IPFILTER boolean {
       prompt "Per-VC IP filter kludge" if [NET && ATM_BR2684]
       depends on [ATM_BR2684]
       inherited [NET && ATM_BR2684]
      }
     }
    }
    config BRIDGE tristate {
     prompt "802.1d Ethernet Bridging" if [NET]
     select LLC if [NET]
     inherited [NET]
    }
    config VLAN_8021Q tristate {
     prompt "802.1Q VLAN Support" if [NET]
     inherited [NET]
    }
    config DECNET tristate {
     prompt "DECnet Support" if [NET]
     inherited [NET]
     config DECNET_ROUTER boolean {
      prompt "DECnet: router support (EXPERIMENTAL)" if [NET && DECNET && EXPERIMENTAL]
      depends on [DECNET && EXPERIMENTAL]
      select FIB_RULES if [NET && DECNET && EXPERIMENTAL]
      inherited [NET && DECNET && EXPERIMENTAL]
     }
    }
    config LLC tristate {
     depends on [NET]
     inherited [NET]
    }
    config LLC2 tristate {
     prompt "ANSI/IEEE 802.2 LLC type 2 Support" if [NET]
     select LLC if [NET]
     inherited [NET]
    }
    config IPX tristate {
     prompt "The IPX protocol" if [NET]
     select LLC if [NET]
     inherited [NET]
     config IPX_INTERN boolean {
      prompt "IPX: Full internal IPX network" if [NET && IPX]
      depends on [IPX]
      inherited [NET && IPX]
     }
    }
    config ATALK tristate {
     prompt "Appletalk protocol support" if [NET]
     select LLC if [NET]
     inherited [NET]
     config DEV_APPLETALK tristate {
      prompt "Appletalk interfaces support" if [NET && ATALK]
      depends on [ATALK]
      inherited [NET && ATALK]
      config LTPC tristate {
       prompt "Apple/Farallon LocalTalk PC support" if [NET && DEV_APPLETALK && (ISA || EISA) && ISA_DMA_API]
       depends on [DEV_APPLETALK && (ISA || EISA) && ISA_DMA_API]
       inherited [NET && DEV_APPLETALK && (ISA || EISA) && ISA_DMA_API]
      }
      config COPS tristate {
       prompt "COPS LocalTalk PC support" if [NET && DEV_APPLETALK && (ISA || EISA)]
       depends on [DEV_APPLETALK && (ISA || EISA)]
       inherited [NET && DEV_APPLETALK && (ISA || EISA)]
       config COPS_DAYNA boolean {
        prompt "Dayna firmware support" if [NET && COPS]
        depends on [COPS]
        inherited [NET && COPS]
       }
       config COPS_TANGENT boolean {
        prompt "Tangent firmware support" if [NET && COPS]
        depends on [COPS]
        inherited [NET && COPS]
       }
      }
      config IPDDP tristate {
       prompt "Appletalk-IP driver support" if [NET && DEV_APPLETALK && ATALK]
       depends on [DEV_APPLETALK && ATALK]
       inherited [NET && DEV_APPLETALK && ATALK]
       config IPDDP_ENCAP boolean {
        prompt "IP to Appletalk-IP Encapsulation support" if [NET && IPDDP]
        depends on [IPDDP]
        inherited [NET && IPDDP]
       }
       config IPDDP_DECAP boolean {
        prompt "Appletalk-IP to IP Decapsulation support" if [NET && IPDDP]
        depends on [IPDDP]
        inherited [NET && IPDDP]
       }
      }
     }
    }
    config X25 tristate {
     prompt "CCITT X.25 Packet Layer (EXPERIMENTAL)" if [NET && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [NET && EXPERIMENTAL]
    }
    config LAPB tristate {
     prompt "LAPB Data Link Driver (EXPERIMENTAL)" if [NET && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [NET && EXPERIMENTAL]
    }
    config ECONET tristate {
     prompt "Acorn Econet/AUN protocols (EXPERIMENTAL)" if [NET && EXPERIMENTAL && INET]
     depends on [EXPERIMENTAL && INET]
     inherited [NET && EXPERIMENTAL && INET]
     config ECONET_AUNUDP boolean {
      prompt "AUN over UDP" if [NET && ECONET]
      depends on [ECONET]
      inherited [NET && ECONET]
     }
     config ECONET_NATIVE boolean {
      prompt "Native Econet" if [NET && ECONET]
      depends on [ECONET]
      inherited [NET && ECONET]
     }
    }
    config WAN_ROUTER tristate {
     prompt "WAN router" if [NET && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [NET && EXPERIMENTAL]
    }
    menu "QoS and/or fair queueing" {
     depends on [NET]
     config NET_SCHED boolean {
      prompt "QoS and/or fair queueing" if [NET]
      select NET_SCH_FIFO if [NET]
      inherited [NET]
     }
     config NET_SCH_FIFO boolean {
      inherited [NET]
     }
     if [NET && NET_SCHED] {
      choice boolean {
       prompt "Packet scheduler clock source" if [NET && NET_SCHED]
       default [NET_SCH_CLK_GETTIMEOFDAY] if [NET && NET_SCHED]
       config NET_SCH_CLK_JIFFIES boolean {
        prompt "Timer interrupt" if [<choice>]
        inherited [<choice>]
       }
       config NET_SCH_CLK_GETTIMEOFDAY boolean {
        prompt "gettimeofday" if [<choice>]
        inherited [<choice>]
       }
       config NET_SCH_CLK_CPU boolean {
        prompt "CPU cycle counter" if [<choice> && ((X86_TSC || X86_64) && !SMP || ALPHA || SPARC64 || PPC64 || IA64)]
        depends on [(X86_TSC || X86_64) && !SMP || ALPHA || SPARC64 || PPC64 || IA64]
        inherited [<choice> && ((X86_TSC || X86_64) && !SMP || ALPHA || SPARC64 || PPC64 || IA64)]
       }
      }
      config NET_SCH_CBQ tristate {
       prompt "Class Based Queueing (CBQ)" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_HTB tristate {
       prompt "Hierarchical Token Bucket (HTB)" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_HFSC tristate {
       prompt "Hierarchical Fair Service Curve (HFSC)" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_ATM tristate {
       prompt "ATM Virtual Circuits (ATM)" if [NET && NET_SCHED && ATM]
       depends on [ATM]
       inherited [NET && NET_SCHED && ATM]
      }
      config NET_SCH_PRIO tristate {
       prompt "Multi Band Priority Queueing (PRIO)" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_RED tristate {
       prompt "Random Early Detection (RED)" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_SFQ tristate {
       prompt "Stochastic Fairness Queueing (SFQ)" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_TEQL tristate {
       prompt "True Link Equalizer (TEQL)" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_TBF tristate {
       prompt "Token Bucket Filter (TBF)" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_GRED tristate {
       prompt "Generic Random Early Detection (GRED)" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_DSMARK tristate {
       prompt "Differentiated Services marker (DSMARK)" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_NETEM tristate {
       prompt "Network emulator (NETEM)" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_INGRESS tristate {
       prompt "Ingress Qdisc" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_CLS boolean {
       inherited [NET && NET_SCHED]
      }
      config NET_CLS_BASIC tristate {
       prompt "Elementary classification (BASIC)" if [NET && NET_SCHED]
       select NET_CLS if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_CLS_TCINDEX tristate {
       prompt "Traffic-Control Index (TCINDEX)" if [NET && NET_SCHED]
       select NET_CLS if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_CLS_ROUTE4 tristate {
       prompt "Routing decision (ROUTE)" if [NET && NET_SCHED]
       select NET_CLS_ROUTE if [NET && NET_SCHED]
       select NET_CLS if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_CLS_ROUTE boolean {
       inherited [NET && NET_SCHED]
      }
      config NET_CLS_FW tristate {
       prompt "Netfilter mark (FW)" if [NET && NET_SCHED]
       select NET_CLS if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_CLS_U32 tristate {
       prompt "Universal 32bit comparisons w/ hashing (U32)" if [NET && NET_SCHED]
       select NET_CLS if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
       config CLS_U32_PERF boolean {
        prompt "Performance counters support" if [NET && NET_SCHED && NET_CLS_U32]
        depends on [NET_CLS_U32]
        inherited [NET && NET_SCHED && NET_CLS_U32]
       }
       config CLS_U32_MARK boolean {
        prompt "Netfilter marks support" if [NET && NET_SCHED && NET_CLS_U32]
        depends on [NET_CLS_U32]
        inherited [NET && NET_SCHED && NET_CLS_U32]
       }
      }
      config NET_CLS_RSVP tristate {
       prompt "IPv4 Resource Reservation Protocol (RSVP)" if [NET && NET_SCHED]
       select NET_CLS if [NET && NET_SCHED]
       select NET_ESTIMATOR if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_CLS_RSVP6 tristate {
       prompt "IPv6 Resource Reservation Protocol (RSVP6)" if [NET && NET_SCHED]
       select NET_CLS if [NET && NET_SCHED]
       select NET_ESTIMATOR if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_EMATCH boolean {
       prompt "Extended Matches" if [NET && NET_SCHED]
       select NET_CLS if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
       config NET_EMATCH_STACK integer {
        prompt "Stack size" if [NET && NET_SCHED && NET_EMATCH]
        depends on [NET_EMATCH]
        default [32] if [NET && NET_SCHED && NET_EMATCH]
        inherited [NET && NET_SCHED && NET_EMATCH]
       }
       config NET_EMATCH_CMP tristate {
        prompt "Simple packet data comparison" if [NET && NET_SCHED && NET_EMATCH]
        depends on [NET_EMATCH]
        inherited [NET && NET_SCHED && NET_EMATCH]
       }
       config NET_EMATCH_NBYTE tristate {
        prompt "Multi byte comparison" if [NET && NET_SCHED && NET_EMATCH]
        depends on [NET_EMATCH]
        inherited [NET && NET_SCHED && NET_EMATCH]
       }
       config NET_EMATCH_U32 tristate {
        prompt "U32 key" if [NET && NET_SCHED && NET_EMATCH]
        depends on [NET_EMATCH]
        inherited [NET && NET_SCHED && NET_EMATCH]
       }
       config NET_EMATCH_META tristate {
        prompt "Metadata" if [NET && NET_SCHED && NET_EMATCH]
        depends on [NET_EMATCH]
        inherited [NET && NET_SCHED && NET_EMATCH]
       }
       config NET_EMATCH_TEXT tristate {
        prompt "Textsearch" if [NET && NET_SCHED && NET_EMATCH]
        depends on [NET_EMATCH]
        select TEXTSEARCH if [NET && NET_SCHED && NET_EMATCH]
        select TEXTSEARCH_KMP if [NET && NET_SCHED && NET_EMATCH]
        select TEXTSEARCH_BM if [NET && NET_SCHED && NET_EMATCH]
        select TEXTSEARCH_FSM if [NET && NET_SCHED && NET_EMATCH]
        inherited [NET && NET_SCHED && NET_EMATCH]
       }
      }
      config NET_CLS_ACT boolean {
       prompt "Actions" if [NET && NET_SCHED]
       select NET_ESTIMATOR if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
       config NET_ACT_POLICE tristate {
        prompt "Traffic Policing" if [NET && NET_SCHED && NET_CLS_ACT]
        depends on [NET_CLS_ACT]
        inherited [NET && NET_SCHED && NET_CLS_ACT]
       }
       config NET_ACT_GACT tristate {
        prompt "Generic actions" if [NET && NET_SCHED && NET_CLS_ACT]
        depends on [NET_CLS_ACT]
        inherited [NET && NET_SCHED && NET_CLS_ACT]
        config GACT_PROB boolean {
         prompt "Probability support" if [NET && NET_SCHED && NET_ACT_GACT]
         depends on [NET_ACT_GACT]
         inherited [NET && NET_SCHED && NET_ACT_GACT]
        }
       }
       config NET_ACT_MIRRED tristate {
        prompt "Redirecting and Mirroring" if [NET && NET_SCHED && NET_CLS_ACT]
        depends on [NET_CLS_ACT]
        inherited [NET && NET_SCHED && NET_CLS_ACT]
       }
       config NET_ACT_IPT tristate {
        prompt "IPtables targets" if [NET && NET_SCHED && NET_CLS_ACT && NETFILTER && IP_NF_IPTABLES]
        depends on [NET_CLS_ACT && NETFILTER && IP_NF_IPTABLES]
        inherited [NET && NET_SCHED && NET_CLS_ACT && NETFILTER && IP_NF_IPTABLES]
       }
       config NET_ACT_PEDIT tristate {
        prompt "Packet Editing" if [NET && NET_SCHED && NET_CLS_ACT]
        depends on [NET_CLS_ACT]
        inherited [NET && NET_SCHED && NET_CLS_ACT]
       }
       config NET_ACT_SIMP tristate {
        prompt "Simple Example (Debug)" if [NET && NET_SCHED && NET_CLS_ACT]
        depends on [NET_CLS_ACT]
        inherited [NET && NET_SCHED && NET_CLS_ACT]
       }
       config NET_CLS_POLICE boolean {
        prompt "Traffic Policing (obsolete)" if [NET && NET_SCHED && !NET_CLS_ACT]
        depends on [NET_CLS_ACT!="y"]
        select NET_ESTIMATOR if [NET && NET_SCHED && !NET_CLS_ACT]
        inherited [NET && NET_SCHED && !NET_CLS_ACT]
       }
      }
      config NET_CLS_IND boolean {
       prompt "Incoming device classification" if [NET && NET_SCHED && (NET_CLS_U32 || NET_CLS_FW)]
       depends on [NET_CLS_U32 || NET_CLS_FW]
       inherited [NET && NET_SCHED && (NET_CLS_U32 || NET_CLS_FW)]
      }
      config NET_ESTIMATOR boolean {
       prompt "Rate estimator" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
     }
    }
    menu "Network testing" {
     depends on [NET]
     config NET_PKTGEN tristate {
      prompt "Packet Generator (USE WITH CAUTION)" if [NET && PROC_FS]
      depends on [PROC_FS]
      inherited [NET && PROC_FS]
     }
     config NET_TCPPROBE tristate {
      prompt "TCP connection probing" if [NET && INET && EXPERIMENTAL && PROC_FS && KPROBES]
      depends on [INET && EXPERIMENTAL && PROC_FS && KPROBES]
      inherited [NET && INET && EXPERIMENTAL && PROC_FS && KPROBES]
     }
    }
   }
   menuconfig HAMRADIO boolean {
    depends on [NET]
    prompt "Amateur Radio support" if [NET]
    inherited [NET]
    config AX25 tristate {
     prompt "Amateur Radio AX.25 Level 2 protocol" if [HAMRADIO && NET]
     depends on [HAMRADIO && NET]
     inherited [HAMRADIO && NET]
     config AX25_DAMA_SLAVE boolean {
      prompt "AX.25 DAMA Slave support" if [NET && AX25]
      depends on [AX25]
      inherited [NET && AX25]
     }
     config NETROM tristate {
      prompt "Amateur Radio NET/ROM protocol" if [NET && AX25]
      depends on [AX25]
      inherited [NET && AX25]
     }
     config ROSE tristate {
      prompt "Amateur Radio X.25 PLP (Rose)" if [NET && AX25]
      depends on [AX25]
      inherited [NET && AX25]
     }
     menu "AX.25 network device drivers" {
      depends on [HAMRADIO && NET && AX25!="n"]
      config MKISS tristate {
       prompt "Serial port KISS driver" if [HAMRADIO && NET && AX25]
       depends on [AX25]
       select CRC16 if [HAMRADIO && NET && AX25]
       inherited [HAMRADIO && NET && AX25]
      }
      config 6PACK tristate {
       prompt "Serial port 6PACK driver" if [HAMRADIO && NET && AX25]
       depends on [AX25]
       inherited [HAMRADIO && NET && AX25]
      }
      config BPQETHER tristate {
       prompt "BPQ Ethernet driver" if [HAMRADIO && NET && AX25]
       depends on [AX25]
       inherited [HAMRADIO && NET && AX25]
      }
      config DMASCC tristate {
       prompt "High-speed (DMA) SCC driver for AX.25" if [HAMRADIO && NET && ISA && AX25 && BROKEN_ON_SMP && ISA_DMA_API]
       depends on [ISA && AX25 && BROKEN_ON_SMP && ISA_DMA_API]
       inherited [HAMRADIO && NET && ISA && AX25 && BROKEN_ON_SMP && ISA_DMA_API]
      }
      config SCC tristate {
       prompt "Z8530 SCC driver" if [HAMRADIO && NET && ISA && AX25 && ISA_DMA_API]
       depends on [ISA && AX25 && ISA_DMA_API]
       inherited [HAMRADIO && NET && ISA && AX25 && ISA_DMA_API]
       config SCC_DELAY boolean {
        prompt "additional delay for PA0HZP OptoSCC compatible boards" if [HAMRADIO && NET && AX25 && SCC]
        depends on [SCC]
        inherited [HAMRADIO && NET && AX25 && SCC]
       }
       config SCC_TRXECHO boolean {
        prompt "support for TRX that feedback the tx signal to rx" if [HAMRADIO && NET && AX25 && SCC]
        depends on [SCC]
        inherited [HAMRADIO && NET && AX25 && SCC]
       }
      }
      config BAYCOM_SER_FDX tristate {
       prompt "BAYCOM ser12 fullduplex driver for AX.25" if [HAMRADIO && NET && AX25 && !S390]
       depends on [AX25 && !S390]
       select CRC_CCITT if [HAMRADIO && NET && AX25 && !S390]
       inherited [HAMRADIO && NET && AX25 && !S390]
      }
      config BAYCOM_SER_HDX tristate {
       prompt "BAYCOM ser12 halfduplex driver for AX.25" if [HAMRADIO && NET && AX25 && !S390]
       depends on [AX25 && !S390]
       select CRC_CCITT if [HAMRADIO && NET && AX25 && !S390]
       inherited [HAMRADIO && NET && AX25 && !S390]
      }
      config BAYCOM_PAR tristate {
       prompt "BAYCOM picpar and par96 driver for AX.25" if [HAMRADIO && NET && PARPORT && AX25]
       depends on [PARPORT && AX25]
       select CRC_CCITT if [HAMRADIO && NET && PARPORT && AX25]
       inherited [HAMRADIO && NET && PARPORT && AX25]
      }
      config BAYCOM_EPP tristate {
       prompt "BAYCOM epp driver for AX.25" if [HAMRADIO && NET && PARPORT && AX25 && !64BIT]
       depends on [PARPORT && AX25 && !64BIT]
       select CRC_CCITT if [HAMRADIO && NET && PARPORT && AX25 && !64BIT]
       inherited [HAMRADIO && NET && PARPORT && AX25 && !64BIT]
      }
      config YAM tristate {
       prompt "YAM driver for AX.25" if [HAMRADIO && NET && AX25 && !S390]
       depends on [AX25 && !S390]
       inherited [HAMRADIO && NET && AX25 && !S390]
      }
     }
    }
   }
   menuconfig IRDA tristate {
    depends on [NET]
    prompt "IrDA (infrared) subsystem support" if [NET]
    select CRC_CCITT if [NET]
    inherited [NET]
    config IRLAN tristate {
     prompt "IrLAN protocol" if [NET && IRDA]
     depends on [IRDA]
     inherited [NET && IRDA]
    }
    config IRNET tristate {
     prompt "IrNET protocol" if [NET && IRDA && PPP]
     depends on [IRDA && PPP]
     inherited [NET && IRDA && PPP]
    }
    config IRCOMM tristate {
     prompt "IrCOMM protocol" if [NET && IRDA]
     depends on [IRDA]
     inherited [NET && IRDA]
    }
    config IRDA_ULTRA boolean {
     prompt "Ultra (connectionless) protocol" if [NET && IRDA]
     depends on [IRDA]
     inherited [NET && IRDA]
    }
    config IRDA_CACHE_LAST_LSAP boolean {
     prompt "Cache last LSAP" if [NET && IRDA]
     depends on [IRDA]
     inherited [NET && IRDA]
    }
    config IRDA_FAST_RR boolean {
     prompt "Fast RRs (low latency)" if [NET && IRDA]
     depends on [IRDA]
     inherited [NET && IRDA]
    }
    config IRDA_DEBUG boolean {
     prompt "Debug information" if [NET && IRDA]
     depends on [IRDA]
     inherited [NET && IRDA]
    }
    menu "Infrared-port device drivers" {
     depends on [NET && IRDA!="n"]
     config IRTTY_SIR tristate {
      prompt "IrTTY (uses Linux serial driver)" if [NET && IRDA]
      depends on [IRDA]
      inherited [NET && IRDA]
     }
     config DONGLE boolean {
      prompt "Serial dongle support" if [NET && IRDA && IRTTY_SIR]
      depends on [IRTTY_SIR]
      inherited [NET && IRDA && IRTTY_SIR]
      config ESI_DONGLE tristate {
       prompt "ESI JetEye PC dongle" if [NET && IRTTY_SIR && DONGLE && IRDA]
       depends on [IRTTY_SIR && DONGLE && IRDA]
       inherited [NET && IRTTY_SIR && DONGLE && IRDA]
      }
      config ACTISYS_DONGLE tristate {
       prompt "ACTiSYS IR-220L and IR220L+ dongle" if [NET && IRTTY_SIR && DONGLE && IRDA]
       depends on [IRTTY_SIR && DONGLE && IRDA]
       inherited [NET && IRTTY_SIR && DONGLE && IRDA]
      }
      config TEKRAM_DONGLE tristate {
       prompt "Tekram IrMate 210B dongle" if [NET && IRTTY_SIR && DONGLE && IRDA]
       depends on [IRTTY_SIR && DONGLE && IRDA]
       inherited [NET && IRTTY_SIR && DONGLE && IRDA]
      }
      config TOIM3232_DONGLE tristate {
       prompt "TOIM3232 IrDa dongle" if [NET && IRTTY_SIR && DONGLE && IRDA]
       depends on [IRTTY_SIR && DONGLE && IRDA]
       inherited [NET && IRTTY_SIR && DONGLE && IRDA]
      }
      config LITELINK_DONGLE tristate {
       prompt "Parallax LiteLink dongle" if [NET && IRTTY_SIR && DONGLE && IRDA]
       depends on [IRTTY_SIR && DONGLE && IRDA]
       inherited [NET && IRTTY_SIR && DONGLE && IRDA]
      }
      config MA600_DONGLE tristate {
       prompt "Mobile Action MA600 dongle" if [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
       depends on [IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
       inherited [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      }
      config GIRBIL_DONGLE tristate {
       prompt "Greenwich GIrBIL dongle" if [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
       depends on [IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
       inherited [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      }
      config MCP2120_DONGLE tristate {
       prompt "Microchip MCP2120" if [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
       depends on [IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
       inherited [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      }
      config OLD_BELKIN_DONGLE tristate {
       prompt "Old Belkin dongle" if [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
       depends on [IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
       inherited [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      }
      config ACT200L_DONGLE tristate {
       prompt "ACTiSYS IR-200L dongle" if [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
       depends on [IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
       inherited [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      }
     }
     config IRPORT_SIR tristate {
      prompt "IrPORT (IrDA serial driver)" if [NET && IRDA && BROKEN_ON_SMP]
      depends on [IRDA && BROKEN_ON_SMP]
      inherited [NET && IRDA && BROKEN_ON_SMP]
     }
     config DONGLE_OLD boolean {
      prompt "Old Serial dongle support" if [NET && IRDA && IRPORT_SIR && BROKEN_ON_SMP]
      depends on [IRPORT_SIR && BROKEN_ON_SMP]
      inherited [NET && IRDA && IRPORT_SIR && BROKEN_ON_SMP]
      config ESI_DONGLE_OLD tristate {
       prompt "ESI JetEye PC dongle" if [NET && DONGLE_OLD && IRDA]
       depends on [DONGLE_OLD && IRDA]
       inherited [NET && DONGLE_OLD && IRDA]
      }
      config ACTISYS_DONGLE_OLD tristate {
       prompt "ACTiSYS IR-220L and IR220L+ dongle" if [NET && DONGLE_OLD && IRDA]
       depends on [DONGLE_OLD && IRDA]
       inherited [NET && DONGLE_OLD && IRDA]
      }
      config TEKRAM_DONGLE_OLD tristate {
       prompt "Tekram IrMate 210B dongle" if [NET && DONGLE_OLD && IRDA]
       depends on [DONGLE_OLD && IRDA]
       inherited [NET && DONGLE_OLD && IRDA]
      }
      config GIRBIL_DONGLE_OLD tristate {
       prompt "Greenwich GIrBIL dongle" if [NET && DONGLE_OLD && IRDA]
       depends on [DONGLE_OLD && IRDA]
       inherited [NET && DONGLE_OLD && IRDA]
      }
      config LITELINK_DONGLE_OLD tristate {
       prompt "Parallax LiteLink dongle" if [NET && DONGLE_OLD && IRDA]
       depends on [DONGLE_OLD && IRDA]
       inherited [NET && DONGLE_OLD && IRDA]
      }
      config MCP2120_DONGLE_OLD tristate {
       prompt "Microchip MCP2120" if [NET && DONGLE_OLD && IRDA]
       depends on [DONGLE_OLD && IRDA]
       inherited [NET && DONGLE_OLD && IRDA]
      }
      config OLD_BELKIN_DONGLE_OLD tristate {
       prompt "Old Belkin dongle" if [NET && DONGLE_OLD && IRDA]
       depends on [DONGLE_OLD && IRDA]
       inherited [NET && DONGLE_OLD && IRDA]
      }
      config ACT200L_DONGLE_OLD tristate {
       prompt "ACTiSYS IR-200L dongle (EXPERIMENTAL)" if [NET && DONGLE_OLD && EXPERIMENTAL && IRDA]
       depends on [DONGLE_OLD && EXPERIMENTAL && IRDA]
       inherited [NET && DONGLE_OLD && EXPERIMENTAL && IRDA]
      }
      config MA600_DONGLE_OLD tristate {
       prompt "Mobile Action MA600 dongle (EXPERIMENTAL)" if [NET && DONGLE_OLD && EXPERIMENTAL && IRDA]
       depends on [DONGLE_OLD && EXPERIMENTAL && IRDA]
       inherited [NET && DONGLE_OLD && EXPERIMENTAL && IRDA]
      }
      config EP7211_IR tristate {
       prompt "EP7211 I/R support" if [NET && DONGLE_OLD && ARCH_EP7211 && IRDA]
       depends on [DONGLE_OLD && ARCH_EP7211 && IRDA]
       inherited [NET && DONGLE_OLD && ARCH_EP7211 && IRDA]
      }
     }
     config USB_IRDA tristate {
      prompt "IrDA USB dongles" if [NET && IRDA && USB]
      depends on [IRDA && USB]
      select FW_LOADER if [NET && IRDA && USB]
      inherited [NET && IRDA && USB]
     }
     config SIGMATEL_FIR tristate {
      prompt "SigmaTel STIr4200 bridge (EXPERIMENTAL)" if [NET && IRDA && USB && EXPERIMENTAL]
      depends on [IRDA && USB && EXPERIMENTAL]
      select CRC32 if [NET && IRDA && USB && EXPERIMENTAL]
      inherited [NET && IRDA && USB && EXPERIMENTAL]
     }
     config NSC_FIR tristate {
      prompt "NSC PC87108/PC87338" if [NET && IRDA && ISA_DMA_API]
      depends on [IRDA && ISA_DMA_API]
      inherited [NET && IRDA && ISA_DMA_API]
     }
     config WINBOND_FIR tristate {
      prompt "Winbond W83977AF (IR)" if [NET && IRDA && ISA_DMA_API]
      depends on [IRDA && ISA_DMA_API]
      inherited [NET && IRDA && ISA_DMA_API]
     }
     config TOSHIBA_FIR tristate {
      prompt "Toshiba Type-O IR Port" if [NET && IRDA && PCI && !64BIT]
      depends on [IRDA && PCI && !64BIT]
      inherited [NET && IRDA && PCI && !64BIT]
     }
     config AU1000_FIR tristate {
      prompt "Alchemy Au1000 SIR/FIR" if [NET && SOC_AU1000 && IRDA]
      depends on [SOC_AU1000 && IRDA]
      inherited [NET && SOC_AU1000 && IRDA]
     }
     config SMC_IRCC_FIR tristate {
      prompt "SMSC IrCC (EXPERIMENTAL)" if [NET && EXPERIMENTAL && IRDA && ISA_DMA_API]
      depends on [EXPERIMENTAL && IRDA && ISA_DMA_API]
      inherited [NET && EXPERIMENTAL && IRDA && ISA_DMA_API]
     }
     config ALI_FIR tristate {
      prompt "ALi M5123 FIR (EXPERIMENTAL)" if [NET && EXPERIMENTAL && IRDA && ISA_DMA_API]
      depends on [EXPERIMENTAL && IRDA && ISA_DMA_API]
      inherited [NET && EXPERIMENTAL && IRDA && ISA_DMA_API]
     }
     config VLSI_FIR tristate {
      prompt "VLSI 82C147 SIR/MIR/FIR (EXPERIMENTAL)" if [NET && EXPERIMENTAL && IRDA && PCI]
      depends on [EXPERIMENTAL && IRDA && PCI]
      inherited [NET && EXPERIMENTAL && IRDA && PCI]
     }
     config SA1100_FIR tristate {
      prompt "SA1100 Internal IR" if [NET && ARCH_SA1100 && IRDA]
      depends on [ARCH_SA1100 && IRDA]
      inherited [NET && ARCH_SA1100 && IRDA]
     }
     config VIA_FIR tristate {
      prompt "VIA VT8231/VT1211 SIR/MIR/FIR" if [NET && IRDA && ISA_DMA_API]
      depends on [IRDA && ISA_DMA_API]
      inherited [NET && IRDA && ISA_DMA_API]
     }
     config PXA_FICP tristate {
      prompt "Intel PXA2xx Internal FICP" if [NET && ARCH_PXA && IRDA]
      depends on [ARCH_PXA && IRDA]
      inherited [NET && ARCH_PXA && IRDA]
     }
     config MCS_FIR tristate {
      prompt "MosChip MCS7780 IrDA-USB dongle" if [NET && IRDA && USB && EXPERIMENTAL]
      depends on [IRDA && USB && EXPERIMENTAL]
      inherited [NET && IRDA && USB && EXPERIMENTAL]
     }
    }
   }
   menuconfig BT tristate {
    depends on [NET]
    prompt "Bluetooth subsystem support" if [NET]
    inherited [NET]
    config BT_L2CAP tristate {
     prompt "L2CAP protocol support" if [NET && BT]
     depends on [BT]
     inherited [NET && BT]
    }
    config BT_SCO tristate {
     prompt "SCO links support" if [NET && BT]
     depends on [BT]
     inherited [NET && BT]
    }
    config BT_RFCOMM tristate {
     prompt "RFCOMM protocol support" if [NET && BT && BT_L2CAP]
     depends on [BT && BT_L2CAP]
     inherited [NET && BT && BT_L2CAP]
     config BT_RFCOMM_TTY boolean {
      prompt "RFCOMM TTY support" if [NET && BT_RFCOMM]
      depends on [BT_RFCOMM]
      inherited [NET && BT_RFCOMM]
     }
    }
    config BT_BNEP tristate {
     prompt "BNEP protocol support" if [NET && BT && BT_L2CAP]
     depends on [BT && BT_L2CAP]
     select CRC32 if [NET && BT && BT_L2CAP]
     inherited [NET && BT && BT_L2CAP]
     config BT_BNEP_MC_FILTER boolean {
      prompt "Multicast filter support" if [NET && BT_BNEP]
      depends on [BT_BNEP]
      inherited [NET && BT_BNEP]
     }
     config BT_BNEP_PROTO_FILTER boolean {
      prompt "Protocol filter support" if [NET && BT_BNEP]
      depends on [BT_BNEP]
      inherited [NET && BT_BNEP]
     }
    }
    config BT_CMTP tristate {
     prompt "CMTP protocol support" if [NET && BT && BT_L2CAP && ISDN_CAPI]
     depends on [BT && BT_L2CAP && ISDN_CAPI]
     inherited [NET && BT && BT_L2CAP && ISDN_CAPI]
    }
    config BT_HIDP tristate {
     prompt "HIDP protocol support" if [NET && BT && BT_L2CAP && INPUT]
     depends on [BT && BT_L2CAP && INPUT]
     inherited [NET && BT && BT_L2CAP && INPUT]
    }
    menu "Bluetooth device drivers" {
     depends on [NET && BT]
     config BT_HCIUSB tristate {
      prompt "HCI USB driver" if [NET && BT && USB]
      depends on [USB]
      inherited [NET && BT && USB]
      config BT_HCIUSB_SCO boolean {
       prompt "SCO (voice) support" if [NET && BT && BT_HCIUSB]
       depends on [BT_HCIUSB]
       inherited [NET && BT && BT_HCIUSB]
      }
     }
     config BT_HCIUART tristate {
      prompt "HCI UART driver" if [NET && BT]
      inherited [NET && BT]
      config BT_HCIUART_H4 boolean {
       prompt "UART (H4) protocol support" if [NET && BT && BT_HCIUART]
       depends on [BT_HCIUART]
       inherited [NET && BT && BT_HCIUART]
      }
      config BT_HCIUART_BCSP boolean {
       prompt "BCSP protocol support" if [NET && BT && BT_HCIUART]
       depends on [BT_HCIUART]
       inherited [NET && BT && BT_HCIUART]
      }
     }
     config BT_HCIBCM203X tristate {
      prompt "HCI BCM203x USB driver" if [NET && BT && USB]
      depends on [USB]
      select FW_LOADER if [NET && BT && USB]
      inherited [NET && BT && USB]
     }
     config BT_HCIBPA10X tristate {
      prompt "HCI BPA10x USB driver" if [NET && BT && USB]
      depends on [USB]
      inherited [NET && BT && USB]
     }
     config BT_HCIBFUSB tristate {
      prompt "HCI BlueFRITZ! USB driver" if [NET && BT && USB]
      depends on [USB]
      select FW_LOADER if [NET && BT && USB]
      inherited [NET && BT && USB]
     }
     config BT_HCIDTL1 tristate {
      prompt "HCI DTL1 (PC Card) driver" if [NET && BT && PCMCIA]
      depends on [PCMCIA]
      inherited [NET && BT && PCMCIA]
     }
     config BT_HCIBT3C tristate {
      prompt "HCI BT3C (PC Card) driver" if [NET && BT && PCMCIA]
      depends on [PCMCIA]
      select FW_LOADER if [NET && BT && PCMCIA]
      inherited [NET && BT && PCMCIA]
     }
     config BT_HCIBLUECARD tristate {
      prompt "HCI BlueCard (PC Card) driver" if [NET && BT && PCMCIA]
      depends on [PCMCIA]
      inherited [NET && BT && PCMCIA]
     }
     config BT_HCIBTUART tristate {
      prompt "HCI UART (PC Card) device driver" if [NET && BT && PCMCIA]
      depends on [PCMCIA]
      inherited [NET && BT && PCMCIA]
     }
     config BT_HCIVHCI tristate {
      prompt "HCI VHCI (Virtual HCI device) driver" if [NET && BT]
      inherited [NET && BT]
     }
    }
   }
   config IEEE80211 tristate {
    prompt "Generic IEEE 802.11 Networking Stack" if [NET]
    inherited [NET]
    config IEEE80211_DEBUG boolean {
     prompt "Enable full debugging output" if [NET && IEEE80211]
     depends on [IEEE80211]
     inherited [NET && IEEE80211]
    }
    config IEEE80211_CRYPT_WEP tristate {
     prompt "IEEE 802.11 WEP encryption (802.1x)" if [NET && IEEE80211]
     depends on [IEEE80211]
     select CRYPTO if [NET && IEEE80211]
     select CRYPTO_ARC4 if [NET && IEEE80211]
     select CRYPTO_ECB if [NET && IEEE80211]
     select CRC32 if [NET && IEEE80211]
     inherited [NET && IEEE80211]
    }
    config IEEE80211_CRYPT_CCMP tristate {
     prompt "IEEE 802.11i CCMP support" if [NET && IEEE80211]
     depends on [IEEE80211]
     select CRYPTO if [NET && IEEE80211]
     select CRYPTO_AES if [NET && IEEE80211]
     inherited [NET && IEEE80211]
    }
    config IEEE80211_CRYPT_TKIP tristate {
     prompt "IEEE 802.11i TKIP encryption" if [NET && IEEE80211 && NET_RADIO]
     depends on [IEEE80211 && NET_RADIO]
     select CRYPTO if [NET && IEEE80211 && NET_RADIO]
     select CRYPTO_MICHAEL_MIC if [NET && IEEE80211 && NET_RADIO]
     select CRYPTO_ECB if [NET && IEEE80211 && NET_RADIO]
     select CRC32 if [NET && IEEE80211 && NET_RADIO]
     inherited [NET && IEEE80211 && NET_RADIO]
    }
    config IEEE80211_SOFTMAC tristate {
     prompt "Software MAC add-on to the IEEE 802.11 networking stack" if [NET && IEEE80211 && EXPERIMENTAL]
     depends on [IEEE80211 && EXPERIMENTAL]
     select WIRELESS_EXT if [NET && IEEE80211 && EXPERIMENTAL]
     select IEEE80211_CRYPT_WEP if [NET && IEEE80211 && EXPERIMENTAL]
     inherited [NET && IEEE80211 && EXPERIMENTAL]
     config IEEE80211_SOFTMAC_DEBUG boolean {
      prompt "Enable full debugging output" if [NET && IEEE80211_SOFTMAC]
      depends on [IEEE80211_SOFTMAC]
      inherited [NET && IEEE80211_SOFTMAC]
     }
    }
   }
   config WIRELESS_EXT boolean {
    inherited [NET]
   }
   config FIB_RULES boolean {
    inherited [NET]
   }
  }
 }
}
menu "Device Drivers" {
 menu "Generic Driver Options" {
  config STANDALONE boolean {
   prompt "Select only drivers that don't need compile-time external firmware" if [EXPERIMENTAL]
   default [y] if []
  }
  config PREVENT_FIRMWARE_BUILD boolean {
   prompt "Prevent firmware from being built" if []
   default [y] if []
  }
  config FW_LOADER tristate {
   prompt "Userspace firmware loading support" if [HOTPLUG]
   depends on [HOTPLUG]
   inherited [HOTPLUG]
  }
  config DEBUG_DRIVER boolean {
   prompt "Driver Core verbose debug messages" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
  }
  config SYS_HYPERVISOR boolean {
   default [n] if []
  }
 }
 menu "Connector - unified userspace <-> kernelspace linker" {
  config CONNECTOR tristate {
   prompt "Connector - unified userspace <-> kernelspace linker" if [NET]
   depends on [NET]
   inherited [NET]
   config PROC_EVENTS boolean {
    prompt "Report process events to userspace" if [CONNECTOR="y"]
    depends on [CONNECTOR="y"]
    default [y] if [CONNECTOR="y"]
    inherited [CONNECTOR="y"]
   }
  }
 }
 menu "Memory Technology Devices (MTD)" {
  config MTD tristate {
   prompt "Memory Technology Device (MTD) support" if []
   config MTD_DEBUG boolean {
    prompt "Debugging" if [MTD]
    depends on [MTD]
    inherited [MTD]
    config MTD_DEBUG_VERBOSE integer {
     prompt "Debugging verbosity (0 = quiet, 3 = noisy)" if [MTD_DEBUG]
     depends on [MTD_DEBUG]
     default [0] if [MTD_DEBUG]
     inherited [MTD_DEBUG]
    }
   }
   config MTD_CONCAT tristate {
    prompt "MTD concatenating support" if [MTD]
    depends on [MTD]
    inherited [MTD]
   }
   config MTD_PARTITIONS boolean {
    prompt "MTD partitioning support" if [MTD]
    depends on [MTD]
    inherited [MTD]
    config MTD_REDBOOT_PARTS tristate {
     prompt "RedBoot partition table parsing" if [MTD_PARTITIONS]
     depends on [MTD_PARTITIONS]
     inherited [MTD_PARTITIONS]
     config MTD_REDBOOT_DIRECTORY_BLOCK integer {
      prompt "Location of RedBoot partition table" if [MTD_REDBOOT_PARTS]
      depends on [MTD_REDBOOT_PARTS]
      default [-1] if [MTD_REDBOOT_PARTS]
      inherited [MTD_REDBOOT_PARTS]
     }
     config MTD_REDBOOT_PARTS_UNALLOCATED boolean {
      prompt "Include unallocated flash regions" if [MTD_REDBOOT_PARTS]
      depends on [MTD_REDBOOT_PARTS]
      inherited [MTD_REDBOOT_PARTS]
     }
     config MTD_REDBOOT_PARTS_READONLY boolean {
      prompt "Force read-only for RedBoot system images" if [MTD_REDBOOT_PARTS]
      depends on [MTD_REDBOOT_PARTS]
      inherited [MTD_REDBOOT_PARTS]
     }
    }
    config MTD_CMDLINE_PARTS boolean {
     prompt "Command line partition table parsing" if [MTD_PARTITIONS && MTD="y"]
     depends on [MTD_PARTITIONS="y" && MTD="y"]
     inherited [MTD_PARTITIONS && MTD="y"]
    }
    config MTD_AFS_PARTS tristate {
     prompt "ARM Firmware Suite partition parsing" if [ARM && MTD_PARTITIONS]
     depends on [ARM && MTD_PARTITIONS]
     inherited [ARM && MTD_PARTITIONS]
    }
   }
   config MTD_CHAR tristate {
    prompt "Direct char device access to MTD devices" if [MTD]
    depends on [MTD]
    inherited [MTD]
   }
   config MTD_BLKDEVS tristate {
    prompt "Common interface to block layer for MTD 'translation layers'" if [MTD && BLOCK]
    depends on [MTD && BLOCK]
    default [n] if [MTD && BLOCK]
    inherited [MTD && BLOCK]
   }
   config MTD_BLOCK tristate {
    prompt "Caching block device access to MTD devices" if [MTD && BLOCK]
    depends on [MTD && BLOCK]
    select MTD_BLKDEVS if [MTD && BLOCK]
    inherited [MTD && BLOCK]
    config MTD_BLOCK_RO tristate {
     prompt "Readonly block device access to MTD devices" if [MTD_BLOCK!="y" && MTD && BLOCK]
     depends on [MTD_BLOCK!="y" && MTD && BLOCK]
     select MTD_BLKDEVS if [MTD_BLOCK!="y" && MTD && BLOCK]
     inherited [MTD_BLOCK!="y" && MTD && BLOCK]
    }
   }
   config FTL tristate {
    prompt "FTL (Flash Translation Layer) support" if [MTD && BLOCK]
    depends on [MTD && BLOCK]
    select MTD_BLKDEVS if [MTD && BLOCK]
    inherited [MTD && BLOCK]
   }
   config NFTL tristate {
    prompt "NFTL (NAND Flash Translation Layer) support" if [MTD && BLOCK]
    depends on [MTD && BLOCK]
    select MTD_BLKDEVS if [MTD && BLOCK]
    inherited [MTD && BLOCK]
    config NFTL_RW boolean {
     prompt "Write support for NFTL" if [NFTL]
     depends on [NFTL]
     inherited [NFTL]
    }
   }
   config INFTL tristate {
    prompt "INFTL (Inverse NAND Flash Translation Layer) support" if [MTD && BLOCK]
    depends on [MTD && BLOCK]
    select MTD_BLKDEVS if [MTD && BLOCK]
    inherited [MTD && BLOCK]
   }
   config RFD_FTL tristate {
    prompt "Resident Flash Disk (Flash Translation Layer) support" if [MTD && BLOCK]
    depends on [MTD && BLOCK]
    select MTD_BLKDEVS if [MTD && BLOCK]
    inherited [MTD && BLOCK]
   }
   config SSFDC tristate {
    prompt "NAND SSFDC (SmartMedia) read only translation layer" if [MTD && BLOCK]
    depends on [MTD && BLOCK]
    select MTD_BLKDEVS if [MTD && BLOCK]
    inherited [MTD && BLOCK]
   }
   menu "RAM/ROM/Flash chip drivers" {
    depends on [MTD!="n"]
    config MTD_CFI tristate {
     prompt "Detect flash chips by Common Flash Interface (CFI) probe" if [MTD]
     depends on [MTD]
     select MTD_GEN_PROBE if [MTD]
     inherited [MTD]
    }
    config MTD_JEDECPROBE tristate {
     prompt "Detect non-CFI AMD/JEDEC-compatible flash chips" if [MTD]
     depends on [MTD]
     select MTD_GEN_PROBE if [MTD]
     inherited [MTD]
    }
    config MTD_GEN_PROBE tristate {
     inherited [MTD!="n"]
    }
    config MTD_CFI_ADV_OPTIONS boolean {
     prompt "Flash chip driver advanced configuration options" if [MTD && MTD_GEN_PROBE]
     depends on [MTD_GEN_PROBE]
     inherited [MTD && MTD_GEN_PROBE]
     choice boolean {
      prompt "Flash cmd/query data swapping" if [MTD && MTD_CFI_ADV_OPTIONS]
      depends on [MTD_CFI_ADV_OPTIONS]
      default [MTD_CFI_NOSWAP] if [MTD && MTD_CFI_ADV_OPTIONS]
      config MTD_CFI_NOSWAP boolean {
       prompt "NO" if [<choice>]
       inherited [<choice>]
      }
      config MTD_CFI_BE_BYTE_SWAP boolean {
       prompt "BIG_ENDIAN_BYTE" if [<choice>]
       inherited [<choice>]
      }
      config MTD_CFI_LE_BYTE_SWAP boolean {
       prompt "LITTLE_ENDIAN_BYTE" if [<choice>]
       inherited [<choice>]
      }
     }
     config MTD_CFI_GEOMETRY boolean {
      prompt "Specific CFI Flash geometry selection" if [MTD && MTD_CFI_ADV_OPTIONS]
      depends on [MTD_CFI_ADV_OPTIONS]
      inherited [MTD && MTD_CFI_ADV_OPTIONS]
      config MTD_MAP_BANK_WIDTH_1 boolean {
       prompt "Support  8-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
       default [y] if [MTD]
       inherited [MTD]
      }
      config MTD_MAP_BANK_WIDTH_2 boolean {
       prompt "Support 16-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
       default [y] if [MTD]
       inherited [MTD]
      }
      config MTD_MAP_BANK_WIDTH_4 boolean {
       prompt "Support 32-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
       default [y] if [MTD]
       inherited [MTD]
      }
      config MTD_MAP_BANK_WIDTH_8 boolean {
       prompt "Support 64-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
       default [n] if [MTD]
       inherited [MTD]
      }
      config MTD_MAP_BANK_WIDTH_16 boolean {
       prompt "Support 128-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
       default [n] if [MTD]
       inherited [MTD]
      }
      config MTD_MAP_BANK_WIDTH_32 boolean {
       prompt "Support 256-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
       default [n] if [MTD]
       inherited [MTD]
      }
      config MTD_CFI_I1 boolean {
       prompt "Support 1-chip flash interleave" if [MTD && MTD_CFI_GEOMETRY]
       default [y] if [MTD]
       inherited [MTD]
      }
      config MTD_CFI_I2 boolean {
       prompt "Support 2-chip flash interleave" if [MTD && MTD_CFI_GEOMETRY]
       default [y] if [MTD]
       inherited [MTD]
      }
      config MTD_CFI_I4 boolean {
       prompt "Support 4-chip flash interleave" if [MTD && MTD_CFI_GEOMETRY]
       default [n] if [MTD]
       inherited [MTD]
      }
      config MTD_CFI_I8 boolean {
       prompt "Support 8-chip flash interleave" if [MTD && MTD_CFI_GEOMETRY]
       default [n] if [MTD]
       inherited [MTD]
      }
     }
     config MTD_OTP boolean {
      prompt "Protection Registers aka one-time programmable (OTP) bits" if [MTD && MTD_CFI_ADV_OPTIONS]
      depends on [MTD_CFI_ADV_OPTIONS]
      default [n] if [MTD && MTD_CFI_ADV_OPTIONS]
      inherited [MTD && MTD_CFI_ADV_OPTIONS]
     }
    }
    config MTD_CFI_INTELEXT tristate {
     prompt "Support for Intel/Sharp flash chips" if [MTD!="n" && MTD_GEN_PROBE]
     depends on [MTD_GEN_PROBE]
     select MTD_CFI_UTIL if [MTD!="n" && MTD_GEN_PROBE]
     inherited [MTD!="n" && MTD_GEN_PROBE]
    }
    config MTD_CFI_AMDSTD tristate {
     prompt "Support for AMD/Fujitsu flash chips" if [MTD!="n" && MTD_GEN_PROBE]
     depends on [MTD_GEN_PROBE]
     select MTD_CFI_UTIL if [MTD!="n" && MTD_GEN_PROBE]
     inherited [MTD!="n" && MTD_GEN_PROBE]
    }
    config MTD_CFI_STAA tristate {
     prompt "Support for ST (Advanced Architecture) flash chips" if [MTD!="n" && MTD_GEN_PROBE]
     depends on [MTD_GEN_PROBE]
     select MTD_CFI_UTIL if [MTD!="n" && MTD_GEN_PROBE]
     inherited [MTD!="n" && MTD_GEN_PROBE]
    }
    config MTD_CFI_UTIL tristate {
     inherited [MTD!="n"]
    }
    config MTD_RAM tristate {
     prompt "Support for RAM chips in bus mapping" if [MTD]
     depends on [MTD]
     inherited [MTD]
    }
    config MTD_ROM tristate {
     prompt "Support for ROM chips in bus mapping" if [MTD]
     depends on [MTD]
     inherited [MTD]
    }
    config MTD_ABSENT tristate {
     prompt "Support for absent chips in bus mapping" if [MTD]
     depends on [MTD]
     inherited [MTD]
    }
    config MTD_OBSOLETE_CHIPS boolean {
     depends on [MTD]
     prompt "Older (theoretically obsoleted now) drivers for non-CFI chips" if [MTD]
     inherited [MTD]
     config MTD_AMDSTD tristate {
      prompt "AMD compatible flash chip support (non-CFI)" if [MTD && MTD_OBSOLETE_CHIPS && BROKEN]
      depends on [MTD && MTD_OBSOLETE_CHIPS && BROKEN]
      inherited [MTD && MTD_OBSOLETE_CHIPS && BROKEN]
     }
     config MTD_SHARP tristate {
      prompt "pre-CFI Sharp chip support" if [MTD && MTD_OBSOLETE_CHIPS]
      depends on [MTD && MTD_OBSOLETE_CHIPS]
      inherited [MTD && MTD_OBSOLETE_CHIPS]
     }
     config MTD_JEDEC tristate {
      prompt "JEDEC device support" if [MTD && MTD_OBSOLETE_CHIPS && BROKEN]
      depends on [MTD && MTD_OBSOLETE_CHIPS && BROKEN]
      inherited [MTD && MTD_OBSOLETE_CHIPS && BROKEN]
     }
    }
    config MTD_XIP boolean {
     prompt "XIP aware MTD support" if [MTD && !SMP && (MTD_CFI_INTELEXT || MTD_CFI_AMDSTD) && EXPERIMENTAL && ARCH_MTD_XIP]
     depends on [!SMP && (MTD_CFI_INTELEXT || MTD_CFI_AMDSTD) && EXPERIMENTAL && ARCH_MTD_XIP]
     default [y] if [MTD && !SMP && (MTD_CFI_INTELEXT || MTD_CFI_AMDSTD) && EXPERIMENTAL && ARCH_MTD_XIP && XIP_KERNEL]
     inherited [MTD && !SMP && (MTD_CFI_INTELEXT || MTD_CFI_AMDSTD) && EXPERIMENTAL && ARCH_MTD_XIP]
    }
   }
   menu "Mapping drivers for chip access" {
    depends on [MTD!="n"]
    config MTD_COMPLEX_MAPPINGS boolean {
     prompt "Support non-linear mappings of flash chips" if [MTD]
     depends on [MTD]
     inherited [MTD]
    }
    config MTD_PHYSMAP tristate {
     prompt "CFI Flash device in physical memory map" if [MTD!="n" && (MTD_CFI || MTD_JEDECPROBE || MTD_ROM)]
     depends on [MTD_CFI || MTD_JEDECPROBE || MTD_ROM]
     inherited [MTD!="n" && (MTD_CFI || MTD_JEDECPROBE || MTD_ROM)]
     config MTD_PHYSMAP_START hex {
      prompt "Physical start address of flash mapping" if [MTD && MTD_PHYSMAP]
      depends on [MTD_PHYSMAP]
      default [0x8000000] if [MTD && MTD_PHYSMAP]
      inherited [MTD && MTD_PHYSMAP]
     }
     config MTD_PHYSMAP_LEN hex {
      prompt "Physical length of flash mapping" if [MTD && MTD_PHYSMAP]
      depends on [MTD_PHYSMAP]
      default [0] if [MTD && MTD_PHYSMAP]
      inherited [MTD && MTD_PHYSMAP]
     }
     config MTD_PHYSMAP_BANKWIDTH integer {
      prompt "Bank width in octets" if [MTD && MTD_PHYSMAP]
      depends on [MTD_PHYSMAP]
      default [2] if [MTD && MTD_PHYSMAP]
      inherited [MTD && MTD_PHYSMAP]
     }
    }
    config MTD_PHYSMAP_OF tristate {
     prompt "Flash device in physical memory map based on OF descirption" if [MTD!="n" && PPC_OF && (MTD_CFI || MTD_JEDECPROBE || MTD_ROM)]
     depends on [PPC_OF && (MTD_CFI || MTD_JEDECPROBE || MTD_ROM)]
     inherited [MTD!="n" && PPC_OF && (MTD_CFI || MTD_JEDECPROBE || MTD_ROM)]
    }
    config MTD_SUN_UFLASH tristate {
     prompt "Sun Microsystems userflash support" if [MTD!="n" && SPARC && MTD_CFI]
     depends on [SPARC && MTD_CFI]
     inherited [MTD!="n" && SPARC && MTD_CFI]
    }
    config MTD_PNC2000 tristate {
     prompt "CFI Flash device mapped on Photron PNC-2000" if [MTD!="n" && X86 && MTD_CFI && MTD_PARTITIONS]
     depends on [X86 && MTD_CFI && MTD_PARTITIONS]
     inherited [MTD!="n" && X86 && MTD_CFI && MTD_PARTITIONS]
    }
    config MTD_SC520CDP tristate {
     prompt "CFI Flash device mapped on AMD SC520 CDP" if [MTD!="n" && X86 && MTD_CFI && MTD_CONCAT]
     depends on [X86 && MTD_CFI && MTD_CONCAT]
     inherited [MTD!="n" && X86 && MTD_CFI && MTD_CONCAT]
    }
    config MTD_NETSC520 tristate {
     prompt "CFI Flash device mapped on AMD NetSc520" if [MTD!="n" && X86 && MTD_CFI && MTD_PARTITIONS]
     depends on [X86 && MTD_CFI && MTD_PARTITIONS]
     inherited [MTD!="n" && X86 && MTD_CFI && MTD_PARTITIONS]
    }
    config MTD_TS5500 tristate {
     prompt "JEDEC Flash device mapped on Technologic Systems TS-5500" if [MTD!="n" && X86]
     depends on [X86]
     select MTD_PARTITIONS if [MTD!="n" && X86]
     select MTD_JEDECPROBE if [MTD!="n" && X86]
     select MTD_CFI_AMDSTD if [MTD!="n" && X86]
     inherited [MTD!="n" && X86]
    }
    config MTD_SBC_GXX tristate {
     prompt "CFI Flash device mapped on Arcom SBC-GXx boards" if [MTD!="n" && X86 && MTD_CFI_INTELEXT && MTD_PARTITIONS && MTD_COMPLEX_MAPPINGS]
     depends on [X86 && MTD_CFI_INTELEXT && MTD_PARTITIONS && MTD_COMPLEX_MAPPINGS]
     inherited [MTD!="n" && X86 && MTD_CFI_INTELEXT && MTD_PARTITIONS && MTD_COMPLEX_MAPPINGS]
    }
    config MTD_LUBBOCK tristate {
     prompt "CFI Flash device mapped on Intel Lubbock XScale eval board" if [MTD!="n" && ARCH_LUBBOCK && MTD_CFI_INTELEXT && MTD_PARTITIONS]
     depends on [ARCH_LUBBOCK && MTD_CFI_INTELEXT && MTD_PARTITIONS]
     inherited [MTD!="n" && ARCH_LUBBOCK && MTD_CFI_INTELEXT && MTD_PARTITIONS]
    }
    config MTD_MAINSTONE tristate {
     prompt "CFI Flash device mapped on Intel Mainstone XScale eval board" if [MTD!="n" && MACH_MAINSTONE && MTD_CFI_INTELEXT]
     depends on [MACH_MAINSTONE && MTD_CFI_INTELEXT]
     select MTD_PARTITIONS if [MTD!="n" && MACH_MAINSTONE && MTD_CFI_INTELEXT]
     inherited [MTD!="n" && MACH_MAINSTONE && MTD_CFI_INTELEXT]
    }
    config MTD_OCTAGON tristate {
     prompt "JEDEC Flash device mapped on Octagon 5066 SBC" if [MTD!="n" && X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
     depends on [X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
     inherited [MTD!="n" && X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
    }
    config MTD_VMAX tristate {
     prompt "JEDEC Flash device mapped on Tempustech VMAX SBC301" if [MTD!="n" && X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
     depends on [X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
     inherited [MTD!="n" && X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
    }
    config MTD_SCx200_DOCFLASH tristate {
     prompt "Flash device mapped with DOCCS on NatSemi SCx200" if [MTD!="n" && SCx200 && MTD_CFI && MTD_PARTITIONS]
     depends on [SCx200 && MTD_CFI && MTD_PARTITIONS]
     inherited [MTD!="n" && SCx200 && MTD_CFI && MTD_PARTITIONS]
    }
    config MTD_AMD76XROM tristate {
     prompt "BIOS flash chip on AMD76x southbridge" if [MTD!="n" && X86 && MTD_JEDECPROBE]
     depends on [X86 && MTD_JEDECPROBE]
     inherited [MTD!="n" && X86 && MTD_JEDECPROBE]
    }
    config MTD_ICHXROM tristate {
     prompt "BIOS flash chip on Intel Controller Hub 2/3/4/5" if [MTD!="n" && X86 && MTD_JEDECPROBE]
     depends on [X86 && MTD_JEDECPROBE]
     inherited [MTD!="n" && X86 && MTD_JEDECPROBE]
    }
    config MTD_ESB2ROM tristate {
     prompt "BIOS flash chip on Intel ESB Controller Hub 2" if [MTD!="n" && X86 && MTD_JEDECPROBE && PCI]
     depends on [X86 && MTD_JEDECPROBE && PCI]
     inherited [MTD!="n" && X86 && MTD_JEDECPROBE && PCI]
    }
    config MTD_CK804XROM tristate {
     prompt "BIOS flash chip on Nvidia CK804" if [MTD!="n" && X86 && MTD_JEDECPROBE]
     depends on [X86 && MTD_JEDECPROBE]
     inherited [MTD!="n" && X86 && MTD_JEDECPROBE]
    }
    config MTD_SCB2_FLASH tristate {
     prompt "BIOS flash chip on Intel SCB2 boards" if [MTD!="n" && X86 && MTD_JEDECPROBE]
     depends on [X86 && MTD_JEDECPROBE]
     inherited [MTD!="n" && X86 && MTD_JEDECPROBE]
    }
    config MTD_TSUNAMI tristate {
     prompt "Flash chips on Tsunami TIG bus" if [MTD!="n" && ALPHA_TSUNAMI && MTD_COMPLEX_MAPPINGS]
     depends on [ALPHA_TSUNAMI && MTD_COMPLEX_MAPPINGS]
     inherited [MTD!="n" && ALPHA_TSUNAMI && MTD_COMPLEX_MAPPINGS]
    }
    config MTD_LASAT tristate {
     prompt "LASAT flash device" if [MTD!="n" && LASAT && MTD_CFI]
     depends on [LASAT && MTD_CFI]
     inherited [MTD!="n" && LASAT && MTD_CFI]
    }
    config MTD_NETtel tristate {
     prompt "CFI flash device on SnapGear/SecureEdge" if [MTD!="n" && X86 && MTD_PARTITIONS && MTD_JEDECPROBE]
     depends on [X86 && MTD_PARTITIONS && MTD_JEDECPROBE]
     inherited [MTD!="n" && X86 && MTD_PARTITIONS && MTD_JEDECPROBE]
    }
    config MTD_ALCHEMY tristate {
     prompt "AMD Alchemy Pb1xxx/Db1xxx/RDK MTD support" if [MTD!="n" && SOC_AU1X00]
     depends on [SOC_AU1X00]
     inherited [MTD!="n" && SOC_AU1X00]
    }
    config MTD_MTX1 tristate {
     prompt "4G Systems MTX-1 Flash device" if [MTD!="n" && MIPS && MIPS_MTX1]
     depends on [MIPS && MIPS_MTX1]
     inherited [MTD!="n" && MIPS && MIPS_MTX1]
    }
    config MTD_DILNETPC tristate {
     prompt "CFI Flash device mapped on DIL/Net PC" if [MTD!="n" && X86 && MTD_CONCAT && MTD_PARTITIONS && MTD_CFI_INTELEXT]
     depends on [X86 && MTD_CONCAT && MTD_PARTITIONS && MTD_CFI_INTELEXT]
     inherited [MTD!="n" && X86 && MTD_CONCAT && MTD_PARTITIONS && MTD_CFI_INTELEXT]
     config MTD_DILNETPC_BOOTSIZE hex {
      prompt "Size of DIL/Net PC flash boot partition" if [MTD && MTD_DILNETPC]
      depends on [MTD_DILNETPC]
      default [0x80000] if [MTD && MTD_DILNETPC]
      inherited [MTD && MTD_DILNETPC]
     }
    }
    config MTD_L440GX tristate {
     prompt "BIOS flash chip on Intel L440GX boards" if [MTD!="n" && X86 && MTD_JEDECPROBE]
     depends on [X86 && MTD_JEDECPROBE]
     inherited [MTD!="n" && X86 && MTD_JEDECPROBE]
    }
    config MTD_SBC8240 tristate {
     prompt "Flash device on SBC8240" if [MTD!="n" && MTD_JEDECPROBE && 8260]
     depends on [MTD_JEDECPROBE && 8260]
     inherited [MTD!="n" && MTD_JEDECPROBE && 8260]
    }
    config MTD_TQM8XXL tristate {
     prompt "CFI Flash device mapped on TQM8XXL" if [MTD!="n" && MTD_CFI && TQM8xxL]
     depends on [MTD_CFI && TQM8xxL]
     inherited [MTD!="n" && MTD_CFI && TQM8xxL]
    }
    config MTD_RPXLITE tristate {
     prompt "CFI Flash device mapped on RPX Lite or CLLF" if [MTD!="n" && MTD_CFI && (RPXCLASSIC || RPXLITE)]
     depends on [MTD_CFI && (RPXCLASSIC || RPXLITE)]
     inherited [MTD!="n" && MTD_CFI && (RPXCLASSIC || RPXLITE)]
    }
    config MTD_MBX860 tristate {
     prompt "System flash on MBX860 board" if [MTD!="n" && MTD_CFI && MBX]
     depends on [MTD_CFI && MBX]
     inherited [MTD!="n" && MTD_CFI && MBX]
    }
    config MTD_DBOX2 tristate {
     prompt "CFI Flash device mapped on D-Box2" if [MTD!="n" && DBOX2 && MTD_CFI_INTELSTD && MTD_CFI_INTELEXT && MTD_CFI_AMDSTD]
     depends on [DBOX2 && MTD_CFI_INTELSTD && MTD_CFI_INTELEXT && MTD_CFI_AMDSTD]
     inherited [MTD!="n" && DBOX2 && MTD_CFI_INTELSTD && MTD_CFI_INTELEXT && MTD_CFI_AMDSTD]
    }
    config MTD_CFI_FLAGADM tristate {
     prompt "CFI Flash device mapping on FlagaDM" if [MTD!="n" && 8xx && MTD_CFI]
     depends on [8xx && MTD_CFI]
     inherited [MTD!="n" && 8xx && MTD_CFI]
    }
    config MTD_BEECH tristate {
     prompt "CFI Flash device mapped on IBM 405LP Beech" if [MTD!="n" && MTD_CFI && BEECH]
     depends on [MTD_CFI && BEECH]
     inherited [MTD!="n" && MTD_CFI && BEECH]
    }
    config MTD_ARCTIC tristate {
     prompt "CFI Flash device mapped on IBM 405LP Arctic" if [MTD!="n" && MTD_CFI && ARCTIC2]
     depends on [MTD_CFI && ARCTIC2]
     inherited [MTD!="n" && MTD_CFI && ARCTIC2]
    }
    config MTD_WALNUT tristate {
     prompt "Flash device mapped on IBM 405GP Walnut" if [MTD!="n" && MTD_JEDECPROBE && WALNUT]
     depends on [MTD_JEDECPROBE && WALNUT]
     inherited [MTD!="n" && MTD_JEDECPROBE && WALNUT]
    }
    config MTD_EBONY tristate {
     prompt "Flash devices mapped on IBM 440GP Ebony" if [MTD!="n" && MTD_JEDECPROBE && EBONY]
     depends on [MTD_JEDECPROBE && EBONY]
     inherited [MTD!="n" && MTD_JEDECPROBE && EBONY]
    }
    config MTD_OCOTEA tristate {
     prompt "Flash devices mapped on IBM 440GX Ocotea" if [MTD!="n" && MTD_CFI && OCOTEA]
     depends on [MTD_CFI && OCOTEA]
     inherited [MTD!="n" && MTD_CFI && OCOTEA]
    }
    config MTD_REDWOOD tristate {
     prompt "CFI Flash devices mapped on IBM Redwood" if [MTD!="n" && MTD_CFI && (REDWOOD_4 || REDWOOD_5 || REDWOOD_6)]
     depends on [MTD_CFI && (REDWOOD_4 || REDWOOD_5 || REDWOOD_6)]
     inherited [MTD!="n" && MTD_CFI && (REDWOOD_4 || REDWOOD_5 || REDWOOD_6)]
    }
    config MTD_TQM834x tristate {
     prompt "Flash device mapped on TQ Components TQM834x Boards" if [MTD!="n" && MTD_CFI && TQM834x]
     depends on [MTD_CFI && TQM834x]
     inherited [MTD!="n" && MTD_CFI && TQM834x]
    }
    config MTD_OCELOT tristate {
     prompt "Momenco Ocelot boot flash device" if [MTD!="n" && MIPS && MOMENCO_OCELOT]
     depends on [MIPS && MOMENCO_OCELOT]
     inherited [MTD!="n" && MIPS && MOMENCO_OCELOT]
    }
    config MTD_SOLUTIONENGINE tristate {
     prompt "CFI Flash device mapped on Hitachi SolutionEngine" if [MTD!="n" && SUPERH && MTD_CFI && MTD_REDBOOT_PARTS]
     depends on [SUPERH && MTD_CFI && MTD_REDBOOT_PARTS]
     inherited [MTD!="n" && SUPERH && MTD_CFI && MTD_REDBOOT_PARTS]
    }
    config MTD_ARM_INTEGRATOR tristate {
     prompt "CFI Flash device mapped on ARM Integrator/P720T" if [MTD!="n" && ARM && MTD_CFI]
     depends on [ARM && MTD_CFI]
     inherited [MTD!="n" && ARM && MTD_CFI]
    }
    config MTD_CDB89712 tristate {
     prompt "Cirrus CDB89712 evaluation board mappings" if [MTD!="n" && MTD_CFI && ARCH_CDB89712]
     depends on [MTD_CFI && ARCH_CDB89712]
     inherited [MTD!="n" && MTD_CFI && ARCH_CDB89712]
    }
    config MTD_SA1100 tristate {
     prompt "CFI Flash device mapped on StrongARM SA11x0" if [MTD!="n" && MTD_CFI && ARCH_SA1100 && MTD_PARTITIONS]
     depends on [MTD_CFI && ARCH_SA1100 && MTD_PARTITIONS]
     inherited [MTD!="n" && MTD_CFI && ARCH_SA1100 && MTD_PARTITIONS]
    }
    config MTD_IPAQ tristate {
     prompt "CFI Flash device mapped on Compaq/HP iPAQ" if [MTD!="n" && IPAQ_HANDHELD && MTD_CFI]
     depends on [IPAQ_HANDHELD && MTD_CFI]
     inherited [MTD!="n" && IPAQ_HANDHELD && MTD_CFI]
    }
    config MTD_DC21285 tristate {
     prompt "CFI Flash device mapped on DC21285 Footbridge" if [MTD!="n" && MTD_CFI && ARCH_FOOTBRIDGE && MTD_COMPLEX_MAPPINGS]
     depends on [MTD_CFI && ARCH_FOOTBRIDGE && MTD_COMPLEX_MAPPINGS]
     inherited [MTD!="n" && MTD_CFI && ARCH_FOOTBRIDGE && MTD_COMPLEX_MAPPINGS]
    }
    config MTD_IXP4XX tristate {
     prompt "CFI Flash device mapped on Intel IXP4xx based systems" if [MTD!="n" && MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP4XX]
     depends on [MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP4XX]
     inherited [MTD!="n" && MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP4XX]
    }
    config MTD_IXP2000 tristate {
     prompt "CFI Flash device mapped on Intel IXP2000 based systems" if [MTD!="n" && MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP2000]
     depends on [MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP2000]
     inherited [MTD!="n" && MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP2000]
    }
    config MTD_FORTUNET tristate {
     prompt "CFI Flash device mapped on the FortuNet board" if [MTD!="n" && MTD_CFI && MTD_PARTITIONS && SA1100_FORTUNET]
     depends on [MTD_CFI && MTD_PARTITIONS && SA1100_FORTUNET]
     inherited [MTD!="n" && MTD_CFI && MTD_PARTITIONS && SA1100_FORTUNET]
    }
    config MTD_AUTCPU12 tristate {
     prompt "NV-RAM mapping AUTCPU12 board" if [MTD!="n" && ARCH_AUTCPU12]
     depends on [ARCH_AUTCPU12]
     inherited [MTD!="n" && ARCH_AUTCPU12]
    }
    config MTD_EDB7312 tristate {
     prompt "CFI Flash device mapped on EDB7312" if [MTD!="n" && ARCH_EDB7312 && MTD_CFI]
     depends on [ARCH_EDB7312 && MTD_CFI]
     inherited [MTD!="n" && ARCH_EDB7312 && MTD_CFI]
    }
    config MTD_IMPA7 tristate {
     prompt "JEDEC Flash device mapped on impA7" if [MTD!="n" && ARM && MTD_JEDECPROBE]
     depends on [ARM && MTD_JEDECPROBE]
     inherited [MTD!="n" && ARM && MTD_JEDECPROBE]
    }
    config MTD_CEIVA tristate {
     prompt "JEDEC Flash device mapped on Ceiva/Polaroid PhotoMax Digital Picture Frame" if [MTD!="n" && MTD_JEDECPROBE && ARCH_CEIVA]
     depends on [MTD_JEDECPROBE && ARCH_CEIVA]
     inherited [MTD!="n" && MTD_JEDECPROBE && ARCH_CEIVA]
    }
    config MTD_NOR_TOTO tristate {
     prompt "NOR Flash device on TOTO board" if [MTD!="n" && ARCH_OMAP && OMAP_TOTO]
     depends on [ARCH_OMAP && OMAP_TOTO]
     inherited [MTD!="n" && ARCH_OMAP && OMAP_TOTO]
    }
    config MTD_H720X tristate {
     prompt "Hynix evaluation board mappings" if [MTD!="n" && MTD_CFI && (ARCH_H7201 || ARCH_H7202)]
     depends on [MTD_CFI && (ARCH_H7201 || ARCH_H7202)]
     inherited [MTD!="n" && MTD_CFI && (ARCH_H7201 || ARCH_H7202)]
    }
    config MTD_MPC1211 tristate {
     prompt "CFI Flash device mapped on Interface MPC-1211" if [MTD!="n" && SH_MPC1211 && MTD_CFI]
     depends on [SH_MPC1211 && MTD_CFI]
     inherited [MTD!="n" && SH_MPC1211 && MTD_CFI]
    }
    config MTD_OMAP_NOR tristate {
     prompt "TI OMAP board mappings" if [MTD!="n" && MTD_CFI && ARCH_OMAP]
     depends on [MTD_CFI && ARCH_OMAP]
     inherited [MTD!="n" && MTD_CFI && ARCH_OMAP]
    }
    config MTD_PCI tristate {
     prompt "PCI MTD driver" if [MTD && PCI && MTD_COMPLEX_MAPPINGS]
     depends on [MTD && PCI && MTD_COMPLEX_MAPPINGS]
     inherited [MTD && PCI && MTD_COMPLEX_MAPPINGS]
    }
    config MTD_PCMCIA tristate {
     prompt "PCMCIA MTD driver" if [MTD && PCMCIA && MTD_COMPLEX_MAPPINGS && BROKEN]
     depends on [MTD && PCMCIA && MTD_COMPLEX_MAPPINGS && BROKEN]
     inherited [MTD && PCMCIA && MTD_COMPLEX_MAPPINGS && BROKEN]
     config MTD_PCMCIA_ANONYMOUS boolean {
      prompt "Use PCMCIA MTD drivers for anonymous PCMCIA cards" if [MTD && MTD_PCMCIA]
      depends on [MTD_PCMCIA]
      inherited [MTD && MTD_PCMCIA]
     }
    }
    config MTD_UCLINUX tristate {
     prompt "Generic uClinux RAM/ROM filesystem support" if [MTD!="n" && MTD_PARTITIONS && !MMU]
     depends on [MTD_PARTITIONS && !MMU]
     inherited [MTD!="n" && MTD_PARTITIONS && !MMU]
    }
    config MTD_WRSBC8260 tristate {
     prompt "Map driver for WindRiver PowerQUICC II MPC82xx board" if [MTD!="n" && (SBC82xx || SBC8560)]
     depends on [SBC82xx || SBC8560]
     select MTD_PARTITIONS if [MTD!="n" && (SBC82xx || SBC8560)]
     select MTD_MAP_BANK_WIDTH_4 if [MTD!="n" && (SBC82xx || SBC8560)]
     select MTD_MAP_BANK_WIDTH_1 if [MTD!="n" && (SBC82xx || SBC8560)]
     select MTD_CFI_I1 if [MTD!="n" && (SBC82xx || SBC8560)]
     select MTD_CFI_I4 if [MTD!="n" && (SBC82xx || SBC8560)]
     inherited [MTD!="n" && (SBC82xx || SBC8560)]
    }
    config MTD_DMV182 tristate {
     prompt "Map driver for Dy-4 SVME/DMV-182 board." if [MTD!="n" && DMV182]
     depends on [DMV182]
     select MTD_PARTITIONS if [MTD!="n" && DMV182]
     select MTD_MAP_BANK_WIDTH_32 if [MTD!="n" && DMV182]
     select MTD_CFI_I8 if [MTD!="n" && DMV182]
     select MTD_CFI_AMDSTD if [MTD!="n" && DMV182]
     inherited [MTD!="n" && DMV182]
    }
    config MTD_BAST tristate {
     prompt "Map driver for Simtec BAST (EB2410ITX) or Thorcom VR1000" if [MTD!="n" && (ARCH_BAST || MACH_VR1000)]
     depends on [ARCH_BAST || MACH_VR1000]
     select MTD_PARTITIONS if [MTD!="n" && (ARCH_BAST || MACH_VR1000)]
     select MTD_MAP_BANK_WIDTH_16 if [MTD!="n" && (ARCH_BAST || MACH_VR1000)]
     select MTD_JEDECPROBE if [MTD!="n" && (ARCH_BAST || MACH_VR1000)]
     inherited [MTD!="n" && (ARCH_BAST || MACH_VR1000)]
     config MTD_BAST_MAXSIZE integer {
      prompt "Maximum size for BAST flash area (MiB)" if [MTD && MTD_BAST]
      depends on [MTD_BAST]
      default [4] if [MTD && MTD_BAST]
      inherited [MTD && MTD_BAST]
     }
    }
    config MTD_SHARP_SL boolean {
     prompt "ROM mapped on Sharp SL Series" if [MTD && ARCH_PXA]
     depends on [MTD && ARCH_PXA]
     inherited [MTD && ARCH_PXA]
    }
    config MTD_PLATRAM tristate {
     prompt "Map driver for platform device RAM (mtd-ram)" if [MTD]
     depends on [MTD]
     select MTD_RAM if [MTD]
     inherited [MTD]
    }
   }
   menu "Self-contained MTD device drivers" {
    depends on [MTD!="n"]
    config MTD_PMC551 tristate {
     prompt "Ramix PMC551 PCI Mezzanine RAM card support" if [MTD && PCI]
     depends on [MTD && PCI]
     inherited [MTD && PCI]
     config MTD_PMC551_BUGFIX boolean {
      prompt "PMC551 256M DRAM Bugfix" if [MTD && MTD_PMC551]
      depends on [MTD_PMC551]
      inherited [MTD && MTD_PMC551]
     }
     config MTD_PMC551_DEBUG boolean {
      prompt "PMC551 Debugging" if [MTD && MTD_PMC551]
      depends on [MTD_PMC551]
      inherited [MTD && MTD_PMC551]
     }
    }
    config MTD_MS02NV tristate {
     prompt "DEC MS02-NV NVRAM module support" if [MTD && MACH_DECSTATION]
     depends on [MTD && MACH_DECSTATION]
     inherited [MTD && MACH_DECSTATION]
    }
    config MTD_DATAFLASH tristate {
     prompt "Support for AT45xxx DataFlash" if [MTD && SPI_MASTER && EXPERIMENTAL]
     depends on [MTD && SPI_MASTER && EXPERIMENTAL]
     inherited [MTD && SPI_MASTER && EXPERIMENTAL]
    }
    config MTD_M25P80 tristate {
     prompt "Support for M25 SPI Flash" if [MTD && SPI_MASTER && EXPERIMENTAL]
     depends on [MTD && SPI_MASTER && EXPERIMENTAL]
     inherited [MTD && SPI_MASTER && EXPERIMENTAL]
    }
    config MTD_SLRAM tristate {
     prompt "Uncached system RAM" if [MTD]
     depends on [MTD]
     inherited [MTD]
    }
    config MTD_PHRAM tristate {
     prompt "Physical system RAM" if [MTD]
     depends on [MTD]
     inherited [MTD]
    }
    config MTD_LART tristate {
     prompt "28F160xx flash driver for LART" if [SA1100_LART && MTD]
     depends on [SA1100_LART && MTD]
     inherited [SA1100_LART && MTD]
    }
    config MTD_MTDRAM tristate {
     prompt "Test driver using RAM" if [MTD]
     depends on [MTD]
     inherited [MTD]
     config MTDRAM_TOTAL_SIZE integer {
      prompt "MTDRAM device size in KiB" if [MTD && MTD_MTDRAM]
      depends on [MTD_MTDRAM]
      default [4096] if [MTD && MTD_MTDRAM]
      inherited [MTD && MTD_MTDRAM]
     }
     config MTDRAM_ERASE_SIZE integer {
      prompt "MTDRAM erase block size in KiB" if [MTD && MTD_MTDRAM]
      depends on [MTD_MTDRAM]
      default [128] if [MTD && MTD_MTDRAM]
      inherited [MTD && MTD_MTDRAM]
     }
     config MTDRAM_ABS_POS hex {
      prompt "SRAM Hexadecimal Absolute position or 0" if [MTD && MTD_MTDRAM="y"]
      depends on [MTD_MTDRAM="y"]
      default [0] if [MTD && MTD_MTDRAM="y"]
      inherited [MTD && MTD_MTDRAM="y"]
     }
    }
    config MTD_BLOCK2MTD tristate {
     prompt "MTD using block device" if [MTD && BLOCK]
     depends on [MTD && BLOCK]
     inherited [MTD && BLOCK]
    }
    config MTD_DOC2000 tristate {
     prompt "M-Systems Disk-On-Chip 2000 and Millennium (DEPRECATED)" if [MTD]
     depends on [MTD]
     select MTD_DOCPROBE if [MTD]
     select MTD_NAND_IDS if [MTD]
     inherited [MTD]
    }
    config MTD_DOC2001 tristate {
     prompt "M-Systems Disk-On-Chip Millennium-only alternative driver (DEPRECATED)" if [MTD]
     depends on [MTD]
     select MTD_DOCPROBE if [MTD]
     select MTD_NAND_IDS if [MTD]
     inherited [MTD]
    }
    config MTD_DOC2001PLUS tristate {
     prompt "M-Systems Disk-On-Chip Millennium Plus" if [MTD]
     depends on [MTD]
     select MTD_DOCPROBE if [MTD]
     select MTD_NAND_IDS if [MTD]
     inherited [MTD]
    }
    config MTD_DOCPROBE tristate {
     select MTD_DOCECC if [MTD!="n"]
     inherited [MTD!="n"]
    }
    config MTD_DOCECC tristate {
     inherited [MTD!="n"]
    }
    config MTD_DOCPROBE_ADVANCED boolean {
     prompt "Advanced detection options for DiskOnChip" if [MTD && MTD_DOCPROBE]
     depends on [MTD_DOCPROBE]
     inherited [MTD && MTD_DOCPROBE]
     config MTD_DOCPROBE_ADDRESS hex {
      prompt "Physical address of DiskOnChip" if [MTD && MTD_DOCPROBE && MTD_DOCPROBE_ADVANCED]
      depends on [MTD_DOCPROBE]
      default [0x0000] if [MTD && MTD_DOCPROBE && MTD_DOCPROBE_ADVANCED]
      default [0] if [MTD && MTD_DOCPROBE && !MTD_DOCPROBE_ADVANCED]
      inherited [MTD && MTD_DOCPROBE]
     }
     config MTD_DOCPROBE_HIGH boolean {
      prompt "Probe high addresses" if [MTD && MTD_DOCPROBE_ADVANCED]
      depends on [MTD_DOCPROBE_ADVANCED]
      inherited [MTD && MTD_DOCPROBE_ADVANCED]
     }
     config MTD_DOCPROBE_55AA boolean {
      prompt "Probe for 0x55 0xAA BIOS Extension Signature" if [MTD && MTD_DOCPROBE_ADVANCED]
      depends on [MTD_DOCPROBE_ADVANCED]
      inherited [MTD && MTD_DOCPROBE_ADVANCED]
     }
    }
   }
   menu "NAND Flash Device Drivers" {
    depends on [MTD!="n"]
    config MTD_NAND tristate {
     prompt "NAND Device Support" if [MTD]
     depends on [MTD]
     select MTD_NAND_IDS if [MTD]
     inherited [MTD]
     config MTD_NAND_VERIFY_WRITE boolean {
      prompt "Verify NAND page writes" if [MTD && MTD_NAND]
      depends on [MTD_NAND]
      inherited [MTD && MTD_NAND]
     }
     config MTD_NAND_ECC_SMC boolean {
      prompt "NAND ECC Smart Media byte order" if [MTD && MTD_NAND]
      depends on [MTD_NAND]
      default [n] if [MTD && MTD_NAND]
      inherited [MTD && MTD_NAND]
     }
     config MTD_NAND_AUTCPU12 tristate {
      prompt "SmartMediaCard on autronix autcpu12 board" if [MTD!="n" && MTD_NAND && ARCH_AUTCPU12]
      depends on [MTD_NAND && ARCH_AUTCPU12]
      inherited [MTD!="n" && MTD_NAND && ARCH_AUTCPU12]
     }
     config MTD_NAND_EDB7312 tristate {
      prompt "Support for Cirrus Logic EBD7312 evaluation board" if [MTD!="n" && MTD_NAND && ARCH_EDB7312]
      depends on [MTD_NAND && ARCH_EDB7312]
      inherited [MTD!="n" && MTD_NAND && ARCH_EDB7312]
     }
     config MTD_NAND_H1900 tristate {
      prompt "iPAQ H1900 flash" if [MTD!="n" && MTD_NAND && ARCH_PXA && MTD_PARTITIONS]
      depends on [MTD_NAND && ARCH_PXA && MTD_PARTITIONS]
      inherited [MTD!="n" && MTD_NAND && ARCH_PXA && MTD_PARTITIONS]
     }
     config MTD_NAND_SPIA tristate {
      prompt "NAND Flash device on SPIA board" if [MTD!="n" && ARCH_P720T && MTD_NAND]
      depends on [ARCH_P720T && MTD_NAND]
      inherited [MTD!="n" && ARCH_P720T && MTD_NAND]
     }
     config MTD_NAND_AMS_DELTA tristate {
      prompt "NAND Flash device on Amstrad E3" if [MTD!="n" && MACH_AMS_DELTA && MTD_NAND]
      depends on [MACH_AMS_DELTA && MTD_NAND]
      inherited [MTD!="n" && MACH_AMS_DELTA && MTD_NAND]
     }
     config MTD_NAND_TOTO tristate {
      prompt "NAND Flash device on TOTO board" if [MTD!="n" && ARCH_OMAP && MTD_NAND && BROKEN]
      depends on [ARCH_OMAP && MTD_NAND && BROKEN]
      inherited [MTD!="n" && ARCH_OMAP && MTD_NAND && BROKEN]
     }
     config MTD_NAND_TS7250 tristate {
      prompt "NAND Flash device on TS-7250 board" if [MTD!="n" && MACH_TS72XX && MTD_NAND]
      depends on [MACH_TS72XX && MTD_NAND]
      inherited [MTD!="n" && MACH_TS72XX && MTD_NAND]
     }
    }
    config MTD_NAND_IDS tristate {
     inherited [MTD!="n"]
    }
    config MTD_NAND_AU1550 tristate {
     prompt "Au1550/1200 NAND support" if [MTD!="n" && (SOC_AU1200 || SOC_AU1550) && MTD_NAND]
     depends on [(SOC_AU1200 || SOC_AU1550) && MTD_NAND]
     inherited [MTD!="n" && (SOC_AU1200 || SOC_AU1550) && MTD_NAND]
    }
    config MTD_NAND_RTC_FROM4 tristate {
     prompt "Renesas Flash ROM 4-slot interface board (FROM_BOARD4)" if [MTD!="n" && MTD_NAND && SH_SOLUTION_ENGINE]
     depends on [MTD_NAND && SH_SOLUTION_ENGINE]
     select REED_SOLOMON if [MTD!="n" && MTD_NAND && SH_SOLUTION_ENGINE]
     select REED_SOLOMON_DEC8 if [MTD!="n" && MTD_NAND && SH_SOLUTION_ENGINE]
     select BITREVERSE if [MTD!="n" && MTD_NAND && SH_SOLUTION_ENGINE]
     inherited [MTD!="n" && MTD_NAND && SH_SOLUTION_ENGINE]
    }
    config MTD_NAND_PPCHAMELEONEVB tristate {
     prompt "NAND Flash device on PPChameleonEVB board" if [MTD!="n" && PPCHAMELEONEVB && MTD_NAND && BROKEN]
     depends on [PPCHAMELEONEVB && MTD_NAND && BROKEN]
     inherited [MTD!="n" && PPCHAMELEONEVB && MTD_NAND && BROKEN]
    }
    config MTD_NAND_S3C2410 tristate {
     prompt "NAND Flash support for S3C2410/S3C2440 SoC" if [MTD!="n" && ARCH_S3C2410 && MTD_NAND]
     depends on [ARCH_S3C2410 && MTD_NAND]
     inherited [MTD!="n" && ARCH_S3C2410 && MTD_NAND]
     config MTD_NAND_S3C2410_DEBUG boolean {
      prompt "S3C2410 NAND driver debug" if [MTD && MTD_NAND_S3C2410]
      depends on [MTD_NAND_S3C2410]
      inherited [MTD && MTD_NAND_S3C2410]
     }
     config MTD_NAND_S3C2410_HWECC boolean {
      prompt "S3C2410 NAND Hardware ECC" if [MTD && MTD_NAND_S3C2410]
      depends on [MTD_NAND_S3C2410]
      inherited [MTD && MTD_NAND_S3C2410]
     }
    }
    config MTD_NAND_NDFC tristate {
     prompt "NDFC NanD Flash Controller" if [MTD!="n" && MTD_NAND && 44x]
     depends on [MTD_NAND && 44x]
     select MTD_NAND_ECC_SMC if [MTD!="n" && MTD_NAND && 44x]
     inherited [MTD!="n" && MTD_NAND && 44x]
    }
    config MTD_NAND_S3C2410_CLKSTOP boolean {
     prompt "S3C2410 NAND IDLE clock stop" if [MTD && MTD_NAND_S3C2410]
     depends on [MTD_NAND_S3C2410]
     default [n] if [MTD && MTD_NAND_S3C2410]
     inherited [MTD && MTD_NAND_S3C2410]
    }
    config MTD_NAND_DISKONCHIP tristate {
     prompt "DiskOnChip 2000, Millennium and Millennium Plus (NAND reimplementation) (EXPERIMENTAL)" if [MTD!="n" && MTD_NAND && EXPERIMENTAL]
     depends on [MTD_NAND && EXPERIMENTAL]
     select REED_SOLOMON if [MTD!="n" && MTD_NAND && EXPERIMENTAL]
     select REED_SOLOMON_DEC16 if [MTD!="n" && MTD_NAND && EXPERIMENTAL]
     inherited [MTD!="n" && MTD_NAND && EXPERIMENTAL]
     config MTD_NAND_DISKONCHIP_PROBE_ADVANCED boolean {
      prompt "Advanced detection options for DiskOnChip" if [MTD && MTD_NAND_DISKONCHIP]
      depends on [MTD_NAND_DISKONCHIP]
      inherited [MTD && MTD_NAND_DISKONCHIP]
      config MTD_NAND_DISKONCHIP_PROBE_ADDRESS hex {
       prompt "Physical address of DiskOnChip" if [MTD && MTD_NAND_DISKONCHIP && MTD_NAND_DISKONCHIP_PROBE_ADVANCED]
       depends on [MTD_NAND_DISKONCHIP]
       default [0] if [MTD && MTD_NAND_DISKONCHIP]
       inherited [MTD && MTD_NAND_DISKONCHIP]
      }
      config MTD_NAND_DISKONCHIP_PROBE_HIGH boolean {
       prompt "Probe high addresses" if [MTD && MTD_NAND_DISKONCHIP_PROBE_ADVANCED]
       depends on [MTD_NAND_DISKONCHIP_PROBE_ADVANCED]
       inherited [MTD && MTD_NAND_DISKONCHIP_PROBE_ADVANCED]
      }
     }
     config MTD_NAND_DISKONCHIP_BBTWRITE boolean {
      prompt "Allow BBT writes on DiskOnChip Millennium and 2000TSOP" if [MTD && MTD_NAND_DISKONCHIP]
      depends on [MTD_NAND_DISKONCHIP]
      inherited [MTD && MTD_NAND_DISKONCHIP]
     }
    }
    config MTD_NAND_SHARPSL tristate {
     prompt "Support for NAND Flash on Sharp SL Series (C7xx + others)" if [MTD!="n" && MTD_NAND && ARCH_PXA]
     depends on [MTD_NAND && ARCH_PXA]
     inherited [MTD!="n" && MTD_NAND && ARCH_PXA]
    }
    config MTD_NAND_CAFE tristate {
     prompt "NAND support for OLPC CAFÉ chip" if [MTD!="n" && PCI]
     depends on [PCI]
     inherited [MTD!="n" && PCI]
    }
    config MTD_NAND_CS553X tristate {
     prompt "NAND support for CS5535/CS5536 (AMD Geode companion chip)" if [MTD!="n" && MTD_NAND && X86_32 && (X86_PC || X86_GENERICARCH)]
     depends on [MTD_NAND && X86_32 && (X86_PC || X86_GENERICARCH)]
     inherited [MTD!="n" && MTD_NAND && X86_32 && (X86_PC || X86_GENERICARCH)]
    }
    config MTD_NAND_AT91 boolean {
     prompt "Support for NAND Flash / SmartMedia on AT91" if [MTD && MTD_NAND && ARCH_AT91]
     depends on [MTD_NAND && ARCH_AT91]
     inherited [MTD && MTD_NAND && ARCH_AT91]
    }
    config MTD_NAND_NANDSIM tristate {
     prompt "Support for NAND Flash Simulator" if [MTD!="n" && MTD_NAND && MTD_PARTITIONS]
     depends on [MTD_NAND && MTD_PARTITIONS]
     inherited [MTD!="n" && MTD_NAND && MTD_PARTITIONS]
    }
   }
   menu "OneNAND Flash Device Drivers" {
    depends on [MTD!="n"]
    config MTD_ONENAND tristate {
     prompt "OneNAND Device Support" if [MTD]
     depends on [MTD]
     inherited [MTD]
     config MTD_ONENAND_VERIFY_WRITE boolean {
      prompt "Verify OneNAND page writes" if [MTD && MTD_ONENAND]
      depends on [MTD_ONENAND]
      inherited [MTD && MTD_ONENAND]
     }
     config MTD_ONENAND_GENERIC tristate {
      prompt "OneNAND Flash device via platform device driver" if [MTD!="n" && MTD_ONENAND && ARM]
      depends on [MTD_ONENAND && ARM]
      inherited [MTD!="n" && MTD_ONENAND && ARM]
     }
     config MTD_ONENAND_OTP boolean {
      prompt "OneNAND OTP Support" if [MTD && MTD_ONENAND]
      depends on [MTD_ONENAND]
      inherited [MTD && MTD_ONENAND]
     }
    }
   }
  }
 }
 menu "Parallel port support" {
  config PARPORT tristate {
   prompt "Parallel port support" if []
   config PARPORT_PC tristate {
    prompt "PC-style hardware" if [PARPORT && (!SPARC64 || PCI) && !SPARC32 && !M32R && !FRV]
    depends on [PARPORT && (!SPARC64 || PCI) && !SPARC32 && !M32R && !FRV]
    inherited [PARPORT && (!SPARC64 || PCI) && !SPARC32 && !M32R && !FRV]
    config PARPORT_SERIAL tristate {
     prompt "Multi-IO cards (parallel and serial)" if [SERIAL_8250_PCI && PARPORT_PC && PCI]
     depends on [SERIAL_8250_PCI && PARPORT_PC && PCI]
     inherited [SERIAL_8250_PCI && PARPORT_PC && PCI]
    }
    config PARPORT_PC_FIFO boolean {
     prompt "Use FIFO/DMA if available (EXPERIMENTAL)" if [PARPORT_PC && EXPERIMENTAL]
     depends on [PARPORT_PC && EXPERIMENTAL]
     inherited [PARPORT_PC && EXPERIMENTAL]
    }
    config PARPORT_PC_SUPERIO boolean {
     prompt "SuperIO chipset support (EXPERIMENTAL)" if [PARPORT_PC && EXPERIMENTAL]
     depends on [PARPORT_PC && EXPERIMENTAL]
     inherited [PARPORT_PC && EXPERIMENTAL]
    }
    config PARPORT_PC_PCMCIA tristate {
     prompt "Support for PCMCIA management for PC-style ports" if [PCMCIA && PARPORT_PC]
     depends on [PCMCIA && PARPORT_PC]
     inherited [PCMCIA && PARPORT_PC]
    }
   }
   config PARPORT_IP32 tristate {
    prompt "SGI IP32 builtin port (EXPERIMENTAL)" if [SGI_IP32 && PARPORT && EXPERIMENTAL]
    depends on [SGI_IP32 && PARPORT && EXPERIMENTAL]
    select PARPORT_NOT_PC if [SGI_IP32 && PARPORT && EXPERIMENTAL]
    inherited [SGI_IP32 && PARPORT && EXPERIMENTAL]
   }
   config PARPORT_AMIGA tristate {
    prompt "Amiga builtin port" if [AMIGA && PARPORT]
    depends on [AMIGA && PARPORT]
    select PARPORT_NOT_PC if [AMIGA && PARPORT]
    inherited [AMIGA && PARPORT]
   }
   config PARPORT_MFC3 tristate {
    prompt "Multiface III parallel port" if [ZORRO && PARPORT]
    depends on [ZORRO && PARPORT]
    select PARPORT_NOT_PC if [ZORRO && PARPORT]
    inherited [ZORRO && PARPORT]
   }
   config PARPORT_ATARI tristate {
    prompt "Atari hardware" if [ATARI && PARPORT]
    depends on [ATARI && PARPORT]
    select PARPORT_NOT_PC if [ATARI && PARPORT]
    inherited [ATARI && PARPORT]
   }
   config PARPORT_GSC tristate {
    default [GSC] if [PARPORT]
    depends on [PARPORT]
    select PARPORT_NOT_PC if [PARPORT]
    inherited [PARPORT]
   }
   config PARPORT_SUNBPP tristate {
    prompt "Sparc hardware (EXPERIMENTAL)" if [SBUS && PARPORT && EXPERIMENTAL]
    depends on [SBUS && PARPORT && EXPERIMENTAL]
    select PARPORT_NOT_PC if [SBUS && PARPORT && EXPERIMENTAL]
    inherited [SBUS && PARPORT && EXPERIMENTAL]
   }
   config PARPORT_AX88796 tristate {
    prompt "AX88796 Parallel Port" if [PARPORT]
    depends on [PARPORT]
    select PARPORT_NOT_PC if [PARPORT]
    inherited [PARPORT]
   }
   config PARPORT_1284 boolean {
    prompt "IEEE 1284 transfer modes" if [PARPORT]
    depends on [PARPORT]
    inherited [PARPORT]
   }
  }
  config PARPORT_NOT_PC boolean {
  }
 }
 menu "Plug and Play support" {
  config PNP boolean {
   prompt "Plug and Play support" if [ISA || ACPI]
   depends on [ISA || ACPI]
   inherited [ISA || ACPI]
   config PNP_DEBUG boolean {
    prompt "PnP Debug Messages" if [PNP]
    depends on [PNP]
    inherited [PNP]
   }
   config ISAPNP boolean {
    prompt "ISA Plug and Play support" if [PNP && ISA]
    depends on [PNP && ISA]
    inherited [PNP && ISA]
   }
   config PNPBIOS boolean {
    prompt "Plug and Play BIOS support (EXPERIMENTAL)" if [PNP && ISA && X86 && EXPERIMENTAL]
    depends on [PNP && ISA && X86 && EXPERIMENTAL]
    default [n] if [PNP && ISA && X86 && EXPERIMENTAL]
    inherited [PNP && ISA && X86 && EXPERIMENTAL]
    config PNPBIOS_PROC_FS boolean {
     prompt "Plug and Play BIOS /proc interface" if [PNPBIOS && PROC_FS]
     depends on [PNPBIOS && PROC_FS]
     inherited [PNPBIOS && PROC_FS]
    }
   }
   config PNPACPI boolean {
    prompt "Plug and Play ACPI support (EXPERIMENTAL)" if [PNP && ACPI && EXPERIMENTAL]
    depends on [PNP && ACPI && EXPERIMENTAL]
    default [y] if [PNP && ACPI && EXPERIMENTAL]
    inherited [PNP && ACPI && EXPERIMENTAL]
   }
  }
 }
 if [BLOCK] {
  menu "Block devices" {
   depends on [BLOCK]
   config BLK_DEV_FD tristate {
    prompt "Normal floppy disk support" if [BLOCK && ARCH_MAY_HAVE_PC_FDC]
    depends on [ARCH_MAY_HAVE_PC_FDC]
    inherited [BLOCK && ARCH_MAY_HAVE_PC_FDC]
   }
   config AMIGA_FLOPPY tristate {
    prompt "Amiga floppy support" if [BLOCK && AMIGA]
    depends on [AMIGA]
    inherited [BLOCK && AMIGA]
   }
   config ATARI_FLOPPY tristate {
    prompt "Atari floppy support" if [BLOCK && ATARI]
    depends on [ATARI]
    inherited [BLOCK && ATARI]
   }
   config MAC_FLOPPY tristate {
    prompt "Support for PowerMac floppy" if [BLOCK && PPC_PMAC && !PPC_PMAC64]
    depends on [PPC_PMAC && !PPC_PMAC64]
    inherited [BLOCK && PPC_PMAC && !PPC_PMAC64]
   }
   config BLK_DEV_PS2 tristate {
    prompt "PS/2 ESDI hard disk support" if [BLOCK && MCA && MCA_LEGACY && BROKEN]
    depends on [MCA && MCA_LEGACY && BROKEN]
    inherited [BLOCK && MCA && MCA_LEGACY && BROKEN]
   }
   config AMIGA_Z2RAM tristate {
    prompt "Amiga Zorro II ramdisk support" if [BLOCK && ZORRO]
    depends on [ZORRO]
    inherited [BLOCK && ZORRO]
   }
   config ATARI_ACSI tristate {
    prompt "Atari ACSI support" if [BLOCK && ATARI && BROKEN]
    depends on [ATARI && BROKEN]
    inherited [BLOCK && ATARI && BROKEN]
    config ACSI_MULTI_LUN boolean {
     prompt "Probe all LUNs on each ACSI device" if [BLOCK && ATARI_ACSI]
     depends on [ATARI_ACSI]
     inherited [BLOCK && ATARI_ACSI]
    }
    config ATARI_SLM tristate {
     prompt "Atari SLM laser printer support" if [BLOCK && ATARI && ATARI_ACSI!="n"]
     depends on [ATARI && ATARI_ACSI!="n"]
     inherited [BLOCK && ATARI && ATARI_ACSI!="n"]
    }
   }
   config BLK_DEV_XD tristate {
    prompt "XT hard disk support" if [BLOCK && ISA && ISA_DMA_API]
    depends on [ISA && ISA_DMA_API]
    inherited [BLOCK && ISA && ISA_DMA_API]
   }
   config PARIDE tristate {
    prompt "Parallel port IDE device support" if [BLOCK && PARPORT_PC]
    depends on [PARPORT_PC]
    inherited [BLOCK && PARPORT_PC]
    config PARIDE_PARPORT tristate {
     depends on [PARIDE!="n"]
     default [m] if [BLOCK && PARIDE!="n" && PARPORT_PC="m"]
     default [y] if [BLOCK && PARIDE!="n" && PARPORT_PC!="m"]
     inherited [BLOCK && PARIDE!="n"]
    }
    config PARIDE_PD tristate {
     prompt "Parallel port IDE disks" if [BLOCK && PARIDE]
     depends on [PARIDE]
     inherited [BLOCK && PARIDE]
    }
    config PARIDE_PCD tristate {
     prompt "Parallel port ATAPI CD-ROMs" if [BLOCK && PARIDE]
     depends on [PARIDE]
     inherited [BLOCK && PARIDE]
    }
    config PARIDE_PF tristate {
     prompt "Parallel port ATAPI disks" if [BLOCK && PARIDE]
     depends on [PARIDE]
     inherited [BLOCK && PARIDE]
    }
    config PARIDE_PT tristate {
     prompt "Parallel port ATAPI tapes" if [BLOCK && PARIDE]
     depends on [PARIDE]
     inherited [BLOCK && PARIDE]
    }
    config PARIDE_PG tristate {
     prompt "Parallel port generic ATAPI devices" if [BLOCK && PARIDE]
     depends on [PARIDE]
     inherited [BLOCK && PARIDE]
    }
    config PARIDE_ATEN tristate {
     prompt "ATEN EH-100 protocol" if [BLOCK && PARIDE]
     depends on [PARIDE]
     inherited [BLOCK && PARIDE]
    }
    config PARIDE_BPCK tristate {
     prompt "MicroSolutions backpack (Series 5) protocol" if [BLOCK && PARIDE]
     depends on [PARIDE]
     inherited [BLOCK && PARIDE]
    }
    config PARIDE_BPCK6 tristate {
     prompt "MicroSolutions backpack (Series 6) protocol" if [BLOCK && PARIDE && !64BIT]
     depends on [PARIDE && !64BIT]
     inherited [BLOCK && PARIDE && !64BIT]
    }
    config PARIDE_COMM tristate {
     prompt "DataStor Commuter protocol" if [BLOCK && PARIDE]
     depends on [PARIDE]
     inherited [BLOCK && PARIDE]
    }
    config PARIDE_DSTR tristate {
     prompt "DataStor EP-2000 protocol" if [BLOCK && PARIDE]
     depends on [PARIDE]
     inherited [BLOCK && PARIDE]
    }
    config PARIDE_FIT2 tristate {
     prompt "FIT TD-2000 protocol" if [BLOCK && PARIDE]
     depends on [PARIDE]
     inherited [BLOCK && PARIDE]
    }
    config PARIDE_FIT3 tristate {
     prompt "FIT TD-3000 protocol" if [BLOCK && PARIDE]
     depends on [PARIDE]
     inherited [BLOCK && PARIDE]
    }
    config PARIDE_EPAT tristate {
     prompt "Shuttle EPAT/EPEZ protocol" if [BLOCK && PARIDE]
     depends on [PARIDE]
     inherited [BLOCK && PARIDE]
     config PARIDE_EPATC8 boolean {
      prompt "Support c7/c8 chips (EXPERIMENTAL)" if [BLOCK && PARIDE_EPAT && EXPERIMENTAL]
      depends on [PARIDE_EPAT && EXPERIMENTAL]
      inherited [BLOCK && PARIDE_EPAT && EXPERIMENTAL]
     }
    }
    config PARIDE_EPIA tristate {
     prompt "Shuttle EPIA protocol" if [BLOCK && PARIDE]
     depends on [PARIDE]
     inherited [BLOCK && PARIDE]
    }
    config PARIDE_FRIQ tristate {
     prompt "Freecom IQ ASIC-2 protocol" if [BLOCK && PARIDE]
     depends on [PARIDE]
     inherited [BLOCK && PARIDE]
    }
    config PARIDE_FRPW tristate {
     prompt "FreeCom power protocol" if [BLOCK && PARIDE]
     depends on [PARIDE]
     inherited [BLOCK && PARIDE]
    }
    config PARIDE_KBIC tristate {
     prompt "KingByte KBIC-951A/971A protocols" if [BLOCK && PARIDE]
     depends on [PARIDE]
     inherited [BLOCK && PARIDE]
    }
    config PARIDE_KTTI tristate {
     prompt "KT PHd protocol" if [BLOCK && PARIDE]
     depends on [PARIDE]
     inherited [BLOCK && PARIDE]
    }
    config PARIDE_ON20 tristate {
     prompt "OnSpec 90c20 protocol" if [BLOCK && PARIDE]
     depends on [PARIDE]
     inherited [BLOCK && PARIDE]
    }
    config PARIDE_ON26 tristate {
     prompt "OnSpec 90c26 protocol" if [BLOCK && PARIDE]
     depends on [PARIDE]
     inherited [BLOCK && PARIDE]
    }
   }
   config BLK_CPQ_DA tristate {
    prompt "Compaq SMART2 support" if [BLOCK && PCI]
    depends on [PCI]
    inherited [BLOCK && PCI]
   }
   config BLK_CPQ_CISS_DA tristate {
    prompt "Compaq Smart Array 5xxx support" if [BLOCK && PCI]
    depends on [PCI]
    inherited [BLOCK && PCI]
    config CISS_SCSI_TAPE boolean {
     prompt "SCSI tape drive support for Smart Array 5xxx" if [BLOCK && BLK_CPQ_CISS_DA && PROC_FS && (SCSI="y" || SCSI="BLK_CPQ_CISS_DA")]
     depends on [BLK_CPQ_CISS_DA && PROC_FS]
     depends on [SCSI="y" || SCSI="BLK_CPQ_CISS_DA"]
     inherited [BLOCK && BLK_CPQ_CISS_DA && PROC_FS && (SCSI="y" || SCSI="BLK_CPQ_CISS_DA")]
    }
   }
   config BLK_DEV_DAC960 tristate {
    prompt "Mylex DAC960/DAC1100 PCI RAID Controller support" if [BLOCK && PCI]
    depends on [PCI]
    inherited [BLOCK && PCI]
   }
   config BLK_DEV_UMEM tristate {
    prompt "Micro Memory MM5415 Battery Backed RAM support (EXPERIMENTAL)" if [BLOCK && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [BLOCK && PCI && EXPERIMENTAL]
   }
   config BLK_DEV_UBD boolean {
    prompt "Virtual block device" if [BLOCK && UML]
    depends on [UML]
    inherited [BLOCK && UML]
    config BLK_DEV_UBD_SYNC boolean {
     prompt "Always do synchronous disk IO for UBD" if [BLOCK && BLK_DEV_UBD]
     depends on [BLK_DEV_UBD]
     inherited [BLOCK && BLK_DEV_UBD]
    }
   }
   config BLK_DEV_COW_COMMON boolean {
    default [BLK_DEV_UBD] if [BLOCK]
    inherited [BLOCK]
   }
   config MMAPPER tristate {
    prompt "Example IO memory driver (BROKEN)" if [BLOCK && UML && BROKEN]
    depends on [UML && BROKEN]
    inherited [BLOCK && UML && BROKEN]
   }
   config BLK_DEV_LOOP tristate {
    prompt "Loopback device support" if [BLOCK]
    inherited [BLOCK]
    config BLK_DEV_CRYPTOLOOP tristate {
     prompt "Cryptoloop Support" if [BLOCK && BLK_DEV_LOOP]
     select CRYPTO if [BLOCK && BLK_DEV_LOOP]
     select CRYPTO_CBC if [BLOCK && BLK_DEV_LOOP]
     depends on [BLK_DEV_LOOP]
     inherited [BLOCK && BLK_DEV_LOOP]
    }
   }
   config BLK_DEV_NBD tristate {
    prompt "Network block device support" if [BLOCK && NET]
    depends on [NET]
    inherited [BLOCK && NET]
   }
   config BLK_DEV_SX8 tristate {
    prompt "Promise SATA SX8 support" if [BLOCK && PCI]
    depends on [PCI]
    inherited [BLOCK && PCI]
   }
   config BLK_DEV_UB tristate {
    prompt "Low Performance USB Block driver" if [BLOCK && USB]
    depends on [USB]
    inherited [BLOCK && USB]
   }
   config BLK_DEV_RAM tristate {
    prompt "RAM disk support" if [BLOCK]
    inherited [BLOCK]
    config BLK_DEV_RAM_COUNT integer {
     prompt "Default number of RAM disks" if [BLOCK && BLK_DEV_RAM]
     default [16] if [BLOCK && BLK_DEV_RAM]
     depends on [BLK_DEV_RAM]
     inherited [BLOCK && BLK_DEV_RAM]
    }
    config BLK_DEV_RAM_SIZE integer {
     prompt "Default RAM disk size (kbytes)" if [BLOCK && BLK_DEV_RAM]
     depends on [BLK_DEV_RAM]
     default [4096] if [BLOCK && BLK_DEV_RAM]
     inherited [BLOCK && BLK_DEV_RAM]
    }
    config BLK_DEV_RAM_BLOCKSIZE integer {
     prompt "Default RAM disk block size (bytes)" if [BLOCK && BLK_DEV_RAM]
     depends on [BLK_DEV_RAM]
     default [1024] if [BLOCK && BLK_DEV_RAM]
     inherited [BLOCK && BLK_DEV_RAM]
    }
   }
   config BLK_DEV_INITRD boolean {
    prompt "Initial RAM filesystem and RAM disk (initramfs/initrd) support" if [BLOCK && (BROKEN || !FRV)]
    depends on [BROKEN || !FRV]
    inherited [BLOCK && (BROKEN || !FRV)]
   }
   config CDROM_PKTCDVD tristate {
    prompt "Packet writing on CD/DVD media" if [BLOCK && !UML]
    depends on [!UML]
    inherited [BLOCK && !UML]
    config CDROM_PKTCDVD_BUFFERS integer {
     prompt "Free buffers for data gathering" if [BLOCK && CDROM_PKTCDVD]
     depends on [CDROM_PKTCDVD]
     default [8] if [BLOCK && CDROM_PKTCDVD]
     inherited [BLOCK && CDROM_PKTCDVD]
    }
    config CDROM_PKTCDVD_WCACHE boolean {
     prompt "Enable write caching (EXPERIMENTAL)" if [BLOCK && CDROM_PKTCDVD && EXPERIMENTAL]
     depends on [CDROM_PKTCDVD && EXPERIMENTAL]
     inherited [BLOCK && CDROM_PKTCDVD && EXPERIMENTAL]
    }
   }
   if [S390 && BLOCK] {
    config BLK_DEV_XPRAM tristate {
     prompt "XPRAM disk support" if [BLOCK && S390]
     depends on [S390]
     inherited [BLOCK && S390]
    }
    config DCSSBLK tristate {
     prompt "DCSSBLK support" if [S390 && BLOCK]
     inherited [S390 && BLOCK]
    }
    config DASD tristate {
     prompt "Support for DASD devices" if [S390 && BLOCK && CCW]
     depends on [CCW]
     inherited [S390 && BLOCK && CCW]
     config DASD_PROFILE boolean {
      prompt "Profiling support for dasd devices" if [S390 && BLOCK && DASD]
      depends on [DASD]
      inherited [S390 && BLOCK && DASD]
     }
     config DASD_ECKD tristate {
      prompt "Support for ECKD Disks" if [S390 && BLOCK && DASD]
      depends on [DASD]
      inherited [S390 && BLOCK && DASD]
     }
     config DASD_FBA tristate {
      prompt "Support for FBA  Disks" if [S390 && BLOCK && DASD]
      depends on [DASD]
      inherited [S390 && BLOCK && DASD]
     }
     config DASD_DIAG tristate {
      prompt "Support for DIAG access to Disks" if [S390 && BLOCK && DASD]
      depends on [DASD]
      inherited [S390 && BLOCK && DASD]
     }
     config DASD_EER boolean {
      prompt "Extended error reporting (EER)" if [S390 && BLOCK && DASD]
      depends on [DASD]
      inherited [S390 && BLOCK && DASD]
     }
    }
   }
   config ATA_OVER_ETH tristate {
    prompt "ATA over Ethernet support" if [BLOCK && NET]
    depends on [NET]
    inherited [BLOCK && NET]
   }
  }
 }
 menu "Misc devices" {
  config IBM_ASM tristate {
   prompt "Device driver for IBM RSA service processor" if [X86 && PCI && EXPERIMENTAL]
   depends on [X86 && PCI && EXPERIMENTAL]
   inherited [X86 && PCI && EXPERIMENTAL]
  }
  config SGI_IOC4 tristate {
   prompt "SGI IOC4 Base IO support" if [PCI]
   depends on [PCI]
   inherited [PCI]
  }
  config TIFM_CORE tristate {
   prompt "TI Flash Media interface support (EXPERIMENTAL)" if [EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   inherited [EXPERIMENTAL]
   config TIFM_7XX1 tristate {
    prompt "TI Flash Media PCI74xx/PCI76xx host adapter support (EXPERIMENTAL)" if [PCI && TIFM_CORE && EXPERIMENTAL]
    depends on [PCI && TIFM_CORE && EXPERIMENTAL]
    default [TIFM_CORE] if [PCI && TIFM_CORE && EXPERIMENTAL]
    inherited [PCI && TIFM_CORE && EXPERIMENTAL]
   }
  }
  config MSI_LAPTOP tristate {
   prompt "MSI Laptop Extras" if [X86 && ACPI_EC && BACKLIGHT_CLASS_DEVICE]
   depends on [X86]
   depends on [ACPI_EC]
   depends on [BACKLIGHT_CLASS_DEVICE]
   inherited [X86 && ACPI_EC && BACKLIGHT_CLASS_DEVICE]
  }
 }
 if [BLOCK] {
  menu "ATA/ATAPI/MFM/RLL support" {
   depends on [BLOCK]
   config IDE tristate {
    prompt "ATA/ATAPI/MFM/RLL support" if [BLOCK]
    inherited [BLOCK]
    if [BLOCK && IDE] {
     config IDE_MAX_HWIFS integer {
      prompt "Max IDE interfaces" if [BLOCK && IDE && (ALPHA || SUPERH || IA64 || EMBEDDED)]
      depends on [ALPHA || SUPERH || IA64 || EMBEDDED]
      default [4] if [BLOCK && IDE && (ALPHA || SUPERH || IA64 || EMBEDDED)]
      inherited [BLOCK && IDE && (ALPHA || SUPERH || IA64 || EMBEDDED)]
     }
     config BLK_DEV_IDE tristate {
      prompt "Enhanced IDE/MFM/RLL disk/cdrom/tape/floppy support" if [BLOCK && IDE]
      inherited [BLOCK && IDE]
      if [BLOCK && IDE && BLK_DEV_IDE] {
       config BLK_DEV_IDE_SATA boolean {
        prompt "Support for SATA (deprecated; conflicts with libata SATA driver)" if [BLOCK && IDE && BLK_DEV_IDE]
        default [n] if [BLOCK && IDE && BLK_DEV_IDE]
        inherited [BLOCK && IDE && BLK_DEV_IDE]
       }
       config BLK_DEV_HD_IDE boolean {
        prompt "Use old disk-only driver on primary interface" if [BLOCK && IDE && BLK_DEV_IDE && (X86 || SH_MPC1211)]
        depends on [X86 || SH_MPC1211]
        inherited [BLOCK && IDE && BLK_DEV_IDE && (X86 || SH_MPC1211)]
       }
       config BLK_DEV_IDEDISK tristate {
        prompt "Include IDE/ATA-2 DISK support" if [BLOCK && IDE && BLK_DEV_IDE]
        inherited [BLOCK && IDE && BLK_DEV_IDE]
       }
       config IDEDISK_MULTI_MODE boolean {
        prompt "Use multi-mode by default" if [BLOCK && IDE && BLK_DEV_IDE]
        inherited [BLOCK && IDE && BLK_DEV_IDE]
       }
       config BLK_DEV_IDECS tristate {
        prompt "PCMCIA IDE support" if [BLOCK && IDE && BLK_DEV_IDE && PCMCIA]
        depends on [PCMCIA]
        inherited [BLOCK && IDE && BLK_DEV_IDE && PCMCIA]
       }
       config BLK_DEV_IDECD tristate {
        prompt "Include IDE/ATAPI CDROM support" if [BLOCK && IDE && BLK_DEV_IDE]
        inherited [BLOCK && IDE && BLK_DEV_IDE]
       }
       config BLK_DEV_IDETAPE tristate {
        prompt "Include IDE/ATAPI TAPE support (EXPERIMENTAL)" if [BLOCK && IDE && BLK_DEV_IDE && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        inherited [BLOCK && IDE && BLK_DEV_IDE && EXPERIMENTAL]
       }
       config BLK_DEV_IDEFLOPPY tristate {
        prompt "Include IDE/ATAPI FLOPPY support" if [BLOCK && IDE && BLK_DEV_IDE]
        inherited [BLOCK && IDE && BLK_DEV_IDE]
       }
       config BLK_DEV_IDESCSI tristate {
        prompt "SCSI emulation support" if [BLOCK && IDE && BLK_DEV_IDE && SCSI]
        depends on [SCSI]
        inherited [BLOCK && IDE && BLK_DEV_IDE && SCSI]
       }
       config IDE_TASK_IOCTL boolean {
        prompt "IDE Taskfile Access" if [BLOCK && IDE && BLK_DEV_IDE]
        inherited [BLOCK && IDE && BLK_DEV_IDE]
       }
       config IDE_GENERIC tristate {
        prompt "generic/default IDE chipset support" if [BLOCK && IDE && BLK_DEV_IDE]
        default [y] if [BLOCK && IDE && BLK_DEV_IDE]
        inherited [BLOCK && IDE && BLK_DEV_IDE]
       }
       config BLK_DEV_CMD640 boolean {
        prompt "CMD640 chipset bugfix/support" if [BLOCK && IDE && BLK_DEV_IDE && X86]
        depends on [X86]
        inherited [BLOCK && IDE && BLK_DEV_IDE && X86]
        config BLK_DEV_CMD640_ENHANCED boolean {
         prompt "CMD640 enhanced support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_CMD640]
         depends on [BLK_DEV_CMD640]
         inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_CMD640]
        }
       }
       config BLK_DEV_IDEPNP boolean {
        prompt "PNP EIDE support" if [BLOCK && IDE && BLK_DEV_IDE && PNP]
        depends on [PNP]
        inherited [BLOCK && IDE && BLK_DEV_IDE && PNP]
       }
       config BLK_DEV_IDEPCI boolean {
        prompt "PCI IDE chipset support" if [BLOCK && IDE && BLK_DEV_IDE && PCI]
        default [BLK_DEV_IDEDMA_PMAC] if [BLOCK && IDE && BLK_DEV_IDE && PPC_PMAC && BLK_DEV_IDEDMA_PMAC]
        inherited [BLOCK && IDE && BLK_DEV_IDE]
        config IDEPCI_SHARE_IRQ boolean {
         prompt "Sharing PCI IDE interrupts support" if [BLOCK && IDE && BLK_DEV_IDE && PCI && BLK_DEV_IDEPCI]
         depends on [PCI && BLK_DEV_IDEPCI]
         inherited [BLOCK && IDE && BLK_DEV_IDE && PCI && BLK_DEV_IDEPCI]
        }
        config BLK_DEV_OFFBOARD boolean {
         prompt "Boot off-board chipsets first support" if [BLOCK && IDE && BLK_DEV_IDE && PCI && BLK_DEV_IDEPCI]
         depends on [PCI && BLK_DEV_IDEPCI]
         inherited [BLOCK && IDE && BLK_DEV_IDE && PCI && BLK_DEV_IDEPCI]
        }
        config BLK_DEV_GENERIC tristate {
         prompt "Generic PCI IDE Chipset Support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEPCI]
         depends on [BLK_DEV_IDEPCI]
         inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEPCI]
        }
        config BLK_DEV_OPTI621 tristate {
         prompt "OPTi 82C621 chipset enhanced support (EXPERIMENTAL)" if [BLOCK && IDE && BLK_DEV_IDE && PCI && BLK_DEV_IDEPCI && EXPERIMENTAL]
         depends on [PCI && BLK_DEV_IDEPCI && EXPERIMENTAL]
         inherited [BLOCK && IDE && BLK_DEV_IDE && PCI && BLK_DEV_IDEPCI && EXPERIMENTAL]
        }
        config BLK_DEV_RZ1000 tristate {
         prompt "RZ1000 chipset bugfix/support" if [BLOCK && IDE && BLK_DEV_IDE && PCI && BLK_DEV_IDEPCI && X86]
         depends on [PCI && BLK_DEV_IDEPCI && X86]
         inherited [BLOCK && IDE && BLK_DEV_IDE && PCI && BLK_DEV_IDEPCI && X86]
        }
        config BLK_DEV_IDEDMA_PCI boolean {
         prompt "Generic PCI bus-master DMA support" if [BLOCK && IDE && BLK_DEV_IDE && PCI && BLK_DEV_IDEPCI]
         depends on [PCI && BLK_DEV_IDEPCI]
         inherited [BLOCK && IDE && BLK_DEV_IDE && PCI && BLK_DEV_IDEPCI]
         if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI] {
          config BLK_DEV_IDEDMA_FORCED boolean {
           prompt "Force enable legacy 2.0.X HOSTS to use DMA" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
          }
          config IDEDMA_PCI_AUTO boolean {
           prompt "Use PCI DMA by default when available" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           config IDEDMA_ONLYDISK boolean {
            prompt "Enable DMA only for disks " if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && IDEDMA_PCI_AUTO]
            depends on [IDEDMA_PCI_AUTO]
            inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && IDEDMA_PCI_AUTO]
           }
          }
          config BLK_DEV_AEC62XX tristate {
           prompt "AEC62XX chipset support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
          }
          config BLK_DEV_ALI15X3 tristate {
           prompt "ALI M15x3 chipset support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           config WDC_ALI15X3 boolean {
            prompt "ALI M15x3 WDC support (DANGEROUS)" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && BLK_DEV_ALI15X3]
            depends on [BLK_DEV_ALI15X3]
            inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && BLK_DEV_ALI15X3]
           }
          }
          config BLK_DEV_AMD74XX tristate {
           prompt "AMD and nVidia IDE support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
          }
          config BLK_DEV_ATIIXP tristate {
           prompt "ATI IXP chipset IDE support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && X86]
           depends on [X86]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && X86]
          }
          config BLK_DEV_CMD64X tristate {
           prompt "CMD64{3|6|8|9} chipset support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
          }
          config BLK_DEV_TRIFLEX tristate {
           prompt "Compaq Triflex IDE support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
          }
          config BLK_DEV_CY82C693 tristate {
           prompt "CY82C693 chipset support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
          }
          config BLK_DEV_CS5520 tristate {
           prompt "Cyrix CS5510/20 MediaGX chipset support (VERY EXPERIMENTAL)" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && EXPERIMENTAL]
           depends on [EXPERIMENTAL]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && EXPERIMENTAL]
          }
          config BLK_DEV_CS5530 tristate {
           prompt "Cyrix/National Semiconductor CS5530 MediaGX chipset support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
          }
          config BLK_DEV_CS5535 tristate {
           prompt "AMD CS5535 chipset support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && X86 && !X86_64]
           depends on [X86 && !X86_64]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && X86 && !X86_64]
          }
          config BLK_DEV_HPT34X tristate {
           prompt "HPT34X chipset support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           config HPT34X_AUTODMA boolean {
            prompt "HPT34X AUTODMA support (EXPERIMENTAL)" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && BLK_DEV_HPT34X && EXPERIMENTAL]
            depends on [BLK_DEV_HPT34X && EXPERIMENTAL]
            inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && BLK_DEV_HPT34X && EXPERIMENTAL]
           }
          }
          config BLK_DEV_HPT366 tristate {
           prompt "HPT36X/37X chipset support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
          }
          config BLK_DEV_JMICRON tristate {
           prompt "JMicron JMB36x support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
          }
          config BLK_DEV_SC1200 tristate {
           prompt "National SCx200 chipset support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
          }
          config BLK_DEV_PIIX tristate {
           prompt "Intel PIIXn chipsets support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
          }
          config BLK_DEV_IT821X tristate {
           prompt "IT821X IDE support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
          }
          config BLK_DEV_NS87415 tristate {
           prompt "NS87415 chipset support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
          }
          config BLK_DEV_PDC202XX_OLD tristate {
           prompt "PROMISE PDC202{46|62|65|67} support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           config PDC202XX_BURST boolean {
            prompt "Special UDMA Feature" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && BLK_DEV_PDC202XX_OLD]
            depends on [BLK_DEV_PDC202XX_OLD]
            inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && BLK_DEV_PDC202XX_OLD]
           }
          }
          config BLK_DEV_PDC202XX_NEW tristate {
           prompt "PROMISE PDC202{68|69|70|71|75|76|77} support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
          }
          config BLK_DEV_SVWKS tristate {
           prompt "ServerWorks OSB4/CSB5/CSB6 chipsets support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
          }
          config BLK_DEV_SGIIOC4 tristate {
           prompt "Silicon Graphics IOC4 chipset ATA/ATAPI support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && (IA64_SGI_SN2 || IA64_GENERIC) && SGI_IOC4]
           depends on [(IA64_SGI_SN2 || IA64_GENERIC) && SGI_IOC4]
           select IDEPCI_SHARE_IRQ if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && (IA64_SGI_SN2 || IA64_GENERIC) && SGI_IOC4]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && (IA64_SGI_SN2 || IA64_GENERIC) && SGI_IOC4]
          }
          config BLK_DEV_SIIMAGE tristate {
           prompt "Silicon Image chipset support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
          }
          config BLK_DEV_SIS5513 tristate {
           prompt "SiS5513 chipset support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && X86]
           depends on [X86]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && X86]
          }
          config BLK_DEV_SL82C105 tristate {
           prompt "Winbond SL82c105 support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && (PPC || ARM)]
           depends on [PPC || ARM]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI && (PPC || ARM)]
          }
          config BLK_DEV_SLC90E66 tristate {
           prompt "SLC90E66 chipset support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
          }
          config BLK_DEV_TRM290 tristate {
           prompt "Tekram TRM290 chipset support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
          }
          config BLK_DEV_VIA82CXXX tristate {
           prompt "VIA82CXXX chipset support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
           inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_PCI]
          }
         }
        }
       }
       config BLK_DEV_IDE_PMAC boolean {
        prompt "Builtin PowerMac IDE support" if [BLOCK && BLK_DEV_IDE && PPC_PMAC && IDE="y"]
        depends on [PPC_PMAC && IDE="y"]
        inherited [BLOCK && BLK_DEV_IDE && PPC_PMAC && IDE="y"]
        config BLK_DEV_IDE_PMAC_ATA100FIRST boolean {
         prompt "Probe internal ATA/100 (Kauai) first" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDE_PMAC]
         depends on [BLK_DEV_IDE_PMAC]
         inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDE_PMAC]
        }
        config BLK_DEV_IDEDMA_PMAC boolean {
         prompt "PowerMac IDE DMA support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDE_PMAC]
         depends on [BLK_DEV_IDE_PMAC]
         select BLK_DEV_IDEDMA_PCI if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDE_PMAC]
         inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDE_PMAC]
        }
       }
       config BLK_DEV_IDE_SWARM tristate {
        prompt "IDE for Sibyte evaluation boards" if [BLOCK && IDE && BLK_DEV_IDE && SIBYTE_SB1xxx_SOC]
        depends on [SIBYTE_SB1xxx_SOC]
        inherited [BLOCK && IDE && BLK_DEV_IDE && SIBYTE_SB1xxx_SOC]
       }
       config BLK_DEV_IDE_AU1XXX boolean {
        prompt "IDE for AMD Alchemy Au1200" if [BLOCK && IDE && BLK_DEV_IDE && SOC_AU1200]
        depends on [SOC_AU1200]
        inherited [BLOCK && IDE && BLK_DEV_IDE && SOC_AU1200]
        choice boolean {
         prompt "IDE Mode for AMD Alchemy Au1200" if [BLOCK && IDE && BLK_DEV_IDE && SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
         default [CONFIG_BLK_DEV_IDE_AU1XXX_PIO_DBDMA] if [BLOCK && IDE && BLK_DEV_IDE && SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
         depends on [SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
         config BLK_DEV_IDE_AU1XXX_PIO_DBDMA boolean {
          prompt "PIO+DbDMA IDE for AMD Alchemy Au1200" if [<choice>]
          inherited [<choice>]
         }
         config BLK_DEV_IDE_AU1XXX_MDMA2_DBDMA boolean {
          prompt "MDMA2+DbDMA IDE for AMD Alchemy Au1200" if [<choice> && SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
          depends on [SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
          inherited [<choice> && SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
         }
        }
        config BLK_DEV_IDE_AU1XXX_SEQTS_PER_RQ integer {
         prompt "Maximum transfer size (KB) per request (up to 128)" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDE_AU1XXX]
         default [128] if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDE_AU1XXX]
         depends on [BLK_DEV_IDE_AU1XXX]
         inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDE_AU1XXX]
        }
       }
       config IDE_ARM boolean {
        default [ARM && (ARCH_A5K || ARCH_CLPS7500 || ARCH_RPC || ARCH_SHARK)] if [BLOCK && IDE && BLK_DEV_IDE]
        inherited [BLOCK && IDE && BLK_DEV_IDE]
       }
       config BLK_DEV_IDE_ICSIDE tristate {
        prompt "ICS IDE interface support" if [BLOCK && IDE && BLK_DEV_IDE && ARM && ARCH_ACORN]
        depends on [ARM && ARCH_ACORN]
        inherited [BLOCK && IDE && BLK_DEV_IDE && ARM && ARCH_ACORN]
        config BLK_DEV_IDEDMA_ICS boolean {
         prompt "ICS DMA support" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDE_ICSIDE]
         depends on [BLK_DEV_IDE_ICSIDE]
         inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDE_ICSIDE]
         config IDEDMA_ICS_AUTO boolean {
          prompt "Use ICS DMA by default" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_ICS]
          depends on [BLK_DEV_IDEDMA_ICS]
          inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_IDEDMA_ICS]
         }
        }
       }
       config BLK_DEV_IDE_RAPIDE tristate {
        prompt "RapIDE interface support" if [BLOCK && IDE && BLK_DEV_IDE && ARM && ARCH_ACORN]
        depends on [ARM && ARCH_ACORN]
        inherited [BLOCK && IDE && BLK_DEV_IDE && ARM && ARCH_ACORN]
       }
       config BLK_DEV_IDE_BAST tristate {
        prompt "Simtec BAST / Thorcom VR1000 IDE support" if [BLOCK && IDE && BLK_DEV_IDE && ARM && (ARCH_BAST || MACH_VR1000)]
        depends on [ARM && (ARCH_BAST || MACH_VR1000)]
        inherited [BLOCK && IDE && BLK_DEV_IDE && ARM && (ARCH_BAST || MACH_VR1000)]
       }
       config BLK_DEV_GAYLE boolean {
        prompt "Amiga Gayle IDE interface support" if [BLOCK && IDE && BLK_DEV_IDE && AMIGA]
        depends on [AMIGA]
        inherited [BLOCK && IDE && BLK_DEV_IDE && AMIGA]
        config BLK_DEV_IDEDOUBLER boolean {
         prompt "Amiga IDE Doubler support (EXPERIMENTAL)" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_GAYLE && EXPERIMENTAL]
         depends on [BLK_DEV_GAYLE && EXPERIMENTAL]
         inherited [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_GAYLE && EXPERIMENTAL]
        }
       }
       config BLK_DEV_BUDDHA boolean {
        prompt "Buddha/Catweasel/X-Surf IDE interface support (EXPERIMENTAL)" if [BLOCK && IDE && BLK_DEV_IDE && ZORRO && EXPERIMENTAL]
        depends on [ZORRO && EXPERIMENTAL]
        inherited [BLOCK && IDE && BLK_DEV_IDE && ZORRO && EXPERIMENTAL]
       }
       config BLK_DEV_FALCON_IDE boolean {
        prompt "Falcon IDE interface support" if [BLOCK && IDE && BLK_DEV_IDE && ATARI]
        depends on [ATARI]
        inherited [BLOCK && IDE && BLK_DEV_IDE && ATARI]
       }
       config BLK_DEV_MAC_IDE boolean {
        prompt "Macintosh Quadra/Powerbook IDE interface support" if [BLOCK && IDE && BLK_DEV_IDE && MAC]
        depends on [MAC]
        inherited [BLOCK && IDE && BLK_DEV_IDE && MAC]
       }
       config BLK_DEV_Q40IDE boolean {
        prompt "Q40/Q60 IDE interface support" if [BLOCK && IDE && BLK_DEV_IDE && Q40]
        depends on [Q40]
        inherited [BLOCK && IDE && BLK_DEV_IDE && Q40]
       }
       config BLK_DEV_MPC8xx_IDE boolean {
        prompt "MPC8xx IDE support" if [BLOCK && 8xx && IDE="y" && BLK_DEV_IDE="y"]
        depends on [8xx && IDE="y" && BLK_DEV_IDE="y"]
        inherited [BLOCK && 8xx && IDE="y" && BLK_DEV_IDE="y"]
        choice boolean {
         prompt "Type of MPC8xx IDE interface" if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_MPC8xx_IDE]
         depends on [BLK_DEV_MPC8xx_IDE]
         default [IDE_8xx_PCCARD] if [BLOCK && IDE && BLK_DEV_IDE && BLK_DEV_MPC8xx_IDE]
         config IDE_8xx_PCCARD boolean {
          prompt "8xx_PCCARD" if [<choice>]
          inherited [<choice>]
         }
         config IDE_8xx_DIRECT boolean {
          prompt "8xx_DIRECT" if [<choice>]
          inherited [<choice>]
         }
         config IDE_EXT_DIRECT boolean {
          prompt "EXT_DIRECT" if [<choice>]
          inherited [<choice>]
         }
        }
       }
       config IDE_CHIPSETS boolean {
        prompt "Other IDE chipset support" if [BLOCK && IDE && BLK_DEV_IDE && ISA]
        depends on [ISA]
        inherited [BLOCK && IDE && BLK_DEV_IDE && ISA]
        if [BLOCK && IDE && BLK_DEV_IDE && IDE_CHIPSETS] {
         config BLK_DEV_4DRIVES boolean {
          prompt "Generic 4 drives/port support" if [BLOCK && IDE && BLK_DEV_IDE && IDE_CHIPSETS]
          inherited [BLOCK && IDE && BLK_DEV_IDE && IDE_CHIPSETS]
         }
         config BLK_DEV_ALI14XX tristate {
          prompt "ALI M14xx support" if [BLOCK && IDE && BLK_DEV_IDE && IDE_CHIPSETS]
          inherited [BLOCK && IDE && BLK_DEV_IDE && IDE_CHIPSETS]
         }
         config BLK_DEV_DTC2278 tristate {
          prompt "DTC-2278 support" if [BLOCK && IDE && BLK_DEV_IDE && IDE_CHIPSETS]
          inherited [BLOCK && IDE && BLK_DEV_IDE && IDE_CHIPSETS]
         }
         config BLK_DEV_HT6560B tristate {
          prompt "Holtek HT6560B support" if [BLOCK && IDE && BLK_DEV_IDE && IDE_CHIPSETS]
          inherited [BLOCK && IDE && BLK_DEV_IDE && IDE_CHIPSETS]
         }
         config BLK_DEV_QD65XX tristate {
          prompt "QDI QD65xx support" if [BLOCK && IDE && BLK_DEV_IDE && IDE_CHIPSETS]
          inherited [BLOCK && IDE && BLK_DEV_IDE && IDE_CHIPSETS]
         }
         config BLK_DEV_UMC8672 tristate {
          prompt "UMC-8672 support" if [BLOCK && IDE && BLK_DEV_IDE && IDE_CHIPSETS]
          inherited [BLOCK && IDE && BLK_DEV_IDE && IDE_CHIPSETS]
         }
        }
       }
       config BLK_DEV_IDEDMA boolean {
        default [BLK_DEV_IDEDMA_PCI || BLK_DEV_IDEDMA_PMAC || BLK_DEV_IDEDMA_ICS || BLK_DEV_IDE_AU1XXX_MDMA2_DBDMA] if [BLOCK && IDE && BLK_DEV_IDE]
        inherited [BLOCK && IDE && BLK_DEV_IDE]
       }
       config IDEDMA_IVB boolean {
        prompt "IGNORE word93 Validation BITS" if [BLOCK && IDE && BLK_DEV_IDE && (BLK_DEV_IDEDMA_PCI || BLK_DEV_IDEDMA_PMAC || BLK_DEV_IDEDMA_ICS)]
        depends on [BLK_DEV_IDEDMA_PCI || BLK_DEV_IDEDMA_PMAC || BLK_DEV_IDEDMA_ICS]
        inherited [BLOCK && IDE && BLK_DEV_IDE && (BLK_DEV_IDEDMA_PCI || BLK_DEV_IDEDMA_PMAC || BLK_DEV_IDEDMA_ICS)]
       }
       config IDEDMA_AUTO boolean {
        default [IDEDMA_PCI_AUTO || IDEDMA_ICS_AUTO] if [BLOCK && IDE && BLK_DEV_IDE]
        inherited [BLOCK && IDE && BLK_DEV_IDE]
       }
      }
      config BLK_DEV_HD_ONLY boolean {
       prompt "Old hard disk (MFM/RLL/IDE) driver" if [BLOCK && IDE && BLK_DEV_IDE="n"]
       depends on [BLK_DEV_IDE="n"]
       inherited [BLOCK && IDE && BLK_DEV_IDE="n"]
      }
     }
     config BLK_DEV_HD boolean {
      default [BLK_DEV_HD_IDE || BLK_DEV_HD_ONLY] if [BLOCK && IDE]
      inherited [BLOCK && IDE]
     }
    }
   }
  }
 }
 menu "SCSI device support" {
  config RAID_ATTRS tristate {
   prompt "RAID Transport Class" if [BLOCK]
   default [n] if [BLOCK]
   depends on [BLOCK]
   inherited [BLOCK]
  }
  config SCSI tristate {
   prompt "SCSI device support" if [BLOCK]
   depends on [BLOCK]
   inherited [BLOCK]
   config SCSI_TGT tristate {
    prompt "SCSI target support" if [SCSI && EXPERIMENTAL]
    depends on [SCSI && EXPERIMENTAL]
    inherited [SCSI && EXPERIMENTAL]
   }
  }
  config SCSI_NETLINK boolean {
   default [n] if []
   select NET if []
  }
  config SCSI_PROC_FS boolean {
   prompt "legacy /proc/scsi/ support" if [SCSI && PROC_FS]
   depends on [SCSI && PROC_FS]
   default [y] if [SCSI && PROC_FS]
   inherited [SCSI && PROC_FS]
  }
  config BLK_DEV_SD tristate {
   prompt "SCSI disk support" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config CHR_DEV_ST tristate {
   prompt "SCSI tape support" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config CHR_DEV_OSST tristate {
   prompt "SCSI OnStream SC-x0 tape support" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config BLK_DEV_SR tristate {
   prompt "SCSI CDROM support" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
   config BLK_DEV_SR_VENDOR boolean {
    prompt "Enable vendor-specific extensions (for SCSI CDROM)" if [BLK_DEV_SR]
    depends on [BLK_DEV_SR]
    inherited [BLK_DEV_SR]
   }
  }
  config CHR_DEV_SG tristate {
   prompt "SCSI generic support" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config CHR_DEV_SCH tristate {
   prompt "SCSI media changer support" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config SCSI_MULTI_LUN boolean {
   prompt "Probe all LUNs on each SCSI device" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config SCSI_CONSTANTS boolean {
   prompt "Verbose SCSI error reporting (kernel size +=12K)" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config SCSI_LOGGING boolean {
   prompt "SCSI logging facility" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config SCSI_SCAN_ASYNC boolean {
   prompt "Asynchronous SCSI scanning" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  menu "SCSI Transports" {
   depends on [SCSI]
   config SCSI_SPI_ATTRS tristate {
    prompt "Parallel SCSI (SPI) Transport Attributes" if [SCSI]
    depends on [SCSI]
    inherited [SCSI]
   }
   config SCSI_FC_ATTRS tristate {
    prompt "FiberChannel Transport Attributes" if [SCSI]
    depends on [SCSI]
    select SCSI_NETLINK if [SCSI]
    inherited [SCSI]
   }
   config SCSI_ISCSI_ATTRS tristate {
    prompt "iSCSI Transport Attributes" if [SCSI && NET]
    depends on [SCSI && NET]
    inherited [SCSI && NET]
   }
   config SCSI_SAS_ATTRS tristate {
    prompt "SAS Transport Attributes" if [SCSI]
    depends on [SCSI]
    inherited [SCSI]
   }
   config SCSI_SAS_LIBSAS tristate {
    prompt "SAS Domain Transport Attributes" if [SCSI]
    depends on [SCSI]
    select SCSI_SAS_ATTRS if [SCSI]
    inherited [SCSI]
    config SCSI_SAS_LIBSAS_DEBUG boolean {
     prompt "Compile the SAS Domain Transport Attributes in debug mode" if [SCSI && SCSI_SAS_LIBSAS]
     default [y] if [SCSI && SCSI_SAS_LIBSAS]
     depends on [SCSI_SAS_LIBSAS]
     inherited [SCSI && SCSI_SAS_LIBSAS]
    }
   }
  }
  menu "SCSI low-level drivers" {
   depends on [SCSI!="n"]
   config ISCSI_TCP tristate {
    prompt "iSCSI Initiator over TCP/IP" if [SCSI && INET]
    depends on [SCSI && INET]
    select CRYPTO if [SCSI && INET]
    select CRYPTO_MD5 if [SCSI && INET]
    select CRYPTO_CRC32C if [SCSI && INET]
    select SCSI_ISCSI_ATTRS if [SCSI && INET]
    inherited [SCSI && INET]
   }
   config SGIWD93_SCSI tristate {
    prompt "SGI WD93C93 SCSI Driver" if [SGI_IP22 && SCSI]
    depends on [SGI_IP22 && SCSI]
    inherited [SGI_IP22 && SCSI]
   }
   config SCSI_DECNCR tristate {
    prompt "DEC NCR53C94 Scsi Driver" if [MACH_DECSTATION && SCSI && TC]
    depends on [MACH_DECSTATION && SCSI && TC]
    inherited [MACH_DECSTATION && SCSI && TC]
   }
   config SCSI_DECSII tristate {
    prompt "DEC SII Scsi Driver" if [MACH_DECSTATION && SCSI && 32BIT]
    depends on [MACH_DECSTATION && SCSI && 32BIT]
    inherited [MACH_DECSTATION && SCSI && 32BIT]
   }
   config BLK_DEV_3W_XXXX_RAID tristate {
    prompt "3ware 5/6/7/8xxx ATA-RAID support" if [PCI && SCSI]
    depends on [PCI && SCSI]
    inherited [PCI && SCSI]
   }
   config SCSI_3W_9XXX tristate {
    prompt "3ware 9xxx SATA-RAID support" if [PCI && SCSI]
    depends on [PCI && SCSI]
    inherited [PCI && SCSI]
   }
   config SCSI_7000FASST tristate {
    prompt "7000FASST SCSI support" if [ISA && SCSI && ISA_DMA_API]
    depends on [ISA && SCSI && ISA_DMA_API]
    inherited [ISA && SCSI && ISA_DMA_API]
   }
   config SCSI_ACARD tristate {
    prompt "ACARD SCSI support" if [PCI && SCSI]
    depends on [PCI && SCSI]
    inherited [PCI && SCSI]
   }
   config SCSI_AHA152X tristate {
    prompt "Adaptec AHA152X/2825 support" if [ISA && SCSI && !64BIT]
    depends on [ISA && SCSI && !64BIT]
    select SCSI_SPI_ATTRS if [ISA && SCSI && !64BIT]
    inherited [ISA && SCSI && !64BIT]
   }
   config SCSI_AHA1542 tristate {
    prompt "Adaptec AHA1542 support" if [ISA && SCSI && ISA_DMA_API]
    depends on [ISA && SCSI && ISA_DMA_API]
    inherited [ISA && SCSI && ISA_DMA_API]
   }
   config SCSI_AHA1740 tristate {
    prompt "Adaptec AHA1740 support" if [EISA && SCSI]
    depends on [EISA && SCSI]
    inherited [EISA && SCSI]
   }
   config SCSI_AACRAID tristate {
    prompt "Adaptec AACRAID support" if [SCSI && PCI]
    depends on [SCSI && PCI]
    inherited [SCSI && PCI]
   }
   config SCSI_AIC7XXX tristate {
    prompt "Adaptec AIC7xxx Fast -> U160 support (New Driver)" if [(PCI || EISA) && SCSI]
    depends on [(PCI || EISA) && SCSI]
    select SCSI_SPI_ATTRS if [(PCI || EISA) && SCSI]
    inherited [(PCI || EISA) && SCSI]
    config AIC7XXX_CMDS_PER_DEVICE integer {
     prompt "Maximum number of TCQ commands per device" if [SCSI && SCSI_AIC7XXX]
     depends on [SCSI_AIC7XXX]
     default [32] if [SCSI && SCSI_AIC7XXX]
     inherited [SCSI && SCSI_AIC7XXX]
    }
    config AIC7XXX_RESET_DELAY_MS integer {
     prompt "Initial bus reset delay in milli-seconds" if [SCSI && SCSI_AIC7XXX]
     depends on [SCSI_AIC7XXX]
     default [5000] if [SCSI && SCSI_AIC7XXX]
     inherited [SCSI && SCSI_AIC7XXX]
    }
    config AIC7XXX_PROBE_EISA_VL boolean {
     prompt "Probe for EISA and VL AIC7XXX Adapters" if [SCSI && SCSI_AIC7XXX && EISA]
     depends on [SCSI_AIC7XXX && EISA]
     inherited [SCSI && SCSI_AIC7XXX && EISA]
    }
    config AIC7XXX_BUILD_FIRMWARE boolean {
     prompt "Build Adapter Firmware with Kernel Build" if [SCSI && SCSI_AIC7XXX && !PREVENT_FIRMWARE_BUILD]
     depends on [SCSI_AIC7XXX && !PREVENT_FIRMWARE_BUILD]
     inherited [SCSI && SCSI_AIC7XXX && !PREVENT_FIRMWARE_BUILD]
    }
    config AIC7XXX_DEBUG_ENABLE boolean {
     prompt "Compile in Debugging Code" if [SCSI && SCSI_AIC7XXX]
     depends on [SCSI_AIC7XXX]
     default [y] if [SCSI && SCSI_AIC7XXX]
     inherited [SCSI && SCSI_AIC7XXX]
    }
    config AIC7XXX_DEBUG_MASK integer {
     prompt "Debug code enable mask (2047 for all debugging)" if [SCSI && SCSI_AIC7XXX]
     depends on [SCSI_AIC7XXX]
     default [0] if [SCSI && SCSI_AIC7XXX]
     inherited [SCSI && SCSI_AIC7XXX]
    }
    config AIC7XXX_REG_PRETTY_PRINT boolean {
     prompt "Decode registers during diagnostics" if [SCSI && SCSI_AIC7XXX]
     depends on [SCSI_AIC7XXX]
     default [y] if [SCSI && SCSI_AIC7XXX]
     inherited [SCSI && SCSI_AIC7XXX]
    }
   }
   config SCSI_AIC7XXX_OLD tristate {
    prompt "Adaptec AIC7xxx support (old driver)" if [(ISA || EISA || PCI) && SCSI]
    depends on [(ISA || EISA || PCI) && SCSI]
    inherited [(ISA || EISA || PCI) && SCSI]
   }
   config SCSI_AIC79XX tristate {
    prompt "Adaptec AIC79xx U320 support" if [PCI && SCSI]
    depends on [PCI && SCSI]
    select SCSI_SPI_ATTRS if [PCI && SCSI]
    inherited [PCI && SCSI]
    config AIC79XX_CMDS_PER_DEVICE integer {
     prompt "Maximum number of TCQ commands per device" if [SCSI && SCSI_AIC79XX]
     depends on [SCSI_AIC79XX]
     default [32] if [SCSI && SCSI_AIC79XX]
     inherited [SCSI && SCSI_AIC79XX]
    }
    config AIC79XX_RESET_DELAY_MS integer {
     prompt "Initial bus reset delay in milli-seconds" if [SCSI && SCSI_AIC79XX]
     depends on [SCSI_AIC79XX]
     default [5000] if [SCSI && SCSI_AIC79XX]
     inherited [SCSI && SCSI_AIC79XX]
    }
    config AIC79XX_BUILD_FIRMWARE boolean {
     prompt "Build Adapter Firmware with Kernel Build" if [SCSI && SCSI_AIC79XX && !PREVENT_FIRMWARE_BUILD]
     depends on [SCSI_AIC79XX && !PREVENT_FIRMWARE_BUILD]
     inherited [SCSI && SCSI_AIC79XX && !PREVENT_FIRMWARE_BUILD]
    }
    config AIC79XX_ENABLE_RD_STRM boolean {
     prompt "Enable Read Streaming for All Targets" if [SCSI && SCSI_AIC79XX]
     depends on [SCSI_AIC79XX]
     default [n] if [SCSI && SCSI_AIC79XX]
     inherited [SCSI && SCSI_AIC79XX]
    }
    config AIC79XX_DEBUG_ENABLE boolean {
     prompt "Compile in Debugging Code" if [SCSI && SCSI_AIC79XX]
     depends on [SCSI_AIC79XX]
     default [y] if [SCSI && SCSI_AIC79XX]
     inherited [SCSI && SCSI_AIC79XX]
    }
    config AIC79XX_DEBUG_MASK integer {
     prompt "Debug code enable mask (16383 for all debugging)" if [SCSI && SCSI_AIC79XX]
     depends on [SCSI_AIC79XX]
     default [0] if [SCSI && SCSI_AIC79XX]
     inherited [SCSI && SCSI_AIC79XX]
    }
    config AIC79XX_REG_PRETTY_PRINT boolean {
     prompt "Decode registers during diagnostics" if [SCSI && SCSI_AIC79XX]
     depends on [SCSI_AIC79XX]
     default [y] if [SCSI && SCSI_AIC79XX]
     inherited [SCSI && SCSI_AIC79XX]
    }
   }
   config SCSI_AIC94XX tristate {
    prompt "Adaptec AIC94xx SAS/SATA support" if [SCSI!="n" && PCI]
    depends on [PCI]
    select SCSI_SAS_LIBSAS if [SCSI!="n" && PCI]
    select FW_LOADER if [SCSI!="n" && PCI]
    inherited [SCSI!="n" && PCI]
    config AIC94XX_DEBUG boolean {
     prompt "Compile in debug mode" if [SCSI && SCSI_AIC94XX]
     default [y] if [SCSI && SCSI_AIC94XX]
     depends on [SCSI_AIC94XX]
     inherited [SCSI && SCSI_AIC94XX]
    }
   }
   config SCSI_DPT_I2O tristate {
    prompt "Adaptec I2O RAID support " if [!64BIT && SCSI && PCI]
    depends on [!64BIT && SCSI && PCI]
    inherited [!64BIT && SCSI && PCI]
   }
   config SCSI_ADVANSYS tristate {
    prompt "AdvanSys SCSI support" if [SCSI && (ISA || EISA || PCI) && (BROKEN || X86_32)]
    depends on [SCSI]
    depends on [ISA || EISA || PCI]
    depends on [BROKEN || X86_32]
    inherited [SCSI && (ISA || EISA || PCI) && (BROKEN || X86_32)]
   }
   config SCSI_IN2000 tristate {
    prompt "Always IN2000 SCSI support" if [ISA && SCSI]
    depends on [ISA && SCSI]
    inherited [ISA && SCSI]
   }
   config SCSI_ARCMSR tristate {
    prompt "ARECA ARC11X0[PCI-X]/ARC12X0[PCI-EXPRESS] SATA-RAID support" if [PCI && SCSI]
    depends on [PCI && SCSI]
    inherited [PCI && SCSI]
   }
   config MEGARAID_NEWGEN boolean {
    prompt "LSI Logic New Generation RAID Device Drivers" if [PCI && SCSI]
    depends on [PCI && SCSI]
    inherited [PCI && SCSI]
    config MEGARAID_MM tristate {
     prompt "LSI Logic Management Module (New Driver)" if [PCI && SCSI && MEGARAID_NEWGEN]
     depends on [PCI && SCSI && MEGARAID_NEWGEN]
     inherited [PCI && SCSI && MEGARAID_NEWGEN]
     config MEGARAID_MAILBOX tristate {
      prompt "LSI Logic MegaRAID Driver (New Driver)" if [PCI && SCSI && MEGARAID_MM]
      depends on [PCI && SCSI && MEGARAID_MM]
      inherited [PCI && SCSI && MEGARAID_MM]
     }
    }
   }
   config MEGARAID_LEGACY tristate {
    prompt "LSI Logic Legacy MegaRAID Driver" if [PCI && SCSI]
    depends on [PCI && SCSI]
    inherited [PCI && SCSI]
   }
   config MEGARAID_SAS tristate {
    prompt "LSI Logic MegaRAID SAS RAID Module" if [PCI && SCSI]
    depends on [PCI && SCSI]
    inherited [PCI && SCSI]
   }
   config SCSI_HPTIOP tristate {
    prompt "HighPoint RocketRAID 3xxx Controller support" if [SCSI && PCI]
    depends on [SCSI && PCI]
    inherited [SCSI && PCI]
   }
   config SCSI_BUSLOGIC tristate {
    prompt "BusLogic SCSI support" if [(PCI || ISA || MCA) && SCSI && ISA_DMA_API]
    depends on [(PCI || ISA || MCA) && SCSI && ISA_DMA_API]
    inherited [(PCI || ISA || MCA) && SCSI && ISA_DMA_API]
    config SCSI_OMIT_FLASHPOINT boolean {
     prompt "Omit FlashPoint support" if [SCSI && SCSI_BUSLOGIC]
     depends on [SCSI_BUSLOGIC]
     inherited [SCSI && SCSI_BUSLOGIC]
    }
   }
   config SCSI_DMX3191D tristate {
    prompt "DMX3191D SCSI support" if [PCI && SCSI]
    depends on [PCI && SCSI]
    select SCSI_SPI_ATTRS if [PCI && SCSI]
    inherited [PCI && SCSI]
   }
   config SCSI_DTC3280 tristate {
    prompt "DTC3180/3280 SCSI support" if [ISA && SCSI]
    depends on [ISA && SCSI]
    select SCSI_SPI_ATTRS if [ISA && SCSI]
    inherited [ISA && SCSI]
   }
   config SCSI_EATA tristate {
    prompt "EATA ISA/EISA/PCI (DPT and generic EATA/DMA-compliant boards) support" if [(ISA || EISA || PCI) && SCSI && ISA_DMA_API]
    depends on [(ISA || EISA || PCI) && SCSI && ISA_DMA_API]
    inherited [(ISA || EISA || PCI) && SCSI && ISA_DMA_API]
    config SCSI_EATA_TAGGED_QUEUE boolean {
     prompt "enable tagged command queueing" if [SCSI && SCSI_EATA]
     depends on [SCSI_EATA]
     inherited [SCSI && SCSI_EATA]
    }
    config SCSI_EATA_LINKED_COMMANDS boolean {
     prompt "enable elevator sorting" if [SCSI && SCSI_EATA]
     depends on [SCSI_EATA]
     inherited [SCSI && SCSI_EATA]
    }
    config SCSI_EATA_MAX_TAGS integer {
     prompt "maximum number of queued commands" if [SCSI && SCSI_EATA]
     depends on [SCSI_EATA]
     default [16] if [SCSI && SCSI_EATA]
     inherited [SCSI && SCSI_EATA]
    }
   }
   config SCSI_EATA_PIO tristate {
    prompt "EATA-PIO (old DPT PM2001, PM2012A) support" if [(ISA || EISA || PCI) && SCSI && BROKEN]
    depends on [(ISA || EISA || PCI) && SCSI && BROKEN]
    inherited [(ISA || EISA || PCI) && SCSI && BROKEN]
   }
   config SCSI_FUTURE_DOMAIN tristate {
    prompt "Future Domain 16xx SCSI/AHA-2920A support" if [(ISA || PCI) && SCSI]
    depends on [(ISA || PCI) && SCSI]
    inherited [(ISA || PCI) && SCSI]
   }
   config SCSI_FD_MCS tristate {
    prompt "Future Domain MCS-600/700 SCSI support" if [MCA_LEGACY && SCSI]
    depends on [MCA_LEGACY && SCSI]
    inherited [MCA_LEGACY && SCSI]
   }
   config SCSI_GDTH tristate {
    prompt "Intel/ICP (former GDT SCSI Disk Array) RAID Controller support" if [(ISA || EISA || PCI) && SCSI && ISA_DMA_API]
    depends on [(ISA || EISA || PCI) && SCSI && ISA_DMA_API]
    inherited [(ISA || EISA || PCI) && SCSI && ISA_DMA_API]
   }
   config SCSI_GENERIC_NCR5380 tristate {
    prompt "Generic NCR5380/53c400 SCSI PIO support" if [ISA && SCSI]
    depends on [ISA && SCSI]
    select SCSI_SPI_ATTRS if [ISA && SCSI]
    inherited [ISA && SCSI]
   }
   config SCSI_GENERIC_NCR5380_MMIO tristate {
    prompt "Generic NCR5380/53c400 SCSI MMIO support" if [ISA && SCSI]
    depends on [ISA && SCSI]
    select SCSI_SPI_ATTRS if [ISA && SCSI]
    inherited [ISA && SCSI]
   }
   config SCSI_GENERIC_NCR53C400 boolean {
    prompt "Enable NCR53c400 extensions" if [SCSI && SCSI_GENERIC_NCR5380]
    depends on [SCSI_GENERIC_NCR5380]
    inherited [SCSI && SCSI_GENERIC_NCR5380]
   }
   config SCSI_IBMMCA tristate {
    prompt "IBMMCA SCSI support" if [MCA_LEGACY && SCSI]
    depends on [MCA_LEGACY && SCSI]
    inherited [MCA_LEGACY && SCSI]
    config IBMMCA_SCSI_ORDER_STANDARD boolean {
     prompt "Standard SCSI-order" if [SCSI && SCSI_IBMMCA]
     depends on [SCSI_IBMMCA]
     inherited [SCSI && SCSI_IBMMCA]
    }
    config IBMMCA_SCSI_DEV_RESET boolean {
     prompt "Reset SCSI-devices at boottime" if [SCSI && SCSI_IBMMCA]
     depends on [SCSI_IBMMCA]
     inherited [SCSI && SCSI_IBMMCA]
    }
   }
   config SCSI_IPS tristate {
    prompt "IBM ServeRAID support" if [PCI && SCSI]
    depends on [PCI && SCSI]
    inherited [PCI && SCSI]
   }
   config SCSI_IBMVSCSI tristate {
    prompt "IBM Virtual SCSI support" if [SCSI!="n" && (PPC_PSERIES || PPC_ISERIES)]
    depends on [PPC_PSERIES || PPC_ISERIES]
    inherited [SCSI!="n" && (PPC_PSERIES || PPC_ISERIES)]
   }
   config SCSI_IBMVSCSIS tristate {
    prompt "IBM Virtual SCSI Server support" if [SCSI!="n" && PPC_PSERIES && SCSI_TGT && SCSI_SRP]
    depends on [PPC_PSERIES && SCSI_TGT && SCSI_SRP]
    inherited [SCSI!="n" && PPC_PSERIES && SCSI_TGT && SCSI_SRP]
   }
   config SCSI_INITIO tristate {
    prompt "Initio 9100U(W) support" if [PCI && SCSI]
    depends on [PCI && SCSI]
    inherited [PCI && SCSI]
   }
   config SCSI_INIA100 tristate {
    prompt "Initio INI-A100U2W support" if [PCI && SCSI]
    depends on [PCI && SCSI]
    inherited [PCI && SCSI]
   }
   config SCSI_PPA tristate {
    prompt "IOMEGA parallel port (ppa - older drives)" if [SCSI && PARPORT_PC]
    depends on [SCSI && PARPORT_PC]
    inherited [SCSI && PARPORT_PC]
   }
   config SCSI_IMM tristate {
    prompt "IOMEGA parallel port (imm - newer drives)" if [SCSI && PARPORT_PC]
    depends on [SCSI && PARPORT_PC]
    inherited [SCSI && PARPORT_PC]
   }
   config SCSI_IZIP_EPP16 boolean {
    prompt "ppa/imm option - Use slow (but safe) EPP-16" if [SCSI && (SCSI_PPA || SCSI_IMM)]
    depends on [SCSI_PPA || SCSI_IMM]
    inherited [SCSI && (SCSI_PPA || SCSI_IMM)]
   }
   config SCSI_IZIP_SLOW_CTR boolean {
    prompt "ppa/imm option - Assume slow parport control register" if [SCSI && (SCSI_PPA || SCSI_IMM)]
    depends on [SCSI_PPA || SCSI_IMM]
    inherited [SCSI && (SCSI_PPA || SCSI_IMM)]
   }
   config SCSI_NCR53C406A tristate {
    prompt "NCR53c406a SCSI support" if [ISA && SCSI]
    depends on [ISA && SCSI]
    inherited [ISA && SCSI]
   }
   config SCSI_NCR_D700 tristate {
    prompt "NCR Dual 700 MCA SCSI support" if [MCA && SCSI]
    depends on [MCA && SCSI]
    select SCSI_SPI_ATTRS if [MCA && SCSI]
    inherited [MCA && SCSI]
   }
   config SCSI_LASI700 tristate {
    prompt "HP Lasi SCSI support for 53c700/710" if [GSC && SCSI]
    depends on [GSC && SCSI]
    select SCSI_SPI_ATTRS if [GSC && SCSI]
    inherited [GSC && SCSI]
    config 53C700_LE_ON_BE boolean {
     depends on [SCSI_LASI700]
     default [y] if [SCSI && SCSI_LASI700]
     inherited [SCSI && SCSI_LASI700]
    }
   }
   config SCSI_STEX tristate {
    prompt "Promise SuperTrak EX Series support" if [PCI && SCSI]
    depends on [PCI && SCSI]
    inherited [PCI && SCSI]
   }
   config SCSI_SYM53C8XX_2 tristate {
    prompt "SYM53C8XX Version 2 SCSI support" if [PCI && SCSI]
    depends on [PCI && SCSI]
    select SCSI_SPI_ATTRS if [PCI && SCSI]
    inherited [PCI && SCSI]
    config SCSI_SYM53C8XX_DMA_ADDRESSING_MODE integer {
     prompt "DMA addressing mode" if [SCSI && SCSI_SYM53C8XX_2]
     depends on [SCSI_SYM53C8XX_2]
     default [1] if [SCSI && SCSI_SYM53C8XX_2]
     inherited [SCSI && SCSI_SYM53C8XX_2]
    }
    config SCSI_SYM53C8XX_DEFAULT_TAGS integer {
     prompt "Default tagged command queue depth" if [SCSI && SCSI_SYM53C8XX_2]
     depends on [SCSI_SYM53C8XX_2]
     default [16] if [SCSI && SCSI_SYM53C8XX_2]
     inherited [SCSI && SCSI_SYM53C8XX_2]
    }
    config SCSI_SYM53C8XX_MAX_TAGS integer {
     prompt "Maximum number of queued commands" if [SCSI && SCSI_SYM53C8XX_2]
     depends on [SCSI_SYM53C8XX_2]
     default [64] if [SCSI && SCSI_SYM53C8XX_2]
     inherited [SCSI && SCSI_SYM53C8XX_2]
    }
    config SCSI_SYM53C8XX_MMIO boolean {
     prompt "Use memory mapped IO" if [SCSI && SCSI_SYM53C8XX_2]
     depends on [SCSI_SYM53C8XX_2]
     default [y] if [SCSI && SCSI_SYM53C8XX_2]
     inherited [SCSI && SCSI_SYM53C8XX_2]
    }
   }
   config SCSI_IPR tristate {
    prompt "IBM Power Linux RAID adapter support" if [PCI && SCSI && ATA]
    depends on [PCI && SCSI && ATA]
    select FW_LOADER if [PCI && SCSI && ATA]
    inherited [PCI && SCSI && ATA]
    config SCSI_IPR_TRACE boolean {
     prompt "enable driver internal trace" if [SCSI && SCSI_IPR]
     depends on [SCSI_IPR]
     default [y] if [SCSI && SCSI_IPR]
     inherited [SCSI && SCSI_IPR]
    }
    config SCSI_IPR_DUMP boolean {
     prompt "enable adapter dump support" if [SCSI && SCSI_IPR]
     depends on [SCSI_IPR]
     default [y] if [SCSI && SCSI_IPR]
     inherited [SCSI && SCSI_IPR]
    }
   }
   config SCSI_ZALON tristate {
    prompt "Zalon SCSI support" if [GSC && SCSI]
    depends on [GSC && SCSI]
    select SCSI_SPI_ATTRS if [GSC && SCSI]
    inherited [GSC && SCSI]
   }
   config SCSI_NCR_Q720 tristate {
    prompt "NCR Quad 720 MCA SCSI support" if [MCA && SCSI]
    depends on [MCA && SCSI]
    select SCSI_SPI_ATTRS if [MCA && SCSI]
    inherited [MCA && SCSI]
   }
   config SCSI_NCR53C8XX_DEFAULT_TAGS integer {
    prompt "default tagged command queue depth" if [SCSI && (SCSI_ZALON || SCSI_NCR_Q720)]
    depends on [SCSI_ZALON || SCSI_NCR_Q720]
    default [8] if [SCSI && (SCSI_ZALON || SCSI_NCR_Q720)]
    inherited [SCSI && (SCSI_ZALON || SCSI_NCR_Q720)]
   }
   config SCSI_NCR53C8XX_MAX_TAGS integer {
    prompt "maximum number of queued commands" if [SCSI && (SCSI_ZALON || SCSI_NCR_Q720)]
    depends on [SCSI_ZALON || SCSI_NCR_Q720]
    default [32] if [SCSI && (SCSI_ZALON || SCSI_NCR_Q720)]
    inherited [SCSI && (SCSI_ZALON || SCSI_NCR_Q720)]
   }
   config SCSI_NCR53C8XX_SYNC integer {
    prompt "synchronous transfers frequency in MHz" if [SCSI && (SCSI_ZALON || SCSI_NCR_Q720)]
    depends on [SCSI_ZALON || SCSI_NCR_Q720]
    default [20] if [SCSI && (SCSI_ZALON || SCSI_NCR_Q720)]
    inherited [SCSI && (SCSI_ZALON || SCSI_NCR_Q720)]
   }
   config SCSI_NCR53C8XX_PROFILE boolean {
    prompt "enable profiling" if [SCSI && (SCSI_ZALON || SCSI_NCR_Q720)]
    depends on [SCSI_ZALON || SCSI_NCR_Q720]
    inherited [SCSI && (SCSI_ZALON || SCSI_NCR_Q720)]
   }
   config SCSI_NCR53C8XX_NO_DISCONNECT boolean {
    prompt "not allow targets to disconnect" if [SCSI && (SCSI_ZALON || SCSI_NCR_Q720) && SCSI_NCR53C8XX_DEFAULT_TAGS="0"]
    depends on [(SCSI_ZALON || SCSI_NCR_Q720) && SCSI_NCR53C8XX_DEFAULT_TAGS="0"]
    inherited [SCSI && (SCSI_ZALON || SCSI_NCR_Q720) && SCSI_NCR53C8XX_DEFAULT_TAGS="0"]
   }
   config SCSI_MCA_53C9X tristate {
    prompt "NCR MCA 53C9x SCSI support" if [MCA_LEGACY && SCSI && BROKEN_ON_SMP]
    depends on [MCA_LEGACY && SCSI && BROKEN_ON_SMP]
    inherited [MCA_LEGACY && SCSI && BROKEN_ON_SMP]
   }
   config SCSI_PAS16 tristate {
    prompt "PAS16 SCSI support" if [ISA && SCSI]
    depends on [ISA && SCSI]
    select SCSI_SPI_ATTRS if [ISA && SCSI]
    inherited [ISA && SCSI]
   }
   config SCSI_PSI240I tristate {
    prompt "PSI240i support" if [ISA && SCSI]
    depends on [ISA && SCSI]
    inherited [ISA && SCSI]
   }
   config SCSI_QLOGIC_FAS tristate {
    prompt "Qlogic FAS SCSI support" if [ISA && SCSI]
    depends on [ISA && SCSI]
    inherited [ISA && SCSI]
   }
   config SCSI_QLOGIC_FC_FIRMWARE boolean {
    prompt "Include loadable firmware in driver" if [SCSI && SCSI_QLOGIC_FC]
    depends on [SCSI_QLOGIC_FC]
    inherited [SCSI && SCSI_QLOGIC_FC]
   }
   config SCSI_QLOGIC_1280 tristate {
    prompt "Qlogic QLA 1240/1x80/1x160 SCSI support" if [PCI && SCSI]
    depends on [PCI && SCSI]
    inherited [PCI && SCSI]
   }
   config SCSI_QLOGICPTI tristate {
    prompt "PTI Qlogic, ISP Driver" if [SBUS && SCSI]
    depends on [SBUS && SCSI]
    inherited [SBUS && SCSI]
   }
   config SCSI_QLA_FC tristate {
    prompt "QLogic QLA2XXX Fibre Channel Support" if [PCI && SCSI]
    depends on [PCI && SCSI]
    select SCSI_FC_ATTRS if [PCI && SCSI]
    select FW_LOADER if [PCI && SCSI]
    inherited [PCI && SCSI]
   }
   config SCSI_QLA_ISCSI tristate {
    prompt "QLogic ISP4XXX host adapter family support" if [PCI && SCSI && NET]
    depends on [PCI && SCSI && NET]
    select SCSI_ISCSI_ATTRS if [PCI && SCSI && NET]
    inherited [PCI && SCSI && NET]
   }
   config SCSI_LPFC tristate {
    prompt "Emulex LightPulse Fibre Channel Support" if [PCI && SCSI]
    depends on [PCI && SCSI]
    select SCSI_FC_ATTRS if [PCI && SCSI]
    inherited [PCI && SCSI]
   }
   config SCSI_SEAGATE tristate {
    prompt "Seagate ST-02 and Future Domain TMC-8xx SCSI support" if [X86 && ISA && SCSI]
    depends on [X86 && ISA && SCSI]
    inherited [X86 && ISA && SCSI]
   }
   config SCSI_SIM710 tristate {
    prompt "Simple 53c710 SCSI support (Compaq, NCR machines)" if [(EISA || MCA) && SCSI]
    depends on [(EISA || MCA) && SCSI]
    select SCSI_SPI_ATTRS if [(EISA || MCA) && SCSI]
    inherited [(EISA || MCA) && SCSI]
    config 53C700_IO_MAPPED boolean {
     depends on [SCSI_SIM710]
     default [y] if [SCSI && SCSI_SIM710]
     inherited [SCSI && SCSI_SIM710]
    }
   }
   config SCSI_SYM53C416 tristate {
    prompt "Symbios 53c416 SCSI support" if [ISA && SCSI]
    depends on [ISA && SCSI]
    inherited [ISA && SCSI]
   }
   config SCSI_DC395x tristate {
    prompt "Tekram DC395(U/UW/F) and DC315(U) SCSI support (EXPERIMENTAL)" if [PCI && SCSI && EXPERIMENTAL]
    depends on [PCI && SCSI && EXPERIMENTAL]
    inherited [PCI && SCSI && EXPERIMENTAL]
   }
   config SCSI_DC390T tristate {
    prompt "Tekram DC390(T) and Am53/79C974 SCSI support" if [PCI && SCSI]
    depends on [PCI && SCSI]
    inherited [PCI && SCSI]
   }
   config SCSI_T128 tristate {
    prompt "Trantor T128/T128F/T228 SCSI support" if [ISA && SCSI]
    depends on [ISA && SCSI]
    select SCSI_SPI_ATTRS if [ISA && SCSI]
    inherited [ISA && SCSI]
   }
   config SCSI_U14_34F tristate {
    prompt "UltraStor 14F/34F support" if [ISA && SCSI && ISA_DMA_API]
    depends on [ISA && SCSI && ISA_DMA_API]
    inherited [ISA && SCSI && ISA_DMA_API]
    config SCSI_U14_34F_TAGGED_QUEUE boolean {
     prompt "enable tagged command queueing" if [SCSI && SCSI_U14_34F]
     depends on [SCSI_U14_34F]
     inherited [SCSI && SCSI_U14_34F]
    }
    config SCSI_U14_34F_LINKED_COMMANDS boolean {
     prompt "enable elevator sorting" if [SCSI && SCSI_U14_34F]
     depends on [SCSI_U14_34F]
     inherited [SCSI && SCSI_U14_34F]
    }
    config SCSI_U14_34F_MAX_TAGS integer {
     prompt "maximum number of queued commands" if [SCSI && SCSI_U14_34F]
     depends on [SCSI_U14_34F]
     default [8] if [SCSI && SCSI_U14_34F]
     inherited [SCSI && SCSI_U14_34F]
    }
   }
   config SCSI_ULTRASTOR tristate {
    prompt "UltraStor SCSI support" if [X86 && ISA && SCSI]
    depends on [X86 && ISA && SCSI]
    inherited [X86 && ISA && SCSI]
   }
   config SCSI_NSP32 tristate {
    prompt "Workbit NinjaSCSI-32Bi/UDE support" if [PCI && SCSI && !64BIT]
    depends on [PCI && SCSI && !64BIT]
    inherited [PCI && SCSI && !64BIT]
   }
   config SCSI_DEBUG tristate {
    prompt "SCSI debugging host simulator" if [SCSI]
    depends on [SCSI]
    inherited [SCSI]
   }
   config SCSI_MESH tristate {
    prompt "MESH (Power Mac internal SCSI) support" if [PPC32 && PPC_PMAC && SCSI]
    depends on [PPC32 && PPC_PMAC && SCSI]
    inherited [PPC32 && PPC_PMAC && SCSI]
    config SCSI_MESH_SYNC_RATE integer {
     prompt "maximum synchronous transfer rate (MB/s) (0 = async)" if [SCSI && SCSI_MESH]
     depends on [SCSI_MESH]
     default [5] if [SCSI && SCSI_MESH]
     inherited [SCSI && SCSI_MESH]
    }
    config SCSI_MESH_RESET_DELAY_MS integer {
     prompt "initial bus reset delay (ms) (0 = no reset)" if [SCSI && SCSI_MESH]
     depends on [SCSI_MESH]
     default [4000] if [SCSI && SCSI_MESH]
     inherited [SCSI && SCSI_MESH]
    }
   }
   config SCSI_MAC53C94 tristate {
    prompt "53C94 (Power Mac external SCSI) support" if [PPC32 && PPC_PMAC && SCSI]
    depends on [PPC32 && PPC_PMAC && SCSI]
    inherited [PPC32 && PPC_PMAC && SCSI]
   }
   config SCSI_ACORNSCSI_3 tristate {
    prompt "Acorn SCSI card (aka30) support" if [ARCH_ACORN && SCSI && BROKEN]
    depends on [ARCH_ACORN && SCSI && BROKEN]
    select SCSI_SPI_ATTRS if [ARCH_ACORN && SCSI && BROKEN]
    inherited [ARCH_ACORN && SCSI && BROKEN]
    config SCSI_ACORNSCSI_TAGGED_QUEUE boolean {
     prompt "Support SCSI 2 Tagged queueing" if [SCSI && SCSI_ACORNSCSI_3]
     depends on [SCSI_ACORNSCSI_3]
     inherited [SCSI && SCSI_ACORNSCSI_3]
    }
    config SCSI_ACORNSCSI_SYNC boolean {
     prompt "Support SCSI 2 Synchronous Transfers" if [SCSI && SCSI_ACORNSCSI_3]
     depends on [SCSI_ACORNSCSI_3]
     inherited [SCSI && SCSI_ACORNSCSI_3]
    }
   }
   config SCSI_ARXESCSI tristate {
    prompt "ARXE SCSI support" if [ARCH_ACORN && SCSI]
    depends on [ARCH_ACORN && SCSI]
    inherited [ARCH_ACORN && SCSI]
   }
   config SCSI_CUMANA_2 tristate {
    prompt "CumanaSCSI II support" if [ARCH_ACORN && SCSI]
    depends on [ARCH_ACORN && SCSI]
    inherited [ARCH_ACORN && SCSI]
   }
   config SCSI_EESOXSCSI tristate {
    prompt "EESOX support" if [ARCH_ACORN && SCSI]
    depends on [ARCH_ACORN && SCSI]
    inherited [ARCH_ACORN && SCSI]
   }
   config SCSI_POWERTECSCSI tristate {
    prompt "PowerTec support" if [ARCH_ACORN && SCSI]
    depends on [ARCH_ACORN && SCSI]
    inherited [ARCH_ACORN && SCSI]
   }
   config SCSI_CUMANA_1 tristate {
    prompt "CumanaSCSI I support (EXPERIMENTAL)" if [ARCH_ACORN && EXPERIMENTAL && SCSI]
    depends on [ARCH_ACORN && EXPERIMENTAL && SCSI]
    select SCSI_SPI_ATTRS if [ARCH_ACORN && EXPERIMENTAL && SCSI]
    inherited [ARCH_ACORN && EXPERIMENTAL && SCSI]
   }
   config SCSI_ECOSCSI tristate {
    prompt "EcoScsi support (EXPERIMENTAL)" if [ARCH_ACORN && EXPERIMENTAL && (ARCH_ARC || ARCH_A5K) && SCSI]
    depends on [ARCH_ACORN && EXPERIMENTAL && (ARCH_ARC || ARCH_A5K) && SCSI]
    select SCSI_SPI_ATTRS if [ARCH_ACORN && EXPERIMENTAL && (ARCH_ARC || ARCH_A5K) && SCSI]
    inherited [ARCH_ACORN && EXPERIMENTAL && (ARCH_ARC || ARCH_A5K) && SCSI]
   }
   config SCSI_OAK1 tristate {
    prompt "Oak SCSI support (EXPERIMENTAL)" if [ARCH_ACORN && EXPERIMENTAL && SCSI]
    depends on [ARCH_ACORN && EXPERIMENTAL && SCSI]
    select SCSI_SPI_ATTRS if [ARCH_ACORN && EXPERIMENTAL && SCSI]
    inherited [ARCH_ACORN && EXPERIMENTAL && SCSI]
   }
   config JAZZ_ESP boolean {
    prompt "MIPS JAZZ FAS216 SCSI support" if [MACH_JAZZ && SCSI]
    depends on [MACH_JAZZ && SCSI]
    inherited [MACH_JAZZ && SCSI]
   }
   config A3000_SCSI tristate {
    prompt "A3000 WD33C93A support" if [AMIGA && SCSI]
    depends on [AMIGA && SCSI]
    inherited [AMIGA && SCSI]
   }
   config A2091_SCSI tristate {
    prompt "A2091/A590 WD33C93A support" if [ZORRO && SCSI]
    depends on [ZORRO && SCSI]
    inherited [ZORRO && SCSI]
   }
   config GVP11_SCSI tristate {
    prompt "GVP Series II WD33C93A support" if [ZORRO && SCSI]
    depends on [ZORRO && SCSI]
    inherited [ZORRO && SCSI]
   }
   config CYBERSTORM_SCSI tristate {
    prompt "CyberStorm SCSI support" if [ZORRO && SCSI]
    depends on [ZORRO && SCSI]
    inherited [ZORRO && SCSI]
   }
   config CYBERSTORMII_SCSI tristate {
    prompt "CyberStorm Mk II SCSI support" if [ZORRO && SCSI]
    depends on [ZORRO && SCSI]
    inherited [ZORRO && SCSI]
   }
   config BLZ2060_SCSI tristate {
    prompt "Blizzard 2060 SCSI support" if [ZORRO && SCSI]
    depends on [ZORRO && SCSI]
    inherited [ZORRO && SCSI]
   }
   config BLZ1230_SCSI tristate {
    prompt "Blizzard 1230IV/1260 SCSI support" if [ZORRO && SCSI]
    depends on [ZORRO && SCSI]
    inherited [ZORRO && SCSI]
   }
   config FASTLANE_SCSI tristate {
    prompt "Fastlane SCSI support" if [ZORRO && SCSI]
    depends on [ZORRO && SCSI]
    inherited [ZORRO && SCSI]
   }
   config SCSI_AMIGA7XX boolean {
    prompt "Amiga NCR53c710 SCSI support (EXPERIMENTAL)" if [AMIGA && SCSI && EXPERIMENTAL && BROKEN]
    depends on [AMIGA && SCSI && EXPERIMENTAL && BROKEN]
    inherited [AMIGA && SCSI && EXPERIMENTAL && BROKEN]
   }
   config OKTAGON_SCSI tristate {
    prompt "BSC Oktagon SCSI support (EXPERIMENTAL)" if [ZORRO && SCSI && EXPERIMENTAL]
    depends on [ZORRO && SCSI && EXPERIMENTAL]
    inherited [ZORRO && SCSI && EXPERIMENTAL]
   }
   config ATARI_SCSI tristate {
    prompt "Atari native SCSI support" if [ATARI && SCSI && BROKEN]
    depends on [ATARI && SCSI && BROKEN]
    select SCSI_SPI_ATTRS if [ATARI && SCSI && BROKEN]
    inherited [ATARI && SCSI && BROKEN]
    config ATARI_SCSI_TOSHIBA_DELAY boolean {
     prompt "Long delays for Toshiba CD-ROMs" if [SCSI && ATARI_SCSI]
     depends on [ATARI_SCSI]
     inherited [SCSI && ATARI_SCSI]
    }
    config ATARI_SCSI_RESET_BOOT boolean {
     prompt "Reset SCSI-devices at boottime" if [SCSI && ATARI_SCSI]
     depends on [ATARI_SCSI]
     inherited [SCSI && ATARI_SCSI]
    }
    config TT_DMA_EMUL boolean {
     prompt "Hades SCSI DMA emulator" if [SCSI && ATARI_SCSI && HADES]
     depends on [ATARI_SCSI && HADES]
     inherited [SCSI && ATARI_SCSI && HADES]
    }
   }
   config MAC_SCSI boolean {
    prompt "Macintosh NCR5380 SCSI" if [MAC && SCSI="y"]
    depends on [MAC && SCSI="y"]
    select SCSI_SPI_ATTRS if [MAC && SCSI="y"]
    inherited [MAC && SCSI="y"]
   }
   config SCSI_MAC_ESP tristate {
    prompt "Macintosh NCR53c9[46] SCSI" if [MAC && SCSI]
    depends on [MAC && SCSI]
    inherited [MAC && SCSI]
   }
   config MVME147_SCSI boolean {
    prompt "WD33C93 SCSI driver for MVME147" if [MVME147 && SCSI="y"]
    depends on [MVME147 && SCSI="y"]
    select SCSI_SPI_ATTRS if [MVME147 && SCSI="y"]
    inherited [MVME147 && SCSI="y"]
   }
   config MVME16x_SCSI boolean {
    prompt "NCR53C710 SCSI driver for MVME16x" if [MVME16x && SCSI && BROKEN]
    depends on [MVME16x && SCSI && BROKEN]
    select SCSI_SPI_ATTRS if [MVME16x && SCSI && BROKEN]
    inherited [MVME16x && SCSI && BROKEN]
   }
   config BVME6000_SCSI boolean {
    prompt "NCR53C710 SCSI driver for BVME6000" if [BVME6000 && SCSI && BROKEN]
    depends on [BVME6000 && SCSI && BROKEN]
    select SCSI_SPI_ATTRS if [BVME6000 && SCSI && BROKEN]
    inherited [BVME6000 && SCSI && BROKEN]
   }
   config SCSI_NCR53C7xx_FAST boolean {
    prompt "allow FAST-SCSI [10MHz]" if [SCSI && (SCSI_AMIGA7XX || MVME16x_SCSI || BVME6000_SCSI)]
    depends on [SCSI_AMIGA7XX || MVME16x_SCSI || BVME6000_SCSI]
    inherited [SCSI && (SCSI_AMIGA7XX || MVME16x_SCSI || BVME6000_SCSI)]
   }
   config SUN3_SCSI tristate {
    prompt "Sun3 NCR5380 SCSI" if [SUN3 && SCSI]
    depends on [SUN3 && SCSI]
    select SCSI_SPI_ATTRS if [SUN3 && SCSI]
    inherited [SUN3 && SCSI]
   }
   config SUN3X_ESP boolean {
    prompt "Sun3x ESP SCSI" if [SUN3X && SCSI="y"]
    depends on [SUN3X && SCSI="y"]
    inherited [SUN3X && SCSI="y"]
   }
   config SCSI_SUNESP tristate {
    prompt "Sparc ESP Scsi Driver" if [SBUS && SCSI]
    depends on [SBUS && SCSI]
    inherited [SBUS && SCSI]
   }
   config ZFCP tristate {
    prompt "FCP host bus adapter driver for IBM eServer zSeries" if [S390 && QDIO && SCSI]
    depends on [S390 && QDIO && SCSI]
    select SCSI_FC_ATTRS if [S390 && QDIO && SCSI]
    inherited [S390 && QDIO && SCSI]
   }
   config SCSI_SRP tristate {
    prompt "SCSI RDMA Protocol helper library" if [SCSI && PCI]
    depends on [SCSI && PCI]
    select SCSI_TGT if [SCSI && PCI]
    inherited [SCSI && PCI]
   }
  }
  menu "PCMCIA SCSI adapter support" {
   depends on [SCSI!="n" && PCMCIA!="n" && MODULES]
   config PCMCIA_AHA152X tristate {
    prompt "Adaptec AHA152X PCMCIA support" if [SCSI!="n" && PCMCIA!="n" && MODULES && m && <choice> && !64BIT]
    depends on [m && !64BIT]
    select SCSI_SPI_ATTRS if [SCSI!="n" && PCMCIA!="n" && MODULES && m && <choice> && !64BIT]
    inherited [SCSI!="n" && PCMCIA!="n" && MODULES && m && <choice> && !64BIT]
   }
   config PCMCIA_FDOMAIN tristate {
    prompt "Future Domain PCMCIA support" if [SCSI!="n" && PCMCIA!="n" && MODULES && m && <choice>]
    depends on [m]
    inherited [SCSI!="n" && PCMCIA!="n" && MODULES && m && <choice>]
   }
   config PCMCIA_NINJA_SCSI tristate {
    prompt "NinjaSCSI-3 / NinjaSCSI-32Bi (16bit) PCMCIA support" if [SCSI!="n" && PCMCIA!="n" && MODULES && m && <choice> && !64BIT]
    depends on [m && !64BIT]
    inherited [SCSI!="n" && PCMCIA!="n" && MODULES && m && <choice> && !64BIT]
   }
   config PCMCIA_QLOGIC tristate {
    prompt "Qlogic PCMCIA support" if [SCSI!="n" && PCMCIA!="n" && MODULES && m && <choice>]
    depends on [m]
    inherited [SCSI!="n" && PCMCIA!="n" && MODULES && m && <choice>]
   }
   config PCMCIA_SYM53C500 tristate {
    prompt "Symbios 53c500 PCMCIA support" if [SCSI!="n" && PCMCIA!="n" && MODULES && m && <choice>]
    depends on [m]
    inherited [SCSI!="n" && PCMCIA!="n" && MODULES && m && <choice>]
   }
  }
 }
 menu "Serial ATA (prod) and Parallel ATA (experimental) drivers" {
  config ATA tristate {
   prompt "ATA device support" if [BLOCK && (!M32R && !M68K || BROKEN) && (!SUN4 || BROKEN)]
   depends on [BLOCK]
   depends on [!(M32R || M68K) || BROKEN]
   depends on [!SUN4 || BROKEN]
   select SCSI if [BLOCK && (!M32R && !M68K || BROKEN) && (!SUN4 || BROKEN)]
   inherited [BLOCK && (!M32R && !M68K || BROKEN) && (!SUN4 || BROKEN)]
   if [ATA] {
    config ATA_NONSTANDARD boolean {
     default [n] if [ATA]
     inherited [ATA]
    }
    config SATA_AHCI tristate {
     prompt "AHCI SATA support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config SATA_SVW tristate {
     prompt "ServerWorks Frodo / Apple K2 SATA support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config ATA_PIIX tristate {
     prompt "Intel PIIX/ICH SATA support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config SATA_MV tristate {
     prompt "Marvell SATA support (HIGHLY EXPERIMENTAL)" if [ATA && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [ATA && PCI && EXPERIMENTAL]
    }
    config SATA_NV tristate {
     prompt "NVIDIA SATA support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config PDC_ADMA tristate {
     prompt "Pacific Digital ADMA support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config SATA_QSTOR tristate {
     prompt "Pacific Digital SATA QStor support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config SATA_PROMISE tristate {
     prompt "Promise SATA TX2/TX4 support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config SATA_SX4 tristate {
     prompt "Promise SATA SX4 support" if [ATA && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [ATA && PCI && EXPERIMENTAL]
    }
    config SATA_SIL tristate {
     prompt "Silicon Image SATA support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config SATA_SIL24 tristate {
     prompt "Silicon Image 3124/3132 SATA support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config SATA_SIS tristate {
     prompt "SiS 964/180 SATA support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config SATA_ULI tristate {
     prompt "ULi Electronics SATA support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config SATA_VIA tristate {
     prompt "VIA SATA support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config SATA_VITESSE tristate {
     prompt "VITESSE VSC-7174 / INTEL 31244 SATA support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config SATA_INTEL_COMBINED boolean {
     depends on [IDE="y" && !BLK_DEV_IDE_SATA && (SATA_AHCI || ATA_PIIX)]
     default [y] if [ATA && IDE="y" && !BLK_DEV_IDE_SATA && (SATA_AHCI || ATA_PIIX)]
     inherited [ATA && IDE="y" && !BLK_DEV_IDE_SATA && (SATA_AHCI || ATA_PIIX)]
    }
    config PATA_ALI tristate {
     prompt "ALi PATA support (Experimental)" if [ATA && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [ATA && PCI && EXPERIMENTAL]
    }
    config PATA_AMD tristate {
     prompt "AMD/NVidia PATA support (Experimental)" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config PATA_ARTOP tristate {
     prompt "ARTOP 6210/6260 PATA support (Experimental)" if [ATA && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [ATA && PCI && EXPERIMENTAL]
    }
    config PATA_ATIIXP tristate {
     prompt "ATI PATA support (Experimental)" if [ATA && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [ATA && PCI && EXPERIMENTAL]
    }
    config PATA_CMD64X tristate {
     prompt "CMD64x PATA support (Very Experimental)" if [ATA && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [ATA && PCI && EXPERIMENTAL]
    }
    config PATA_CS5520 tristate {
     prompt "CS5510/5520 PATA support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config PATA_CS5530 tristate {
     prompt "CS5530 PATA support (Experimental)" if [ATA && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [ATA && PCI && EXPERIMENTAL]
    }
    config PATA_CS5535 tristate {
     prompt "CS5535 PATA support (Experimental)" if [ATA && PCI && X86 && !X86_64 && EXPERIMENTAL]
     depends on [PCI && X86 && !X86_64 && EXPERIMENTAL]
     inherited [ATA && PCI && X86 && !X86_64 && EXPERIMENTAL]
    }
    config PATA_CYPRESS tristate {
     prompt "Cypress CY82C693 PATA support (Very Experimental)" if [ATA && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [ATA && PCI && EXPERIMENTAL]
    }
    config PATA_EFAR tristate {
     prompt "EFAR SLC90E66 support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config ATA_GENERIC tristate {
     prompt "Generic ATA support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config PATA_HPT366 tristate {
     prompt "HPT 366/368 PATA support (Very Experimental)" if [ATA && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [ATA && PCI && EXPERIMENTAL]
    }
    config PATA_HPT37X tristate {
     prompt "HPT 370/370A/371/372/374/302 PATA support (Very Experimental)" if [ATA && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [ATA && PCI && EXPERIMENTAL]
    }
    config PATA_HPT3X2N tristate {
     prompt "HPT 372N/302N PATA support (Very Experimental)" if [ATA && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [ATA && PCI && EXPERIMENTAL]
    }
    config PATA_HPT3X3 tristate {
     prompt "HPT 343/363 PATA support (Experimental)" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config PATA_ISAPNP tristate {
     prompt "ISA Plug and Play PATA support (Very Experimental)" if [ATA && EXPERIMENTAL && ISAPNP]
     depends on [EXPERIMENTAL && ISAPNP]
     inherited [ATA && EXPERIMENTAL && ISAPNP]
    }
    config PATA_IT821X tristate {
     prompt "IT821x PATA support (Experimental)" if [ATA && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [ATA && PCI && EXPERIMENTAL]
    }
    config PATA_JMICRON tristate {
     prompt "JMicron PATA support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config PATA_LEGACY tristate {
     prompt "Legacy ISA PATA support (Experimental)" if [ATA && ISA && EXPERIMENTAL]
     depends on [ISA && EXPERIMENTAL]
     inherited [ATA && ISA && EXPERIMENTAL]
    }
    config PATA_TRIFLEX tristate {
     prompt "Compaq Triflex PATA support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config PATA_MARVELL tristate {
     prompt "Marvell PATA support via legacy mode" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config PATA_MPIIX tristate {
     prompt "Intel PATA MPIIX support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config PATA_OLDPIIX tristate {
     prompt "Intel PATA old PIIX support (Experimental)" if [ATA && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [ATA && PCI && EXPERIMENTAL]
    }
    config PATA_NETCELL tristate {
     prompt "NETCELL Revolution RAID support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config PATA_NS87410 tristate {
     prompt "Nat Semi NS87410 PATA support (Experimental)" if [ATA && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [ATA && PCI && EXPERIMENTAL]
    }
    config PATA_OPTI tristate {
     prompt "OPTI621/6215 PATA support (Very Experimental)" if [ATA && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [ATA && PCI && EXPERIMENTAL]
    }
    config PATA_OPTIDMA tristate {
     prompt "OPTI FireStar PATA support (Very Experimental)" if [ATA && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [ATA && PCI && EXPERIMENTAL]
    }
    config PATA_PCMCIA tristate {
     prompt "PCMCIA PATA support" if [ATA && PCMCIA]
     depends on [PCMCIA]
     inherited [ATA && PCMCIA]
    }
    config PATA_PDC_OLD tristate {
     prompt "Older Promise PATA controller support (Very Experimental)" if [ATA && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [ATA && PCI && EXPERIMENTAL]
    }
    config PATA_QDI tristate {
     prompt "QDI VLB PATA support" if [ATA && ISA]
     depends on [ISA]
     inherited [ATA && ISA]
    }
    config PATA_RADISYS tristate {
     prompt "RADISYS 82600 PATA support (Very experimental)" if [ATA && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [ATA && PCI && EXPERIMENTAL]
    }
    config PATA_RZ1000 tristate {
     prompt "PC Tech RZ1000 PATA support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config PATA_SC1200 tristate {
     prompt "SC1200 PATA support (Raving Lunatic)" if [ATA && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [ATA && PCI && EXPERIMENTAL]
    }
    config PATA_SERVERWORKS tristate {
     prompt "SERVERWORKS OSB4/CSB5/CSB6/HT1000 PATA support (Experimental)" if [ATA && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [ATA && PCI && EXPERIMENTAL]
    }
    config PATA_PDC2027X tristate {
     prompt "Promise PATA 2027x support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config PATA_SIL680 tristate {
     prompt "CMD / Silicon Image 680 PATA support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config PATA_SIS tristate {
     prompt "SiS PATA support (Experimental)" if [ATA && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [ATA && PCI && EXPERIMENTAL]
    }
    config PATA_VIA tristate {
     prompt "VIA PATA support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config PATA_WINBOND tristate {
     prompt "Winbond SL82C105 PATA support" if [ATA && PCI]
     depends on [PCI]
     inherited [ATA && PCI]
    }
    config PATA_WINBOND_VLB tristate {
     prompt "Winbond W83759A VLB PATA support (Experimental)" if [ATA && ISA && EXPERIMENTAL]
     depends on [ISA && EXPERIMENTAL]
     inherited [ATA && ISA && EXPERIMENTAL]
    }
    config PATA_PLATFORM tristate {
     prompt "Generic platform device PATA support" if [ATA && EMBEDDED]
     depends on [EMBEDDED]
     inherited [ATA && EMBEDDED]
    }
    config PATA_IXP4XX_CF tristate {
     prompt "IXP4XX Compact Flash support" if [ATA && ARCH_IXP4XX]
     depends on [ARCH_IXP4XX]
     inherited [ATA && ARCH_IXP4XX]
    }
   }
  }
 }
 menu "Old CD-ROM drivers (not SCSI, not IDE)" {
  depends on [ISA && BLOCK]
  config CD_NO_IDESCSI boolean {
   prompt "Support non-SCSI/IDE/ATAPI CDROM drives" if [ISA && BLOCK]
   inherited [ISA && BLOCK]
   config AZTCD tristate {
    prompt "Aztech/Orchid/Okano/Wearnes/TXC/CyDROM  CDROM support" if [ISA && BLOCK && CD_NO_IDESCSI]
    depends on [CD_NO_IDESCSI]
    inherited [ISA && BLOCK && CD_NO_IDESCSI]
   }
   config GSCD tristate {
    prompt "Goldstar R420 CDROM support" if [ISA && BLOCK && CD_NO_IDESCSI]
    depends on [CD_NO_IDESCSI]
    inherited [ISA && BLOCK && CD_NO_IDESCSI]
   }
   config SBPCD tristate {
    prompt "Matsushita/Panasonic/Creative, Longshine, TEAC CDROM support" if [ISA && BLOCK && CD_NO_IDESCSI && BROKEN_ON_SMP]
    depends on [CD_NO_IDESCSI && BROKEN_ON_SMP]
    inherited [ISA && BLOCK && CD_NO_IDESCSI && BROKEN_ON_SMP]
   }
   config MCDX tristate {
    prompt "Mitsumi CDROM support" if [ISA && BLOCK && CD_NO_IDESCSI]
    depends on [CD_NO_IDESCSI]
    inherited [ISA && BLOCK && CD_NO_IDESCSI]
   }
   config OPTCD tristate {
    prompt "Optics Storage DOLPHIN 8000AT CDROM support" if [ISA && BLOCK && CD_NO_IDESCSI]
    depends on [CD_NO_IDESCSI]
    inherited [ISA && BLOCK && CD_NO_IDESCSI]
   }
   config CM206 tristate {
    prompt "Philips/LMS CM206 CDROM support" if [ISA && BLOCK && CD_NO_IDESCSI && BROKEN_ON_SMP]
    depends on [CD_NO_IDESCSI && BROKEN_ON_SMP]
    inherited [ISA && BLOCK && CD_NO_IDESCSI && BROKEN_ON_SMP]
   }
   config SJCD tristate {
    prompt "Sanyo CDR-H94A CDROM support" if [ISA && BLOCK && CD_NO_IDESCSI]
    depends on [CD_NO_IDESCSI]
    inherited [ISA && BLOCK && CD_NO_IDESCSI]
   }
   config ISP16_CDI tristate {
    prompt "ISP16/MAD16/Mozart soft configurable cdrom interface support" if [ISA && BLOCK && CD_NO_IDESCSI]
    depends on [CD_NO_IDESCSI]
    inherited [ISA && BLOCK && CD_NO_IDESCSI]
   }
   config CDU31A tristate {
    prompt "Sony CDU31A/CDU33A CDROM support" if [ISA && BLOCK && CD_NO_IDESCSI && BROKEN_ON_SMP]
    depends on [CD_NO_IDESCSI && BROKEN_ON_SMP]
    inherited [ISA && BLOCK && CD_NO_IDESCSI && BROKEN_ON_SMP]
   }
   config CDU535 tristate {
    prompt "Sony CDU535 CDROM support" if [ISA && BLOCK && CD_NO_IDESCSI]
    depends on [CD_NO_IDESCSI]
    inherited [ISA && BLOCK && CD_NO_IDESCSI]
   }
  }
 }
 if [BLOCK] {
  menu "Multi-device support (RAID and LVM)" {
   depends on [BLOCK]
   config MD boolean {
    prompt "Multiple devices driver support (RAID and LVM)" if [BLOCK]
    inherited [BLOCK]
    config BLK_DEV_MD tristate {
     prompt "RAID support" if [BLOCK && MD]
     depends on [MD]
     inherited [BLOCK && MD]
     config MD_LINEAR tristate {
      prompt "Linear (append) mode" if [BLOCK && BLK_DEV_MD]
      depends on [BLK_DEV_MD]
      inherited [BLOCK && BLK_DEV_MD]
     }
     config MD_RAID0 tristate {
      prompt "RAID-0 (striping) mode" if [BLOCK && BLK_DEV_MD]
      depends on [BLK_DEV_MD]
      inherited [BLOCK && BLK_DEV_MD]
     }
     config MD_RAID1 tristate {
      prompt "RAID-1 (mirroring) mode" if [BLOCK && BLK_DEV_MD]
      depends on [BLK_DEV_MD]
      inherited [BLOCK && BLK_DEV_MD]
     }
     config MD_RAID10 tristate {
      prompt "RAID-10 (mirrored striping) mode (EXPERIMENTAL)" if [BLOCK && BLK_DEV_MD && EXPERIMENTAL]
      depends on [BLK_DEV_MD && EXPERIMENTAL]
      inherited [BLOCK && BLK_DEV_MD && EXPERIMENTAL]
     }
     config MD_RAID456 tristate {
      prompt "RAID-4/RAID-5/RAID-6 mode" if [BLOCK && BLK_DEV_MD]
      depends on [BLK_DEV_MD]
      inherited [BLOCK && BLK_DEV_MD]
      config MD_RAID5_RESHAPE boolean {
       prompt "Support adding drives to a raid-5 array" if [BLOCK && MD_RAID456]
       depends on [MD_RAID456]
       default [y] if [BLOCK && MD_RAID456]
       inherited [BLOCK && MD_RAID456]
      }
     }
     config MD_MULTIPATH tristate {
      prompt "Multipath I/O support" if [BLOCK && BLK_DEV_MD]
      depends on [BLK_DEV_MD]
      inherited [BLOCK && BLK_DEV_MD]
     }
     config MD_FAULTY tristate {
      prompt "Faulty test module for MD" if [BLOCK && BLK_DEV_MD]
      depends on [BLK_DEV_MD]
      inherited [BLOCK && BLK_DEV_MD]
     }
    }
    config BLK_DEV_DM tristate {
     prompt "Device mapper support" if [BLOCK && MD]
     depends on [MD]
     inherited [BLOCK && MD]
     config DM_DEBUG boolean {
      prompt "Device mapper debugging support" if [BLOCK && BLK_DEV_DM && EXPERIMENTAL]
      depends on [BLK_DEV_DM && EXPERIMENTAL]
      inherited [BLOCK && BLK_DEV_DM && EXPERIMENTAL]
     }
     config DM_CRYPT tristate {
      prompt "Crypt target support" if [BLOCK && BLK_DEV_DM && EXPERIMENTAL]
      depends on [BLK_DEV_DM && EXPERIMENTAL]
      select CRYPTO if [BLOCK && BLK_DEV_DM && EXPERIMENTAL]
      select CRYPTO_CBC if [BLOCK && BLK_DEV_DM && EXPERIMENTAL]
      inherited [BLOCK && BLK_DEV_DM && EXPERIMENTAL]
     }
     config DM_SNAPSHOT tristate {
      prompt "Snapshot target (EXPERIMENTAL)" if [BLOCK && BLK_DEV_DM && EXPERIMENTAL]
      depends on [BLK_DEV_DM && EXPERIMENTAL]
      inherited [BLOCK && BLK_DEV_DM && EXPERIMENTAL]
     }
     config DM_MIRROR tristate {
      prompt "Mirror target (EXPERIMENTAL)" if [BLOCK && BLK_DEV_DM && EXPERIMENTAL]
      depends on [BLK_DEV_DM && EXPERIMENTAL]
      inherited [BLOCK && BLK_DEV_DM && EXPERIMENTAL]
     }
     config DM_ZERO tristate {
      prompt "Zero target (EXPERIMENTAL)" if [BLOCK && BLK_DEV_DM && EXPERIMENTAL]
      depends on [BLK_DEV_DM && EXPERIMENTAL]
      inherited [BLOCK && BLK_DEV_DM && EXPERIMENTAL]
     }
     config DM_MULTIPATH tristate {
      prompt "Multipath target (EXPERIMENTAL)" if [BLOCK && BLK_DEV_DM && EXPERIMENTAL]
      depends on [BLK_DEV_DM && EXPERIMENTAL]
      inherited [BLOCK && BLK_DEV_DM && EXPERIMENTAL]
      config DM_MULTIPATH_EMC tristate {
       prompt "EMC CX/AX multipath support (EXPERIMENTAL)" if [BLOCK && DM_MULTIPATH && BLK_DEV_DM && EXPERIMENTAL]
       depends on [DM_MULTIPATH && BLK_DEV_DM && EXPERIMENTAL]
       inherited [BLOCK && DM_MULTIPATH && BLK_DEV_DM && EXPERIMENTAL]
      }
     }
    }
   }
  }
 }
 menu "Fusion MPT device support" {
  config FUSION boolean {
   default [n] if []
  }
  config FUSION_SPI tristate {
   prompt "Fusion MPT ScsiHost drivers for SPI" if [PCI && SCSI]
   depends on [PCI && SCSI]
   select FUSION if [PCI && SCSI]
   select SCSI_SPI_ATTRS if [PCI && SCSI]
   inherited [PCI && SCSI]
  }
  config FUSION_FC tristate {
   prompt "Fusion MPT ScsiHost drivers for FC" if [PCI && SCSI]
   depends on [PCI && SCSI]
   select FUSION if [PCI && SCSI]
   select SCSI_FC_ATTRS if [PCI && SCSI]
   inherited [PCI && SCSI]
  }
  config FUSION_SAS tristate {
   prompt "Fusion MPT ScsiHost drivers for SAS" if [PCI && SCSI]
   depends on [PCI && SCSI]
   select FUSION if [PCI && SCSI]
   select SCSI_SAS_ATTRS if [PCI && SCSI]
   inherited [PCI && SCSI]
  }
  config FUSION_MAX_SGE integer {
   prompt "Maximum number of scatter gather entries (16 - 128)" if [FUSION]
   depends on [FUSION]
   default [128] if [FUSION]
   range [16 128] if [FUSION]
   inherited [FUSION]
  }
  config FUSION_CTL tristate {
   prompt "Fusion MPT misc device (ioctl) driver" if [FUSION_SPI || FUSION_FC]
   depends on [FUSION_SPI || FUSION_FC]
   inherited [FUSION_SPI || FUSION_FC]
  }
  config FUSION_LAN tristate {
   prompt "Fusion MPT LAN driver" if [FUSION_FC && NET_FC]
   depends on [FUSION_FC && NET_FC]
   inherited [FUSION_FC && NET_FC]
  }
 }
 menu "IEEE 1394 (FireWire) support" {
  config IEEE1394 tristate {
   prompt "IEEE 1394 (FireWire) support" if [PCI || BROKEN]
   depends on [PCI || BROKEN]
   select NET if [PCI || BROKEN]
   inherited [PCI || BROKEN]
   config IEEE1394_VERBOSEDEBUG boolean {
    prompt "Excessive debugging output" if [IEEE1394]
    depends on [IEEE1394]
    inherited [IEEE1394]
   }
   config IEEE1394_OUI_DB boolean {
    prompt "OUI Database built-in (deprecated)" if [IEEE1394]
    depends on [IEEE1394]
    inherited [IEEE1394]
   }
   config IEEE1394_EXTRA_CONFIG_ROMS boolean {
    prompt "Build in extra config rom entries for certain functionality" if [IEEE1394]
    depends on [IEEE1394]
    inherited [IEEE1394]
    config IEEE1394_CONFIG_ROM_IP1394 boolean {
     prompt "IP-1394 Entry" if [IEEE1394_EXTRA_CONFIG_ROMS && IEEE1394]
     depends on [IEEE1394_EXTRA_CONFIG_ROMS && IEEE1394]
     inherited [IEEE1394_EXTRA_CONFIG_ROMS && IEEE1394]
    }
   }
   config IEEE1394_EXPORT_FULL_API boolean {
    prompt "Export all symbols of ieee1394's API (deprecated)" if [IEEE1394]
    depends on [IEEE1394]
    default [n] if [IEEE1394]
    inherited [IEEE1394]
   }
   config IEEE1394_PCILYNX tristate {
    prompt "Texas Instruments PCILynx support" if [PCI && IEEE1394 && I2C]
    depends on [PCI && IEEE1394 && I2C]
    select I2C_ALGOBIT if [PCI && IEEE1394 && I2C]
    inherited [PCI && IEEE1394 && I2C]
   }
   config IEEE1394_OHCI1394 tristate {
    prompt "OHCI-1394 support" if [PCI && IEEE1394]
    depends on [PCI && IEEE1394]
    inherited [PCI && IEEE1394]
   }
   config IEEE1394_VIDEO1394 tristate {
    prompt "OHCI-1394 Video support" if [IEEE1394 && IEEE1394_OHCI1394]
    depends on [IEEE1394 && IEEE1394_OHCI1394]
    inherited [IEEE1394 && IEEE1394_OHCI1394]
   }
   config IEEE1394_SBP2 tristate {
    prompt "SBP-2 support (Harddisks etc.)" if [IEEE1394 && SCSI]
    depends on [IEEE1394 && SCSI]
    inherited [IEEE1394 && SCSI]
    config IEEE1394_SBP2_PHYS_DMA boolean {
     prompt "Enable replacement for physical DMA in SBP2" if [IEEE1394 && IEEE1394_SBP2 && EXPERIMENTAL && (X86_32 || PPC_32)]
     depends on [IEEE1394 && IEEE1394_SBP2 && EXPERIMENTAL && (X86_32 || PPC_32)]
     inherited [IEEE1394 && IEEE1394_SBP2 && EXPERIMENTAL && (X86_32 || PPC_32)]
    }
   }
   config IEEE1394_ETH1394 tristate {
    prompt "Ethernet over 1394" if [IEEE1394 && EXPERIMENTAL && INET]
    depends on [IEEE1394 && EXPERIMENTAL && INET]
    select IEEE1394_CONFIG_ROM_IP1394 if [IEEE1394 && EXPERIMENTAL && INET]
    select IEEE1394_EXTRA_CONFIG_ROMS if [IEEE1394 && EXPERIMENTAL && INET]
    inherited [IEEE1394 && EXPERIMENTAL && INET]
   }
   config IEEE1394_DV1394 tristate {
    prompt "OHCI-DV I/O support (deprecated)" if [IEEE1394 && IEEE1394_OHCI1394]
    depends on [IEEE1394 && IEEE1394_OHCI1394]
    inherited [IEEE1394 && IEEE1394_OHCI1394]
   }
   config IEEE1394_RAWIO tristate {
    prompt "Raw IEEE1394 I/O support" if [IEEE1394]
    depends on [IEEE1394]
    inherited [IEEE1394]
   }
  }
 }
 menu "I2O device support" {
  config I2O tristate {
   prompt "I2O support" if [PCI]
   depends on [PCI]
   inherited [PCI]
   config I2O_LCT_NOTIFY_ON_CHANGES boolean {
    prompt "Enable LCT notification" if [I2O]
    depends on [I2O]
    default [y] if [I2O]
    inherited [I2O]
   }
   config I2O_EXT_ADAPTEC boolean {
    prompt "Enable Adaptec extensions" if [I2O]
    depends on [I2O]
    default [y] if [I2O]
    inherited [I2O]
    config I2O_EXT_ADAPTEC_DMA64 boolean {
     prompt "Enable 64-bit DMA" if [I2O_EXT_ADAPTEC && (64BIT || HIGHMEM64G)]
     depends on [I2O_EXT_ADAPTEC && (64BIT || HIGHMEM64G)]
     default [y] if [I2O_EXT_ADAPTEC && (64BIT || HIGHMEM64G)]
     inherited [I2O_EXT_ADAPTEC && (64BIT || HIGHMEM64G)]
    }
   }
   config I2O_CONFIG tristate {
    prompt "I2O Configuration support" if [I2O]
    depends on [I2O]
    inherited [I2O]
    config I2O_CONFIG_OLD_IOCTL boolean {
     prompt "Enable ioctls (OBSOLETE)" if [I2O_CONFIG]
     depends on [I2O_CONFIG]
     default [y] if [I2O_CONFIG]
     inherited [I2O_CONFIG]
    }
   }
   config I2O_BUS tristate {
    prompt "I2O Bus Adapter OSM" if [I2O]
    depends on [I2O]
    inherited [I2O]
   }
   config I2O_BLOCK tristate {
    prompt "I2O Block OSM" if [I2O && BLOCK]
    depends on [I2O && BLOCK]
    inherited [I2O && BLOCK]
   }
   config I2O_SCSI tristate {
    prompt "I2O SCSI OSM" if [I2O && SCSI]
    depends on [I2O && SCSI]
    inherited [I2O && SCSI]
   }
   config I2O_PROC tristate {
    prompt "I2O /proc support" if [I2O]
    depends on [I2O]
    inherited [I2O]
   }
  }
 }
 menu "Macintosh device drivers" {
  depends on [PPC || MAC]
  config ADB boolean {
   prompt "Apple Desktop Bus (ADB) support" if [(PPC || MAC) && (MAC || PPC_PMAC && PPC32)]
   depends on [MAC || PPC_PMAC && PPC32]
   inherited [(PPC || MAC) && (MAC || PPC_PMAC && PPC32)]
   config ADB_MACII boolean {
    prompt "Include Mac II ADB driver" if [(PPC || MAC) && ADB && MAC]
    depends on [ADB && MAC]
    inherited [(PPC || MAC) && ADB && MAC]
   }
   config ADB_MACIISI boolean {
    prompt "Include Mac IIsi ADB driver" if [(PPC || MAC) && ADB && MAC]
    depends on [ADB && MAC]
    inherited [(PPC || MAC) && ADB && MAC]
   }
   config ADB_IOP boolean {
    prompt "Include IOP (IIfx/Quadra 9x0) ADB driver" if [(PPC || MAC) && ADB && MAC]
    depends on [ADB && MAC]
    inherited [(PPC || MAC) && ADB && MAC]
   }
   config ADB_PMU68K boolean {
    prompt "Include PMU (Powerbook) ADB driver" if [(PPC || MAC) && ADB && MAC]
    depends on [ADB && MAC]
    inherited [(PPC || MAC) && ADB && MAC]
   }
  }
  config ADB_CUDA boolean {
   prompt "Support for CUDA based Macs and PowerMacs" if [(PPC || MAC) && (ADB || PPC_PMAC) && !PPC_PMAC64]
   depends on [(ADB || PPC_PMAC) && !PPC_PMAC64]
   inherited [(PPC || MAC) && (ADB || PPC_PMAC) && !PPC_PMAC64]
  }
  config ADB_PMU boolean {
   prompt "Support for PMU  based PowerMacs" if [(PPC || MAC) && PPC_PMAC]
   depends on [PPC_PMAC]
   inherited [(PPC || MAC) && PPC_PMAC]
   config ADB_PMU_LED boolean {
    prompt "Support for the Power/iBook front LED" if [(PPC || MAC) && ADB_PMU]
    depends on [ADB_PMU]
    select NEW_LEDS if [(PPC || MAC) && ADB_PMU]
    select LEDS_CLASS if [(PPC || MAC) && ADB_PMU]
    inherited [(PPC || MAC) && ADB_PMU]
    config ADB_PMU_LED_IDE boolean {
     prompt "Use front LED as IDE LED by default" if [(PPC || MAC) && ADB_PMU_LED]
     depends on [ADB_PMU_LED]
     select LEDS_TRIGGERS if [(PPC || MAC) && ADB_PMU_LED]
     select LEDS_TRIGGER_IDE_DISK if [(PPC || MAC) && ADB_PMU_LED]
     inherited [(PPC || MAC) && ADB_PMU_LED]
    }
   }
  }
  config PMAC_SMU boolean {
   prompt "Support for SMU  based PowerMacs" if [(PPC || MAC) && PPC_PMAC64]
   depends on [PPC_PMAC64]
   inherited [(PPC || MAC) && PPC_PMAC64]
  }
  config PMAC_APM_EMU tristate {
   prompt "APM emulation" if [(PPC || MAC) && PPC_PMAC && PPC32 && PM && ADB_PMU]
   depends on [PPC_PMAC && PPC32 && PM && ADB_PMU]
   inherited [(PPC || MAC) && PPC_PMAC && PPC32 && PM && ADB_PMU]
  }
  config PMAC_MEDIABAY boolean {
   prompt "Support PowerBook hotswap media bay" if [(PPC || MAC) && PPC_PMAC && PPC32]
   depends on [PPC_PMAC && PPC32]
   inherited [(PPC || MAC) && PPC_PMAC && PPC32]
  }
  config PMAC_BACKLIGHT boolean {
   prompt "Backlight control for LCD screens" if [(PPC || MAC) && ADB_PMU && FB="y" && (BROKEN || !PPC64)]
   depends on [ADB_PMU && FB="y" && (BROKEN || !PPC64)]
   select FB_BACKLIGHT if [(PPC || MAC) && ADB_PMU && FB="y" && (BROKEN || !PPC64)]
   inherited [(PPC || MAC) && ADB_PMU && FB="y" && (BROKEN || !PPC64)]
   config PMAC_BACKLIGHT_LEGACY boolean {
    prompt "Provide legacy ioctl's on /dev/pmu for the backlight" if [(PPC || MAC) && PMAC_BACKLIGHT && (BROKEN || !PPC64)]
    depends on [PMAC_BACKLIGHT && (BROKEN || !PPC64)]
    inherited [(PPC || MAC) && PMAC_BACKLIGHT && (BROKEN || !PPC64)]
   }
  }
  config ADB_MACIO boolean {
   prompt "Include MacIO (CHRP) ADB driver" if [(PPC || MAC) && ADB && PPC_CHRP && !PPC_PMAC64]
   depends on [ADB && PPC_CHRP && !PPC_PMAC64]
   inherited [(PPC || MAC) && ADB && PPC_CHRP && !PPC_PMAC64]
  }
  config INPUT_ADBHID boolean {
   prompt "Support for ADB input devices (keyboard, mice, ...)" if [(PPC || MAC) && ADB && INPUT="y"]
   depends on [ADB && INPUT="y"]
   inherited [(PPC || MAC) && ADB && INPUT="y"]
  }
  config MAC_EMUMOUSEBTN boolean {
   prompt "Support for mouse button 2+3 emulation" if [PPC || MAC]
   inherited [PPC || MAC]
  }
  config THERM_WINDTUNNEL tristate {
   prompt "Support for thermal management on Windtunnel G4s" if [(PPC || MAC) && I2C && I2C_POWERMAC && PPC_PMAC && !PPC_PMAC64]
   depends on [I2C && I2C_POWERMAC && PPC_PMAC && !PPC_PMAC64]
   inherited [(PPC || MAC) && I2C && I2C_POWERMAC && PPC_PMAC && !PPC_PMAC64]
  }
  config THERM_ADT746X tristate {
   prompt "Support for thermal mgmnt on laptops with ADT 746x chipset" if [(PPC || MAC) && I2C && I2C_POWERMAC && PPC_PMAC && !PPC_PMAC64]
   depends on [I2C && I2C_POWERMAC && PPC_PMAC && !PPC_PMAC64]
   inherited [(PPC || MAC) && I2C && I2C_POWERMAC && PPC_PMAC && !PPC_PMAC64]
  }
  config THERM_PM72 tristate {
   prompt "Support for thermal management on PowerMac G5" if [(PPC || MAC) && I2C && I2C_POWERMAC && PPC_PMAC64]
   depends on [I2C && I2C_POWERMAC && PPC_PMAC64]
   inherited [(PPC || MAC) && I2C && I2C_POWERMAC && PPC_PMAC64]
  }
  config WINDFARM tristate {
   prompt "New PowerMac thermal control infrastructure" if [(PPC || MAC) && PPC]
   depends on [PPC]
   inherited [(PPC || MAC) && PPC]
   config WINDFARM_PM81 tristate {
    prompt "Support for thermal management on iMac G5" if [(PPC || MAC) && WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
    depends on [WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
    select I2C_POWERMAC if [(PPC || MAC) && WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
    inherited [(PPC || MAC) && WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
   }
   config WINDFARM_PM91 tristate {
    prompt "Support for thermal management on PowerMac9,1" if [(PPC || MAC) && WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
    depends on [WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
    select I2C_POWERMAC if [(PPC || MAC) && WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
    inherited [(PPC || MAC) && WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
   }
   config WINDFARM_PM112 tristate {
    prompt "Support for thermal management on PowerMac11,2" if [(PPC || MAC) && WINDFARM && I2C && PMAC_SMU]
    depends on [WINDFARM && I2C && PMAC_SMU]
    select I2C_POWERMAC if [(PPC || MAC) && WINDFARM && I2C && PMAC_SMU]
    inherited [(PPC || MAC) && WINDFARM && I2C && PMAC_SMU]
   }
  }
  config ANSLCD tristate {
   prompt "Support for ANS LCD display" if [(PPC || MAC) && ADB_CUDA && PPC_PMAC]
   depends on [ADB_CUDA && PPC_PMAC]
   inherited [(PPC || MAC) && ADB_CUDA && PPC_PMAC]
  }
  config PMAC_RACKMETER tristate {
   prompt "Support for Apple XServe front panel LEDs" if [(PPC || MAC) && PPC_PMAC]
   depends on [PPC_PMAC]
   inherited [(PPC || MAC) && PPC_PMAC]
  }
 }
 menu "Network device support" {
  depends on [NET]
  config NETDEVICES boolean {
   default [y] if [NET && UML]
   prompt "Network device support" if [NET]
   inherited [NET]
   if [NET && NETDEVICES] {
    config IFB tristate {
     prompt "Intermediate Functional Block support" if [NET && NETDEVICES && NET_CLS_ACT]
     depends on [NET_CLS_ACT]
     inherited [NET && NETDEVICES && NET_CLS_ACT]
    }
    config DUMMY tristate {
     prompt "Dummy net driver support" if [NET && NETDEVICES]
     inherited [NET && NETDEVICES]
    }
    config BONDING tristate {
     prompt "Bonding driver support" if [NET && NETDEVICES && INET]
     depends on [INET]
     inherited [NET && NETDEVICES && INET]
    }
    config EQUALIZER tristate {
     prompt "EQL (serial line load balancing) support" if [NET && NETDEVICES]
     inherited [NET && NETDEVICES]
    }
    config TUN tristate {
     prompt "Universal TUN/TAP device driver support" if [NET && NETDEVICES]
     select CRC32 if [NET && NETDEVICES]
     inherited [NET && NETDEVICES]
    }
    config NET_SB1000 tristate {
     prompt "General Instruments Surfboard 1000" if [NET && NETDEVICES && PNP]
     depends on [PNP]
     inherited [NET && NETDEVICES && PNP]
    }
    menu "ARCnet devices" {
     depends on [NET && NETDEVICES && (ISA || PCI)]
     config ARCNET tristate {
      prompt "ARCnet support" if [NET && NETDEVICES && (ISA || PCI)]
      inherited [NET && NETDEVICES && (ISA || PCI)]
      config ARCNET_1201 tristate {
       prompt "Enable standard ARCNet packet format (RFC 1201)" if [NET && NETDEVICES && (ISA || PCI) && ARCNET]
       depends on [ARCNET]
       inherited [NET && NETDEVICES && (ISA || PCI) && ARCNET]
      }
      config ARCNET_1051 tristate {
       prompt "Enable old ARCNet packet format (RFC 1051)" if [NET && NETDEVICES && (ISA || PCI) && ARCNET]
       depends on [ARCNET]
       inherited [NET && NETDEVICES && (ISA || PCI) && ARCNET]
      }
      config ARCNET_RAW tristate {
       prompt "Enable raw mode packet interface" if [NET && NETDEVICES && (ISA || PCI) && ARCNET]
       depends on [ARCNET]
       inherited [NET && NETDEVICES && (ISA || PCI) && ARCNET]
      }
      config ARCNET_CAP tristate {
       prompt "Enable CAP mode packet interface" if [NET && NETDEVICES && (ISA || PCI) && ARCNET]
       depends on [ARCNET]
       inherited [NET && NETDEVICES && (ISA || PCI) && ARCNET]
      }
      config ARCNET_COM90xx tristate {
       prompt "ARCnet COM90xx (normal) chipset driver" if [NET && NETDEVICES && (ISA || PCI) && ARCNET]
       depends on [ARCNET]
       inherited [NET && NETDEVICES && (ISA || PCI) && ARCNET]
      }
      config ARCNET_COM90xxIO tristate {
       prompt "ARCnet COM90xx (IO mapped) chipset driver" if [NET && NETDEVICES && (ISA || PCI) && ARCNET]
       depends on [ARCNET]
       inherited [NET && NETDEVICES && (ISA || PCI) && ARCNET]
      }
      config ARCNET_RIM_I tristate {
       prompt "ARCnet COM90xx (RIM I) chipset driver" if [NET && NETDEVICES && (ISA || PCI) && ARCNET]
       depends on [ARCNET]
       inherited [NET && NETDEVICES && (ISA || PCI) && ARCNET]
      }
      config ARCNET_COM20020 tristate {
       prompt "ARCnet COM20020 chipset driver" if [NET && NETDEVICES && (ISA || PCI) && ARCNET]
       depends on [ARCNET]
       inherited [NET && NETDEVICES && (ISA || PCI) && ARCNET]
       config ARCNET_COM20020_ISA tristate {
        prompt "Support for COM20020 on ISA" if [NET && NETDEVICES && (ISA || PCI) && ARCNET_COM20020 && ISA]
        depends on [ARCNET_COM20020 && ISA]
        inherited [NET && NETDEVICES && (ISA || PCI) && ARCNET_COM20020 && ISA]
       }
       config ARCNET_COM20020_PCI tristate {
        prompt "Support for COM20020 on PCI" if [NET && NETDEVICES && (ISA || PCI) && ARCNET_COM20020 && PCI]
        depends on [ARCNET_COM20020 && PCI]
        inherited [NET && NETDEVICES && (ISA || PCI) && ARCNET_COM20020 && PCI]
       }
      }
     }
    }
    menu "PHY device support" {
     depends on [NET && NETDEVICES]
     config PHYLIB tristate {
      prompt "PHY Device support and infrastructure" if [NET && NETDEVICES && NET_ETHERNET && (BROKEN || !S390)]
      depends on [NET_ETHERNET && (BROKEN || !S390)]
      inherited [NET && NETDEVICES && NET_ETHERNET && (BROKEN || !S390)]
      config MARVELL_PHY tristate {
       prompt "Drivers for Marvell PHYs" if [NET && NETDEVICES && PHYLIB]
       depends on [PHYLIB]
       inherited [NET && NETDEVICES && PHYLIB]
      }
      config DAVICOM_PHY tristate {
       prompt "Drivers for Davicom PHYs" if [NET && NETDEVICES && PHYLIB]
       depends on [PHYLIB]
       inherited [NET && NETDEVICES && PHYLIB]
      }
      config QSEMI_PHY tristate {
       prompt "Drivers for Quality Semiconductor PHYs" if [NET && NETDEVICES && PHYLIB]
       depends on [PHYLIB]
       inherited [NET && NETDEVICES && PHYLIB]
      }
      config LXT_PHY tristate {
       prompt "Drivers for the Intel LXT PHYs" if [NET && NETDEVICES && PHYLIB]
       depends on [PHYLIB]
       inherited [NET && NETDEVICES && PHYLIB]
      }
      config CICADA_PHY tristate {
       prompt "Drivers for the Cicada PHYs" if [NET && NETDEVICES && PHYLIB]
       depends on [PHYLIB]
       inherited [NET && NETDEVICES && PHYLIB]
      }
      config VITESSE_PHY tristate {
       prompt "Drivers for the Vitesse PHYs" if [NET && NETDEVICES && PHYLIB]
       depends on [PHYLIB]
       inherited [NET && NETDEVICES && PHYLIB]
      }
      config SMSC_PHY tristate {
       prompt "Drivers for SMSC PHYs" if [NET && NETDEVICES && PHYLIB]
       depends on [PHYLIB]
       inherited [NET && NETDEVICES && PHYLIB]
      }
      config BROADCOM_PHY tristate {
       prompt "Drivers for Broadcom PHYs" if [NET && NETDEVICES && PHYLIB]
       depends on [PHYLIB]
       inherited [NET && NETDEVICES && PHYLIB]
      }
      config FIXED_PHY tristate {
       prompt "Drivers for PHY emulation on fixed speed/link" if [NET && NETDEVICES && PHYLIB]
       depends on [PHYLIB]
       inherited [NET && NETDEVICES && PHYLIB]
       config FIXED_MII_10_FDX boolean {
        prompt "Emulation for 10M Fdx fixed PHY behavior" if [NET && NETDEVICES && FIXED_PHY]
        depends on [FIXED_PHY]
        inherited [NET && NETDEVICES && FIXED_PHY]
       }
       config FIXED_MII_100_FDX boolean {
        prompt "Emulation for 100M Fdx fixed PHY behavior" if [NET && NETDEVICES && FIXED_PHY]
        depends on [FIXED_PHY]
        inherited [NET && NETDEVICES && FIXED_PHY]
       }
      }
     }
    }
    menu "Ethernet (10 or 100Mbit)" {
     depends on [NET && NETDEVICES && !UML]
     config NET_ETHERNET boolean {
      prompt "Ethernet (10 or 100Mbit)" if [NET && NETDEVICES && !UML]
      inherited [NET && NETDEVICES && !UML]
      config MII tristate {
       prompt "Generic Media Independent Interface device support" if [NET && NETDEVICES && !UML && NET_ETHERNET]
       depends on [NET_ETHERNET]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET]
      }
      config MACB tristate {
       prompt "Atmel MACB support" if [NET && NETDEVICES && !UML && NET_ETHERNET && AVR32]
       depends on [NET_ETHERNET && AVR32]
       select MII if [NET && NETDEVICES && !UML && NET_ETHERNET && AVR32]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && AVR32]
      }
      config ARM_AM79C961A boolean {
       prompt "ARM EBSA110 AM79C961A support" if [NET && NETDEVICES && !UML && NET_ETHERNET && ARM && ARCH_EBSA110]
       depends on [NET_ETHERNET && ARM && ARCH_EBSA110]
       select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && ARM && ARCH_EBSA110]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && ARM && ARCH_EBSA110]
      }
      config ARM_ETHER1 tristate {
       prompt "Acorn Ether1 support" if [NET && NETDEVICES && !UML && NET_ETHERNET && ARM && ARCH_ACORN]
       depends on [NET_ETHERNET && ARM && ARCH_ACORN]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && ARM && ARCH_ACORN]
      }
      config ARM_ETHER3 tristate {
       prompt "Acorn/ANT Ether3 support" if [NET && NETDEVICES && !UML && NET_ETHERNET && ARM && ARCH_ACORN]
       depends on [NET_ETHERNET && ARM && ARCH_ACORN]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && ARM && ARCH_ACORN]
      }
      config ARM_ETHERH tristate {
       prompt "I-cubed EtherH/ANT EtherM support" if [NET && NETDEVICES && !UML && NET_ETHERNET && ARM && ARCH_ACORN]
       depends on [NET_ETHERNET && ARM && ARCH_ACORN]
       select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && ARM && ARCH_ACORN]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && ARM && ARCH_ACORN]
      }
      config ARM_AT91_ETHER tristate {
       prompt "AT91RM9200 Ethernet support" if [NET && NETDEVICES && !UML && NET_ETHERNET && ARM && ARCH_AT91RM9200]
       depends on [NET_ETHERNET && ARM && ARCH_AT91RM9200]
       select MII if [NET && NETDEVICES && !UML && NET_ETHERNET && ARM && ARCH_AT91RM9200]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && ARM && ARCH_AT91RM9200]
      }
      config EP93XX_ETH tristate {
       prompt "EP93xx Ethernet support" if [NET && NETDEVICES && !UML && NET_ETHERNET && ARM && ARCH_EP93XX]
       depends on [NET_ETHERNET && ARM && ARCH_EP93XX]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && ARM && ARCH_EP93XX]
      }
      config MACE tristate {
       prompt "MACE (Power Mac ethernet) support" if [NET && NETDEVICES && !UML && NET_ETHERNET && PPC_PMAC && PPC32]
       depends on [NET_ETHERNET && PPC_PMAC && PPC32]
       select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && PPC_PMAC && PPC32]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && PPC_PMAC && PPC32]
       config MACE_AAUI_PORT boolean {
        prompt "Use AAUI port instead of TP by default" if [NET && NETDEVICES && !UML && MACE]
        depends on [MACE]
        inherited [NET && NETDEVICES && !UML && MACE]
       }
      }
      config BMAC tristate {
       prompt "BMAC (G3 ethernet) support" if [NET && NETDEVICES && !UML && NET_ETHERNET && PPC_PMAC && PPC32]
       depends on [NET_ETHERNET && PPC_PMAC && PPC32]
       select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && PPC_PMAC && PPC32]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && PPC_PMAC && PPC32]
      }
      config OAKNET tristate {
       prompt "National DP83902AV (Oak ethernet) support" if [NET && NETDEVICES && !UML && NET_ETHERNET && PPC && BROKEN]
       depends on [NET_ETHERNET && PPC && BROKEN]
       select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && PPC && BROKEN]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && PPC && BROKEN]
      }
      config ARIADNE tristate {
       prompt "Ariadne support" if [NET && NETDEVICES && !UML && NET_ETHERNET && ZORRO]
       depends on [NET_ETHERNET && ZORRO]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && ZORRO]
      }
      config A2065 tristate {
       prompt "A2065 support" if [NET && NETDEVICES && !UML && NET_ETHERNET && ZORRO]
       depends on [NET_ETHERNET && ZORRO]
       select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && ZORRO]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && ZORRO]
      }
      config HYDRA tristate {
       prompt "Hydra support" if [NET && NETDEVICES && !UML && NET_ETHERNET && ZORRO]
       depends on [NET_ETHERNET && ZORRO]
       select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && ZORRO]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && ZORRO]
      }
      config ZORRO8390 tristate {
       prompt "Zorro NS8390-based Ethernet support" if [NET && NETDEVICES && !UML && NET_ETHERNET && ZORRO]
       depends on [NET_ETHERNET && ZORRO]
       select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && ZORRO]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && ZORRO]
      }
      config APNE tristate {
       prompt "PCMCIA NE2000 support" if [NET && NETDEVICES && !UML && NET_ETHERNET && AMIGA_PCMCIA]
       depends on [NET_ETHERNET && AMIGA_PCMCIA]
       select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && AMIGA_PCMCIA]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && AMIGA_PCMCIA]
      }
      config APOLLO_ELPLUS tristate {
       prompt "Apollo 3c505 support" if [NET && NETDEVICES && !UML && NET_ETHERNET && APOLLO]
       depends on [NET_ETHERNET && APOLLO]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && APOLLO]
      }
      config MAC8390 boolean {
       prompt "Macintosh NS 8390 based ethernet cards" if [NET && NETDEVICES && !UML && NET_ETHERNET && MAC]
       depends on [NET_ETHERNET && MAC]
       select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && MAC]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && MAC]
      }
      config MAC89x0 tristate {
       prompt "Macintosh CS89x0 based ethernet cards" if [NET && NETDEVICES && !UML && NET_ETHERNET && MAC && BROKEN]
       depends on [NET_ETHERNET && MAC && BROKEN]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && MAC && BROKEN]
      }
      config MACSONIC tristate {
       prompt "Macintosh SONIC based ethernet (onboard, NuBus, LC, CS)" if [NET && NETDEVICES && !UML && NET_ETHERNET && MAC]
       depends on [NET_ETHERNET && MAC]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && MAC]
      }
      config MACMACE boolean {
       prompt "Macintosh (AV) onboard MACE ethernet (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && NET_ETHERNET && MAC && EXPERIMENTAL]
       depends on [NET_ETHERNET && MAC && EXPERIMENTAL]
       select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && MAC && EXPERIMENTAL]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && MAC && EXPERIMENTAL]
      }
      config MVME147_NET tristate {
       prompt "MVME147 (Lance) Ethernet support" if [NET && NETDEVICES && !UML && NET_ETHERNET && MVME147]
       depends on [NET_ETHERNET && MVME147]
       select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && MVME147]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && MVME147]
      }
      config MVME16x_NET tristate {
       prompt "MVME16x Ethernet support" if [NET && NETDEVICES && !UML && NET_ETHERNET && MVME16x]
       depends on [NET_ETHERNET && MVME16x]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && MVME16x]
      }
      config BVME6000_NET tristate {
       prompt "BVME6000 Ethernet support" if [NET && NETDEVICES && !UML && NET_ETHERNET && BVME6000]
       depends on [NET_ETHERNET && BVME6000]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && BVME6000]
      }
      config ATARILANCE tristate {
       prompt "Atari Lance support" if [NET && NETDEVICES && !UML && NET_ETHERNET && ATARI]
       depends on [NET_ETHERNET && ATARI]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && ATARI]
      }
      config ATARI_BIONET tristate {
       prompt "BioNet-100 support" if [NET && NETDEVICES && !UML && NET_ETHERNET && ATARI && ATARI_ACSI && BROKEN]
       depends on [NET_ETHERNET && ATARI && ATARI_ACSI && BROKEN]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && ATARI && ATARI_ACSI && BROKEN]
      }
      config ATARI_PAMSNET tristate {
       prompt "PAMsNet support" if [NET && NETDEVICES && !UML && NET_ETHERNET && ATARI && ATARI_ACSI && BROKEN]
       depends on [NET_ETHERNET && ATARI && ATARI_ACSI && BROKEN]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && ATARI && ATARI_ACSI && BROKEN]
      }
      config SUN3LANCE tristate {
       prompt "Sun3/Sun3x on-board LANCE support" if [NET && NETDEVICES && !UML && NET_ETHERNET && (SUN3 || SUN3X)]
       depends on [NET_ETHERNET && (SUN3 || SUN3X)]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (SUN3 || SUN3X)]
      }
      config SUN3_82586 boolean {
       prompt "Sun3 on-board Intel 82586 support" if [NET && NETDEVICES && !UML && NET_ETHERNET && SUN3]
       depends on [NET_ETHERNET && SUN3]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && SUN3]
      }
      config HPLANCE boolean {
       prompt "HP on-board LANCE support" if [NET && NETDEVICES && !UML && NET_ETHERNET && DIO]
       depends on [NET_ETHERNET && DIO]
       select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && DIO]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && DIO]
      }
      config LASI_82596 tristate {
       prompt "Lasi ethernet" if [NET && NETDEVICES && !UML && NET_ETHERNET && PARISC && GSC_LASI]
       depends on [NET_ETHERNET && PARISC && GSC_LASI]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && PARISC && GSC_LASI]
      }
      config MIPS_JAZZ_SONIC tristate {
       prompt "MIPS JAZZ onboard SONIC Ethernet support" if [NET && NETDEVICES && !UML && NET_ETHERNET && MACH_JAZZ]
       depends on [NET_ETHERNET && MACH_JAZZ]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && MACH_JAZZ]
      }
      config MIPS_AU1X00_ENET boolean {
       prompt "MIPS AU1000 Ethernet support" if [NET && NETDEVICES && !UML && NET_ETHERNET && SOC_AU1X00]
       depends on [NET_ETHERNET && SOC_AU1X00]
       select PHYLIB if [NET && NETDEVICES && !UML && NET_ETHERNET && SOC_AU1X00]
       select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && SOC_AU1X00]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && SOC_AU1X00]
      }
      config NET_SB1250_MAC tristate {
       prompt "SB1250 Ethernet support" if [NET && NETDEVICES && !UML && NET_ETHERNET && SIBYTE_SB1xxx_SOC]
       depends on [NET_ETHERNET && SIBYTE_SB1xxx_SOC]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && SIBYTE_SB1xxx_SOC]
      }
      config SGI_IOC3_ETH boolean {
       prompt "SGI IOC3 Ethernet" if [NET && NETDEVICES && !UML && NET_ETHERNET && PCI && SGI_IP27]
       depends on [NET_ETHERNET && PCI && SGI_IP27]
       select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && PCI && SGI_IP27]
       select MII if [NET && NETDEVICES && !UML && NET_ETHERNET && PCI && SGI_IP27]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && PCI && SGI_IP27]
       config SGI_IOC3_ETH_HW_RX_CSUM boolean {
        prompt "Receive hardware checksums" if [NET && NETDEVICES && !UML && SGI_IOC3_ETH && INET]
        depends on [SGI_IOC3_ETH && INET]
        default [y] if [NET && NETDEVICES && !UML && SGI_IOC3_ETH && INET]
        inherited [NET && NETDEVICES && !UML && SGI_IOC3_ETH && INET]
       }
       config SGI_IOC3_ETH_HW_TX_CSUM boolean {
        prompt "Transmit hardware checksums" if [NET && NETDEVICES && !UML && SGI_IOC3_ETH && INET]
        depends on [SGI_IOC3_ETH && INET]
        default [y] if [NET && NETDEVICES && !UML && SGI_IOC3_ETH && INET]
        inherited [NET && NETDEVICES && !UML && SGI_IOC3_ETH && INET]
       }
      }
     }
     config MIPS_SIM_NET tristate {
      prompt "MIPS simulator Network device (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && MIPS_SIM && EXPERIMENTAL]
      depends on [MIPS_SIM && EXPERIMENTAL]
      inherited [NET && NETDEVICES && !UML && MIPS_SIM && EXPERIMENTAL]
     }
     config SGI_O2MACE_ETH tristate {
      prompt "SGI O2 MACE Fast Ethernet support" if [NET && NETDEVICES && !UML && NET_ETHERNET && SGI_IP32="y"]
      depends on [NET_ETHERNET && SGI_IP32="y"]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && SGI_IP32="y"]
     }
     config STNIC tristate {
      prompt "National DP83902AV  support" if [NET && NETDEVICES && !UML && NET_ETHERNET && SUPERH]
      depends on [NET_ETHERNET && SUPERH]
      select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && SUPERH]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && SUPERH]
     }
     config SUNLANCE tristate {
      prompt "Sun LANCE support" if [NET && NETDEVICES && !UML && NET_ETHERNET && SBUS]
      depends on [NET_ETHERNET && SBUS]
      select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && SBUS]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && SBUS]
     }
     config HAPPYMEAL tristate {
      prompt "Sun Happy Meal 10/100baseT support" if [NET && NETDEVICES && !UML && NET_ETHERNET && (SBUS || PCI)]
      depends on [NET_ETHERNET && (SBUS || PCI)]
      select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && (SBUS || PCI)]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (SBUS || PCI)]
     }
     config SUNBMAC tristate {
      prompt "Sun BigMAC 10/100baseT support (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && NET_ETHERNET && SBUS && EXPERIMENTAL]
      depends on [NET_ETHERNET && SBUS && EXPERIMENTAL]
      select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && SBUS && EXPERIMENTAL]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && SBUS && EXPERIMENTAL]
     }
     config SUNQE tristate {
      prompt "Sun QuadEthernet support" if [NET && NETDEVICES && !UML && NET_ETHERNET && SBUS]
      depends on [NET_ETHERNET && SBUS]
      select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && SBUS]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && SBUS]
     }
     config SUNGEM tristate {
      prompt "Sun GEM support" if [NET && NETDEVICES && !UML && NET_ETHERNET && PCI]
      depends on [NET_ETHERNET && PCI]
      select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && PCI]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && PCI]
     }
     config CASSINI tristate {
      prompt "Sun Cassini support" if [NET && NETDEVICES && !UML && NET_ETHERNET && PCI]
      depends on [NET_ETHERNET && PCI]
      select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && PCI]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && PCI]
     }
     config NET_VENDOR_3COM boolean {
      prompt "3COM cards" if [NET && NETDEVICES && !UML && NET_ETHERNET && (ISA || EISA || MCA || PCI)]
      depends on [NET_ETHERNET && (ISA || EISA || MCA || PCI)]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (ISA || EISA || MCA || PCI)]
      config EL1 tristate {
       prompt "3c501 \"EtherLink\" support" if [NET && NETDEVICES && !UML && NET_VENDOR_3COM && ISA]
       depends on [NET_VENDOR_3COM && ISA]
       inherited [NET && NETDEVICES && !UML && NET_VENDOR_3COM && ISA]
      }
      config EL2 tristate {
       prompt "3c503 \"EtherLink II\" support" if [NET && NETDEVICES && !UML && NET_VENDOR_3COM && ISA]
       depends on [NET_VENDOR_3COM && ISA]
       select CRC32 if [NET && NETDEVICES && !UML && NET_VENDOR_3COM && ISA]
       inherited [NET && NETDEVICES && !UML && NET_VENDOR_3COM && ISA]
      }
      config ELPLUS tristate {
       prompt "3c505 \"EtherLink Plus\" support" if [NET && NETDEVICES && !UML && NET_VENDOR_3COM && ISA && ISA_DMA_API]
       depends on [NET_VENDOR_3COM && ISA && ISA_DMA_API]
       inherited [NET && NETDEVICES && !UML && NET_VENDOR_3COM && ISA && ISA_DMA_API]
      }
      config EL16 tristate {
       prompt "3c507 \"EtherLink 16\" support (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && NET_VENDOR_3COM && ISA && EXPERIMENTAL]
       depends on [NET_VENDOR_3COM && ISA && EXPERIMENTAL]
       inherited [NET && NETDEVICES && !UML && NET_VENDOR_3COM && ISA && EXPERIMENTAL]
      }
      config EL3 tristate {
       prompt "3c509/3c529 (MCA)/3c579 \"EtherLink III\" support" if [NET && NETDEVICES && !UML && NET_VENDOR_3COM && (ISA || EISA || MCA)]
       depends on [NET_VENDOR_3COM && (ISA || EISA || MCA)]
       inherited [NET && NETDEVICES && !UML && NET_VENDOR_3COM && (ISA || EISA || MCA)]
      }
      config 3C515 tristate {
       prompt "3c515 ISA \"Fast EtherLink\"" if [NET && NETDEVICES && !UML && NET_VENDOR_3COM && (ISA || EISA) && ISA_DMA_API]
       depends on [NET_VENDOR_3COM && (ISA || EISA) && ISA_DMA_API]
       inherited [NET && NETDEVICES && !UML && NET_VENDOR_3COM && (ISA || EISA) && ISA_DMA_API]
      }
      config ELMC tristate {
       prompt "3c523 \"EtherLink/MC\" support" if [NET && NETDEVICES && !UML && NET_VENDOR_3COM && MCA_LEGACY]
       depends on [NET_VENDOR_3COM && MCA_LEGACY]
       inherited [NET && NETDEVICES && !UML && NET_VENDOR_3COM && MCA_LEGACY]
      }
      config ELMC_II tristate {
       prompt "3c527 \"EtherLink/MC 32\" support (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && NET_VENDOR_3COM && MCA && MCA_LEGACY]
       depends on [NET_VENDOR_3COM && MCA && MCA_LEGACY]
       inherited [NET && NETDEVICES && !UML && NET_VENDOR_3COM && MCA && MCA_LEGACY]
      }
      config VORTEX tristate {
       prompt "3c590/3c900 series (592/595/597) \"Vortex/Boomerang\" support" if [NET && NETDEVICES && !UML && NET_VENDOR_3COM && (PCI || EISA)]
       depends on [NET_VENDOR_3COM && (PCI || EISA)]
       select MII if [NET && NETDEVICES && !UML && NET_VENDOR_3COM && (PCI || EISA)]
       inherited [NET && NETDEVICES && !UML && NET_VENDOR_3COM && (PCI || EISA)]
      }
      config TYPHOON tristate {
       prompt "3cr990 series \"Typhoon\" support" if [NET && NETDEVICES && !UML && NET_VENDOR_3COM && PCI]
       depends on [NET_VENDOR_3COM && PCI]
       select CRC32 if [NET && NETDEVICES && !UML && NET_VENDOR_3COM && PCI]
       inherited [NET && NETDEVICES && !UML && NET_VENDOR_3COM && PCI]
      }
     }
     config LANCE tristate {
      prompt "AMD LANCE and PCnet (AT1500 and NE2100) support" if [NET && NETDEVICES && !UML && NET_ETHERNET && ISA && ISA_DMA_API]
      depends on [NET_ETHERNET && ISA && ISA_DMA_API]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && ISA && ISA_DMA_API]
     }
     config NET_VENDOR_SMC boolean {
      prompt "Western Digital/SMC cards" if [NET && NETDEVICES && !UML && NET_ETHERNET && (ISA || MCA || EISA || MAC)]
      depends on [NET_ETHERNET && (ISA || MCA || EISA || MAC)]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (ISA || MCA || EISA || MAC)]
      config WD80x3 tristate {
       prompt "WD80*3 support" if [NET && NETDEVICES && !UML && NET_VENDOR_SMC && ISA]
       depends on [NET_VENDOR_SMC && ISA]
       select CRC32 if [NET && NETDEVICES && !UML && NET_VENDOR_SMC && ISA]
       inherited [NET && NETDEVICES && !UML && NET_VENDOR_SMC && ISA]
      }
      config ULTRAMCA tristate {
       prompt "SMC Ultra MCA support" if [NET && NETDEVICES && !UML && NET_VENDOR_SMC && MCA]
       depends on [NET_VENDOR_SMC && MCA]
       select CRC32 if [NET && NETDEVICES && !UML && NET_VENDOR_SMC && MCA]
       inherited [NET && NETDEVICES && !UML && NET_VENDOR_SMC && MCA]
      }
      config ULTRA tristate {
       prompt "SMC Ultra support" if [NET && NETDEVICES && !UML && NET_VENDOR_SMC && ISA]
       depends on [NET_VENDOR_SMC && ISA]
       select CRC32 if [NET && NETDEVICES && !UML && NET_VENDOR_SMC && ISA]
       inherited [NET && NETDEVICES && !UML && NET_VENDOR_SMC && ISA]
      }
      config ULTRA32 tristate {
       prompt "SMC Ultra32 EISA support" if [NET && NETDEVICES && !UML && NET_VENDOR_SMC && EISA]
       depends on [NET_VENDOR_SMC && EISA]
       select CRC32 if [NET && NETDEVICES && !UML && NET_VENDOR_SMC && EISA]
       inherited [NET && NETDEVICES && !UML && NET_VENDOR_SMC && EISA]
      }
     }
     config SMC91X tristate {
      prompt "SMC 91C9x/91C1xxx support" if [NET && NETDEVICES && !UML && NET_ETHERNET && (ARM || REDWOOD_5 || REDWOOD_6 || M32R || SUPERH || SOC_AU1X00)]
      select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && (ARM || REDWOOD_5 || REDWOOD_6 || M32R || SUPERH || SOC_AU1X00)]
      select MII if [NET && NETDEVICES && !UML && NET_ETHERNET && (ARM || REDWOOD_5 || REDWOOD_6 || M32R || SUPERH || SOC_AU1X00)]
      depends on [NET_ETHERNET && (ARM || REDWOOD_5 || REDWOOD_6 || M32R || SUPERH || SOC_AU1X00)]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (ARM || REDWOOD_5 || REDWOOD_6 || M32R || SUPERH || SOC_AU1X00)]
     }
     config SMC9194 tristate {
      prompt "SMC 9194 support" if [NET && NETDEVICES && !UML && NET_VENDOR_SMC && (ISA || MAC && BROKEN)]
      depends on [NET_VENDOR_SMC && (ISA || MAC && BROKEN)]
      select CRC32 if [NET && NETDEVICES && !UML && NET_VENDOR_SMC && (ISA || MAC && BROKEN)]
      inherited [NET && NETDEVICES && !UML && NET_VENDOR_SMC && (ISA || MAC && BROKEN)]
     }
     config NET_NETX tristate {
      prompt "NetX Ethernet support" if [NET && NETDEVICES && !UML && NET_ETHERNET && ARCH_NETX]
      select MII if [NET && NETDEVICES && !UML && NET_ETHERNET && ARCH_NETX]
      depends on [NET_ETHERNET && ARCH_NETX]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && ARCH_NETX]
     }
     config DM9000 tristate {
      prompt "DM9000 support" if [NET && NETDEVICES && !UML && (ARM || MIPS) && NET_ETHERNET]
      depends on [(ARM || MIPS) && NET_ETHERNET]
      select CRC32 if [NET && NETDEVICES && !UML && (ARM || MIPS) && NET_ETHERNET]
      select MII if [NET && NETDEVICES && !UML && (ARM || MIPS) && NET_ETHERNET]
      inherited [NET && NETDEVICES && !UML && (ARM || MIPS) && NET_ETHERNET]
     }
     config SMC911X tristate {
      prompt "SMSC LAN911[5678] support" if [NET && NETDEVICES && !UML && NET_ETHERNET && ARCH_PXA]
      select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && ARCH_PXA]
      select MII if [NET && NETDEVICES && !UML && NET_ETHERNET && ARCH_PXA]
      depends on [NET_ETHERNET && ARCH_PXA]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && ARCH_PXA]
     }
     config NET_VENDOR_RACAL boolean {
      prompt "Racal-Interlan (Micom) NI cards" if [NET && NETDEVICES && !UML && NET_ETHERNET && ISA]
      depends on [NET_ETHERNET && ISA]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && ISA]
      config NI5010 tristate {
       prompt "NI5010 support (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && NET_VENDOR_RACAL && ISA && EXPERIMENTAL && BROKEN_ON_SMP]
       depends on [NET_VENDOR_RACAL && ISA && EXPERIMENTAL && BROKEN_ON_SMP]
       inherited [NET && NETDEVICES && !UML && NET_VENDOR_RACAL && ISA && EXPERIMENTAL && BROKEN_ON_SMP]
      }
      config NI52 tristate {
       prompt "NI5210 support" if [NET && NETDEVICES && !UML && NET_VENDOR_RACAL && ISA]
       depends on [NET_VENDOR_RACAL && ISA]
       inherited [NET && NETDEVICES && !UML && NET_VENDOR_RACAL && ISA]
      }
      config NI65 tristate {
       prompt "NI6510 support" if [NET && NETDEVICES && !UML && NET_VENDOR_RACAL && ISA && ISA_DMA_API]
       depends on [NET_VENDOR_RACAL && ISA && ISA_DMA_API]
       inherited [NET && NETDEVICES && !UML && NET_VENDOR_RACAL && ISA && ISA_DMA_API]
      }
     }
     menu "Tulip family network device support" {
      depends on [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS)]
      config NET_TULIP boolean {
       prompt "\"Tulip\" family network device support" if [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS)]
       inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS)]
       config DE2104X tristate {
        prompt "Early DECchip Tulip (dc2104x) PCI support (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && PCI && EXPERIMENTAL]
        depends on [NET_TULIP && PCI && EXPERIMENTAL]
        select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && PCI && EXPERIMENTAL]
        inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && PCI && EXPERIMENTAL]
       }
       config TULIP tristate {
        prompt "DECchip Tulip (dc2114x) PCI support" if [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && PCI]
        depends on [NET_TULIP && PCI]
        select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && PCI]
        inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && PCI]
        config TULIP_MWI boolean {
         prompt "New bus configuration (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && TULIP && EXPERIMENTAL]
         depends on [TULIP && EXPERIMENTAL]
         inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && TULIP && EXPERIMENTAL]
        }
        config TULIP_MMIO boolean {
         prompt "Use PCI shared mem for NIC registers" if [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && TULIP]
         depends on [TULIP]
         inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && TULIP]
        }
        config TULIP_NAPI boolean {
         prompt "Use NAPI RX polling " if [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && TULIP]
         depends on [TULIP]
         inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && TULIP]
         config TULIP_NAPI_HW_MITIGATION boolean {
          prompt "Use Interrupt Mitigation " if [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && TULIP_NAPI]
          depends on [TULIP_NAPI]
          inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && TULIP_NAPI]
         }
        }
       }
       config DE4X5 tristate {
        prompt "Generic DECchip & DIGITAL EtherWORKS PCI/EISA" if [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && (PCI || EISA)]
        depends on [NET_TULIP && (PCI || EISA)]
        select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && (PCI || EISA)]
        inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && (PCI || EISA)]
       }
       config WINBOND_840 tristate {
        prompt "Winbond W89c840 Ethernet support" if [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && PCI]
        depends on [NET_TULIP && PCI]
        select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && PCI]
        select MII if [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && PCI]
        inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && PCI]
       }
       config DM9102 tristate {
        prompt "Davicom DM910x/DM980x support" if [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && PCI]
        depends on [NET_TULIP && PCI]
        select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && PCI]
        inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && PCI]
       }
       config ULI526X tristate {
        prompt "ULi M526x controller support" if [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && PCI]
        depends on [NET_TULIP && PCI]
        select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && PCI]
        inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && PCI]
       }
       config PCMCIA_XIRCOM tristate {
        prompt "Xircom CardBus support (new driver)" if [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && CARDBUS]
        depends on [NET_TULIP && CARDBUS]
        inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && CARDBUS]
       }
       config PCMCIA_XIRTULIP tristate {
        prompt "Xircom Tulip-like CardBus support (old driver)" if [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && CARDBUS && BROKEN_ON_SMP]
        depends on [NET_TULIP && CARDBUS && BROKEN_ON_SMP]
        select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && CARDBUS && BROKEN_ON_SMP]
        inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (PCI || EISA || CARDBUS) && NET_TULIP && CARDBUS && BROKEN_ON_SMP]
       }
      }
     }
     config AT1700 tristate {
      prompt "AT1700/1720 support (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && NET_ETHERNET && (ISA || MCA_LEGACY) && EXPERIMENTAL]
      depends on [NET_ETHERNET && (ISA || MCA_LEGACY) && EXPERIMENTAL]
      select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && (ISA || MCA_LEGACY) && EXPERIMENTAL]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (ISA || MCA_LEGACY) && EXPERIMENTAL]
     }
     config DEPCA tristate {
      prompt "DEPCA, DE10x, DE200, DE201, DE202, DE422 support" if [NET && NETDEVICES && !UML && NET_ETHERNET && (ISA || EISA || MCA)]
      depends on [NET_ETHERNET && (ISA || EISA || MCA)]
      select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && (ISA || EISA || MCA)]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (ISA || EISA || MCA)]
     }
     config HP100 tristate {
      prompt "HP 10/100VG PCLAN (ISA, EISA, PCI) support" if [NET && NETDEVICES && !UML && NET_ETHERNET && (ISA || EISA || PCI)]
      depends on [NET_ETHERNET && (ISA || EISA || PCI)]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (ISA || EISA || PCI)]
     }
     config NET_ISA boolean {
      prompt "Other ISA cards" if [NET && NETDEVICES && !UML && NET_ETHERNET && ISA]
      depends on [NET_ETHERNET && ISA]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && ISA]
      config E2100 tristate {
       prompt "Cabletron E21xx support" if [NET && NETDEVICES && !UML && NET_ISA]
       depends on [NET_ISA]
       select CRC32 if [NET && NETDEVICES && !UML && NET_ISA]
       inherited [NET && NETDEVICES && !UML && NET_ISA]
      }
      config EWRK3 tristate {
       prompt "EtherWORKS 3 (DE203, DE204, DE205) support" if [NET && NETDEVICES && !UML && NET_ISA]
       depends on [NET_ISA]
       select CRC32 if [NET && NETDEVICES && !UML && NET_ISA]
       inherited [NET && NETDEVICES && !UML && NET_ISA]
      }
      config EEXPRESS tristate {
       prompt "EtherExpress 16 support" if [NET && NETDEVICES && !UML && NET_ISA]
       depends on [NET_ISA]
       inherited [NET && NETDEVICES && !UML && NET_ISA]
      }
      config EEXPRESS_PRO tristate {
       prompt "EtherExpressPro support/EtherExpress 10 (i82595) support" if [NET && NETDEVICES && !UML && NET_ISA]
       depends on [NET_ISA]
       inherited [NET && NETDEVICES && !UML && NET_ISA]
      }
      config HPLAN_PLUS tristate {
       prompt "HP PCLAN+ (27247B and 27252A) support" if [NET && NETDEVICES && !UML && NET_ISA]
       depends on [NET_ISA]
       select CRC32 if [NET && NETDEVICES && !UML && NET_ISA]
       inherited [NET && NETDEVICES && !UML && NET_ISA]
      }
      config HPLAN tristate {
       prompt "HP PCLAN (27245 and other 27xxx series) support" if [NET && NETDEVICES && !UML && NET_ISA]
       depends on [NET_ISA]
       select CRC32 if [NET && NETDEVICES && !UML && NET_ISA]
       inherited [NET && NETDEVICES && !UML && NET_ISA]
      }
      config LP486E tristate {
       prompt "LP486E on board Ethernet" if [NET && NETDEVICES && !UML && NET_ISA]
       depends on [NET_ISA]
       inherited [NET && NETDEVICES && !UML && NET_ISA]
      }
      config ETH16I tristate {
       prompt "ICL EtherTeam 16i/32 support" if [NET && NETDEVICES && !UML && NET_ISA]
       depends on [NET_ISA]
       inherited [NET && NETDEVICES && !UML && NET_ISA]
      }
     }
     config NE2000 tristate {
      prompt "NE2000/NE1000 support" if [NET && NETDEVICES && !UML && (NET_ISA || Q40 && m && <choice> || M32R)]
      depends on [NET_ISA || Q40 && m || M32R]
      select CRC32 if [NET && NETDEVICES && !UML && (NET_ISA || Q40 && m && <choice> || M32R)]
      inherited [NET && NETDEVICES && !UML && (NET_ISA || Q40 && m && <choice> || M32R)]
     }
     config ZNET tristate {
      prompt "Zenith Z-Note support (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && NET_ISA && EXPERIMENTAL && ISA_DMA_API]
      depends on [NET_ISA && EXPERIMENTAL && ISA_DMA_API]
      inherited [NET && NETDEVICES && !UML && NET_ISA && EXPERIMENTAL && ISA_DMA_API]
     }
     config SEEQ8005 tristate {
      prompt "SEEQ8005 support (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && NET_ISA && EXPERIMENTAL]
      depends on [NET_ISA && EXPERIMENTAL]
      inherited [NET && NETDEVICES && !UML && NET_ISA && EXPERIMENTAL]
     }
     config SKMC tristate {
      prompt "SKnet MCA support" if [NET && NETDEVICES && !UML && NET_ETHERNET && MCA && BROKEN]
      depends on [NET_ETHERNET && MCA && BROKEN]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && MCA && BROKEN]
     }
     config NE2_MCA tristate {
      prompt "NE/2 (ne2000 MCA version) support" if [NET && NETDEVICES && !UML && NET_ETHERNET && MCA_LEGACY]
      depends on [NET_ETHERNET && MCA_LEGACY]
      select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && MCA_LEGACY]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && MCA_LEGACY]
     }
     config IBMLANA tristate {
      prompt "IBM LAN Adapter/A support" if [NET && NETDEVICES && !UML && NET_ETHERNET && MCA && MCA_LEGACY]
      depends on [NET_ETHERNET && MCA && MCA_LEGACY]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && MCA && MCA_LEGACY]
     }
     config IBMVETH tristate {
      prompt "IBM LAN Virtual Ethernet support" if [NET && NETDEVICES && !UML && NET_ETHERNET && PPC_PSERIES]
      depends on [NET_ETHERNET && PPC_PSERIES]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && PPC_PSERIES]
     }
     config IBM_EMAC tristate {
      prompt "PowerPC 4xx on-chip Ethernet support" if [NET && NETDEVICES && !UML && 4xx]
      depends on [4xx]
      inherited [NET && NETDEVICES && !UML && 4xx]
      config IBM_EMAC_RXB integer {
       prompt "Number of receive buffers" if [NET && NETDEVICES && !UML && IBM_EMAC]
       depends on [IBM_EMAC]
       default [128] if [NET && NETDEVICES && !UML && IBM_EMAC]
       inherited [NET && NETDEVICES && !UML && IBM_EMAC]
      }
      config IBM_EMAC_TXB integer {
       prompt "Number of transmit buffers" if [NET && NETDEVICES && !UML && IBM_EMAC]
       depends on [IBM_EMAC]
       default [64] if [NET && NETDEVICES && !UML && IBM_EMAC]
       inherited [NET && NETDEVICES && !UML && IBM_EMAC]
      }
      config IBM_EMAC_POLL_WEIGHT integer {
       prompt "MAL NAPI polling weight" if [NET && NETDEVICES && !UML && IBM_EMAC]
       depends on [IBM_EMAC]
       default [32] if [NET && NETDEVICES && !UML && IBM_EMAC]
       inherited [NET && NETDEVICES && !UML && IBM_EMAC]
      }
      config IBM_EMAC_RX_COPY_THRESHOLD integer {
       prompt "RX skb copy threshold (bytes)" if [NET && NETDEVICES && !UML && IBM_EMAC]
       depends on [IBM_EMAC]
       default [256] if [NET && NETDEVICES && !UML && IBM_EMAC]
       inherited [NET && NETDEVICES && !UML && IBM_EMAC]
      }
      config IBM_EMAC_RX_SKB_HEADROOM integer {
       prompt "Additional RX skb headroom (bytes)" if [NET && NETDEVICES && !UML && IBM_EMAC]
       depends on [IBM_EMAC]
       default [0] if [NET && NETDEVICES && !UML && IBM_EMAC]
       inherited [NET && NETDEVICES && !UML && IBM_EMAC]
      }
      config IBM_EMAC_PHY_RX_CLK_FIX boolean {
       prompt "PHY Rx clock workaround" if [NET && NETDEVICES && !UML && IBM_EMAC && (405EP || 440GX || 440EP || 440GR)]
       depends on [IBM_EMAC && (405EP || 440GX || 440EP || 440GR)]
       inherited [NET && NETDEVICES && !UML && IBM_EMAC && (405EP || 440GX || 440EP || 440GR)]
      }
      config IBM_EMAC_DEBUG boolean {
       prompt "Debugging" if [NET && NETDEVICES && !UML && IBM_EMAC]
       depends on [IBM_EMAC]
       default [n] if [NET && NETDEVICES && !UML && IBM_EMAC]
       inherited [NET && NETDEVICES && !UML && IBM_EMAC]
      }
      config IBM_EMAC_ZMII boolean {
       depends on [IBM_EMAC && (NP405H || NP405L || 44x)]
       default [y] if [NET && NETDEVICES && !UML && IBM_EMAC && (NP405H || NP405L || 44x)]
       inherited [NET && NETDEVICES && !UML && IBM_EMAC && (NP405H || NP405L || 44x)]
      }
      config IBM_EMAC_RGMII boolean {
       depends on [IBM_EMAC && 440GX]
       default [y] if [NET && NETDEVICES && !UML && IBM_EMAC && 440GX]
       inherited [NET && NETDEVICES && !UML && IBM_EMAC && 440GX]
      }
      config IBM_EMAC_TAH boolean {
       depends on [IBM_EMAC && 440GX]
       default [y] if [NET && NETDEVICES && !UML && IBM_EMAC && 440GX]
       inherited [NET && NETDEVICES && !UML && IBM_EMAC && 440GX]
      }
     }
     config NET_PCI boolean {
      prompt "EISA, VLB, PCI and on board controllers" if [NET && NETDEVICES && !UML && NET_ETHERNET && (ISA || EISA || PCI)]
      depends on [NET_ETHERNET && (ISA || EISA || PCI)]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (ISA || EISA || PCI)]
      config PCNET32 tristate {
       prompt "AMD PCnet32 PCI support" if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       depends on [NET_PCI && PCI]
       select CRC32 if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       select MII if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       inherited [NET && NETDEVICES && !UML && NET_PCI && PCI]
       config PCNET32_NAPI boolean {
        prompt "Use RX polling (NAPI) (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && PCNET32 && EXPERIMENTAL]
        depends on [PCNET32 && EXPERIMENTAL]
        inherited [NET && NETDEVICES && !UML && PCNET32 && EXPERIMENTAL]
       }
      }
      config AMD8111_ETH tristate {
       prompt "AMD 8111 (new PCI lance) support" if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       depends on [NET_PCI && PCI]
       select CRC32 if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       select MII if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       inherited [NET && NETDEVICES && !UML && NET_PCI && PCI]
       config AMD8111E_NAPI boolean {
        prompt "Enable NAPI support" if [NET && NETDEVICES && !UML && AMD8111_ETH]
        depends on [AMD8111_ETH]
        inherited [NET && NETDEVICES && !UML && AMD8111_ETH]
       }
      }
      config ADAPTEC_STARFIRE tristate {
       prompt "Adaptec Starfire/DuraLAN support" if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       depends on [NET_PCI && PCI]
       select CRC32 if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       select MII if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       inherited [NET && NETDEVICES && !UML && NET_PCI && PCI]
       config ADAPTEC_STARFIRE_NAPI boolean {
        prompt "Use Rx Polling (NAPI) (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && ADAPTEC_STARFIRE && EXPERIMENTAL]
        depends on [ADAPTEC_STARFIRE && EXPERIMENTAL]
        inherited [NET && NETDEVICES && !UML && ADAPTEC_STARFIRE && EXPERIMENTAL]
       }
      }
      config AC3200 tristate {
       prompt "Ansel Communications EISA 3200 support (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && NET_PCI && (ISA || EISA) && EXPERIMENTAL]
       depends on [NET_PCI && (ISA || EISA) && EXPERIMENTAL]
       select CRC32 if [NET && NETDEVICES && !UML && NET_PCI && (ISA || EISA) && EXPERIMENTAL]
       inherited [NET && NETDEVICES && !UML && NET_PCI && (ISA || EISA) && EXPERIMENTAL]
      }
      config APRICOT tristate {
       prompt "Apricot Xen-II on board Ethernet" if [NET && NETDEVICES && !UML && NET_PCI && ISA]
       depends on [NET_PCI && ISA]
       inherited [NET && NETDEVICES && !UML && NET_PCI && ISA]
      }
      config B44 tristate {
       prompt "Broadcom 4400 ethernet support" if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       depends on [NET_PCI && PCI]
       select MII if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       inherited [NET && NETDEVICES && !UML && NET_PCI && PCI]
      }
      config FORCEDETH tristate {
       prompt "nForce Ethernet support" if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       depends on [NET_PCI && PCI]
       inherited [NET && NETDEVICES && !UML && NET_PCI && PCI]
       config FORCEDETH_NAPI boolean {
        prompt "Use Rx and Tx Polling (NAPI) (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && FORCEDETH && EXPERIMENTAL]
        depends on [FORCEDETH && EXPERIMENTAL]
        inherited [NET && NETDEVICES && !UML && FORCEDETH && EXPERIMENTAL]
       }
      }
      config CS89x0 tristate {
       prompt "CS89x0 support" if [NET && NETDEVICES && !UML && NET_PCI && (ISA || MACH_IXDP2351 || ARCH_IXDP2X01 || ARCH_PNX010X)]
       depends on [NET_PCI && (ISA || MACH_IXDP2351 || ARCH_IXDP2X01 || ARCH_PNX010X)]
       inherited [NET && NETDEVICES && !UML && NET_PCI && (ISA || MACH_IXDP2351 || ARCH_IXDP2X01 || ARCH_PNX010X)]
      }
      config TC35815 tristate {
       prompt "TOSHIBA TC35815 Ethernet support" if [NET && NETDEVICES && !UML && NET_PCI && PCI && TOSHIBA_JMR3927]
       depends on [NET_PCI && PCI && TOSHIBA_JMR3927]
       inherited [NET && NETDEVICES && !UML && NET_PCI && PCI && TOSHIBA_JMR3927]
      }
      config DGRS tristate {
       prompt "Digi Intl. RightSwitch SE-X support" if [NET && NETDEVICES && !UML && NET_PCI && (PCI || EISA)]
       depends on [NET_PCI && (PCI || EISA)]
       inherited [NET && NETDEVICES && !UML && NET_PCI && (PCI || EISA)]
      }
      config EEPRO100 tristate {
       prompt "EtherExpressPro/100 support (eepro100, original Becker driver)" if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       depends on [NET_PCI && PCI]
       select MII if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       inherited [NET && NETDEVICES && !UML && NET_PCI && PCI]
      }
      config E100 tristate {
       prompt "Intel(R) PRO/100+ support" if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       depends on [NET_PCI && PCI]
       select MII if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       inherited [NET && NETDEVICES && !UML && NET_PCI && PCI]
      }
      config LNE390 tristate {
       prompt "Mylex EISA LNE390A/B support (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && NET_PCI && EISA && EXPERIMENTAL]
       depends on [NET_PCI && EISA && EXPERIMENTAL]
       select CRC32 if [NET && NETDEVICES && !UML && NET_PCI && EISA && EXPERIMENTAL]
       inherited [NET && NETDEVICES && !UML && NET_PCI && EISA && EXPERIMENTAL]
      }
      config FEALNX tristate {
       prompt "Myson MTD-8xx PCI Ethernet support" if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       depends on [NET_PCI && PCI]
       select CRC32 if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       select MII if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       inherited [NET && NETDEVICES && !UML && NET_PCI && PCI]
      }
      config NATSEMI tristate {
       prompt "National Semiconductor DP8381x series PCI Ethernet support" if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       depends on [NET_PCI && PCI]
       select CRC32 if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       inherited [NET && NETDEVICES && !UML && NET_PCI && PCI]
      }
      config NE2K_PCI tristate {
       prompt "PCI NE2000 and clones support (see help)" if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       depends on [NET_PCI && PCI]
       select CRC32 if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       inherited [NET && NETDEVICES && !UML && NET_PCI && PCI]
      }
      config NE3210 tristate {
       prompt "Novell/Eagle/Microdyne NE3210 EISA support (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && NET_PCI && EISA && EXPERIMENTAL]
       depends on [NET_PCI && EISA && EXPERIMENTAL]
       select CRC32 if [NET && NETDEVICES && !UML && NET_PCI && EISA && EXPERIMENTAL]
       inherited [NET && NETDEVICES && !UML && NET_PCI && EISA && EXPERIMENTAL]
      }
      config ES3210 tristate {
       prompt "Racal-Interlan EISA ES3210 support (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && NET_PCI && EISA && EXPERIMENTAL]
       depends on [NET_PCI && EISA && EXPERIMENTAL]
       select CRC32 if [NET && NETDEVICES && !UML && NET_PCI && EISA && EXPERIMENTAL]
       inherited [NET && NETDEVICES && !UML && NET_PCI && EISA && EXPERIMENTAL]
      }
      config 8139CP tristate {
       prompt "RealTek RTL-8139 C+ PCI Fast Ethernet Adapter support (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && NET_PCI && PCI && EXPERIMENTAL]
       depends on [NET_PCI && PCI && EXPERIMENTAL]
       select CRC32 if [NET && NETDEVICES && !UML && NET_PCI && PCI && EXPERIMENTAL]
       select MII if [NET && NETDEVICES && !UML && NET_PCI && PCI && EXPERIMENTAL]
       inherited [NET && NETDEVICES && !UML && NET_PCI && PCI && EXPERIMENTAL]
      }
      config 8139TOO tristate {
       prompt "RealTek RTL-8129/8130/8139 PCI Fast Ethernet Adapter support" if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       depends on [NET_PCI && PCI]
       select CRC32 if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       select MII if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       inherited [NET && NETDEVICES && !UML && NET_PCI && PCI]
       config 8139TOO_PIO boolean {
        prompt "Use PIO instead of MMIO" if [NET && NETDEVICES && !UML && 8139TOO]
        default [y] if [NET && NETDEVICES && !UML && 8139TOO]
        depends on [8139TOO]
        inherited [NET && NETDEVICES && !UML && 8139TOO]
       }
       config 8139TOO_TUNE_TWISTER boolean {
        prompt "Support for uncommon RTL-8139 rev. K (automatic channel equalization)" if [NET && NETDEVICES && !UML && 8139TOO]
        depends on [8139TOO]
        inherited [NET && NETDEVICES && !UML && 8139TOO]
       }
       config 8139TOO_8129 boolean {
        prompt "Support for older RTL-8129/8130 boards" if [NET && NETDEVICES && !UML && 8139TOO]
        depends on [8139TOO]
        inherited [NET && NETDEVICES && !UML && 8139TOO]
       }
       config 8139_OLD_RX_RESET boolean {
        prompt "Use older RX-reset method" if [NET && NETDEVICES && !UML && 8139TOO]
        depends on [8139TOO]
        inherited [NET && NETDEVICES && !UML && 8139TOO]
       }
      }
      config SIS900 tristate {
       prompt "SiS 900/7016 PCI Fast Ethernet Adapter support" if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       depends on [NET_PCI && PCI]
       select CRC32 if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       select MII if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       inherited [NET && NETDEVICES && !UML && NET_PCI && PCI]
      }
      config EPIC100 tristate {
       prompt "SMC EtherPower II" if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       depends on [NET_PCI && PCI]
       select CRC32 if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       select MII if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       inherited [NET && NETDEVICES && !UML && NET_PCI && PCI]
      }
      config SUNDANCE tristate {
       prompt "Sundance Alta support" if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       depends on [NET_PCI && PCI]
       select CRC32 if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       select MII if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       inherited [NET && NETDEVICES && !UML && NET_PCI && PCI]
       config SUNDANCE_MMIO boolean {
        prompt "Use MMIO instead of PIO" if [NET && NETDEVICES && !UML && SUNDANCE]
        depends on [SUNDANCE]
        inherited [NET && NETDEVICES && !UML && SUNDANCE]
       }
      }
      config TLAN tristate {
       prompt "TI ThunderLAN support" if [NET && NETDEVICES && !UML && NET_PCI && (PCI || EISA) && !64BIT]
       depends on [NET_PCI && (PCI || EISA) && !64BIT]
       inherited [NET && NETDEVICES && !UML && NET_PCI && (PCI || EISA) && !64BIT]
      }
      config VIA_RHINE tristate {
       prompt "VIA Rhine support" if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       depends on [NET_PCI && PCI]
       select CRC32 if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       select MII if [NET && NETDEVICES && !UML && NET_PCI && PCI]
       inherited [NET && NETDEVICES && !UML && NET_PCI && PCI]
       config VIA_RHINE_MMIO boolean {
        prompt "Use MMIO instead of PIO" if [NET && NETDEVICES && !UML && VIA_RHINE]
        depends on [VIA_RHINE]
        inherited [NET && NETDEVICES && !UML && VIA_RHINE]
       }
       config VIA_RHINE_NAPI boolean {
        prompt "Use Rx Polling (NAPI)" if [NET && NETDEVICES && !UML && VIA_RHINE]
        depends on [VIA_RHINE]
        inherited [NET && NETDEVICES && !UML && VIA_RHINE]
       }
      }
      config LAN_SAA9730 boolean {
       prompt "Philips SAA9730 Ethernet support" if [NET && NETDEVICES && !UML && NET_PCI && PCI && MIPS_ATLAS]
       depends on [NET_PCI && PCI && MIPS_ATLAS]
       inherited [NET && NETDEVICES && !UML && NET_PCI && PCI && MIPS_ATLAS]
      }
     }
     config NET_POCKET boolean {
      prompt "Pocket and portable adapters" if [NET && NETDEVICES && !UML && NET_ETHERNET && PARPORT]
      depends on [NET_ETHERNET && PARPORT]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && PARPORT]
      config ATP tristate {
       prompt "AT-LAN-TEC/RealTek pocket adapter support" if [NET && NETDEVICES && !UML && NET_POCKET && PARPORT && X86]
       depends on [NET_POCKET && PARPORT && X86]
       select CRC32 if [NET && NETDEVICES && !UML && NET_POCKET && PARPORT && X86]
       inherited [NET && NETDEVICES && !UML && NET_POCKET && PARPORT && X86]
      }
      config DE600 tristate {
       prompt "D-Link DE600 pocket adapter support" if [NET && NETDEVICES && !UML && NET_POCKET && PARPORT]
       depends on [NET_POCKET && PARPORT]
       inherited [NET && NETDEVICES && !UML && NET_POCKET && PARPORT]
      }
      config DE620 tristate {
       prompt "D-Link DE620 pocket adapter support" if [NET && NETDEVICES && !UML && NET_POCKET && PARPORT]
       depends on [NET_POCKET && PARPORT]
       inherited [NET && NETDEVICES && !UML && NET_POCKET && PARPORT]
      }
     }
     config SGISEEQ tristate {
      prompt "SGI Seeq ethernet controller support" if [NET && NETDEVICES && !UML && NET_ETHERNET && SGI_IP22]
      depends on [NET_ETHERNET && SGI_IP22]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && SGI_IP22]
     }
     config DECLANCE tristate {
      prompt "DEC LANCE ethernet controller support" if [NET && NETDEVICES && !UML && NET_ETHERNET && MACH_DECSTATION]
      depends on [NET_ETHERNET && MACH_DECSTATION]
      select CRC32 if [NET && NETDEVICES && !UML && NET_ETHERNET && MACH_DECSTATION]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && MACH_DECSTATION]
     }
     config 68360_ENET boolean {
      prompt "Motorola 68360 ethernet controller" if [NET && NETDEVICES && !UML && M68360]
      depends on [M68360]
      inherited [NET && NETDEVICES && !UML && M68360]
     }
     config FEC boolean {
      prompt "FEC ethernet controller (of ColdFire CPUs)" if [NET && NETDEVICES && !UML && (M523x || M527x || M5272 || M528x || M520x)]
      depends on [M523x || M527x || M5272 || M528x || M520x]
      inherited [NET && NETDEVICES && !UML && (M523x || M527x || M5272 || M528x || M520x)]
      config FEC2 boolean {
       prompt "Second FEC ethernet controller (on some ColdFire CPUs)" if [NET && NETDEVICES && !UML && FEC]
       depends on [FEC]
       inherited [NET && NETDEVICES && !UML && FEC]
      }
     }
     config NE_H8300 tristate {
      prompt "NE2000 compatible support for H8/300" if [NET && NETDEVICES && !UML && H8300 && NET_ETHERNET]
      depends on [H8300 && NET_ETHERNET]
      inherited [NET && NETDEVICES && !UML && H8300 && NET_ETHERNET]
     }
     config FEC_8XX tristate {
      prompt "Motorola 8xx FEC driver" if [NET && NETDEVICES && !UML && NET_ETHERNET && 8xx]
      depends on [NET_ETHERNET && 8xx]
      select MII if [NET && NETDEVICES && !UML && NET_ETHERNET && 8xx]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && 8xx]
      config FEC_8XX_GENERIC_PHY boolean {
       prompt "Support any generic PHY" if [NET && NETDEVICES && !UML && FEC_8XX]
       depends on [FEC_8XX]
       default [y] if [NET && NETDEVICES && !UML && FEC_8XX]
       inherited [NET && NETDEVICES && !UML && FEC_8XX]
      }
      config FEC_8XX_DM9161_PHY boolean {
       prompt "Support DM9161 PHY" if [NET && NETDEVICES && !UML && FEC_8XX]
       depends on [FEC_8XX]
       default [n] if [NET && NETDEVICES && !UML && FEC_8XX]
       inherited [NET && NETDEVICES && !UML && FEC_8XX]
      }
      config FEC_8XX_LXT971_PHY boolean {
       prompt "Support LXT971/LXT972 PHY" if [NET && NETDEVICES && !UML && FEC_8XX]
       depends on [FEC_8XX]
       default [n] if [NET && NETDEVICES && !UML && FEC_8XX]
       inherited [NET && NETDEVICES && !UML && FEC_8XX]
      }
     }
     config FS_ENET tristate {
      prompt "Freescale Ethernet Driver" if [NET && NETDEVICES && !UML && NET_ETHERNET && (CPM1 || CPM2)]
      depends on [NET_ETHERNET && (CPM1 || CPM2)]
      select MII if [NET && NETDEVICES && !UML && NET_ETHERNET && (CPM1 || CPM2)]
      inherited [NET && NETDEVICES && !UML && NET_ETHERNET && (CPM1 || CPM2)]
      config FS_ENET_HAS_SCC boolean {
       prompt "Chip has an SCC usable for ethernet" if [NET && NETDEVICES && !UML && FS_ENET && (CPM1 || CPM2)]
       depends on [FS_ENET && (CPM1 || CPM2)]
       default [y] if [NET && NETDEVICES && !UML && FS_ENET && (CPM1 || CPM2)]
       inherited [NET && NETDEVICES && !UML && FS_ENET && (CPM1 || CPM2)]
      }
      config FS_ENET_HAS_FCC boolean {
       prompt "Chip has an FCC usable for ethernet" if [NET && NETDEVICES && !UML && FS_ENET && CPM2]
       depends on [FS_ENET && CPM2]
       default [y] if [NET && NETDEVICES && !UML && FS_ENET && CPM2]
       inherited [NET && NETDEVICES && !UML && FS_ENET && CPM2]
      }
      config FS_ENET_HAS_FEC boolean {
       prompt "Chip has an FEC usable for ethernet" if [NET && NETDEVICES && !UML && FS_ENET && CPM1]
       depends on [FS_ENET && CPM1]
       default [y] if [NET && NETDEVICES && !UML && FS_ENET && CPM1]
       inherited [NET && NETDEVICES && !UML && FS_ENET && CPM1]
      }
     }
    }
    menu "Ethernet (1000 Mbit)" {
     depends on [NET && NETDEVICES && !UML]
     config ACENIC tristate {
      prompt "Alteon AceNIC/3Com 3C985/NetGear GA620 Gigabit support" if [NET && NETDEVICES && !UML && PCI]
      depends on [PCI]
      inherited [NET && NETDEVICES && !UML && PCI]
      config ACENIC_OMIT_TIGON_I boolean {
       prompt "Omit support for old Tigon I based AceNICs" if [NET && NETDEVICES && !UML && ACENIC]
       depends on [ACENIC]
       inherited [NET && NETDEVICES && !UML && ACENIC]
      }
     }
     config DL2K tristate {
      prompt "D-Link DL2000-based Gigabit Ethernet support" if [NET && NETDEVICES && !UML && PCI]
      depends on [PCI]
      select CRC32 if [NET && NETDEVICES && !UML && PCI]
      inherited [NET && NETDEVICES && !UML && PCI]
     }
     config E1000 tristate {
      prompt "Intel(R) PRO/1000 Gigabit Ethernet support" if [NET && NETDEVICES && !UML && PCI]
      depends on [PCI]
      inherited [NET && NETDEVICES && !UML && PCI]
      config E1000_NAPI boolean {
       prompt "Use Rx Polling (NAPI)" if [NET && NETDEVICES && !UML && E1000]
       depends on [E1000]
       inherited [NET && NETDEVICES && !UML && E1000]
      }
      config E1000_DISABLE_PACKET_SPLIT boolean {
       prompt "Disable Packet Split for PCI express adapters" if [NET && NETDEVICES && !UML && E1000]
       depends on [E1000]
       inherited [NET && NETDEVICES && !UML && E1000]
      }
     }
     config ENP2611_MSF_NET tristate {
      prompt "Radisys ENP2611 MSF network interface support" if [NET && NETDEVICES && !UML && ARCH_ENP2611]
      depends on [ARCH_ENP2611]
      inherited [NET && NETDEVICES && !UML && ARCH_ENP2611]
     }
     config MYRI_SBUS tristate {
      prompt "MyriCOM Gigabit Ethernet support" if [NET && NETDEVICES && !UML && SBUS]
      depends on [SBUS]
      inherited [NET && NETDEVICES && !UML && SBUS]
     }
     config NS83820 tristate {
      prompt "National Semiconductor DP83820 support" if [NET && NETDEVICES && !UML && PCI]
      depends on [PCI]
      inherited [NET && NETDEVICES && !UML && PCI]
     }
     config HAMACHI tristate {
      prompt "Packet Engines Hamachi GNIC-II support" if [NET && NETDEVICES && !UML && PCI]
      depends on [PCI]
      select MII if [NET && NETDEVICES && !UML && PCI]
      inherited [NET && NETDEVICES && !UML && PCI]
     }
     config YELLOWFIN tristate {
      prompt "Packet Engines Yellowfin Gigabit-NIC support (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && PCI && EXPERIMENTAL]
      depends on [PCI && EXPERIMENTAL]
      select CRC32 if [NET && NETDEVICES && !UML && PCI && EXPERIMENTAL]
      inherited [NET && NETDEVICES && !UML && PCI && EXPERIMENTAL]
     }
     config R8169 tristate {
      prompt "Realtek 8169 gigabit ethernet support" if [NET && NETDEVICES && !UML && PCI]
      depends on [PCI]
      select CRC32 if [NET && NETDEVICES && !UML && PCI]
      inherited [NET && NETDEVICES && !UML && PCI]
      config R8169_NAPI boolean {
       prompt "Use Rx and Tx Polling (NAPI) (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && R8169 && EXPERIMENTAL]
       depends on [R8169 && EXPERIMENTAL]
       inherited [NET && NETDEVICES && !UML && R8169 && EXPERIMENTAL]
      }
      config R8169_VLAN boolean {
       prompt "VLAN support" if [NET && NETDEVICES && !UML && R8169 && VLAN_8021Q]
       depends on [R8169 && VLAN_8021Q]
       inherited [NET && NETDEVICES && !UML && R8169 && VLAN_8021Q]
      }
     }
     config SIS190 tristate {
      prompt "SiS190/SiS191 gigabit ethernet support" if [NET && NETDEVICES && !UML && PCI]
      depends on [PCI]
      select CRC32 if [NET && NETDEVICES && !UML && PCI]
      select MII if [NET && NETDEVICES && !UML && PCI]
      inherited [NET && NETDEVICES && !UML && PCI]
     }
     config SKGE tristate {
      prompt "New SysKonnect GigaEthernet support" if [NET && NETDEVICES && !UML && PCI]
      depends on [PCI]
      select CRC32 if [NET && NETDEVICES && !UML && PCI]
      inherited [NET && NETDEVICES && !UML && PCI]
     }
     config SKY2 tristate {
      prompt "SysKonnect Yukon2 support (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && PCI]
      depends on [PCI]
      select CRC32 if [NET && NETDEVICES && !UML && PCI]
      inherited [NET && NETDEVICES && !UML && PCI]
     }
     config SK98LIN tristate {
      prompt "Marvell Yukon Chipset / SysKonnect SK-98xx Support" if [NET && NETDEVICES && !UML && PCI]
      depends on [PCI]
      inherited [NET && NETDEVICES && !UML && PCI]
     }
     config VIA_VELOCITY tristate {
      prompt "VIA Velocity support" if [NET && NETDEVICES && !UML && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select CRC32 if [NET && NETDEVICES && !UML && NET_PCI && PCI]
      select CRC_CCITT if [NET && NETDEVICES && !UML && NET_PCI && PCI]
      select MII if [NET && NETDEVICES && !UML && NET_PCI && PCI]
      inherited [NET && NETDEVICES && !UML && NET_PCI && PCI]
     }
     config TIGON3 tristate {
      prompt "Broadcom Tigon3 support" if [NET && NETDEVICES && !UML && PCI]
      depends on [PCI]
      inherited [NET && NETDEVICES && !UML && PCI]
     }
     config BNX2 tristate {
      prompt "Broadcom NetXtremeII support" if [NET && NETDEVICES && !UML && PCI]
      depends on [PCI]
      select CRC32 if [NET && NETDEVICES && !UML && PCI]
      select ZLIB_INFLATE if [NET && NETDEVICES && !UML && PCI]
      inherited [NET && NETDEVICES && !UML && PCI]
     }
     config SPIDER_NET tristate {
      prompt "Spider Gigabit Ethernet driver" if [NET && NETDEVICES && !UML && PCI && PPC_IBM_CELL_BLADE]
      depends on [PCI && PPC_IBM_CELL_BLADE]
      select FW_LOADER if [NET && NETDEVICES && !UML && PCI && PPC_IBM_CELL_BLADE]
      inherited [NET && NETDEVICES && !UML && PCI && PPC_IBM_CELL_BLADE]
     }
     config TSI108_ETH tristate {
      prompt "Tundra TSI108 gigabit Ethernet support" if [NET && NETDEVICES && !UML && TSI108_BRIDGE]
      depends on [TSI108_BRIDGE]
      inherited [NET && NETDEVICES && !UML && TSI108_BRIDGE]
     }
     config GIANFAR tristate {
      prompt "Gianfar Ethernet" if [NET && NETDEVICES && !UML && (85xx || 83xx || PPC_86xx)]
      depends on [85xx || 83xx || PPC_86xx]
      select PHYLIB if [NET && NETDEVICES && !UML && (85xx || 83xx || PPC_86xx)]
      inherited [NET && NETDEVICES && !UML && (85xx || 83xx || PPC_86xx)]
      config GFAR_NAPI boolean {
       prompt "NAPI Support" if [NET && NETDEVICES && !UML && GIANFAR]
       depends on [GIANFAR]
       inherited [NET && NETDEVICES && !UML && GIANFAR]
      }
     }
     config UCC_GETH tristate {
      prompt "Freescale QE UCC GETH" if [NET && NETDEVICES && !UML && QUICC_ENGINE && UCC_FAST]
      depends on [QUICC_ENGINE && UCC_FAST]
      inherited [NET && NETDEVICES && !UML && QUICC_ENGINE && UCC_FAST]
      config UGETH_NAPI boolean {
       prompt "NAPI Support" if [NET && NETDEVICES && !UML && UCC_GETH]
       depends on [UCC_GETH]
       inherited [NET && NETDEVICES && !UML && UCC_GETH]
      }
      config UGETH_MAGIC_PACKET boolean {
       prompt "Magic Packet detection support" if [NET && NETDEVICES && !UML && UCC_GETH]
       depends on [UCC_GETH]
       inherited [NET && NETDEVICES && !UML && UCC_GETH]
      }
      config UGETH_FILTERING boolean {
       prompt "Mac address filtering support" if [NET && NETDEVICES && !UML && UCC_GETH]
       depends on [UCC_GETH]
       inherited [NET && NETDEVICES && !UML && UCC_GETH]
      }
      config UGETH_TX_ON_DEMOND boolean {
       prompt "Transmit on Demond support" if [NET && NETDEVICES && !UML && UCC_GETH]
       depends on [UCC_GETH]
       inherited [NET && NETDEVICES && !UML && UCC_GETH]
      }
      config UGETH_HAS_GIGA boolean {
       depends on [UCC_GETH && PPC_MPC836x]
       inherited [NET && NETDEVICES && !UML && UCC_GETH && PPC_MPC836x]
      }
     }
     config MV643XX_ETH tristate {
      prompt "MV-643XX Ethernet support" if [NET && NETDEVICES && !UML && (MOMENCO_OCELOT_C || MOMENCO_JAGUAR_ATX || MV64360 || MOMENCO_OCELOT_3 || PPC_MULTIPLATFORM && PPC32)]
      depends on [MOMENCO_OCELOT_C || MOMENCO_JAGUAR_ATX || MV64360 || MOMENCO_OCELOT_3 || PPC_MULTIPLATFORM && PPC32]
      select MII if [NET && NETDEVICES && !UML && (MOMENCO_OCELOT_C || MOMENCO_JAGUAR_ATX || MV64360 || MOMENCO_OCELOT_3 || PPC_MULTIPLATFORM && PPC32)]
      inherited [NET && NETDEVICES && !UML && (MOMENCO_OCELOT_C || MOMENCO_JAGUAR_ATX || MV64360 || MOMENCO_OCELOT_3 || PPC_MULTIPLATFORM && PPC32)]
      config MV643XX_ETH_0 boolean {
       prompt "MV-643XX Port 0" if [NET && NETDEVICES && !UML && MV643XX_ETH]
       depends on [MV643XX_ETH]
       inherited [NET && NETDEVICES && !UML && MV643XX_ETH]
      }
      config MV643XX_ETH_1 boolean {
       prompt "MV-643XX Port 1" if [NET && NETDEVICES && !UML && MV643XX_ETH]
       depends on [MV643XX_ETH]
       inherited [NET && NETDEVICES && !UML && MV643XX_ETH]
      }
      config MV643XX_ETH_2 boolean {
       prompt "MV-643XX Port 2" if [NET && NETDEVICES && !UML && MV643XX_ETH]
       depends on [MV643XX_ETH]
       inherited [NET && NETDEVICES && !UML && MV643XX_ETH]
      }
     }
     config QLA3XXX tristate {
      prompt "QLogic QLA3XXX Network Driver Support" if [NET && NETDEVICES && !UML && PCI]
      depends on [PCI]
      inherited [NET && NETDEVICES && !UML && PCI]
     }
    }
    menu "Ethernet (10000 Mbit)" {
     depends on [NET && NETDEVICES && !UML]
     config CHELSIO_T1 tristate {
      prompt "Chelsio 10Gb Ethernet support" if [NET && NETDEVICES && !UML && PCI]
      depends on [PCI]
      select CRC32 if [NET && NETDEVICES && !UML && PCI]
      inherited [NET && NETDEVICES && !UML && PCI]
      config CHELSIO_T1_1G boolean {
       prompt "Chelsio gigabit Ethernet support" if [NET && NETDEVICES && !UML && CHELSIO_T1]
       depends on [CHELSIO_T1]
       inherited [NET && NETDEVICES && !UML && CHELSIO_T1]
      }
      config CHELSIO_T1_NAPI boolean {
       prompt "Use Rx Polling (NAPI)" if [NET && NETDEVICES && !UML && CHELSIO_T1]
       depends on [CHELSIO_T1]
       default [y] if [NET && NETDEVICES && !UML && CHELSIO_T1]
       inherited [NET && NETDEVICES && !UML && CHELSIO_T1]
      }
     }
     config EHEA tristate {
      prompt "eHEA Ethernet support" if [NET && NETDEVICES && !UML && IBMEBUS]
      depends on [IBMEBUS]
      inherited [NET && NETDEVICES && !UML && IBMEBUS]
     }
     config IXGB tristate {
      prompt "Intel(R) PRO/10GbE support" if [NET && NETDEVICES && !UML && PCI]
      depends on [PCI]
      inherited [NET && NETDEVICES && !UML && PCI]
      config IXGB_NAPI boolean {
       prompt "Use Rx Polling (NAPI) (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && IXGB && EXPERIMENTAL]
       depends on [IXGB && EXPERIMENTAL]
       inherited [NET && NETDEVICES && !UML && IXGB && EXPERIMENTAL]
      }
     }
     config S2IO tristate {
      prompt "S2IO 10Gbe XFrame NIC" if [NET && NETDEVICES && !UML && PCI]
      depends on [PCI]
      inherited [NET && NETDEVICES && !UML && PCI]
      config S2IO_NAPI boolean {
       prompt "Use Rx Polling (NAPI) (EXPERIMENTAL)" if [NET && NETDEVICES && !UML && S2IO && EXPERIMENTAL]
       depends on [S2IO && EXPERIMENTAL]
       inherited [NET && NETDEVICES && !UML && S2IO && EXPERIMENTAL]
      }
     }
     config MYRI10GE tristate {
      prompt "Myricom Myri-10G Ethernet support" if [NET && NETDEVICES && !UML && PCI]
      depends on [PCI]
      select FW_LOADER if [NET && NETDEVICES && !UML && PCI]
      select CRC32 if [NET && NETDEVICES && !UML && PCI]
      inherited [NET && NETDEVICES && !UML && PCI]
     }
     config NETXEN_NIC tristate {
      prompt "NetXen Multi port (1/10) Gigabit Ethernet NIC" if [NET && NETDEVICES && !UML && PCI]
      depends on [PCI]
      inherited [NET && NETDEVICES && !UML && PCI]
     }
    }
    menu "Token Ring devices" {
     depends on [NET && NETDEVICES && !UML]
     config TR boolean {
      prompt "Token Ring driver support" if [NET && NETDEVICES && !UML && (PCI || ISA || MCA || CCW)]
      depends on [PCI || ISA || MCA || CCW]
      select LLC if [NET && NETDEVICES && !UML && (PCI || ISA || MCA || CCW)]
      inherited [NET && NETDEVICES && !UML && (PCI || ISA || MCA || CCW)]
      config IBMTR tristate {
       prompt "IBM Tropic chipset based adapter support" if [NET && NETDEVICES && !UML && TR && (ISA || MCA)]
       depends on [TR && (ISA || MCA)]
       inherited [NET && NETDEVICES && !UML && TR && (ISA || MCA)]
      }
      config IBMOL tristate {
       prompt "IBM Olympic chipset PCI adapter support" if [NET && NETDEVICES && !UML && TR && PCI]
       depends on [TR && PCI]
       inherited [NET && NETDEVICES && !UML && TR && PCI]
      }
      config IBMLS tristate {
       prompt "IBM Lanstreamer chipset PCI adapter support" if [NET && NETDEVICES && !UML && TR && PCI && !64BIT]
       depends on [TR && PCI && !64BIT]
       inherited [NET && NETDEVICES && !UML && TR && PCI && !64BIT]
      }
      config 3C359 tristate {
       prompt "3Com 3C359 Token Link Velocity XL adapter support" if [NET && NETDEVICES && !UML && TR && PCI]
       depends on [TR && PCI]
       inherited [NET && NETDEVICES && !UML && TR && PCI]
      }
      config TMS380TR tristate {
       prompt "Generic TMS380 Token Ring ISA/PCI adapter support" if [NET && NETDEVICES && !UML && TR && (PCI || ISA && ISA_DMA_API || MCA)]
       depends on [TR && (PCI || ISA && ISA_DMA_API || MCA)]
       select FW_LOADER if [NET && NETDEVICES && !UML && TR && (PCI || ISA && ISA_DMA_API || MCA)]
       inherited [NET && NETDEVICES && !UML && TR && (PCI || ISA && ISA_DMA_API || MCA)]
       config TMSPCI tristate {
        prompt "Generic TMS380 PCI support" if [NET && NETDEVICES && !UML && TR && TMS380TR && PCI]
        depends on [TR && TMS380TR && PCI]
        inherited [NET && NETDEVICES && !UML && TR && TMS380TR && PCI]
       }
       config SKISA tristate {
        prompt "SysKonnect TR4/16 ISA support" if [NET && NETDEVICES && !UML && TR && TMS380TR && ISA]
        depends on [TR && TMS380TR && ISA]
        inherited [NET && NETDEVICES && !UML && TR && TMS380TR && ISA]
       }
       config PROTEON tristate {
        prompt "Proteon ISA support" if [NET && NETDEVICES && !UML && TR && TMS380TR && ISA]
        depends on [TR && TMS380TR && ISA]
        inherited [NET && NETDEVICES && !UML && TR && TMS380TR && ISA]
       }
       config ABYSS tristate {
        prompt "Madge Smart 16/4 PCI Mk2 support" if [NET && NETDEVICES && !UML && TR && TMS380TR && PCI]
        depends on [TR && TMS380TR && PCI]
        inherited [NET && NETDEVICES && !UML && TR && TMS380TR && PCI]
       }
       config MADGEMC tristate {
        prompt "Madge Smart 16/4 Ringnode MicroChannel" if [NET && NETDEVICES && !UML && TR && TMS380TR && MCA]
        depends on [TR && TMS380TR && MCA]
        inherited [NET && NETDEVICES && !UML && TR && TMS380TR && MCA]
       }
      }
      config SMCTR tristate {
       prompt "SMC ISA/MCA adapter support" if [NET && NETDEVICES && !UML && TR && (ISA || MCA_LEGACY) && (BROKEN || !64BIT)]
       depends on [TR && (ISA || MCA_LEGACY) && (BROKEN || !64BIT)]
       inherited [NET && NETDEVICES && !UML && TR && (ISA || MCA_LEGACY) && (BROKEN || !64BIT)]
      }
     }
    }
    menu "Wireless LAN (non-hamradio)" {
     depends on [NET && NETDEVICES]
     config NET_RADIO boolean {
      prompt "Wireless LAN drivers (non-hamradio) & Wireless Extensions" if [NET && NETDEVICES]
      select WIRELESS_EXT if [NET && NETDEVICES]
      inherited [NET && NETDEVICES]
      config NET_WIRELESS_RTNETLINK boolean {
       prompt "Wireless Extension API over RtNetlink" if [NET && NETDEVICES && NET_RADIO]
       depends on [NET_RADIO]
       inherited [NET && NETDEVICES && NET_RADIO]
      }
      config STRIP tristate {
       prompt "STRIP (Metricom starmode radio IP)" if [NET && NETDEVICES && NET_RADIO && INET]
       depends on [NET_RADIO && INET]
       inherited [NET && NETDEVICES && NET_RADIO && INET]
      }
      config ARLAN tristate {
       prompt "Aironet Arlan 655 & IC2200 DS support" if [NET && NETDEVICES && NET_RADIO && ISA && !64BIT]
       depends on [NET_RADIO && ISA && !64BIT]
       inherited [NET && NETDEVICES && NET_RADIO && ISA && !64BIT]
      }
      config WAVELAN tristate {
       prompt "AT&T/Lucent old WaveLAN & DEC RoamAbout DS ISA support" if [NET && NETDEVICES && NET_RADIO && ISA]
       depends on [NET_RADIO && ISA]
       inherited [NET && NETDEVICES && NET_RADIO && ISA]
      }
      config PCMCIA_WAVELAN tristate {
       prompt "AT&T/Lucent old WaveLAN Pcmcia wireless support" if [NET && NETDEVICES && NET_RADIO && PCMCIA]
       depends on [NET_RADIO && PCMCIA]
       inherited [NET && NETDEVICES && NET_RADIO && PCMCIA]
      }
      config PCMCIA_NETWAVE tristate {
       prompt "Xircom Netwave AirSurfer Pcmcia wireless support" if [NET && NETDEVICES && NET_RADIO && PCMCIA]
       depends on [NET_RADIO && PCMCIA]
       inherited [NET && NETDEVICES && NET_RADIO && PCMCIA]
      }
      config PCMCIA_RAYCS tristate {
       prompt "Aviator/Raytheon 2.4MHz wireless support" if [NET && NETDEVICES && NET_RADIO && PCMCIA]
       depends on [NET_RADIO && PCMCIA]
       inherited [NET && NETDEVICES && NET_RADIO && PCMCIA]
      }
      config IPW2100 tristate {
       prompt "Intel PRO/Wireless 2100 Network Connection" if [NET && NETDEVICES && NET_RADIO && PCI]
       depends on [NET_RADIO && PCI]
       select FW_LOADER if [NET && NETDEVICES && NET_RADIO && PCI]
       select IEEE80211 if [NET && NETDEVICES && NET_RADIO && PCI]
       inherited [NET && NETDEVICES && NET_RADIO && PCI]
       config IPW2100_MONITOR boolean {
        prompt "Enable promiscuous mode" if [NET && NETDEVICES && IPW2100]
        depends on [IPW2100]
        inherited [NET && NETDEVICES && IPW2100]
       }
       config IPW2100_DEBUG boolean {
        prompt "Enable full debugging output in IPW2100 module." if [NET && NETDEVICES && IPW2100]
        depends on [IPW2100]
        inherited [NET && NETDEVICES && IPW2100]
       }
      }
      config IPW2200 tristate {
       prompt "Intel PRO/Wireless 2200BG and 2915ABG Network Connection" if [NET && NETDEVICES && NET_RADIO && PCI]
       depends on [NET_RADIO && PCI]
       select FW_LOADER if [NET && NETDEVICES && NET_RADIO && PCI]
       select IEEE80211 if [NET && NETDEVICES && NET_RADIO && PCI]
       inherited [NET && NETDEVICES && NET_RADIO && PCI]
       config IPW2200_MONITOR boolean {
        prompt "Enable promiscuous mode" if [NET && NETDEVICES && IPW2200]
        depends on [IPW2200]
        inherited [NET && NETDEVICES && IPW2200]
        config IPW2200_RADIOTAP boolean {
         prompt "Enable radiotap format 802.11 raw packet support" if [NET && NETDEVICES && IPW2200_MONITOR]
         depends on [IPW2200_MONITOR]
         inherited [NET && NETDEVICES && IPW2200_MONITOR]
        }
        config IPW2200_PROMISCUOUS boolean {
         prompt "Enable creation of a RF radiotap promiscuous interface" if [NET && NETDEVICES && IPW2200_MONITOR]
         depends on [IPW2200_MONITOR]
         select IPW2200_RADIOTAP if [NET && NETDEVICES && IPW2200_MONITOR]
         inherited [NET && NETDEVICES && IPW2200_MONITOR]
        }
       }
       config IPW2200_QOS boolean {
        prompt "Enable QoS support" if [NET && NETDEVICES && IPW2200 && EXPERIMENTAL]
        depends on [IPW2200 && EXPERIMENTAL]
        inherited [NET && NETDEVICES && IPW2200 && EXPERIMENTAL]
       }
       config IPW2200_DEBUG boolean {
        prompt "Enable full debugging output in IPW2200 module." if [NET && NETDEVICES && IPW2200]
        depends on [IPW2200]
        inherited [NET && NETDEVICES && IPW2200]
       }
      }
      config AIRO tristate {
       prompt "Cisco/Aironet 34X/35X/4500/4800 ISA and PCI cards" if [NET && NETDEVICES && NET_RADIO && ISA_DMA_API && (PCI || BROKEN)]
       depends on [NET_RADIO && ISA_DMA_API && (PCI || BROKEN)]
       select CRYPTO if [NET && NETDEVICES && NET_RADIO && ISA_DMA_API && (PCI || BROKEN)]
       inherited [NET && NETDEVICES && NET_RADIO && ISA_DMA_API && (PCI || BROKEN)]
      }
      config HERMES tristate {
       prompt "Hermes chipset 802.11b support (Orinoco/Prism2/Symbol)" if [NET && NETDEVICES && NET_RADIO && (PPC_PMAC || PCI || PCMCIA)]
       depends on [NET_RADIO && (PPC_PMAC || PCI || PCMCIA)]
       inherited [NET && NETDEVICES && NET_RADIO && (PPC_PMAC || PCI || PCMCIA)]
       config APPLE_AIRPORT tristate {
        prompt "Apple Airport support (built-in)" if [NET && NETDEVICES && PPC_PMAC && HERMES]
        depends on [PPC_PMAC && HERMES]
        inherited [NET && NETDEVICES && PPC_PMAC && HERMES]
       }
       config PLX_HERMES tristate {
        prompt "Hermes in PLX9052 based PCI adaptor support (Netgear MA301 etc.)" if [NET && NETDEVICES && PCI && HERMES]
        depends on [PCI && HERMES]
        inherited [NET && NETDEVICES && PCI && HERMES]
       }
       config TMD_HERMES tristate {
        prompt "Hermes in TMD7160 based PCI adaptor support" if [NET && NETDEVICES && PCI && HERMES]
        depends on [PCI && HERMES]
        inherited [NET && NETDEVICES && PCI && HERMES]
       }
       config NORTEL_HERMES tristate {
        prompt "Nortel emobility PCI adaptor support" if [NET && NETDEVICES && PCI && HERMES]
        depends on [PCI && HERMES]
        inherited [NET && NETDEVICES && PCI && HERMES]
       }
       config PCI_HERMES tristate {
        prompt "Prism 2.5 PCI 802.11b adaptor support" if [NET && NETDEVICES && PCI && HERMES]
        depends on [PCI && HERMES]
        inherited [NET && NETDEVICES && PCI && HERMES]
       }
      }
      config ATMEL tristate {
       prompt "Atmel at76c50x chipset  802.11b support" if [NET && NETDEVICES && NET_RADIO && (PCI || PCMCIA)]
       depends on [NET_RADIO && (PCI || PCMCIA)]
       select FW_LOADER if [NET && NETDEVICES && NET_RADIO && (PCI || PCMCIA)]
       select CRC32 if [NET && NETDEVICES && NET_RADIO && (PCI || PCMCIA)]
       inherited [NET && NETDEVICES && NET_RADIO && (PCI || PCMCIA)]
       config PCI_ATMEL tristate {
        prompt "Atmel at76c506 PCI cards" if [NET && NETDEVICES && ATMEL && PCI]
        depends on [ATMEL && PCI]
        inherited [NET && NETDEVICES && ATMEL && PCI]
       }
      }
      config PCMCIA_HERMES tristate {
       prompt "Hermes PCMCIA card support" if [NET && NETDEVICES && NET_RADIO && PCMCIA && HERMES]
       depends on [NET_RADIO && PCMCIA && HERMES]
       inherited [NET && NETDEVICES && NET_RADIO && PCMCIA && HERMES]
      }
      config PCMCIA_SPECTRUM tristate {
       prompt "Symbol Spectrum24 Trilogy PCMCIA card support" if [NET && NETDEVICES && NET_RADIO && PCMCIA && HERMES]
       depends on [NET_RADIO && PCMCIA && HERMES]
       select FW_LOADER if [NET && NETDEVICES && NET_RADIO && PCMCIA && HERMES]
       inherited [NET && NETDEVICES && NET_RADIO && PCMCIA && HERMES]
      }
      config AIRO_CS tristate {
       prompt "Cisco/Aironet 34X/35X/4500/4800 PCMCIA cards" if [NET && NETDEVICES && NET_RADIO && PCMCIA && (BROKEN || !M32R)]
       depends on [NET_RADIO && PCMCIA && (BROKEN || !M32R)]
       select CRYPTO if [NET && NETDEVICES && NET_RADIO && PCMCIA && (BROKEN || !M32R)]
       select CRYPTO_AES if [NET && NETDEVICES && NET_RADIO && PCMCIA && (BROKEN || !M32R)]
       inherited [NET && NETDEVICES && NET_RADIO && PCMCIA && (BROKEN || !M32R)]
      }
      config PCMCIA_ATMEL tristate {
       prompt "Atmel at76c502/at76c504 PCMCIA cards" if [NET && NETDEVICES && NET_RADIO && ATMEL && PCMCIA]
       depends on [NET_RADIO && ATMEL && PCMCIA]
       select FW_LOADER if [NET && NETDEVICES && NET_RADIO && ATMEL && PCMCIA]
       select CRC32 if [NET && NETDEVICES && NET_RADIO && ATMEL && PCMCIA]
       inherited [NET && NETDEVICES && NET_RADIO && ATMEL && PCMCIA]
      }
      config PCMCIA_WL3501 tristate {
       prompt "Planet WL3501 PCMCIA cards" if [NET && NETDEVICES && NET_RADIO && EXPERIMENTAL && PCMCIA]
       depends on [NET_RADIO && EXPERIMENTAL && PCMCIA]
       inherited [NET && NETDEVICES && NET_RADIO && EXPERIMENTAL && PCMCIA]
      }
      config PRISM54 tristate {
       prompt "Intersil Prism GT/Duette/Indigo PCI/Cardbus" if [NET && NETDEVICES && PCI && NET_RADIO && EXPERIMENTAL]
       depends on [PCI && NET_RADIO && EXPERIMENTAL]
       select FW_LOADER if [NET && NETDEVICES && PCI && NET_RADIO && EXPERIMENTAL]
       inherited [NET && NETDEVICES && PCI && NET_RADIO && EXPERIMENTAL]
      }
      config USB_ZD1201 tristate {
       prompt "USB ZD1201 based Wireless device support" if [NET && NETDEVICES && USB && NET_RADIO]
       depends on [USB && NET_RADIO]
       select FW_LOADER if [NET && NETDEVICES && USB && NET_RADIO]
       inherited [NET && NETDEVICES && USB && NET_RADIO]
      }
      config HOSTAP tristate {
       prompt "IEEE 802.11 for Host AP (Prism2/2.5/3 and WEP/TKIP/CCMP)" if [NET && NETDEVICES && NET_RADIO]
       depends on [NET_RADIO]
       select IEEE80211 if [NET && NETDEVICES && NET_RADIO]
       select IEEE80211_CRYPT_WEP if [NET && NETDEVICES && NET_RADIO]
       inherited [NET && NETDEVICES && NET_RADIO]
       config HOSTAP_FIRMWARE boolean {
        prompt "Support downloading firmware images with Host AP driver" if [NET && NETDEVICES && HOSTAP]
        depends on [HOSTAP]
        inherited [NET && NETDEVICES && HOSTAP]
        config HOSTAP_FIRMWARE_NVRAM boolean {
         prompt "Support for non-volatile firmware download" if [NET && NETDEVICES && HOSTAP_FIRMWARE]
         depends on [HOSTAP_FIRMWARE]
         inherited [NET && NETDEVICES && HOSTAP_FIRMWARE]
        }
       }
       config HOSTAP_PLX tristate {
        prompt "Host AP driver for Prism2/2.5/3 in PLX9052 PCI adaptors" if [NET && NETDEVICES && PCI && HOSTAP]
        depends on [PCI && HOSTAP]
        inherited [NET && NETDEVICES && PCI && HOSTAP]
       }
       config HOSTAP_PCI tristate {
        prompt "Host AP driver for Prism2.5 PCI adaptors" if [NET && NETDEVICES && PCI && HOSTAP]
        depends on [PCI && HOSTAP]
        inherited [NET && NETDEVICES && PCI && HOSTAP]
       }
       config HOSTAP_CS tristate {
        prompt "Host AP driver for Prism2/2.5/3 PC Cards" if [NET && NETDEVICES && PCMCIA && HOSTAP]
        depends on [PCMCIA && HOSTAP]
        inherited [NET && NETDEVICES && PCMCIA && HOSTAP]
       }
      }
      config BCM43XX tristate {
       prompt "Broadcom BCM43xx wireless support" if [NET && NETDEVICES && PCI && IEEE80211 && IEEE80211_SOFTMAC && NET_RADIO && EXPERIMENTAL]
       depends on [PCI && IEEE80211 && IEEE80211_SOFTMAC && NET_RADIO && EXPERIMENTAL]
       select FW_LOADER if [NET && NETDEVICES && PCI && IEEE80211 && IEEE80211_SOFTMAC && NET_RADIO && EXPERIMENTAL]
       select HW_RANDOM if [NET && NETDEVICES && PCI && IEEE80211 && IEEE80211_SOFTMAC && NET_RADIO && EXPERIMENTAL]
       inherited [NET && NETDEVICES && PCI && IEEE80211 && IEEE80211_SOFTMAC && NET_RADIO && EXPERIMENTAL]
       config BCM43XX_DEBUG boolean {
        prompt "Broadcom BCM43xx debugging (RECOMMENDED)" if [NET && NETDEVICES && BCM43XX]
        depends on [BCM43XX]
        default [y] if [NET && NETDEVICES && BCM43XX]
        inherited [NET && NETDEVICES && BCM43XX]
       }
       config BCM43XX_DMA boolean {
        depends on [BCM43XX]
        inherited [NET && NETDEVICES && BCM43XX]
       }
       config BCM43XX_PIO boolean {
        depends on [BCM43XX]
        inherited [NET && NETDEVICES && BCM43XX]
       }
       choice boolean {
        prompt "BCM43xx data transfer mode" if [NET && NETDEVICES && BCM43XX]
        depends on [BCM43XX]
        default [BCM43XX_DMA_AND_PIO_MODE] if [NET && NETDEVICES && BCM43XX]
        config BCM43XX_DMA_AND_PIO_MODE boolean {
         prompt "DMA + PIO" if [<choice>]
         select BCM43XX_DMA if [<choice>]
         select BCM43XX_PIO if [<choice>]
         inherited [<choice>]
        }
        config BCM43XX_DMA_MODE boolean {
         prompt "DMA (Direct Memory Access) only" if [<choice>]
         select BCM43XX_DMA if [<choice>]
         inherited [<choice>]
        }
        config BCM43XX_PIO_MODE boolean {
         prompt "PIO (Programmed I/O) only" if [<choice>]
         select BCM43XX_PIO if [<choice>]
         inherited [<choice>]
        }
       }
      }
      config ZD1211RW tristate {
       prompt "ZyDAS ZD1211/ZD1211B USB-wireless support" if [NET && NETDEVICES && USB && IEEE80211 && IEEE80211_SOFTMAC && NET_RADIO && EXPERIMENTAL]
       depends on [USB && IEEE80211 && IEEE80211_SOFTMAC && NET_RADIO && EXPERIMENTAL]
       select FW_LOADER if [NET && NETDEVICES && USB && IEEE80211 && IEEE80211_SOFTMAC && NET_RADIO && EXPERIMENTAL]
       inherited [NET && NETDEVICES && USB && IEEE80211 && IEEE80211_SOFTMAC && NET_RADIO && EXPERIMENTAL]
       config ZD1211RW_DEBUG boolean {
        prompt "ZyDAS ZD1211 debugging" if [NET && NETDEVICES && ZD1211RW]
        depends on [ZD1211RW]
        inherited [NET && NETDEVICES && ZD1211RW]
       }
      }
      config NET_WIRELESS boolean {
       depends on [NET_RADIO && (ISA || PCI || PPC_PMAC || PCMCIA)]
       default [y] if [NET && NETDEVICES && NET_RADIO && (ISA || PCI || PPC_PMAC || PCMCIA)]
       inherited [NET && NETDEVICES && NET_RADIO && (ISA || PCI || PPC_PMAC || PCMCIA)]
      }
     }
    }
    menu "PCMCIA network device support" {
     depends on [NET && NETDEVICES && PCMCIA!="n"]
     config NET_PCMCIA boolean {
      prompt "PCMCIA network device support" if [NET && NETDEVICES && PCMCIA]
      inherited [NET && NETDEVICES && PCMCIA]
      config PCMCIA_3C589 tristate {
       prompt "3Com 3c589 PCMCIA support" if [NET && NETDEVICES && NET_PCMCIA && PCMCIA]
       depends on [NET_PCMCIA && PCMCIA]
       inherited [NET && NETDEVICES && NET_PCMCIA && PCMCIA]
      }
      config PCMCIA_3C574 tristate {
       prompt "3Com 3c574 PCMCIA support" if [NET && NETDEVICES && NET_PCMCIA && PCMCIA]
       depends on [NET_PCMCIA && PCMCIA]
       inherited [NET && NETDEVICES && NET_PCMCIA && PCMCIA]
      }
      config PCMCIA_FMVJ18X tristate {
       prompt "Fujitsu FMV-J18x PCMCIA support" if [NET && NETDEVICES && NET_PCMCIA && PCMCIA]
       depends on [NET_PCMCIA && PCMCIA]
       select CRC32 if [NET && NETDEVICES && NET_PCMCIA && PCMCIA]
       inherited [NET && NETDEVICES && NET_PCMCIA && PCMCIA]
      }
      config PCMCIA_PCNET tristate {
       prompt "NE2000 compatible PCMCIA support" if [NET && NETDEVICES && NET_PCMCIA && PCMCIA]
       depends on [NET_PCMCIA && PCMCIA]
       select CRC32 if [NET && NETDEVICES && NET_PCMCIA && PCMCIA]
       inherited [NET && NETDEVICES && NET_PCMCIA && PCMCIA]
      }
      config PCMCIA_NMCLAN tristate {
       prompt "New Media PCMCIA support" if [NET && NETDEVICES && NET_PCMCIA && PCMCIA]
       depends on [NET_PCMCIA && PCMCIA]
       inherited [NET && NETDEVICES && NET_PCMCIA && PCMCIA]
      }
      config PCMCIA_SMC91C92 tristate {
       prompt "SMC 91Cxx PCMCIA support" if [NET && NETDEVICES && NET_PCMCIA && PCMCIA]
       depends on [NET_PCMCIA && PCMCIA]
       select CRC32 if [NET && NETDEVICES && NET_PCMCIA && PCMCIA]
       select MII if [NET && NETDEVICES && NET_PCMCIA && PCMCIA]
       inherited [NET && NETDEVICES && NET_PCMCIA && PCMCIA]
      }
      config PCMCIA_XIRC2PS tristate {
       prompt "Xircom 16-bit PCMCIA support" if [NET && NETDEVICES && NET_PCMCIA && PCMCIA]
       depends on [NET_PCMCIA && PCMCIA]
       inherited [NET && NETDEVICES && NET_PCMCIA && PCMCIA]
      }
      config PCMCIA_AXNET tristate {
       prompt "Asix AX88190 PCMCIA support" if [NET && NETDEVICES && NET_PCMCIA && PCMCIA]
       depends on [NET_PCMCIA && PCMCIA]
       inherited [NET && NETDEVICES && NET_PCMCIA && PCMCIA]
      }
      config ARCNET_COM20020_CS tristate {
       prompt "COM20020 ARCnet PCMCIA support" if [NET && NETDEVICES && NET_PCMCIA && ARCNET_COM20020 && PCMCIA]
       depends on [NET_PCMCIA && ARCNET_COM20020 && PCMCIA]
       inherited [NET && NETDEVICES && NET_PCMCIA && ARCNET_COM20020 && PCMCIA]
      }
      config PCMCIA_IBMTR tristate {
       prompt "IBM PCMCIA tokenring adapter support" if [NET && NETDEVICES && NET_PCMCIA && IBMTR!="y" && TR && PCMCIA && !64BIT]
       depends on [NET_PCMCIA && IBMTR!="y" && TR && PCMCIA && !64BIT]
       inherited [NET && NETDEVICES && NET_PCMCIA && IBMTR!="y" && TR && PCMCIA && !64BIT]
      }
     }
    }
    menu "Wan interfaces" {
     depends on [NET && NETDEVICES]
     config WAN boolean {
      prompt "Wan interfaces support" if [NET && NETDEVICES]
      inherited [NET && NETDEVICES]
      config HOSTESS_SV11 tristate {
       prompt "Comtrol Hostess SV-11 support" if [NET && NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API]
       depends on [WAN && ISA && m && ISA_DMA_API]
       inherited [NET && NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API]
      }
      config COSA tristate {
       prompt "COSA/SRP sync serial boards support" if [NET && NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API]
       depends on [WAN && ISA && m && ISA_DMA_API]
       inherited [NET && NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API]
      }
      config LANMEDIA tristate {
       prompt "LanMedia Corp. SSI/V.35, T1/E1, HSSI, T3 boards" if [NET && NETDEVICES && WAN && PCI]
       depends on [WAN && PCI]
       inherited [NET && NETDEVICES && WAN && PCI]
      }
      config SEALEVEL_4021 tristate {
       prompt "Sealevel Systems 4021 support" if [NET && NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API && INET]
       depends on [WAN && ISA && m && ISA_DMA_API && INET]
       inherited [NET && NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API && INET]
      }
      config HDLC tristate {
       prompt "Generic HDLC layer" if [NET && NETDEVICES && WAN]
       depends on [WAN]
       inherited [NET && NETDEVICES && WAN]
       config HDLC_RAW tristate {
        prompt "Raw HDLC support" if [NET && NETDEVICES && HDLC]
        depends on [HDLC]
        inherited [NET && NETDEVICES && HDLC]
       }
       config HDLC_RAW_ETH tristate {
        prompt "Raw HDLC Ethernet device support" if [NET && NETDEVICES && HDLC]
        depends on [HDLC]
        inherited [NET && NETDEVICES && HDLC]
       }
       config HDLC_CISCO tristate {
        prompt "Cisco HDLC support" if [NET && NETDEVICES && HDLC]
        depends on [HDLC]
        inherited [NET && NETDEVICES && HDLC]
       }
       config HDLC_FR tristate {
        prompt "Frame Relay support" if [NET && NETDEVICES && HDLC]
        depends on [HDLC]
        inherited [NET && NETDEVICES && HDLC]
       }
       config HDLC_PPP tristate {
        prompt "Synchronous Point-to-Point Protocol (PPP) support" if [NET && NETDEVICES && HDLC]
        depends on [HDLC]
        inherited [NET && NETDEVICES && HDLC]
       }
       config HDLC_X25 tristate {
        prompt "X.25 protocol support" if [NET && NETDEVICES && HDLC && (LAPB="m" && HDLC="m" || LAPB="y")]
        depends on [HDLC && (LAPB="m" && HDLC="m" || LAPB="y")]
        inherited [NET && NETDEVICES && HDLC && (LAPB="m" && HDLC="m" || LAPB="y")]
       }
       config PCI200SYN tristate {
        prompt "Goramo PCI200SYN support" if [NET && NETDEVICES && HDLC && PCI]
        depends on [HDLC && PCI]
        inherited [NET && NETDEVICES && HDLC && PCI]
       }
       config WANXL tristate {
        prompt "SBE Inc. wanXL support" if [NET && NETDEVICES && HDLC && PCI]
        depends on [HDLC && PCI]
        inherited [NET && NETDEVICES && HDLC && PCI]
        config WANXL_BUILD_FIRMWARE boolean {
         prompt "rebuild wanXL firmware" if [NET && NETDEVICES && WANXL && !PREVENT_FIRMWARE_BUILD]
         depends on [WANXL && !PREVENT_FIRMWARE_BUILD]
         inherited [NET && NETDEVICES && WANXL && !PREVENT_FIRMWARE_BUILD]
        }
       }
       config PC300 tristate {
        prompt "Cyclades-PC300 support (RS-232/V.35, X.21, T1/E1 boards)" if [NET && NETDEVICES && HDLC && PCI]
        depends on [HDLC && PCI]
        inherited [NET && NETDEVICES && HDLC && PCI]
        config PC300_MLPPP boolean {
         prompt "Cyclades-PC300 MLPPP support" if [NET && NETDEVICES && PC300 && PPP_MULTILINK && PPP_SYNC_TTY && HDLC_PPP]
         depends on [PC300 && PPP_MULTILINK && PPP_SYNC_TTY && HDLC_PPP]
         inherited [NET && NETDEVICES && PC300 && PPP_MULTILINK && PPP_SYNC_TTY && HDLC_PPP]
        }
       }
       config N2 tristate {
        prompt "SDL RISCom/N2 support" if [NET && NETDEVICES && HDLC && ISA]
        depends on [HDLC && ISA]
        inherited [NET && NETDEVICES && HDLC && ISA]
       }
       config C101 tristate {
        prompt "Moxa C101 support" if [NET && NETDEVICES && HDLC && ISA]
        depends on [HDLC && ISA]
        inherited [NET && NETDEVICES && HDLC && ISA]
       }
       config FARSYNC tristate {
        prompt "FarSync T-Series support" if [NET && NETDEVICES && HDLC && PCI]
        depends on [HDLC && PCI]
        inherited [NET && NETDEVICES && HDLC && PCI]
       }
       config DSCC4 tristate {
        prompt "Etinc PCISYNC serial board support" if [NET && NETDEVICES && HDLC && PCI && m && <choice>]
        depends on [HDLC && PCI && m]
        inherited [NET && NETDEVICES && HDLC && PCI && m && <choice>]
        config DSCC4_PCISYNC boolean {
         prompt "Etinc PCISYNC features" if [NET && NETDEVICES && DSCC4]
         depends on [DSCC4]
         inherited [NET && NETDEVICES && DSCC4]
        }
        config DSCC4_PCI_RST boolean {
         prompt "Hard reset support" if [NET && NETDEVICES && DSCC4]
         depends on [DSCC4]
         inherited [NET && NETDEVICES && DSCC4]
        }
       }
      }
      config DLCI tristate {
       prompt "Frame Relay DLCI support" if [NET && NETDEVICES && WAN]
       depends on [WAN]
       inherited [NET && NETDEVICES && WAN]
       config DLCI_COUNT integer {
        prompt "Max open DLCI" if [NET && NETDEVICES && DLCI]
        depends on [DLCI]
        default [24] if [NET && NETDEVICES && DLCI]
        inherited [NET && NETDEVICES && DLCI]
       }
       config DLCI_MAX integer {
        prompt "Max DLCI per device" if [NET && NETDEVICES && DLCI]
        depends on [DLCI]
        default [8] if [NET && NETDEVICES && DLCI]
        inherited [NET && NETDEVICES && DLCI]
       }
       config SDLA tristate {
        prompt "SDLA (Sangoma S502/S508) support" if [NET && NETDEVICES && DLCI && ISA]
        depends on [DLCI && ISA]
        inherited [NET && NETDEVICES && DLCI && ISA]
       }
      }
      config WAN_ROUTER_DRIVERS tristate {
       prompt "WAN router drivers" if [NET && NETDEVICES && WAN && WAN_ROUTER]
       depends on [WAN && WAN_ROUTER]
       inherited [NET && NETDEVICES && WAN && WAN_ROUTER]
       config CYCLADES_SYNC tristate {
        prompt "Cyclom 2X(tm) cards (EXPERIMENTAL)" if [NET && NETDEVICES && WAN_ROUTER_DRIVERS && (PCI || ISA)]
        depends on [WAN_ROUTER_DRIVERS && (PCI || ISA)]
        inherited [NET && NETDEVICES && WAN_ROUTER_DRIVERS && (PCI || ISA)]
        config CYCLOMX_X25 boolean {
         prompt "Cyclom 2X X.25 support (EXPERIMENTAL)" if [NET && NETDEVICES && CYCLADES_SYNC]
         depends on [CYCLADES_SYNC]
         inherited [NET && NETDEVICES && CYCLADES_SYNC]
        }
       }
      }
      config LAPBETHER tristate {
       prompt "LAPB over Ethernet driver (EXPERIMENTAL)" if [NET && NETDEVICES && WAN && LAPB && X25]
       depends on [WAN && LAPB && X25]
       inherited [NET && NETDEVICES && WAN && LAPB && X25]
      }
      config X25_ASY tristate {
       prompt "X.25 async driver (EXPERIMENTAL)" if [NET && NETDEVICES && WAN && LAPB && X25]
       depends on [WAN && LAPB && X25]
       inherited [NET && NETDEVICES && WAN && LAPB && X25]
      }
      config SBNI tristate {
       prompt "Granch SBNI12 Leased Line adapter support" if [NET && NETDEVICES && WAN && X86]
       depends on [WAN && X86]
       inherited [NET && NETDEVICES && WAN && X86]
       config SBNI_MULTILINE boolean {
        prompt "Multiple line feature support" if [NET && NETDEVICES && SBNI]
        depends on [SBNI]
        inherited [NET && NETDEVICES && SBNI]
       }
      }
     }
    }
    menu "ATM drivers" {
     depends on [NET && NETDEVICES && ATM]
     config ATM_DUMMY tristate {
      prompt "Dummy ATM driver" if [NET && NETDEVICES && ATM]
      depends on [ATM]
      inherited [NET && NETDEVICES && ATM]
     }
     config ATM_TCP tristate {
      prompt "ATM over TCP" if [NET && NETDEVICES && INET && ATM]
      depends on [INET && ATM]
      inherited [NET && NETDEVICES && INET && ATM]
     }
     config ATM_LANAI tristate {
      prompt "Efficient Networks Speedstream 3010" if [NET && NETDEVICES && PCI && ATM]
      depends on [PCI && ATM]
      inherited [NET && NETDEVICES && PCI && ATM]
     }
     config ATM_ENI tristate {
      prompt "Efficient Networks ENI155P" if [NET && NETDEVICES && PCI && ATM]
      depends on [PCI && ATM]
      inherited [NET && NETDEVICES && PCI && ATM]
      config ATM_ENI_DEBUG boolean {
       prompt "Enable extended debugging" if [NET && NETDEVICES && ATM && ATM_ENI]
       depends on [ATM_ENI]
       inherited [NET && NETDEVICES && ATM && ATM_ENI]
      }
      config ATM_ENI_TUNE_BURST boolean {
       prompt "Fine-tune burst settings" if [NET && NETDEVICES && ATM && ATM_ENI]
       depends on [ATM_ENI]
       inherited [NET && NETDEVICES && ATM && ATM_ENI]
       config ATM_ENI_BURST_TX_16W boolean {
        prompt "Enable 16W TX bursts (discouraged)" if [NET && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [NET && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
       config ATM_ENI_BURST_TX_8W boolean {
        prompt "Enable 8W TX bursts (recommended)" if [NET && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [NET && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
       config ATM_ENI_BURST_TX_4W boolean {
        prompt "Enable 4W TX bursts (optional)" if [NET && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [NET && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
       config ATM_ENI_BURST_TX_2W boolean {
        prompt "Enable 2W TX bursts (optional)" if [NET && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [NET && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
       config ATM_ENI_BURST_RX_16W boolean {
        prompt "Enable 16W RX bursts (discouraged)" if [NET && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [NET && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
       config ATM_ENI_BURST_RX_8W boolean {
        prompt "Enable 8W RX bursts (discouraged)" if [NET && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [NET && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
       config ATM_ENI_BURST_RX_4W boolean {
        prompt "Enable 4W RX bursts (recommended)" if [NET && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [NET && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
       config ATM_ENI_BURST_RX_2W boolean {
        prompt "Enable 2W RX bursts (optional)" if [NET && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [NET && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
      }
     }
     config ATM_FIRESTREAM tristate {
      prompt "Fujitsu FireStream (FS50/FS155) " if [NET && NETDEVICES && PCI && ATM]
      depends on [PCI && ATM]
      inherited [NET && NETDEVICES && PCI && ATM]
     }
     config ATM_ZATM tristate {
      prompt "ZeitNet ZN1221/ZN1225" if [NET && NETDEVICES && PCI && ATM]
      depends on [PCI && ATM]
      inherited [NET && NETDEVICES && PCI && ATM]
      config ATM_ZATM_DEBUG boolean {
       prompt "Enable extended debugging" if [NET && NETDEVICES && ATM && ATM_ZATM]
       depends on [ATM_ZATM]
       inherited [NET && NETDEVICES && ATM && ATM_ZATM]
      }
     }
     config ATM_NICSTAR tristate {
      prompt "IDT 77201 (NICStAR) (ForeRunnerLE)" if [NET && NETDEVICES && PCI && ATM && !64BIT]
      depends on [PCI && ATM && !64BIT]
      inherited [NET && NETDEVICES && PCI && ATM && !64BIT]
      config ATM_NICSTAR_USE_SUNI boolean {
       prompt "Use suni PHY driver (155Mbps)" if [NET && NETDEVICES && ATM && ATM_NICSTAR]
       depends on [ATM_NICSTAR]
       inherited [NET && NETDEVICES && ATM && ATM_NICSTAR]
      }
      config ATM_NICSTAR_USE_IDT77105 boolean {
       prompt "Use IDT77015 PHY driver (25Mbps)" if [NET && NETDEVICES && ATM && ATM_NICSTAR]
       depends on [ATM_NICSTAR]
       inherited [NET && NETDEVICES && ATM && ATM_NICSTAR]
      }
     }
     config ATM_IDT77252 tristate {
      prompt "IDT 77252 (NICStAR II)" if [NET && NETDEVICES && PCI && ATM]
      depends on [PCI && ATM]
      inherited [NET && NETDEVICES && PCI && ATM]
      config ATM_IDT77252_DEBUG boolean {
       prompt "Enable debugging messages" if [NET && NETDEVICES && ATM && ATM_IDT77252]
       depends on [ATM_IDT77252]
       inherited [NET && NETDEVICES && ATM && ATM_IDT77252]
      }
      config ATM_IDT77252_RCV_ALL boolean {
       prompt "Receive ALL cells in raw queue" if [NET && NETDEVICES && ATM && ATM_IDT77252]
       depends on [ATM_IDT77252]
       inherited [NET && NETDEVICES && ATM && ATM_IDT77252]
      }
      config ATM_IDT77252_USE_SUNI boolean {
       depends on [ATM_IDT77252]
       default [y] if [NET && NETDEVICES && ATM && ATM_IDT77252]
       inherited [NET && NETDEVICES && ATM && ATM_IDT77252]
      }
     }
     config ATM_AMBASSADOR tristate {
      prompt "Madge Ambassador (Collage PCI 155 Server)" if [NET && NETDEVICES && PCI && ATM]
      depends on [PCI && ATM]
      select BITREVERSE if [NET && NETDEVICES && PCI && ATM]
      inherited [NET && NETDEVICES && PCI && ATM]
      config ATM_AMBASSADOR_DEBUG boolean {
       prompt "Enable debugging messages" if [NET && NETDEVICES && ATM && ATM_AMBASSADOR]
       depends on [ATM_AMBASSADOR]
       inherited [NET && NETDEVICES && ATM && ATM_AMBASSADOR]
      }
     }
     config ATM_HORIZON tristate {
      prompt "Madge Horizon [Ultra] (Collage PCI 25 and Collage PCI 155 Client)" if [NET && NETDEVICES && PCI && ATM]
      depends on [PCI && ATM]
      inherited [NET && NETDEVICES && PCI && ATM]
      config ATM_HORIZON_DEBUG boolean {
       prompt "Enable debugging messages" if [NET && NETDEVICES && ATM && ATM_HORIZON]
       depends on [ATM_HORIZON]
       inherited [NET && NETDEVICES && ATM && ATM_HORIZON]
      }
     }
     config ATM_IA tristate {
      prompt "Interphase ATM PCI x575/x525/x531" if [NET && NETDEVICES && PCI && ATM && !64BIT]
      depends on [PCI && ATM && !64BIT]
      inherited [NET && NETDEVICES && PCI && ATM && !64BIT]
      config ATM_IA_DEBUG boolean {
       prompt "Enable debugging messages" if [NET && NETDEVICES && ATM && ATM_IA]
       depends on [ATM_IA]
       inherited [NET && NETDEVICES && ATM && ATM_IA]
      }
     }
     config ATM_FORE200E_MAYBE tristate {
      prompt "FORE Systems 200E-series" if [NET && NETDEVICES && (PCI || SBUS) && ATM]
      depends on [(PCI || SBUS) && ATM]
      inherited [NET && NETDEVICES && (PCI || SBUS) && ATM]
      config ATM_FORE200E_PCA boolean {
       prompt "PCA-200E support" if [NET && NETDEVICES && ATM && ATM_FORE200E_MAYBE && PCI]
       depends on [ATM_FORE200E_MAYBE && PCI]
       inherited [NET && NETDEVICES && ATM && ATM_FORE200E_MAYBE && PCI]
       config ATM_FORE200E_PCA_DEFAULT_FW boolean {
        prompt "Use default PCA-200E firmware (normally enabled)" if [NET && NETDEVICES && ATM && ATM_FORE200E_PCA]
        depends on [ATM_FORE200E_PCA]
        inherited [NET && NETDEVICES && ATM && ATM_FORE200E_PCA]
        config ATM_FORE200E_PCA_FW string {
         prompt "Pathname of user-supplied binary firmware" if [NET && NETDEVICES && ATM && ATM_FORE200E_PCA && !ATM_FORE200E_PCA_DEFAULT_FW]
         depends on [ATM_FORE200E_PCA && !ATM_FORE200E_PCA_DEFAULT_FW]
         default [""] if [NET && NETDEVICES && ATM && ATM_FORE200E_PCA && !ATM_FORE200E_PCA_DEFAULT_FW]
         inherited [NET && NETDEVICES && ATM && ATM_FORE200E_PCA && !ATM_FORE200E_PCA_DEFAULT_FW]
        }
       }
      }
      config ATM_FORE200E_SBA boolean {
       prompt "SBA-200E support" if [NET && NETDEVICES && ATM && ATM_FORE200E_MAYBE && SBUS]
       depends on [ATM_FORE200E_MAYBE && SBUS]
       inherited [NET && NETDEVICES && ATM && ATM_FORE200E_MAYBE && SBUS]
       config ATM_FORE200E_SBA_DEFAULT_FW boolean {
        prompt "Use default SBA-200E firmware (normally enabled)" if [NET && NETDEVICES && ATM && ATM_FORE200E_SBA]
        depends on [ATM_FORE200E_SBA]
        inherited [NET && NETDEVICES && ATM && ATM_FORE200E_SBA]
        config ATM_FORE200E_SBA_FW string {
         prompt "Pathname of user-supplied binary firmware" if [NET && NETDEVICES && ATM && ATM_FORE200E_SBA && !ATM_FORE200E_SBA_DEFAULT_FW]
         depends on [ATM_FORE200E_SBA && !ATM_FORE200E_SBA_DEFAULT_FW]
         default [""] if [NET && NETDEVICES && ATM && ATM_FORE200E_SBA && !ATM_FORE200E_SBA_DEFAULT_FW]
         inherited [NET && NETDEVICES && ATM && ATM_FORE200E_SBA && !ATM_FORE200E_SBA_DEFAULT_FW]
        }
       }
      }
     }
     config ATM_FORE200E_USE_TASKLET boolean {
      prompt "Defer interrupt work to a tasklet" if [NET && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
      depends on [(PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
      default [n] if [NET && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
      inherited [NET && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
     }
     config ATM_FORE200E_TX_RETRY integer {
      prompt "Maximum number of tx retries" if [NET && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
      depends on [(PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
      default [16] if [NET && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
      inherited [NET && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
     }
     config ATM_FORE200E_DEBUG integer {
      prompt "Debugging level (0-3)" if [NET && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
      depends on [(PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
      default [0] if [NET && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
      inherited [NET && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
     }
     config ATM_FORE200E tristate {
      depends on [(PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
      default [m] if [NET && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA) && ATM_FORE200E_MAYBE!="y"]
      default [y] if [NET && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA) && ATM_FORE200E_MAYBE="y"]
      inherited [NET && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
     }
     config ATM_HE tristate {
      prompt "ForeRunner HE Series" if [NET && NETDEVICES && PCI && ATM]
      depends on [PCI && ATM]
      inherited [NET && NETDEVICES && PCI && ATM]
      config ATM_HE_USE_SUNI boolean {
       prompt "Use S/UNI PHY driver" if [NET && NETDEVICES && ATM && ATM_HE]
       depends on [ATM_HE]
       inherited [NET && NETDEVICES && ATM && ATM_HE]
      }
     }
    }
    menu "S/390 network device drivers" {
     depends on [NET && NETDEVICES && S390]
     config LCS tristate {
      prompt "Lan Channel Station Interface" if [NET && S390 && NETDEVICES && (NET_ETHERNET || TR || FDDI)]
      depends on [NETDEVICES && (NET_ETHERNET || TR || FDDI)]
      inherited [NET && S390 && NETDEVICES && (NET_ETHERNET || TR || FDDI)]
     }
     config CTC tristate {
      prompt "CTC device support" if [NET && S390 && NETDEVICES]
      depends on [NETDEVICES]
      inherited [NET && S390 && NETDEVICES]
     }
     config IUCV tristate {
      prompt "IUCV support (VM only)" if [NET && NETDEVICES && S390]
      inherited [NET && NETDEVICES && S390]
      config NETIUCV tristate {
       prompt "IUCV network device support (VM only)" if [NET && S390 && IUCV && NETDEVICES]
       depends on [IUCV && NETDEVICES]
       inherited [NET && S390 && IUCV && NETDEVICES]
      }
      config SMSGIUCV tristate {
       prompt "IUCV special message support (VM only)" if [NET && NETDEVICES && S390 && IUCV]
       depends on [IUCV]
       inherited [NET && NETDEVICES && S390 && IUCV]
      }
     }
     config CLAW tristate {
      prompt "CLAW device support" if [NET && S390 && NETDEVICES]
      depends on [NETDEVICES]
      inherited [NET && S390 && NETDEVICES]
     }
     config QETH tristate {
      prompt "Gigabit Ethernet device support" if [NET && S390 && NETDEVICES && IP_MULTICAST && QDIO]
      depends on [NETDEVICES && IP_MULTICAST && QDIO]
      inherited [NET && S390 && NETDEVICES && IP_MULTICAST && QDIO]
     }
     config QETH_IPV6 boolean {
      prompt "IPv6 support for gigabit ethernet" if [NET && NETDEVICES && S390 && (QETH="IPV6" || QETH && IPV6="y")]
      depends on [QETH="IPV6" || QETH && IPV6="y"]
      inherited [NET && NETDEVICES && S390 && (QETH="IPV6" || QETH && IPV6="y")]
     }
     config QETH_VLAN boolean {
      prompt "VLAN support for gigabit ethernet" if [NET && NETDEVICES && S390 && (QETH="VLAN_8021Q" || QETH && VLAN_8021Q="y")]
      depends on [QETH="VLAN_8021Q" || QETH && VLAN_8021Q="y"]
      inherited [NET && NETDEVICES && S390 && (QETH="VLAN_8021Q" || QETH && VLAN_8021Q="y")]
     }
     config CCWGROUP tristate {
      default [LCS || CTC || QETH] if [NET && NETDEVICES && S390]
      inherited [NET && NETDEVICES && S390]
     }
    }
    config ISERIES_VETH tristate {
     prompt "iSeries Virtual Ethernet driver support" if [NET && NETDEVICES && PPC_ISERIES]
     depends on [PPC_ISERIES]
     inherited [NET && NETDEVICES && PPC_ISERIES]
    }
    config RIONET tristate {
     prompt "RapidIO Ethernet over messaging driver support" if [NET && NETDEVICES && RAPIDIO]
     depends on [RAPIDIO]
     inherited [NET && NETDEVICES && RAPIDIO]
     config RIONET_TX_SIZE integer {
      prompt "Number of outbound queue entries" if [NET && NETDEVICES && RIONET]
      depends on [RIONET]
      default [128] if [NET && NETDEVICES && RIONET]
      inherited [NET && NETDEVICES && RIONET]
     }
     config RIONET_RX_SIZE integer {
      prompt "Number of inbound queue entries" if [NET && NETDEVICES && RIONET]
      depends on [RIONET]
      default [128] if [NET && NETDEVICES && RIONET]
      inherited [NET && NETDEVICES && RIONET]
     }
    }
    config FDDI boolean {
     prompt "FDDI driver support" if [NET && NETDEVICES && (PCI || EISA)]
     depends on [PCI || EISA]
     inherited [NET && NETDEVICES && (PCI || EISA)]
     config DEFXX tristate {
      prompt "Digital DEFEA and DEFPA adapter support" if [NET && NETDEVICES && FDDI && (PCI || EISA)]
      depends on [FDDI && (PCI || EISA)]
      inherited [NET && NETDEVICES && FDDI && (PCI || EISA)]
     }
     config SKFP tristate {
      prompt "SysKonnect FDDI PCI support" if [NET && NETDEVICES && FDDI && PCI]
      depends on [FDDI && PCI]
      inherited [NET && NETDEVICES && FDDI && PCI]
     }
    }
    config HIPPI boolean {
     prompt "HIPPI driver support (EXPERIMENTAL)" if [NET && NETDEVICES && EXPERIMENTAL && INET && PCI]
     depends on [EXPERIMENTAL && INET && PCI]
     inherited [NET && NETDEVICES && EXPERIMENTAL && INET && PCI]
     config ROADRUNNER tristate {
      prompt "Essential RoadRunner HIPPI PCI adapter support (EXPERIMENTAL)" if [NET && NETDEVICES && HIPPI && PCI]
      depends on [HIPPI && PCI]
      inherited [NET && NETDEVICES && HIPPI && PCI]
      config ROADRUNNER_LARGE_RINGS boolean {
       prompt "Use large TX/RX rings (EXPERIMENTAL)" if [NET && NETDEVICES && ROADRUNNER]
       depends on [ROADRUNNER]
       inherited [NET && NETDEVICES && ROADRUNNER]
      }
     }
    }
    config PLIP tristate {
     prompt "PLIP (parallel port) support" if [NET && NETDEVICES && PARPORT]
     depends on [PARPORT]
     inherited [NET && NETDEVICES && PARPORT]
    }
    config PPP tristate {
     prompt "PPP (point-to-point protocol) support" if [NET && NETDEVICES]
     select SLHC if [NET && NETDEVICES]
     inherited [NET && NETDEVICES]
     config PPP_MULTILINK boolean {
      prompt "PPP multilink support (EXPERIMENTAL)" if [NET && NETDEVICES && PPP && EXPERIMENTAL]
      depends on [PPP && EXPERIMENTAL]
      inherited [NET && NETDEVICES && PPP && EXPERIMENTAL]
     }
     config PPP_FILTER boolean {
      prompt "PPP filtering" if [NET && NETDEVICES && PPP]
      depends on [PPP]
      inherited [NET && NETDEVICES && PPP]
     }
     config PPP_ASYNC tristate {
      prompt "PPP support for async serial ports" if [NET && NETDEVICES && PPP]
      depends on [PPP]
      select CRC_CCITT if [NET && NETDEVICES && PPP]
      inherited [NET && NETDEVICES && PPP]
     }
     config PPP_SYNC_TTY tristate {
      prompt "PPP support for sync tty ports" if [NET && NETDEVICES && PPP]
      depends on [PPP]
      inherited [NET && NETDEVICES && PPP]
     }
     config PPP_DEFLATE tristate {
      prompt "PPP Deflate compression" if [NET && NETDEVICES && PPP]
      depends on [PPP]
      select ZLIB_INFLATE if [NET && NETDEVICES && PPP]
      select ZLIB_DEFLATE if [NET && NETDEVICES && PPP]
      inherited [NET && NETDEVICES && PPP]
     }
     config PPP_BSDCOMP tristate {
      prompt "PPP BSD-Compress compression" if [NET && NETDEVICES && PPP]
      depends on [PPP]
      inherited [NET && NETDEVICES && PPP]
     }
     config PPP_MPPE tristate {
      prompt "PPP MPPE compression (encryption) (EXPERIMENTAL)" if [NET && NETDEVICES && PPP && EXPERIMENTAL]
      depends on [PPP && EXPERIMENTAL]
      select CRYPTO if [NET && NETDEVICES && PPP && EXPERIMENTAL]
      select CRYPTO_SHA1 if [NET && NETDEVICES && PPP && EXPERIMENTAL]
      select CRYPTO_ARC4 if [NET && NETDEVICES && PPP && EXPERIMENTAL]
      select CRYPTO_ECB if [NET && NETDEVICES && PPP && EXPERIMENTAL]
      inherited [NET && NETDEVICES && PPP && EXPERIMENTAL]
     }
     config PPPOE tristate {
      prompt "PPP over Ethernet (EXPERIMENTAL)" if [NET && NETDEVICES && EXPERIMENTAL && PPP]
      depends on [EXPERIMENTAL && PPP]
      inherited [NET && NETDEVICES && EXPERIMENTAL && PPP]
     }
     config PPPOATM tristate {
      prompt "PPP over ATM" if [NET && NETDEVICES && ATM && PPP]
      depends on [ATM && PPP]
      inherited [NET && NETDEVICES && ATM && PPP]
     }
    }
    config SLIP tristate {
     prompt "SLIP (serial line) support" if [NET && NETDEVICES]
     inherited [NET && NETDEVICES]
     config SLIP_COMPRESSED boolean {
      prompt "CSLIP compressed headers" if [NET && NETDEVICES && SLIP]
      depends on [SLIP]
      select SLHC if [NET && NETDEVICES && SLIP]
      inherited [NET && NETDEVICES && SLIP]
     }
    }
    config SLHC tristate {
     inherited [NET && NETDEVICES]
    }
    config SLIP_SMART boolean {
     prompt "Keepalive and linefill" if [NET && NETDEVICES && SLIP]
     depends on [SLIP]
     inherited [NET && NETDEVICES && SLIP]
    }
    config SLIP_MODE_SLIP6 boolean {
     prompt "Six bit SLIP encapsulation" if [NET && NETDEVICES && SLIP]
     depends on [SLIP]
     inherited [NET && NETDEVICES && SLIP]
    }
    config NET_FC boolean {
     prompt "Fibre Channel driver support" if [NET && NETDEVICES && SCSI && PCI]
     depends on [SCSI && PCI]
     inherited [NET && NETDEVICES && SCSI && PCI]
    }
    config SHAPER tristate {
     prompt "Traffic Shaper (OBSOLETE)" if [NET && NETDEVICES && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [NET && NETDEVICES && EXPERIMENTAL]
    }
    config NETCONSOLE tristate {
     prompt "Network console logging support (EXPERIMENTAL)" if [NET && NETDEVICES && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [NET && NETDEVICES && EXPERIMENTAL]
    }
   }
  }
  config NETPOLL boolean {
   default [NETCONSOLE] if [NET]
   inherited [NET]
  }
  config NETPOLL_RX boolean {
   prompt "Netpoll support for trapping incoming packets" if [NET && NETPOLL]
   default [n] if [NET && NETPOLL]
   depends on [NETPOLL]
   inherited [NET && NETPOLL]
  }
  config NETPOLL_TRAP boolean {
   prompt "Netpoll traffic trapping" if [NET && NETPOLL]
   default [n] if [NET && NETPOLL]
   depends on [NETPOLL]
   inherited [NET && NETPOLL]
  }
  config NET_POLL_CONTROLLER boolean {
   default [NETPOLL] if [NET]
   inherited [NET]
  }
 }
 menu "ISDN subsystem" {
  config ISDN tristate {
   prompt "ISDN support" if [NET]
   depends on [NET]
   inherited [NET]
   menu "Old ISDN4Linux" {
    depends on [NET && ISDN]
    config ISDN_I4L tristate {
     prompt "Old ISDN4Linux (obsolete)" if [NET && ISDN]
     inherited [NET && ISDN]
     if [NET && ISDN && ISDN_I4L] {
      config ISDN_PPP boolean {
       prompt "Support synchronous PPP" if [NET && ISDN && ISDN_I4L && INET]
       depends on [INET]
       select SLHC if [NET && ISDN && ISDN_I4L && INET]
       inherited [NET && ISDN && ISDN_I4L && INET]
       config ISDN_PPP_VJ boolean {
        prompt "Use VJ-compression with synchronous PPP" if [NET && ISDN && ISDN_I4L && ISDN_PPP]
        depends on [ISDN_PPP]
        inherited [NET && ISDN && ISDN_I4L && ISDN_PPP]
       }
       config ISDN_MPP boolean {
        prompt "Support generic MP (RFC 1717)" if [NET && ISDN && ISDN_I4L && ISDN_PPP]
        depends on [ISDN_PPP]
        inherited [NET && ISDN && ISDN_I4L && ISDN_PPP]
       }
       config IPPP_FILTER boolean {
        prompt "Filtering for synchronous PPP" if [NET && ISDN && ISDN_I4L && ISDN_PPP]
        depends on [ISDN_PPP]
        inherited [NET && ISDN && ISDN_I4L && ISDN_PPP]
       }
       config ISDN_PPP_BSDCOMP tristate {
        prompt "Support BSD compression" if [NET && ISDN && ISDN_I4L && ISDN_PPP]
        depends on [ISDN_PPP]
        inherited [NET && ISDN && ISDN_I4L && ISDN_PPP]
       }
      }
      config ISDN_AUDIO boolean {
       prompt "Support audio via ISDN" if [NET && ISDN && ISDN_I4L]
       inherited [NET && ISDN && ISDN_I4L]
       config ISDN_TTY_FAX boolean {
        prompt "Support AT-Fax Class 1 and 2 commands" if [NET && ISDN && ISDN_I4L && ISDN_AUDIO]
        depends on [ISDN_AUDIO]
        inherited [NET && ISDN && ISDN_I4L && ISDN_AUDIO]
       }
      }
      config ISDN_X25 boolean {
       prompt "X.25 PLP on top of ISDN" if [NET && ISDN && ISDN_I4L && X25]
       depends on [X25]
       inherited [NET && ISDN && ISDN_I4L && X25]
      }
      menu "ISDN feature submodules" {
       depends on [NET && ISDN_I4L && ISDN]
       config ISDN_DRV_LOOP tristate {
        prompt "isdnloop support" if [NET && ISDN_I4L && ISDN && BROKEN_ON_SMP]
        depends on [BROKEN_ON_SMP]
        inherited [NET && ISDN_I4L && ISDN && BROKEN_ON_SMP]
       }
       config ISDN_DIVERSION tristate {
        prompt "Support isdn diversion services" if [NET && ISDN && ISDN_I4L]
        depends on [ISDN && ISDN_I4L]
        inherited [NET && ISDN && ISDN_I4L]
       }
      }
      menu "Passive cards" {
       depends on [NET && ISDN && ISDN_I4L]
       config ISDN_DRV_HISAX tristate {
        prompt "HiSax SiemensChipSet driver support" if [NET && ISDN && ISDN_I4L]
        select CRC_CCITT if [NET && ISDN && ISDN_I4L]
        inherited [NET && ISDN && ISDN_I4L]
        if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX!="n"] {
         config HISAX_EURO boolean {
          prompt "HiSax Support for EURO/DSS1" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
          config DE_AOC boolean {
           prompt "Support for german chargeinfo" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
           depends on [HISAX_EURO]
           inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
          }
          config HISAX_NO_SENDCOMPLETE boolean {
           prompt "Disable sending complete" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
           depends on [HISAX_EURO]
           inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
          }
          config HISAX_NO_LLC boolean {
           prompt "Disable sending low layer compatibility" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
           depends on [HISAX_EURO]
           inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
          }
          config HISAX_NO_KEYPAD boolean {
           prompt "Disable keypad protocol option" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
           depends on [HISAX_EURO]
           inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
          }
         }
         config HISAX_1TR6 boolean {
          prompt "HiSax Support for german 1TR6" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         }
         config HISAX_NI1 boolean {
          prompt "HiSax Support for US NI1" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         }
         config HISAX_MAX_CARDS integer {
          prompt "Maximum number of cards supported by HiSax" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
          default [8] if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         }
         config HISAX_16_0 boolean {
          prompt "Teles 16.0/8.0" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
          depends on [ISA]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
         }
         config HISAX_16_3 boolean {
          prompt "Teles 16.3 or PNP or PCMCIA" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         }
         config HISAX_TELESPCI boolean {
          prompt "Teles PCI" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
          depends on [PCI && (BROKEN || !(SPARC || PPC || PARISC || M68K || MIPS && !CPU_LITTLE_ENDIAN || FRV))]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
         }
         config HISAX_S0BOX boolean {
          prompt "Teles S0Box" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         }
         config HISAX_AVM_A1 boolean {
          prompt "AVM A1 (Fritz)" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
          depends on [ISA]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
         }
         config HISAX_FRITZPCI boolean {
          prompt "AVM PnP/PCI (Fritz!PnP/PCI)" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && (BROKEN || !PPC64)]
          depends on [BROKEN || !PPC64]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && (BROKEN || !PPC64)]
         }
         config HISAX_AVM_A1_PCMCIA boolean {
          prompt "AVM A1 PCMCIA (Fritz)" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
          depends on [HISAX_AVM_A1_CS]
          default [y] if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_AVM_A1_CS]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         }
         config HISAX_ELSA boolean {
          prompt "Elsa cards" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         }
         config HISAX_IX1MICROR2 boolean {
          prompt "ITK ix1-micro Revision 2" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
          depends on [ISA]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
         }
         config HISAX_DIEHLDIVA boolean {
          prompt "Eicon.Diehl Diva cards" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         }
         config HISAX_ASUSCOM boolean {
          prompt "ASUSCOM ISA cards" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
          depends on [ISA]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
         }
         config HISAX_TELEINT boolean {
          prompt "TELEINT cards" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
          depends on [ISA]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
         }
         config HISAX_HFCS boolean {
          prompt "HFC-S based cards" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
          depends on [ISA]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
         }
         config HISAX_SEDLBAUER boolean {
          prompt "Sedlbauer cards" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         }
         config HISAX_SPORTSTER boolean {
          prompt "USR Sportster internal TA" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
          depends on [ISA]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
         }
         config HISAX_MIC boolean {
          prompt "MIC card" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
          depends on [ISA]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
         }
         config HISAX_NETJET boolean {
          prompt "NETjet card" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
          depends on [PCI && (BROKEN || !(SPARC || PPC || PARISC || M68K || MIPS && !CPU_LITTLE_ENDIAN || FRV))]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
         }
         config HISAX_NETJET_U boolean {
          prompt "NETspider U card" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
          depends on [PCI && (BROKEN || !(SPARC || PPC || PARISC || M68K || MIPS && !CPU_LITTLE_ENDIAN || FRV))]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
         }
         config HISAX_NICCY boolean {
          prompt "Niccy PnP/PCI card" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         }
         config HISAX_ISURF boolean {
          prompt "Siemens I-Surf card" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
          depends on [ISA]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
         }
         config HISAX_HSTSAPHIR boolean {
          prompt "HST Saphir card" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
          depends on [ISA]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
         }
         config HISAX_BKM_A4T boolean {
          prompt "Telekom A4T card" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI]
          depends on [PCI]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI]
         }
         config HISAX_SCT_QUADRO boolean {
          prompt "Scitel Quadro card" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI]
          depends on [PCI]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI]
         }
         config HISAX_GAZEL boolean {
          prompt "Gazel cards" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         }
         config HISAX_HFC_PCI boolean {
          prompt "HFC PCI-Bus cards" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
          depends on [PCI && (BROKEN || !(SPARC || PPC || PARISC || M68K || MIPS && !CPU_LITTLE_ENDIAN || FRV))]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
         }
         config HISAX_W6692 boolean {
          prompt "Winbond W6692 based cards" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI]
          depends on [PCI]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI]
         }
         config HISAX_HFC_SX boolean {
          prompt "HFC-S+, HFC-SP, HFC-PCMCIA cards" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         }
         config HISAX_ENTERNOW_PCI boolean {
          prompt "Formula-n enter:now PCI card" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_NETJET && PCI && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
          depends on [HISAX_NETJET && PCI && (BROKEN || !(SPARC || PPC || PARISC || M68K || MIPS && !CPU_LITTLE_ENDIAN || FRV))]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_NETJET && PCI && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
         }
        }
        if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX] {
         config HISAX_DEBUG boolean {
          prompt "HiSax debugging" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         }
         config HISAX_SEDLBAUER_CS tristate {
          prompt "Sedlbauer PCMCIA cards" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCMCIA && HISAX_SEDLBAUER]
          depends on [PCMCIA && HISAX_SEDLBAUER]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCMCIA && HISAX_SEDLBAUER]
         }
         config HISAX_ELSA_CS tristate {
          prompt "ELSA PCMCIA MicroLink cards" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCMCIA && HISAX_ELSA]
          depends on [PCMCIA && HISAX_ELSA]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCMCIA && HISAX_ELSA]
         }
         config HISAX_AVM_A1_CS tristate {
          prompt "AVM A1 PCMCIA cards" if [NET && ISDN && ISDN_I4L && PCMCIA && ISDN_DRV_HISAX]
          depends on [PCMCIA && ISDN_DRV_HISAX]
          inherited [NET && ISDN && ISDN_I4L && PCMCIA && ISDN_DRV_HISAX]
         }
         config HISAX_TELES_CS tristate {
          prompt "TELES PCMCIA cards" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCMCIA && HISAX_16_3]
          depends on [PCMCIA && HISAX_16_3]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCMCIA && HISAX_16_3]
         }
         config HISAX_ST5481 tristate {
          prompt "ST5481 USB ISDN modem (EXPERIMENTAL)" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && USB && EXPERIMENTAL]
          depends on [USB && EXPERIMENTAL]
          select CRC_CCITT if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && USB && EXPERIMENTAL]
          select BITREVERSE if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && USB && EXPERIMENTAL]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && USB && EXPERIMENTAL]
         }
         config HISAX_HFCUSB tristate {
          prompt "HFC USB based ISDN modems (EXPERIMENTAL)" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && USB && EXPERIMENTAL]
          depends on [USB && EXPERIMENTAL]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && USB && EXPERIMENTAL]
         }
         config HISAX_HFC4S8S tristate {
          prompt "HFC-4S/8S based ISDN cards (EXPERIMENTAL)" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && EXPERIMENTAL]
          depends on [EXPERIMENTAL]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && EXPERIMENTAL]
         }
         config HISAX_FRITZ_PCIPNP tristate {
          prompt "AVM Fritz!Card PCI/PCIv2/PnP support (EXPERIMENTAL)" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && EXPERIMENTAL]
          depends on [PCI && EXPERIMENTAL]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && EXPERIMENTAL]
         }
         config HISAX_HDLC boolean {
          depends on [HISAX_ST5481]
          default [y] if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_ST5481]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_ST5481]
         }
         config HISAX_AVM_A1_PCMCIA boolean {
          prompt "AVM A1 PCMCIA (Fritz)" if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX]
          depends on [HISAX_AVM_A1_CS]
          default [y] if [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_AVM_A1_CS]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_AVM_A1_CS]
         }
        }
       }
      }
      menu "Active cards" {
       depends on [NET && ISDN && ISDN_I4L]
       config ISDN_DRV_ICN tristate {
        prompt "ICN 2B and 4B support" if [NET && ISDN && ISDN_I4L && ISA]
        depends on [ISDN_I4L && ISA]
        inherited [NET && ISDN && ISDN_I4L && ISA]
       }
       config ISDN_DRV_PCBIT tristate {
        prompt "PCBIT-D support" if [NET && ISDN && ISDN_I4L && ISA && (BROKEN || X86)]
        depends on [ISDN_I4L && ISA && (BROKEN || X86)]
        inherited [NET && ISDN && ISDN_I4L && ISA && (BROKEN || X86)]
       }
       config ISDN_DRV_SC tristate {
        prompt "Spellcaster support" if [NET && ISDN && ISDN_I4L && ISA]
        depends on [ISDN_I4L && ISA]
        inherited [NET && ISDN && ISDN_I4L && ISA]
       }
       config ISDN_DRV_ACT2000 tristate {
        prompt "IBM Active 2000 support" if [NET && ISDN && ISDN_I4L && ISA]
        depends on [ISDN_I4L && ISA]
        inherited [NET && ISDN && ISDN_I4L && ISA]
       }
       config HYSDN tristate {
        prompt "Hypercope HYSDN cards (Champ, Ergo, Metro) support (module only)" if [NET && ISDN && ISDN_I4L && m && <choice> && PROC_FS && PCI && BROKEN_ON_SMP]
        depends on [m && PROC_FS && PCI && BROKEN_ON_SMP]
        inherited [NET && ISDN && ISDN_I4L && m && <choice> && PROC_FS && PCI && BROKEN_ON_SMP]
        config HYSDN_CAPI boolean {
         prompt "HYSDN CAPI 2.0 support" if [NET && ISDN && ISDN_I4L && HYSDN && ISDN_CAPI]
         depends on [HYSDN && ISDN_CAPI]
         inherited [NET && ISDN && ISDN_I4L && HYSDN && ISDN_CAPI]
        }
       }
      }
      menu "Siemens Gigaset" {
       depends on [NET && ISDN && ISDN_I4L]
       config ISDN_DRV_GIGASET tristate {
        prompt "Siemens Gigaset support (isdn)" if [NET && ISDN && ISDN_I4L]
        depends on [ISDN_I4L]
        select CRC_CCITT if [NET && ISDN && ISDN_I4L]
        select BITREVERSE if [NET && ISDN && ISDN_I4L]
        inherited [NET && ISDN && ISDN_I4L]
        if [NET && ISDN && ISDN_I4L && ISDN_DRV_GIGASET!="n"] {
         config GIGASET_BASE tristate {
          prompt "Gigaset base station support" if [NET && ISDN && ISDN_I4L && ISDN_DRV_GIGASET && USB]
          depends on [ISDN_DRV_GIGASET && USB]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_GIGASET && USB]
         }
         config GIGASET_M105 tristate {
          prompt "Gigaset M105 support" if [NET && ISDN && ISDN_I4L && ISDN_DRV_GIGASET && USB]
          depends on [ISDN_DRV_GIGASET && USB]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_GIGASET && USB]
         }
         config GIGASET_DEBUG boolean {
          prompt "Gigaset debugging" if [NET && ISDN && ISDN_I4L && ISDN_DRV_GIGASET]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_GIGASET]
         }
         config GIGASET_UNDOCREQ boolean {
          prompt "Support for undocumented USB requests" if [NET && ISDN && ISDN_I4L && ISDN_DRV_GIGASET]
          inherited [NET && ISDN && ISDN_I4L && ISDN_DRV_GIGASET]
         }
        }
       }
      }
     }
    }
   }
   config ISDN_CAPI tristate {
    prompt "CAPI2.0 support" if [ISDN]
    depends on [ISDN]
    inherited [ISDN]
    config ISDN_DRV_AVMB1_VERBOSE_REASON boolean {
     prompt "Verbose reason code reporting (kernel size +=7K)" if [ISDN_CAPI]
     depends on [ISDN_CAPI]
     inherited [ISDN_CAPI]
    }
    config ISDN_CAPI_MIDDLEWARE boolean {
     prompt "CAPI2.0 Middleware support (EXPERIMENTAL)" if [ISDN_CAPI && EXPERIMENTAL]
     depends on [ISDN_CAPI && EXPERIMENTAL]
     inherited [ISDN_CAPI && EXPERIMENTAL]
    }
    config ISDN_CAPI_CAPI20 tristate {
     prompt "CAPI2.0 /dev/capi support" if [ISDN_CAPI]
     depends on [ISDN_CAPI]
     inherited [ISDN_CAPI]
     config ISDN_CAPI_CAPIFS_BOOL boolean {
      prompt "CAPI2.0 filesystem support" if [ISDN_CAPI_MIDDLEWARE && ISDN_CAPI_CAPI20]
      depends on [ISDN_CAPI_MIDDLEWARE && ISDN_CAPI_CAPI20]
      inherited [ISDN_CAPI_MIDDLEWARE && ISDN_CAPI_CAPI20]
      config ISDN_CAPI_CAPIFS tristate {
       depends on [ISDN_CAPI_CAPIFS_BOOL]
       default [ISDN_CAPI_CAPI20] if [ISDN_CAPI_CAPIFS_BOOL]
       inherited [ISDN_CAPI_CAPIFS_BOOL]
      }
     }
    }
    config ISDN_CAPI_CAPIDRV tristate {
     prompt "CAPI2.0 capidrv interface support" if [ISDN_CAPI && ISDN_I4L]
     depends on [ISDN_CAPI && ISDN_I4L]
     inherited [ISDN_CAPI && ISDN_I4L]
    }
    menu "Active AVM cards" {
     depends on [NET && ISDN && ISDN_CAPI!="n"]
     config CAPI_AVM boolean {
      prompt "Support AVM cards" if [NET && ISDN && ISDN_CAPI]
      inherited [NET && ISDN && ISDN_CAPI]
      config ISDN_DRV_AVMB1_B1ISA tristate {
       prompt "AVM B1 ISA support" if [NET && ISDN && CAPI_AVM && ISDN_CAPI && ISA]
       depends on [CAPI_AVM && ISDN_CAPI && ISA]
       inherited [NET && ISDN && CAPI_AVM && ISDN_CAPI && ISA]
      }
      config ISDN_DRV_AVMB1_B1PCI tristate {
       prompt "AVM B1 PCI support" if [NET && ISDN && CAPI_AVM && ISDN_CAPI && PCI]
       depends on [CAPI_AVM && ISDN_CAPI && PCI]
       inherited [NET && ISDN && CAPI_AVM && ISDN_CAPI && PCI]
       config ISDN_DRV_AVMB1_B1PCIV4 boolean {
        prompt "AVM B1 PCI V4 support" if [NET && ISDN && ISDN_CAPI && ISDN_DRV_AVMB1_B1PCI]
        depends on [ISDN_DRV_AVMB1_B1PCI]
        inherited [NET && ISDN && ISDN_CAPI && ISDN_DRV_AVMB1_B1PCI]
       }
      }
      config ISDN_DRV_AVMB1_T1ISA tristate {
       prompt "AVM T1/T1-B ISA support" if [NET && ISDN && CAPI_AVM && ISDN_CAPI && ISA]
       depends on [CAPI_AVM && ISDN_CAPI && ISA]
       inherited [NET && ISDN && CAPI_AVM && ISDN_CAPI && ISA]
      }
      config ISDN_DRV_AVMB1_B1PCMCIA tristate {
       prompt "AVM B1/M1/M2 PCMCIA support" if [NET && ISDN && CAPI_AVM && ISDN_CAPI]
       depends on [CAPI_AVM && ISDN_CAPI]
       inherited [NET && ISDN && CAPI_AVM && ISDN_CAPI]
       config ISDN_DRV_AVMB1_AVM_CS tristate {
        prompt "AVM B1/M1/M2 PCMCIA cs module" if [NET && ISDN && ISDN_CAPI!="n" && ISDN_DRV_AVMB1_B1PCMCIA && PCMCIA]
        depends on [ISDN_DRV_AVMB1_B1PCMCIA && PCMCIA]
        inherited [NET && ISDN && ISDN_CAPI!="n" && ISDN_DRV_AVMB1_B1PCMCIA && PCMCIA]
       }
      }
      config ISDN_DRV_AVMB1_T1PCI tristate {
       prompt "AVM T1/T1-B PCI support" if [NET && ISDN && CAPI_AVM && ISDN_CAPI && PCI]
       depends on [CAPI_AVM && ISDN_CAPI && PCI]
       inherited [NET && ISDN && CAPI_AVM && ISDN_CAPI && PCI]
      }
      config ISDN_DRV_AVMB1_C4 tristate {
       prompt "AVM C4/C2 support" if [NET && ISDN && CAPI_AVM && ISDN_CAPI && PCI]
       depends on [CAPI_AVM && ISDN_CAPI && PCI]
       inherited [NET && ISDN && CAPI_AVM && ISDN_CAPI && PCI]
      }
     }
    }
    menu "Active Eicon DIVA Server cards" {
     depends on [NET && ISDN && ISDN_CAPI!="n"]
     config CAPI_EICON boolean {
      prompt "Support Eicon cards" if [NET && ISDN && ISDN_CAPI]
      inherited [NET && ISDN && ISDN_CAPI]
      config ISDN_DIVAS tristate {
       prompt "Support Eicon DIVA Server cards" if [NET && ISDN && ISDN_CAPI!="n" && CAPI_EICON && PROC_FS && PCI]
       depends on [CAPI_EICON && PROC_FS && PCI]
       inherited [NET && ISDN && ISDN_CAPI!="n" && CAPI_EICON && PROC_FS && PCI]
       config ISDN_DIVAS_BRIPCI boolean {
        prompt "DIVA Server BRI/PCI support" if [NET && ISDN && ISDN_CAPI && ISDN_DIVAS]
        depends on [ISDN_DIVAS]
        inherited [NET && ISDN && ISDN_CAPI && ISDN_DIVAS]
       }
       config ISDN_DIVAS_PRIPCI boolean {
        prompt "DIVA Server PRI/PCI support" if [NET && ISDN && ISDN_CAPI && ISDN_DIVAS]
        depends on [ISDN_DIVAS]
        inherited [NET && ISDN && ISDN_CAPI && ISDN_DIVAS]
       }
       config ISDN_DIVAS_DIVACAPI tristate {
        prompt "DIVA CAPI2.0 interface support" if [NET && ISDN && ISDN_DIVAS && ISDN_CAPI]
        depends on [ISDN_DIVAS && ISDN_CAPI]
        inherited [NET && ISDN && ISDN_DIVAS && ISDN_CAPI]
       }
       config ISDN_DIVAS_USERIDI tristate {
        prompt "DIVA User-IDI interface support" if [NET && ISDN && ISDN_CAPI!="n" && ISDN_DIVAS]
        depends on [ISDN_DIVAS]
        inherited [NET && ISDN && ISDN_CAPI!="n" && ISDN_DIVAS]
       }
       config ISDN_DIVAS_MAINT tristate {
        prompt "DIVA Maint driver support" if [NET && ISDN && ISDN_CAPI!="n" && ISDN_DIVAS && m && <choice>]
        depends on [ISDN_DIVAS && m]
        inherited [NET && ISDN && ISDN_CAPI!="n" && ISDN_DIVAS && m && <choice>]
       }
      }
     }
    }
   }
  }
 }
 menu "Telephony Support" {
  config PHONE tristate {
   prompt "Linux telephony support" if []
   config PHONE_IXJ tristate {
    prompt "QuickNet Internet LineJack/PhoneJack support" if [PHONE]
    depends on [PHONE]
    inherited [PHONE]
    config PHONE_IXJ_PCMCIA tristate {
     prompt "QuickNet Internet LineJack/PhoneJack PCMCIA support" if [PHONE_IXJ && PCMCIA]
     depends on [PHONE_IXJ && PCMCIA]
     inherited [PHONE_IXJ && PCMCIA]
    }
   }
  }
 }
 menu "Input device support" {
  config INPUT tristate {
   prompt "Generic input layer (needed for keyboard, mouse, ...)" if [EMBEDDED]
   default [y] if []
   if [INPUT] {
    config INPUT_FF_MEMLESS tristate {
     prompt "Support for memoryless force-feedback devices" if [INPUT]
     default [n] if [INPUT]
     inherited [INPUT]
    }
    config INPUT_MOUSEDEV tristate {
     prompt "Mouse interface" if [INPUT && EMBEDDED]
     default [y] if [INPUT]
     inherited [INPUT]
     config INPUT_MOUSEDEV_PSAUX boolean {
      prompt "Provide legacy /dev/psaux device" if [INPUT && INPUT_MOUSEDEV]
      default [y] if [INPUT && INPUT_MOUSEDEV]
      depends on [INPUT_MOUSEDEV]
      inherited [INPUT && INPUT_MOUSEDEV]
     }
     config INPUT_MOUSEDEV_SCREEN_X integer {
      prompt "Horizontal screen resolution" if [INPUT && INPUT_MOUSEDEV]
      depends on [INPUT_MOUSEDEV]
      default [1024] if [INPUT && INPUT_MOUSEDEV]
      inherited [INPUT && INPUT_MOUSEDEV]
     }
     config INPUT_MOUSEDEV_SCREEN_Y integer {
      prompt "Vertical screen resolution" if [INPUT && INPUT_MOUSEDEV]
      depends on [INPUT_MOUSEDEV]
      default [768] if [INPUT && INPUT_MOUSEDEV]
      inherited [INPUT && INPUT_MOUSEDEV]
     }
    }
    config INPUT_JOYDEV tristate {
     prompt "Joystick interface" if [INPUT]
     inherited [INPUT]
    }
    config INPUT_TSDEV tristate {
     prompt "Touchscreen interface" if [INPUT]
     inherited [INPUT]
     config INPUT_TSDEV_SCREEN_X integer {
      prompt "Horizontal screen resolution" if [INPUT && INPUT_TSDEV]
      depends on [INPUT_TSDEV]
      default [240] if [INPUT && INPUT_TSDEV]
      inherited [INPUT && INPUT_TSDEV]
     }
     config INPUT_TSDEV_SCREEN_Y integer {
      prompt "Vertical screen resolution" if [INPUT && INPUT_TSDEV]
      depends on [INPUT_TSDEV]
      default [320] if [INPUT && INPUT_TSDEV]
      inherited [INPUT && INPUT_TSDEV]
     }
    }
    config INPUT_EVDEV tristate {
     prompt "Event interface" if [INPUT]
     inherited [INPUT]
    }
    config INPUT_EVBUG tristate {
     prompt "Event debugging" if [INPUT]
     inherited [INPUT]
    }
    menuconfig INPUT_KEYBOARD boolean {
     prompt "Keyboards" if [INPUT && (EMBEDDED || !X86)]
     default [y] if [INPUT]
     inherited [INPUT]
     if [INPUT && INPUT_KEYBOARD] {
      config KEYBOARD_ATKBD tristate {
       prompt "AT keyboard" if [INPUT && INPUT_KEYBOARD && (EMBEDDED || !X86_PC)]
       default [y] if [INPUT && INPUT_KEYBOARD]
       select SERIO if [INPUT && INPUT_KEYBOARD]
       select SERIO_LIBPS2 if [INPUT && INPUT_KEYBOARD]
       select SERIO_I8042 if [INPUT && INPUT_KEYBOARD && X86_PC]
       select SERIO_GSCPS2 if [INPUT && INPUT_KEYBOARD && GSC]
       inherited [INPUT && INPUT_KEYBOARD]
       config KEYBOARD_ATKBD_HP_KEYCODES boolean {
        prompt "Use HP keyboard scancodes" if [INPUT && INPUT_KEYBOARD && PARISC && KEYBOARD_ATKBD]
        depends on [PARISC && KEYBOARD_ATKBD]
        default [y] if [INPUT && INPUT_KEYBOARD && PARISC && KEYBOARD_ATKBD]
        inherited [INPUT && INPUT_KEYBOARD && PARISC && KEYBOARD_ATKBD]
        config KEYBOARD_ATKBD_RDI_KEYCODES boolean {
         prompt "Use PrecisionBook keyboard scancodes" if [INPUT && INPUT_KEYBOARD && KEYBOARD_ATKBD_HP_KEYCODES]
         depends on [KEYBOARD_ATKBD_HP_KEYCODES]
         default [n] if [INPUT && INPUT_KEYBOARD && KEYBOARD_ATKBD_HP_KEYCODES]
         inherited [INPUT && INPUT_KEYBOARD && KEYBOARD_ATKBD_HP_KEYCODES]
        }
       }
      }
      config KEYBOARD_SUNKBD tristate {
       prompt "Sun Type 4 and Type 5 keyboard" if [INPUT && INPUT_KEYBOARD]
       select SERIO if [INPUT && INPUT_KEYBOARD]
       inherited [INPUT && INPUT_KEYBOARD]
      }
      config KEYBOARD_LKKBD tristate {
       prompt "DECstation/VAXstation LK201/LK401 keyboard" if [INPUT && INPUT_KEYBOARD]
       select SERIO if [INPUT && INPUT_KEYBOARD]
       inherited [INPUT && INPUT_KEYBOARD]
      }
      config KEYBOARD_LOCOMO tristate {
       prompt "LoCoMo Keyboard Support" if [INPUT && SHARP_LOCOMO && INPUT_KEYBOARD]
       depends on [SHARP_LOCOMO && INPUT_KEYBOARD]
       inherited [INPUT && SHARP_LOCOMO && INPUT_KEYBOARD]
      }
      config KEYBOARD_XTKBD tristate {
       prompt "XT keyboard" if [INPUT && INPUT_KEYBOARD]
       select SERIO if [INPUT && INPUT_KEYBOARD]
       inherited [INPUT && INPUT_KEYBOARD]
      }
      config KEYBOARD_NEWTON tristate {
       prompt "Newton keyboard" if [INPUT && INPUT_KEYBOARD]
       select SERIO if [INPUT && INPUT_KEYBOARD]
       inherited [INPUT && INPUT_KEYBOARD]
      }
      config KEYBOARD_STOWAWAY tristate {
       prompt "Stowaway keyboard" if [INPUT && INPUT_KEYBOARD]
       select SERIO if [INPUT && INPUT_KEYBOARD]
       inherited [INPUT && INPUT_KEYBOARD]
      }
      config KEYBOARD_CORGI tristate {
       prompt "Corgi keyboard" if [INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
       depends on [PXA_SHARPSL]
       default [y] if [INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
       inherited [INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
      }
      config KEYBOARD_SPITZ tristate {
       prompt "Spitz keyboard" if [INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
       depends on [PXA_SHARPSL]
       default [y] if [INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
       inherited [INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
      }
      config KEYBOARD_AMIGA tristate {
       prompt "Amiga keyboard" if [INPUT && INPUT_KEYBOARD && AMIGA]
       depends on [AMIGA]
       inherited [INPUT && INPUT_KEYBOARD && AMIGA]
      }
      config KEYBOARD_HIL_OLD tristate {
       prompt "HP HIL keyboard support (simple driver)" if [INPUT && INPUT_KEYBOARD && (GSC || HP300)]
       depends on [GSC || HP300]
       default [y] if [INPUT && INPUT_KEYBOARD && (GSC || HP300)]
       inherited [INPUT && INPUT_KEYBOARD && (GSC || HP300)]
      }
      config KEYBOARD_HIL tristate {
       prompt "HP HIL keyboard support" if [INPUT && INPUT_KEYBOARD && (GSC || HP300)]
       depends on [GSC || HP300]
       default [y] if [INPUT && INPUT_KEYBOARD && (GSC || HP300)]
       select HP_SDC if [INPUT && INPUT_KEYBOARD && (GSC || HP300)]
       select HIL_MLC if [INPUT && INPUT_KEYBOARD && (GSC || HP300)]
       select SERIO if [INPUT && INPUT_KEYBOARD && (GSC || HP300)]
       inherited [INPUT && INPUT_KEYBOARD && (GSC || HP300)]
      }
      config KEYBOARD_OMAP tristate {
       prompt "TI OMAP keypad support" if [INPUT && INPUT_KEYBOARD && (ARCH_OMAP1 || ARCH_OMAP2)]
       depends on [ARCH_OMAP1 || ARCH_OMAP2]
       inherited [INPUT && INPUT_KEYBOARD && (ARCH_OMAP1 || ARCH_OMAP2)]
      }
      config KEYBOARD_AAED2000 tristate {
       prompt "AAED-2000 keyboard" if [INPUT && INPUT_KEYBOARD && MACH_AAED2000]
       depends on [MACH_AAED2000]
       default [y] if [INPUT && INPUT_KEYBOARD && MACH_AAED2000]
       inherited [INPUT && INPUT_KEYBOARD && MACH_AAED2000]
      }
     }
    }
    menuconfig INPUT_MOUSE boolean {
     prompt "Mouse" if [INPUT]
     default [y] if [INPUT]
     inherited [INPUT]
     if [INPUT && INPUT_MOUSE] {
      config MOUSE_PS2 tristate {
       prompt "PS/2 mouse" if [INPUT && INPUT_MOUSE]
       default [y] if [INPUT && INPUT_MOUSE]
       select SERIO if [INPUT && INPUT_MOUSE]
       select SERIO_LIBPS2 if [INPUT && INPUT_MOUSE]
       select SERIO_I8042 if [INPUT && INPUT_MOUSE && X86_PC]
       select SERIO_GSCPS2 if [INPUT && INPUT_MOUSE && GSC]
       inherited [INPUT && INPUT_MOUSE]
      }
      config MOUSE_SERIAL tristate {
       prompt "Serial mouse" if [INPUT && INPUT_MOUSE]
       select SERIO if [INPUT && INPUT_MOUSE]
       inherited [INPUT && INPUT_MOUSE]
      }
      config MOUSE_INPORT tristate {
       prompt "InPort/MS/ATIXL busmouse" if [INPUT && INPUT_MOUSE && ISA]
       depends on [ISA]
       inherited [INPUT && INPUT_MOUSE && ISA]
       config MOUSE_ATIXL boolean {
        prompt "ATI XL variant" if [INPUT && INPUT_MOUSE && MOUSE_INPORT]
        depends on [MOUSE_INPORT]
        inherited [INPUT && INPUT_MOUSE && MOUSE_INPORT]
       }
      }
      config MOUSE_LOGIBM tristate {
       prompt "Logitech busmouse" if [INPUT && INPUT_MOUSE && ISA]
       depends on [ISA]
       inherited [INPUT && INPUT_MOUSE && ISA]
      }
      config MOUSE_PC110PAD tristate {
       prompt "IBM PC110 touchpad" if [INPUT && INPUT_MOUSE && ISA]
       depends on [ISA]
       inherited [INPUT && INPUT_MOUSE && ISA]
      }
      config MOUSE_AMIGA tristate {
       prompt "Amiga mouse" if [INPUT && INPUT_MOUSE && AMIGA]
       depends on [AMIGA]
       inherited [INPUT && INPUT_MOUSE && AMIGA]
      }
      config MOUSE_RISCPC tristate {
       prompt "Acorn RiscPC mouse" if [INPUT && INPUT_MOUSE && ARCH_ACORN]
       depends on [ARCH_ACORN]
       inherited [INPUT && INPUT_MOUSE && ARCH_ACORN]
      }
      config MOUSE_VSXXXAA tristate {
       prompt "DEC VSXXX-AA/GA mouse and VSXXX-AB tablet" if [INPUT && INPUT_MOUSE]
       select SERIO if [INPUT && INPUT_MOUSE]
       inherited [INPUT && INPUT_MOUSE]
      }
      config MOUSE_HIL tristate {
       prompt "HIL pointers (mice etc)." if [INPUT && INPUT_MOUSE && (GSC || HP300)]
       depends on [GSC || HP300]
       select HP_SDC if [INPUT && INPUT_MOUSE && (GSC || HP300)]
       select HIL_MLC if [INPUT && INPUT_MOUSE && (GSC || HP300)]
       inherited [INPUT && INPUT_MOUSE && (GSC || HP300)]
      }
     }
    }
    menuconfig INPUT_JOYSTICK boolean {
     prompt "Joysticks" if [INPUT]
     inherited [INPUT]
     if [INPUT && INPUT_JOYSTICK] {
      config JOYSTICK_ANALOG tristate {
       prompt "Classic PC analog joysticks and gamepads" if [INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [INPUT && INPUT_JOYSTICK]
       inherited [INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_A3D tristate {
       prompt "Assassin 3D and MadCatz Panther devices" if [INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [INPUT && INPUT_JOYSTICK]
       inherited [INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_ADI tristate {
       prompt "Logitech ADI digital joysticks and gamepads" if [INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [INPUT && INPUT_JOYSTICK]
       inherited [INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_COBRA tristate {
       prompt "Creative Labs Blaster Cobra gamepad" if [INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [INPUT && INPUT_JOYSTICK]
       inherited [INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_GF2K tristate {
       prompt "Genius Flight2000 Digital joysticks and gamepads" if [INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [INPUT && INPUT_JOYSTICK]
       inherited [INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_GRIP tristate {
       prompt "Gravis GrIP joysticks and gamepads" if [INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [INPUT && INPUT_JOYSTICK]
       inherited [INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_GRIP_MP tristate {
       prompt "Gravis GrIP MultiPort" if [INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [INPUT && INPUT_JOYSTICK]
       inherited [INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_GUILLEMOT tristate {
       prompt "Guillemot joysticks and gamepads" if [INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [INPUT && INPUT_JOYSTICK]
       inherited [INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_INTERACT tristate {
       prompt "InterAct digital joysticks and gamepads" if [INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [INPUT && INPUT_JOYSTICK]
       inherited [INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_SIDEWINDER tristate {
       prompt "Microsoft SideWinder digital joysticks and gamepads" if [INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [INPUT && INPUT_JOYSTICK]
       inherited [INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_TMDC tristate {
       prompt "ThrustMaster DirectConnect joysticks and gamepads" if [INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [INPUT && INPUT_JOYSTICK]
       inherited [INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_IFORCE tristate {
       prompt "I-Force devices" if [INPUT && INPUT_JOYSTICK]
       depends on [INPUT && INPUT_JOYSTICK]
       inherited [INPUT && INPUT_JOYSTICK]
       config JOYSTICK_IFORCE_USB boolean {
        prompt "I-Force USB joysticks and wheels" if [INPUT && INPUT_JOYSTICK && JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || USB="y") && USB]
        depends on [JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || USB="y") && USB]
        inherited [INPUT && INPUT_JOYSTICK && JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || USB="y") && USB]
       }
       config JOYSTICK_IFORCE_232 boolean {
        prompt "I-Force Serial joysticks and wheels" if [INPUT && INPUT_JOYSTICK && JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || SERIO="y") && SERIO]
        depends on [JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || SERIO="y") && SERIO]
        inherited [INPUT && INPUT_JOYSTICK && JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || SERIO="y") && SERIO]
       }
      }
      config JOYSTICK_WARRIOR tristate {
       prompt "Logitech WingMan Warrior joystick" if [INPUT && INPUT_JOYSTICK]
       select SERIO if [INPUT && INPUT_JOYSTICK]
       inherited [INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_MAGELLAN tristate {
       prompt "LogiCad3d Magellan/SpaceMouse 6dof controllers" if [INPUT && INPUT_JOYSTICK]
       select SERIO if [INPUT && INPUT_JOYSTICK]
       inherited [INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_SPACEORB tristate {
       prompt "SpaceTec SpaceOrb/Avenger 6dof controllers" if [INPUT && INPUT_JOYSTICK]
       select SERIO if [INPUT && INPUT_JOYSTICK]
       inherited [INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_SPACEBALL tristate {
       prompt "SpaceTec SpaceBall 6dof controllers" if [INPUT && INPUT_JOYSTICK]
       select SERIO if [INPUT && INPUT_JOYSTICK]
       inherited [INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_STINGER tristate {
       prompt "Gravis Stinger gamepad" if [INPUT && INPUT_JOYSTICK]
       select SERIO if [INPUT && INPUT_JOYSTICK]
       inherited [INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_TWIDJOY tristate {
       prompt "Twiddler as a joystick" if [INPUT && INPUT_JOYSTICK]
       select SERIO if [INPUT && INPUT_JOYSTICK]
       inherited [INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_DB9 tristate {
       prompt "Multisystem, Sega Genesis, Saturn joysticks and gamepads" if [INPUT && INPUT_JOYSTICK && PARPORT]
       depends on [PARPORT]
       inherited [INPUT && INPUT_JOYSTICK && PARPORT]
      }
      config JOYSTICK_GAMECON tristate {
       prompt "Multisystem, NES, SNES, N64, PSX joysticks and gamepads" if [INPUT && INPUT_JOYSTICK && PARPORT]
       depends on [PARPORT]
       inherited [INPUT && INPUT_JOYSTICK && PARPORT]
      }
      config JOYSTICK_TURBOGRAFX tristate {
       prompt "Multisystem joysticks via TurboGraFX device" if [INPUT && INPUT_JOYSTICK && PARPORT]
       depends on [PARPORT]
       inherited [INPUT && INPUT_JOYSTICK && PARPORT]
      }
      config JOYSTICK_AMIGA tristate {
       prompt "Amiga joysticks" if [INPUT && INPUT_JOYSTICK && AMIGA]
       depends on [AMIGA]
       inherited [INPUT && INPUT_JOYSTICK && AMIGA]
      }
      config JOYSTICK_JOYDUMP tristate {
       prompt "Gameport data dumper" if [INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [INPUT && INPUT_JOYSTICK]
       inherited [INPUT && INPUT_JOYSTICK]
      }
     }
    }
    menuconfig INPUT_TOUCHSCREEN boolean {
     prompt "Touchscreens" if [INPUT]
     inherited [INPUT]
     if [INPUT && INPUT_TOUCHSCREEN] {
      config TOUCHSCREEN_ADS7846 tristate {
       prompt "ADS 7846 based touchscreens" if [INPUT && INPUT_TOUCHSCREEN && SPI_MASTER]
       depends on [SPI_MASTER]
       inherited [INPUT && INPUT_TOUCHSCREEN && SPI_MASTER]
      }
      config TOUCHSCREEN_BITSY tristate {
       prompt "Compaq iPAQ H3600 (Bitsy) touchscreen" if [INPUT && INPUT_TOUCHSCREEN && SA1100_BITSY]
       depends on [SA1100_BITSY]
       select SERIO if [INPUT && INPUT_TOUCHSCREEN && SA1100_BITSY]
       inherited [INPUT && INPUT_TOUCHSCREEN && SA1100_BITSY]
      }
      config TOUCHSCREEN_CORGI tristate {
       prompt "SharpSL (Corgi and Spitz series) touchscreen driver" if [INPUT && INPUT_TOUCHSCREEN && PXA_SHARPSL]
       depends on [PXA_SHARPSL]
       default [y] if [INPUT && INPUT_TOUCHSCREEN && PXA_SHARPSL]
       inherited [INPUT && INPUT_TOUCHSCREEN && PXA_SHARPSL]
      }
      config TOUCHSCREEN_GUNZE tristate {
       prompt "Gunze AHL-51S touchscreen" if [INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [INPUT && INPUT_TOUCHSCREEN]
       inherited [INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_ELO tristate {
       prompt "Elo serial touchscreens" if [INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [INPUT && INPUT_TOUCHSCREEN]
       inherited [INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_MTOUCH tristate {
       prompt "MicroTouch serial touchscreens" if [INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [INPUT && INPUT_TOUCHSCREEN]
       inherited [INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_MK712 tristate {
       prompt "ICS MicroClock MK712 touchscreen" if [INPUT && INPUT_TOUCHSCREEN]
       inherited [INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_HP600 tristate {
       prompt "HP Jornada 680/690 touchscreen" if [INPUT && INPUT_TOUCHSCREEN && SH_HP6XX && SH_ADC]
       depends on [SH_HP6XX && SH_ADC]
       inherited [INPUT && INPUT_TOUCHSCREEN && SH_HP6XX && SH_ADC]
      }
      config TOUCHSCREEN_PENMOUNT tristate {
       prompt "Penmount serial touchscreen" if [INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [INPUT && INPUT_TOUCHSCREEN]
       inherited [INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_TOUCHRIGHT tristate {
       prompt "Touchright serial touchscreen" if [INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [INPUT && INPUT_TOUCHSCREEN]
       inherited [INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_TOUCHWIN tristate {
       prompt "Touchwin serial touchscreen" if [INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [INPUT && INPUT_TOUCHSCREEN]
       inherited [INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_UCB1400 tristate {
       prompt "Philips UCB1400 touchscreen" if [INPUT && INPUT_TOUCHSCREEN]
       select AC97_BUS if [INPUT && INPUT_TOUCHSCREEN]
       inherited [INPUT && INPUT_TOUCHSCREEN]
      }
     }
    }
    menuconfig INPUT_MISC boolean {
     prompt "Miscellaneous devices" if [INPUT]
     inherited [INPUT]
     if [INPUT && INPUT_MISC] {
      config INPUT_PCSPKR tristate {
       prompt "PC Speaker support" if [INPUT && INPUT_MISC && (ALPHA || X86 || MIPS || PPC_PREP || PPC_CHRP || PPC_PSERIES)]
       depends on [ALPHA || X86 || MIPS || PPC_PREP || PPC_CHRP || PPC_PSERIES]
       inherited [INPUT && INPUT_MISC && (ALPHA || X86 || MIPS || PPC_PREP || PPC_CHRP || PPC_PSERIES)]
      }
      config INPUT_SPARCSPKR tristate {
       prompt "SPARC Speaker support" if [INPUT && INPUT_MISC && PCI && SPARC64]
       depends on [PCI && SPARC64]
       inherited [INPUT && INPUT_MISC && PCI && SPARC64]
      }
      config INPUT_M68K_BEEP tristate {
       prompt "M68k Beeper support" if [INPUT && INPUT_MISC && M68K]
       depends on [M68K]
       inherited [INPUT && INPUT_MISC && M68K]
      }
      config INPUT_WISTRON_BTNS tristate {
       prompt "x86 Wistron laptop button interface" if [INPUT && INPUT_MISC && X86 && !X86_64]
       depends on [X86 && !X86_64]
       inherited [INPUT && INPUT_MISC && X86 && !X86_64]
      }
      config INPUT_IXP4XX_BEEPER tristate {
       prompt "IXP4XX Beeper support" if [INPUT && INPUT_MISC && ARCH_IXP4XX]
       depends on [ARCH_IXP4XX]
       inherited [INPUT && INPUT_MISC && ARCH_IXP4XX]
      }
      config INPUT_UINPUT tristate {
       prompt "User level driver support" if [INPUT && INPUT_MISC]
       inherited [INPUT && INPUT_MISC]
      }
      config HP_SDC_RTC tristate {
       prompt "HP SDC Real Time Clock" if [INPUT && INPUT_MISC && (GSC || HP300)]
       depends on [GSC || HP300]
       select HP_SDC if [INPUT && INPUT_MISC && (GSC || HP300)]
       inherited [INPUT && INPUT_MISC && (GSC || HP300)]
      }
     }
    }
   }
  }
  menu "Hardware I/O ports" {
   config SERIO tristate {
    prompt "Serial I/O support" if [EMBEDDED || !X86]
    default [y] if []
    if [SERIO] {
     config SERIO_I8042 tristate {
      prompt "i8042 PC Keyboard controller" if [SERIO && !PARISC && (!ARM || ARCH_SHARK || FOOTBRIDGE_HOST) && !M68K && (EMBEDDED || !X86)]
      default [y] if [SERIO && !PARISC && (!ARM || ARCH_SHARK || FOOTBRIDGE_HOST) && !M68K]
      depends on [!PARISC && (!ARM || ARCH_SHARK || FOOTBRIDGE_HOST) && !M68K]
      inherited [SERIO && !PARISC && (!ARM || ARCH_SHARK || FOOTBRIDGE_HOST) && !M68K]
     }
     config SERIO_SERPORT tristate {
      prompt "Serial port line discipline" if [SERIO]
      default [y] if [SERIO]
      inherited [SERIO]
     }
     config SERIO_CT82C710 tristate {
      prompt "ct82c710 Aux port controller" if [SERIO && X86]
      depends on [X86]
      inherited [SERIO && X86]
     }
     config SERIO_Q40KBD tristate {
      prompt "Q40 keyboard controller" if [SERIO && Q40]
      depends on [Q40]
      inherited [SERIO && Q40]
     }
     config SERIO_PARKBD tristate {
      prompt "Parallel port keyboard adapter" if [SERIO && PARPORT]
      depends on [PARPORT]
      inherited [SERIO && PARPORT]
     }
     config SERIO_RPCKBD tristate {
      prompt "Acorn RiscPC keyboard controller" if [SERIO && (ARCH_ACORN || ARCH_CLPS7500)]
      depends on [ARCH_ACORN || ARCH_CLPS7500]
      default [y] if [SERIO && (ARCH_ACORN || ARCH_CLPS7500)]
      inherited [SERIO && (ARCH_ACORN || ARCH_CLPS7500)]
     }
     config SERIO_AMBAKMI tristate {
      prompt "AMBA KMI keyboard controller" if [SERIO && ARM_AMBA]
      depends on [ARM_AMBA]
      inherited [SERIO && ARM_AMBA]
     }
     config SERIO_SA1111 tristate {
      prompt "Intel SA1111 keyboard controller" if [SERIO && SA1111]
      depends on [SA1111]
      inherited [SERIO && SA1111]
     }
     config SERIO_GSCPS2 tristate {
      prompt "HP GSC PS/2 keyboard and PS/2 mouse controller" if [SERIO && GSC]
      depends on [GSC]
      default [y] if [SERIO && GSC]
      inherited [SERIO && GSC]
     }
     config HP_SDC tristate {
      prompt "HP System Device Controller i8042 Support" if [(GSC || HP300) && SERIO]
      depends on [(GSC || HP300) && SERIO]
      default [y] if [(GSC || HP300) && SERIO]
      inherited [(GSC || HP300) && SERIO]
      config HIL_MLC tristate {
       prompt "HIL MLC Support (needed for HIL input devices)" if [SERIO && HP_SDC]
       depends on [HP_SDC]
       inherited [SERIO && HP_SDC]
      }
     }
     config SERIO_PCIPS2 tristate {
      prompt "PCI PS/2 keyboard and PS/2 mouse controller" if [SERIO && PCI]
      depends on [PCI]
      inherited [SERIO && PCI]
     }
     config SERIO_MACEPS2 tristate {
      prompt "SGI O2 MACE PS/2 controller" if [SERIO && SGI_IP32]
      depends on [SGI_IP32]
      inherited [SERIO && SGI_IP32]
     }
     config SERIO_LIBPS2 tristate {
      prompt "PS/2 driver library" if [SERIO && EMBEDDED]
      inherited [SERIO]
     }
     config SERIO_RAW tristate {
      prompt "Raw access to serio ports" if [SERIO]
      inherited [SERIO]
     }
    }
   }
   config GAMEPORT tristate {
    prompt "Gameport support" if []
    if [GAMEPORT] {
     config GAMEPORT_NS558 tristate {
      prompt "Classic ISA and PnP gameport support" if [GAMEPORT]
      inherited [GAMEPORT]
     }
     config GAMEPORT_L4 tristate {
      prompt "PDPI Lightning 4 gamecard support" if [GAMEPORT]
      inherited [GAMEPORT]
     }
     config GAMEPORT_EMU10K1 tristate {
      prompt "SB Live and Audigy gameport support" if [GAMEPORT && PCI]
      depends on [PCI]
      inherited [GAMEPORT && PCI]
     }
     config GAMEPORT_FM801 tristate {
      prompt "ForteMedia FM801 gameport support" if [GAMEPORT && PCI]
      depends on [PCI]
      inherited [GAMEPORT && PCI]
     }
    }
   }
  }
 }
 menu "Character devices" {
  config VT boolean {
   prompt "Virtual terminal" if [EMBEDDED]
   select INPUT if []
   default [y] if [!VIOCONS]
   config VT_CONSOLE boolean {
    prompt "Support for console on virtual terminal" if [VT && EMBEDDED]
    depends on [VT]
    default [y] if [VT]
    inherited [VT]
   }
   config HW_CONSOLE boolean {
    depends on [VT && !S390 && !UML]
    default [y] if [VT && !S390 && !UML]
    inherited [VT && !S390 && !UML]
   }
   config VT_HW_CONSOLE_BINDING boolean {
    prompt "Support for binding and unbinding console drivers" if [HW_CONSOLE]
    depends on [HW_CONSOLE]
    default [n] if [HW_CONSOLE]
    inherited [HW_CONSOLE]
   }
  }
  config SERIAL_NONSTANDARD boolean {
   prompt "Non-standard serial port support" if []
   config COMPUTONE tristate {
    prompt "Computone IntelliPort Plus serial support" if [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
    depends on [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
    inherited [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
   }
   config ROCKETPORT tristate {
    prompt "Comtrol RocketPort support" if [SERIAL_NONSTANDARD]
    depends on [SERIAL_NONSTANDARD]
    inherited [SERIAL_NONSTANDARD]
   }
   config CYCLADES tristate {
    prompt "Cyclades async mux support" if [SERIAL_NONSTANDARD]
    depends on [SERIAL_NONSTANDARD]
    inherited [SERIAL_NONSTANDARD]
    config CYZ_INTR boolean {
     prompt "Cyclades-Z interrupt mode operation (EXPERIMENTAL)" if [EXPERIMENTAL && CYCLADES]
     depends on [EXPERIMENTAL && CYCLADES]
     inherited [EXPERIMENTAL && CYCLADES]
    }
   }
   config DIGIEPCA tristate {
    prompt "Digiboard Intelligent Async Support" if [SERIAL_NONSTANDARD]
    depends on [SERIAL_NONSTANDARD]
    inherited [SERIAL_NONSTANDARD]
   }
   config ESPSERIAL tristate {
    prompt "Hayes ESP serial port support" if [SERIAL_NONSTANDARD && ISA && ISA_DMA_API]
    depends on [SERIAL_NONSTANDARD && ISA && ISA_DMA_API]
    inherited [SERIAL_NONSTANDARD && ISA && ISA_DMA_API]
   }
   config MOXA_INTELLIO tristate {
    prompt "Moxa Intellio support" if [SERIAL_NONSTANDARD]
    depends on [SERIAL_NONSTANDARD]
    inherited [SERIAL_NONSTANDARD]
   }
   config MOXA_SMARTIO tristate {
    prompt "Moxa SmartIO support" if [SERIAL_NONSTANDARD]
    depends on [SERIAL_NONSTANDARD]
    inherited [SERIAL_NONSTANDARD]
   }
   config MOXA_SMARTIO_NEW tristate {
    prompt "Moxa SmartIO support v. 2.0 (EXPERIMENTAL)" if [SERIAL_NONSTANDARD && (PCI || EISA || ISA)]
    depends on [SERIAL_NONSTANDARD && (PCI || EISA || ISA)]
    inherited [SERIAL_NONSTANDARD && (PCI || EISA || ISA)]
   }
   config ISI tristate {
    prompt "Multi-Tech multiport card support (EXPERIMENTAL)" if [SERIAL_NONSTANDARD && PCI]
    depends on [SERIAL_NONSTANDARD && PCI]
    select FW_LOADER if [SERIAL_NONSTANDARD && PCI]
    inherited [SERIAL_NONSTANDARD && PCI]
   }
   config SYNCLINK tristate {
    prompt "Microgate SyncLink card support" if [SERIAL_NONSTANDARD && PCI && ISA_DMA_API]
    depends on [SERIAL_NONSTANDARD && PCI && ISA_DMA_API]
    inherited [SERIAL_NONSTANDARD && PCI && ISA_DMA_API]
   }
   config SYNCLINKMP tristate {
    prompt "SyncLink Multiport support" if [SERIAL_NONSTANDARD]
    depends on [SERIAL_NONSTANDARD]
    inherited [SERIAL_NONSTANDARD]
   }
   config SYNCLINK_GT tristate {
    prompt "SyncLink GT/AC support" if [SERIAL_NONSTANDARD && PCI]
    depends on [SERIAL_NONSTANDARD && PCI]
    inherited [SERIAL_NONSTANDARD && PCI]
   }
   config N_HDLC tristate {
    prompt "HDLC line discipline support" if [SERIAL_NONSTANDARD]
    depends on [SERIAL_NONSTANDARD]
    inherited [SERIAL_NONSTANDARD]
   }
   config RISCOM8 tristate {
    prompt "SDL RISCom/8 card support" if [SERIAL_NONSTANDARD && BROKEN_ON_SMP]
    depends on [SERIAL_NONSTANDARD && BROKEN_ON_SMP]
    inherited [SERIAL_NONSTANDARD && BROKEN_ON_SMP]
   }
   config SPECIALIX tristate {
    prompt "Specialix IO8+ card support" if [SERIAL_NONSTANDARD]
    depends on [SERIAL_NONSTANDARD]
    inherited [SERIAL_NONSTANDARD]
    config SPECIALIX_RTSCTS boolean {
     prompt "Specialix DTR/RTS pin is RTS" if [SPECIALIX]
     depends on [SPECIALIX]
     inherited [SPECIALIX]
    }
   }
   config SX tristate {
    prompt "Specialix SX (and SI) card support" if [SERIAL_NONSTANDARD && (PCI || EISA || ISA)]
    depends on [SERIAL_NONSTANDARD && (PCI || EISA || ISA)]
    inherited [SERIAL_NONSTANDARD && (PCI || EISA || ISA)]
   }
   config RIO tristate {
    prompt "Specialix RIO system support" if [SERIAL_NONSTANDARD]
    depends on [SERIAL_NONSTANDARD]
    inherited [SERIAL_NONSTANDARD]
    config RIO_OLDPCI boolean {
     prompt "Support really old RIO/PCI cards" if [RIO]
     depends on [RIO]
     inherited [RIO]
    }
   }
   config STALDRV boolean {
    prompt "Stallion multiport serial support" if [SERIAL_NONSTANDARD]
    depends on [SERIAL_NONSTANDARD]
    inherited [SERIAL_NONSTANDARD]
    config STALLION tristate {
     prompt "Stallion EasyIO or EC8/32 support" if [STALDRV && BROKEN_ON_SMP]
     depends on [STALDRV && BROKEN_ON_SMP]
     inherited [STALDRV && BROKEN_ON_SMP]
    }
    config ISTALLION tristate {
     prompt "Stallion EC8/64, ONboard, Brumby support" if [STALDRV && BROKEN_ON_SMP]
     depends on [STALDRV && BROKEN_ON_SMP]
     inherited [STALDRV && BROKEN_ON_SMP]
    }
   }
   config AU1000_UART boolean {
    prompt "Enable Au1000 UART Support" if [SERIAL_NONSTANDARD && MIPS]
    depends on [SERIAL_NONSTANDARD && MIPS]
    inherited [SERIAL_NONSTANDARD && MIPS]
    config AU1000_SERIAL_CONSOLE boolean {
     prompt "Enable Au1000 serial console" if [AU1000_UART]
     depends on [AU1000_UART]
     inherited [AU1000_UART]
    }
   }
  }
  config A2232 tristate {
   prompt "Commodore A2232 serial support (EXPERIMENTAL)" if [EXPERIMENTAL && ZORRO && BROKEN_ON_SMP]
   depends on [EXPERIMENTAL && ZORRO && BROKEN_ON_SMP]
   inherited [EXPERIMENTAL && ZORRO && BROKEN_ON_SMP]
  }
  config SGI_SNSC boolean {
   prompt "SGI Altix system controller communication support" if [IA64_SGI_SN2 || IA64_GENERIC]
   depends on [IA64_SGI_SN2 || IA64_GENERIC]
   inherited [IA64_SGI_SN2 || IA64_GENERIC]
  }
  config SGI_TIOCX boolean {
   prompt "SGI TIO CX driver support" if [IA64_SGI_SN2 || IA64_GENERIC]
   depends on [IA64_SGI_SN2 || IA64_GENERIC]
   inherited [IA64_SGI_SN2 || IA64_GENERIC]
   config SGI_MBCS tristate {
    prompt "SGI FPGA Core Services driver support" if [SGI_TIOCX]
    depends on [SGI_TIOCX]
    inherited [SGI_TIOCX]
   }
  }
  menu "Serial drivers" {
   config SERIAL_8250 tristate {
    prompt "8250/16550 and compatible serial support" if [BROKEN || !SPARC]
    depends on [BROKEN || !SPARC]
    select SERIAL_CORE if [BROKEN || !SPARC]
    inherited [BROKEN || !SPARC]
    config SERIAL_8250_CONSOLE boolean {
     prompt "Console on 8250/16550 and compatible serial port" if [SERIAL_8250="y"]
     depends on [SERIAL_8250="y"]
     select SERIAL_CORE_CONSOLE if [SERIAL_8250="y"]
     inherited [SERIAL_8250="y"]
    }
    config SERIAL_8250_GSC tristate {
     depends on [SERIAL_8250 && GSC]
     default [SERIAL_8250] if [SERIAL_8250 && GSC]
     inherited [SERIAL_8250 && GSC]
    }
    config SERIAL_8250_PCI tristate {
     prompt "8250/16550 PCI device support" if [SERIAL_8250 && PCI && EMBEDDED]
     depends on [SERIAL_8250 && PCI]
     default [SERIAL_8250] if [SERIAL_8250 && PCI]
     inherited [SERIAL_8250 && PCI]
    }
    config SERIAL_8250_PNP tristate {
     prompt "8250/16550 PNP device support" if [SERIAL_8250 && PNP && EMBEDDED]
     depends on [SERIAL_8250 && PNP]
     default [SERIAL_8250] if [SERIAL_8250 && PNP]
     inherited [SERIAL_8250 && PNP]
    }
    config SERIAL_8250_HP300 tristate {
     depends on [SERIAL_8250 && HP300]
     default [SERIAL_8250] if [SERIAL_8250 && HP300]
     inherited [SERIAL_8250 && HP300]
    }
    config SERIAL_8250_CS tristate {
     prompt "8250/16550 PCMCIA device support" if [PCMCIA && SERIAL_8250]
     depends on [PCMCIA && SERIAL_8250]
     inherited [PCMCIA && SERIAL_8250]
    }
    config SERIAL_8250_NR_UARTS integer {
     prompt "Maximum number of 8250/16550 serial ports" if [SERIAL_8250]
     depends on [SERIAL_8250]
     default [4] if [SERIAL_8250]
     inherited [SERIAL_8250]
    }
    config SERIAL_8250_RUNTIME_UARTS integer {
     prompt "Number of 8250/16550 serial ports to register at runtime" if [SERIAL_8250]
     depends on [SERIAL_8250]
     range [0 SERIAL_8250_NR_UARTS] if [SERIAL_8250]
     default [4] if [SERIAL_8250]
     inherited [SERIAL_8250]
    }
    config SERIAL_8250_EXTENDED boolean {
     prompt "Extended 8250/16550 serial driver options" if [SERIAL_8250]
     depends on [SERIAL_8250]
     inherited [SERIAL_8250]
     config SERIAL_8250_MANY_PORTS boolean {
      prompt "Support more than 4 legacy serial ports" if [SERIAL_8250_EXTENDED && !IA64]
      depends on [SERIAL_8250_EXTENDED && !IA64]
      inherited [SERIAL_8250_EXTENDED && !IA64]
      config SERIAL_8250_FOURPORT tristate {
       prompt "Support Fourport cards" if [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
       depends on [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
       inherited [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      }
      config SERIAL_8250_ACCENT tristate {
       prompt "Support Accent cards" if [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
       depends on [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
       inherited [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      }
      config SERIAL_8250_BOCA tristate {
       prompt "Support Boca cards" if [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
       depends on [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
       inherited [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      }
      config SERIAL_8250_EXAR_ST16C554 tristate {
       prompt "Support Exar ST16C554/554D Quad UART" if [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
       depends on [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
       inherited [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      }
      config SERIAL_8250_HUB6 tristate {
       prompt "Support Hub6 cards" if [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
       depends on [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
       inherited [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      }
     }
     config SERIAL_8250_SHARE_IRQ boolean {
      prompt "Support for sharing serial interrupts" if [SERIAL_8250_EXTENDED]
      depends on [SERIAL_8250_EXTENDED]
      inherited [SERIAL_8250_EXTENDED]
     }
     config SERIAL_8250_DETECT_IRQ boolean {
      prompt "Autodetect IRQ on standard ports (unsafe)" if [SERIAL_8250_EXTENDED]
      depends on [SERIAL_8250_EXTENDED]
      inherited [SERIAL_8250_EXTENDED]
     }
     config SERIAL_8250_RSA boolean {
      prompt "Support RSA serial ports" if [SERIAL_8250_EXTENDED]
      depends on [SERIAL_8250_EXTENDED]
      inherited [SERIAL_8250_EXTENDED]
     }
    }
    config SERIAL_8250_MCA tristate {
     prompt "Support 8250-type ports on MCA buses" if [SERIAL_8250!="n" && MCA]
     depends on [SERIAL_8250!="n" && MCA]
     inherited [SERIAL_8250!="n" && MCA]
    }
    config SERIAL_8250_ACORN tristate {
     prompt "Acorn expansion card serial port support" if [ARCH_ACORN && SERIAL_8250]
     depends on [ARCH_ACORN && SERIAL_8250]
     inherited [ARCH_ACORN && SERIAL_8250]
    }
    config SERIAL_8250_AU1X00 boolean {
     prompt "AU1X00 serial port support" if [SERIAL_8250 && SOC_AU1X00]
     depends on [SERIAL_8250 && SOC_AU1X00]
     inherited [SERIAL_8250 && SOC_AU1X00]
    }
   }
   config SERIAL_AMBA_PL010 tristate {
    prompt "ARM AMBA PL010 serial port support" if [ARM_AMBA && (BROKEN || !ARCH_VERSATILE)]
    depends on [ARM_AMBA && (BROKEN || !ARCH_VERSATILE)]
    select SERIAL_CORE if [ARM_AMBA && (BROKEN || !ARCH_VERSATILE)]
    inherited [ARM_AMBA && (BROKEN || !ARCH_VERSATILE)]
    config SERIAL_AMBA_PL010_CONSOLE boolean {
     prompt "Support for console on AMBA serial port" if [SERIAL_AMBA_PL010="y"]
     depends on [SERIAL_AMBA_PL010="y"]
     select SERIAL_CORE_CONSOLE if [SERIAL_AMBA_PL010="y"]
     inherited [SERIAL_AMBA_PL010="y"]
    }
   }
   config SERIAL_AMBA_PL011 tristate {
    prompt "ARM AMBA PL011 serial port support" if [ARM_AMBA]
    depends on [ARM_AMBA]
    select SERIAL_CORE if [ARM_AMBA]
    inherited [ARM_AMBA]
    config SERIAL_AMBA_PL011_CONSOLE boolean {
     prompt "Support for console on AMBA serial port" if [SERIAL_AMBA_PL011="y"]
     depends on [SERIAL_AMBA_PL011="y"]
     select SERIAL_CORE_CONSOLE if [SERIAL_AMBA_PL011="y"]
     inherited [SERIAL_AMBA_PL011="y"]
    }
   }
   config SERIAL_ATMEL boolean {
    prompt "AT91 / AT32 on-chip serial port support" if [ARM && ARCH_AT91 || AVR32]
    depends on [ARM && ARCH_AT91 || AVR32]
    select SERIAL_CORE if [ARM && ARCH_AT91 || AVR32]
    inherited [ARM && ARCH_AT91 || AVR32]
    config SERIAL_ATMEL_CONSOLE boolean {
     prompt "Support for console on AT91 / AT32 serial port" if [SERIAL_ATMEL]
     depends on [SERIAL_ATMEL="y"]
     select SERIAL_CORE_CONSOLE if [SERIAL_ATMEL]
     inherited [SERIAL_ATMEL]
    }
    config SERIAL_ATMEL_TTYAT boolean {
     prompt "Install as device ttyATn instead of ttySn" if [SERIAL_ATMEL]
     depends on [SERIAL_ATMEL="y"]
     inherited [SERIAL_ATMEL]
    }
   }
   config SERIAL_CLPS711X tristate {
    prompt "CLPS711X serial port support" if [ARM && ARCH_CLPS711X]
    depends on [ARM && ARCH_CLPS711X]
    select SERIAL_CORE if [ARM && ARCH_CLPS711X]
    inherited [ARM && ARCH_CLPS711X]
    config SERIAL_CLPS711X_CONSOLE boolean {
     prompt "Support for console on CLPS711X serial port" if [SERIAL_CLPS711X="y"]
     depends on [SERIAL_CLPS711X="y"]
     select SERIAL_CORE_CONSOLE if [SERIAL_CLPS711X="y"]
     inherited [SERIAL_CLPS711X="y"]
    }
   }
   config SERIAL_S3C2410 tristate {
    prompt "Samsung S3C2410/S3C2440/S3C2442/S3C2412 Serial port support" if [ARM && ARCH_S3C2410]
    depends on [ARM && ARCH_S3C2410]
    select SERIAL_CORE if [ARM && ARCH_S3C2410]
    inherited [ARM && ARCH_S3C2410]
    config SERIAL_S3C2410_CONSOLE boolean {
     prompt "Support for console on S3C2410 serial port" if [SERIAL_S3C2410="y"]
     depends on [SERIAL_S3C2410="y"]
     select SERIAL_CORE_CONSOLE if [SERIAL_S3C2410="y"]
     inherited [SERIAL_S3C2410="y"]
    }
   }
   config SERIAL_DZ boolean {
    prompt "DECstation DZ serial driver" if [MACH_DECSTATION && 32BIT]
    depends on [MACH_DECSTATION && 32BIT]
    select SERIAL_CORE if [MACH_DECSTATION && 32BIT]
    inherited [MACH_DECSTATION && 32BIT]
    config SERIAL_DZ_CONSOLE boolean {
     prompt "Support console on DECstation DZ serial driver" if [SERIAL_DZ]
     depends on [SERIAL_DZ="y"]
     select SERIAL_CORE_CONSOLE if [SERIAL_DZ]
     inherited [SERIAL_DZ]
    }
   }
   config SERIAL_21285 tristate {
    prompt "DC21285 serial port support" if [ARM && FOOTBRIDGE]
    depends on [ARM && FOOTBRIDGE]
    select SERIAL_CORE if [ARM && FOOTBRIDGE]
    inherited [ARM && FOOTBRIDGE]
    config SERIAL_21285_CONSOLE boolean {
     prompt "Console on DC21285 serial port" if [SERIAL_21285="y"]
     depends on [SERIAL_21285="y"]
     select SERIAL_CORE_CONSOLE if [SERIAL_21285="y"]
     inherited [SERIAL_21285="y"]
    }
   }
   config SERIAL_MPSC boolean {
    prompt "Marvell MPSC serial port support" if [PPC32 && MV64X60]
    depends on [PPC32 && MV64X60]
    select SERIAL_CORE if [PPC32 && MV64X60]
    inherited [PPC32 && MV64X60]
    config SERIAL_MPSC_CONSOLE boolean {
     prompt "Support for console on Marvell MPSC serial port" if [SERIAL_MPSC]
     depends on [SERIAL_MPSC]
     select SERIAL_CORE_CONSOLE if [SERIAL_MPSC]
     inherited [SERIAL_MPSC]
    }
   }
   config SERIAL_PXA boolean {
    prompt "PXA serial port support" if [ARM && ARCH_PXA]
    depends on [ARM && ARCH_PXA]
    select SERIAL_CORE if [ARM && ARCH_PXA]
    inherited [ARM && ARCH_PXA]
    config SERIAL_PXA_CONSOLE boolean {
     prompt "Console on PXA serial port" if [SERIAL_PXA]
     depends on [SERIAL_PXA]
     select SERIAL_CORE_CONSOLE if [SERIAL_PXA]
     inherited [SERIAL_PXA]
    }
   }
   config SERIAL_SA1100 boolean {
    prompt "SA1100 serial port support" if [ARM && ARCH_SA1100]
    depends on [ARM && ARCH_SA1100]
    select SERIAL_CORE if [ARM && ARCH_SA1100]
    inherited [ARM && ARCH_SA1100]
    config SERIAL_SA1100_CONSOLE boolean {
     prompt "Console on SA1100 serial port" if [SERIAL_SA1100]
     depends on [SERIAL_SA1100]
     select SERIAL_CORE_CONSOLE if [SERIAL_SA1100]
     inherited [SERIAL_SA1100]
    }
   }
   config SERIAL_IMX boolean {
    prompt "IMX serial port support" if [ARM && ARCH_IMX]
    depends on [ARM && ARCH_IMX]
    select SERIAL_CORE if [ARM && ARCH_IMX]
    inherited [ARM && ARCH_IMX]
    config SERIAL_IMX_CONSOLE boolean {
     prompt "Console on IMX serial port" if [SERIAL_IMX]
     depends on [SERIAL_IMX]
     select SERIAL_CORE_CONSOLE if [SERIAL_IMX]
     inherited [SERIAL_IMX]
    }
   }
   config SERIAL_UARTLITE tristate {
    prompt "Xilinx uartlite serial port support" if [PPC32]
    depends on [PPC32]
    select SERIAL_CORE if [PPC32]
    inherited [PPC32]
    config SERIAL_UARTLITE_CONSOLE boolean {
     prompt "Support for console on Xilinx uartlite serial port" if [SERIAL_UARTLITE="y"]
     depends on [SERIAL_UARTLITE="y"]
     select SERIAL_CORE_CONSOLE if [SERIAL_UARTLITE="y"]
     inherited [SERIAL_UARTLITE="y"]
    }
   }
   config SERIAL_SUNCORE boolean {
    depends on [SPARC]
    select SERIAL_CORE if [SPARC]
    select SERIAL_CORE_CONSOLE if [SPARC]
    default [y] if [SPARC]
    inherited [SPARC]
   }
   config SERIAL_SUNZILOG tristate {
    prompt "Sun Zilog8530 serial support" if [SPARC]
    depends on [SPARC]
    inherited [SPARC]
    config SERIAL_SUNZILOG_CONSOLE boolean {
     prompt "Console on Sun Zilog8530 serial port" if [SERIAL_SUNZILOG="y"]
     depends on [SERIAL_SUNZILOG="y"]
     inherited [SERIAL_SUNZILOG="y"]
    }
   }
   config SERIAL_SUNSU tristate {
    prompt "Sun SU serial support" if [SPARC && PCI]
    depends on [SPARC && PCI]
    inherited [SPARC && PCI]
    config SERIAL_SUNSU_CONSOLE boolean {
     prompt "Console on Sun SU serial port" if [SERIAL_SUNSU="y"]
     depends on [SERIAL_SUNSU="y"]
     inherited [SERIAL_SUNSU="y"]
    }
   }
   config SERIAL_MUX tristate {
    prompt "Serial MUX support" if [GSC]
    depends on [GSC]
    select SERIAL_CORE if [GSC]
    default [y] if [GSC]
    inherited [GSC]
    config SERIAL_MUX_CONSOLE boolean {
     prompt "Support for console on serial MUX" if [SERIAL_MUX]
     depends on [SERIAL_MUX]
     select SERIAL_CORE_CONSOLE if [SERIAL_MUX]
     default [y] if [SERIAL_MUX]
     inherited [SERIAL_MUX]
    }
   }
   config PDC_CONSOLE boolean {
    prompt "PDC software console support" if [PARISC && !SERIAL_MUX && VT]
    depends on [PARISC && !SERIAL_MUX && VT]
    default [n] if [PARISC && !SERIAL_MUX && VT]
    inherited [PARISC && !SERIAL_MUX && VT]
   }
   config SERIAL_SUNSAB tristate {
    prompt "Sun Siemens SAB82532 serial support" if [SPARC && PCI]
    depends on [SPARC && PCI]
    inherited [SPARC && PCI]
    config SERIAL_SUNSAB_CONSOLE boolean {
     prompt "Console on Sun Siemens SAB82532 serial port" if [SERIAL_SUNSAB="y"]
     depends on [SERIAL_SUNSAB="y"]
     inherited [SERIAL_SUNSAB="y"]
    }
   }
   config SERIAL_SUNHV boolean {
    prompt "Sun4v Hypervisor Console support" if [SPARC64]
    depends on [SPARC64]
    inherited [SPARC64]
   }
   config SERIAL_IP22_ZILOG tristate {
    prompt "IP22 Zilog8530 serial support" if [SGI_IP22]
    depends on [SGI_IP22]
    select SERIAL_CORE if [SGI_IP22]
    inherited [SGI_IP22]
    config SERIAL_IP22_ZILOG_CONSOLE boolean {
     prompt "Console on IP22 Zilog8530 serial port" if [SERIAL_IP22_ZILOG="y"]
     depends on [SERIAL_IP22_ZILOG="y"]
     select SERIAL_CORE_CONSOLE if [SERIAL_IP22_ZILOG="y"]
     inherited [SERIAL_IP22_ZILOG="y"]
    }
   }
   config V850E_UART boolean {
    prompt "NEC V850E on-chip UART support" if [V850E_MA1 || V850E_ME2 || V850E_TEG || V850E2_ANNA || V850E_AS85EP1]
    depends on [V850E_MA1 || V850E_ME2 || V850E_TEG || V850E2_ANNA || V850E_AS85EP1]
    select SERIAL_CORE if [V850E_MA1 || V850E_ME2 || V850E_TEG || V850E2_ANNA || V850E_AS85EP1]
    default [y] if [V850E_MA1 || V850E_ME2 || V850E_TEG || V850E2_ANNA || V850E_AS85EP1]
    inherited [V850E_MA1 || V850E_ME2 || V850E_TEG || V850E2_ANNA || V850E_AS85EP1]
    config V850E_UARTB boolean {
     depends on [V850E_UART && V850E_ME2]
     default [y] if [V850E_UART && V850E_ME2]
     inherited [V850E_UART && V850E_ME2]
    }
    config V850E_UART_CONSOLE boolean {
     prompt "Use NEC V850E on-chip UART for console" if [V850E_UART]
     depends on [V850E_UART]
     select SERIAL_CORE_CONSOLE if [V850E_UART]
     inherited [V850E_UART]
    }
   }
   config SERIAL_SH_SCI tristate {
    prompt "SuperH SCI(F) serial port support" if [SUPERH || H8300]
    depends on [SUPERH || H8300]
    select SERIAL_CORE if [SUPERH || H8300]
    inherited [SUPERH || H8300]
    config SERIAL_SH_SCI_NR_UARTS integer {
     prompt "Maximum number of SCI(F) serial ports" if [SERIAL_SH_SCI]
     depends on [SERIAL_SH_SCI]
     default [2] if [SERIAL_SH_SCI]
     inherited [SERIAL_SH_SCI]
    }
    config SERIAL_SH_SCI_CONSOLE boolean {
     prompt "Support for console on SuperH SCI(F)" if [SERIAL_SH_SCI="y"]
     depends on [SERIAL_SH_SCI="y"]
     select SERIAL_CORE_CONSOLE if [SERIAL_SH_SCI="y"]
     inherited [SERIAL_SH_SCI="y"]
    }
   }
   config SERIAL_CORE tristate {
   }
   config SERIAL_CORE_CONSOLE boolean {
   }
   config SERIAL_68328 boolean {
    prompt "68328 serial support" if [M68328 || M68EZ328 || M68VZ328]
    depends on [M68328 || M68EZ328 || M68VZ328]
    inherited [M68328 || M68EZ328 || M68VZ328]
    config SERIAL_68328_RTS_CTS boolean {
     prompt "Support RTS/CTS on 68328 serial port" if [SERIAL_68328]
     depends on [SERIAL_68328]
     inherited [SERIAL_68328]
    }
   }
   config SERIAL_COLDFIRE boolean {
    prompt "ColdFire serial support" if [COLDFIRE]
    depends on [COLDFIRE]
    inherited [COLDFIRE]
   }
   config SERIAL_68360_SMC boolean {
    prompt "68360 SMC uart support" if [M68360]
    depends on [M68360]
    inherited [M68360]
   }
   config SERIAL_68360_SCC boolean {
    prompt "68360 SCC uart support" if [M68360]
    depends on [M68360]
    inherited [M68360]
   }
   config SERIAL_68360 boolean {
    depends on [SERIAL_68360_SMC || SERIAL_68360_SCC]
    default [y] if [SERIAL_68360_SMC || SERIAL_68360_SCC]
    inherited [SERIAL_68360_SMC || SERIAL_68360_SCC]
   }
   config SERIAL_PMACZILOG tristate {
    prompt "PowerMac z85c30 ESCC support" if [PPC_OF && PPC_PMAC]
    depends on [PPC_OF && PPC_PMAC]
    select SERIAL_CORE if [PPC_OF && PPC_PMAC]
    inherited [PPC_OF && PPC_PMAC]
    config SERIAL_PMACZILOG_CONSOLE boolean {
     prompt "Console on PowerMac z85c30 serial port" if [SERIAL_PMACZILOG="y"]
     depends on [SERIAL_PMACZILOG="y"]
     select SERIAL_CORE_CONSOLE if [SERIAL_PMACZILOG="y"]
     inherited [SERIAL_PMACZILOG="y"]
    }
   }
   config SERIAL_LH7A40X tristate {
    prompt "Sharp LH7A40X embedded UART support" if [ARM && ARCH_LH7A40X]
    depends on [ARM && ARCH_LH7A40X]
    select SERIAL_CORE if [ARM && ARCH_LH7A40X]
    inherited [ARM && ARCH_LH7A40X]
    config SERIAL_LH7A40X_CONSOLE boolean {
     prompt "Support for console on Sharp LH7A40X serial port" if [SERIAL_LH7A40X="y"]
     depends on [SERIAL_LH7A40X="y"]
     select SERIAL_CORE_CONSOLE if [SERIAL_LH7A40X="y"]
     inherited [SERIAL_LH7A40X="y"]
    }
   }
   config SERIAL_CPM tristate {
    prompt "CPM SCC/SMC serial port support" if [CPM2 || 8xx]
    depends on [CPM2 || 8xx]
    select SERIAL_CORE if [CPM2 || 8xx]
    inherited [CPM2 || 8xx]
    config SERIAL_CPM_CONSOLE boolean {
     prompt "Support for console on CPM SCC/SMC serial port" if [SERIAL_CPM="y"]
     depends on [SERIAL_CPM="y"]
     select SERIAL_CORE_CONSOLE if [SERIAL_CPM="y"]
     inherited [SERIAL_CPM="y"]
    }
    config SERIAL_CPM_SCC1 boolean {
     prompt "Support for SCC1 serial port" if [SERIAL_CPM="y"]
     depends on [SERIAL_CPM="y"]
     inherited [SERIAL_CPM="y"]
    }
    config SERIAL_CPM_SCC2 boolean {
     prompt "Support for SCC2 serial port" if [SERIAL_CPM="y"]
     depends on [SERIAL_CPM="y"]
     inherited [SERIAL_CPM="y"]
    }
    config SERIAL_CPM_SCC3 boolean {
     prompt "Support for SCC3 serial port" if [SERIAL_CPM="y"]
     depends on [SERIAL_CPM="y"]
     inherited [SERIAL_CPM="y"]
    }
    config SERIAL_CPM_SCC4 boolean {
     prompt "Support for SCC4 serial port" if [SERIAL_CPM="y"]
     depends on [SERIAL_CPM="y"]
     inherited [SERIAL_CPM="y"]
    }
    config SERIAL_CPM_SMC1 boolean {
     prompt "Support for SMC1 serial port" if [SERIAL_CPM="y"]
     depends on [SERIAL_CPM="y"]
     inherited [SERIAL_CPM="y"]
    }
    config SERIAL_CPM_SMC2 boolean {
     prompt "Support for SMC2 serial port" if [SERIAL_CPM="y"]
     depends on [SERIAL_CPM="y"]
     inherited [SERIAL_CPM="y"]
    }
   }
   config SERIAL_SGI_L1_CONSOLE boolean {
    prompt "SGI Altix L1 serial console support" if [IA64_GENERIC || IA64_SGI_SN2]
    depends on [IA64_GENERIC || IA64_SGI_SN2]
    select SERIAL_CORE if [IA64_GENERIC || IA64_SGI_SN2]
    select SERIAL_CORE_CONSOLE if [IA64_GENERIC || IA64_SGI_SN2]
    inherited [IA64_GENERIC || IA64_SGI_SN2]
   }
   config SERIAL_MPC52xx tristate {
    prompt "Freescale MPC52xx family PSC serial support" if [PPC_MPC52xx]
    depends on [PPC_MPC52xx]
    select SERIAL_CORE if [PPC_MPC52xx]
    inherited [PPC_MPC52xx]
    config SERIAL_MPC52xx_CONSOLE boolean {
     prompt "Console on a Freescale MPC52xx family PSC serial port" if [SERIAL_MPC52xx="y"]
     depends on [SERIAL_MPC52xx="y"]
     select SERIAL_CORE_CONSOLE if [SERIAL_MPC52xx="y"]
     inherited [SERIAL_MPC52xx="y"]
     config SERIAL_MPC52xx_CONSOLE_BAUD integer {
      prompt "Freescale MPC52xx family PSC serial port baud" if [SERIAL_MPC52xx_CONSOLE]
      depends on [SERIAL_MPC52xx_CONSOLE="y"]
      default [9600] if [SERIAL_MPC52xx_CONSOLE]
      inherited [SERIAL_MPC52xx_CONSOLE]
     }
    }
   }
   config SERIAL_ICOM tristate {
    prompt "IBM Multiport Serial Adapter" if [PCI && (PPC_ISERIES || PPC_PSERIES)]
    depends on [PCI && (PPC_ISERIES || PPC_PSERIES)]
    select SERIAL_CORE if [PCI && (PPC_ISERIES || PPC_PSERIES)]
    select FW_LOADER if [PCI && (PPC_ISERIES || PPC_PSERIES)]
    inherited [PCI && (PPC_ISERIES || PPC_PSERIES)]
   }
   config SERIAL_M32R_SIO boolean {
    prompt "M32R SIO I/F" if [M32R]
    depends on [M32R]
    default [y] if [M32R]
    select SERIAL_CORE if [M32R]
    inherited [M32R]
    config SERIAL_M32R_SIO_CONSOLE boolean {
     prompt "use SIO console" if [SERIAL_M32R_SIO]
     depends on [SERIAL_M32R_SIO="y"]
     select SERIAL_CORE_CONSOLE if [SERIAL_M32R_SIO]
     inherited [SERIAL_M32R_SIO]
    }
    config SERIAL_M32R_PLDSIO boolean {
     prompt "M32R SIO I/F on a PLD" if [SERIAL_M32R_SIO && (PLAT_OPSPUT || PLAT_USRV || PLAT_M32700UT)]
     depends on [SERIAL_M32R_SIO="y" && (PLAT_OPSPUT || PLAT_USRV || PLAT_M32700UT)]
     default [n] if [SERIAL_M32R_SIO && (PLAT_OPSPUT || PLAT_USRV || PLAT_M32700UT)]
     inherited [SERIAL_M32R_SIO && (PLAT_OPSPUT || PLAT_USRV || PLAT_M32700UT)]
    }
   }
   config SERIAL_TXX9 boolean {
    prompt "TMPTX39XX/49XX SIO support" if [HAS_TXX9_SERIAL]
    depends on [HAS_TXX9_SERIAL]
    select SERIAL_CORE if [HAS_TXX9_SERIAL]
    default [y] if [HAS_TXX9_SERIAL]
    inherited [HAS_TXX9_SERIAL]
   }
   config HAS_TXX9_SERIAL boolean {
   }
   config SERIAL_TXX9_CONSOLE boolean {
    prompt "TMPTX39XX/49XX SIO Console support" if [SERIAL_TXX9]
    depends on [SERIAL_TXX9="y"]
    select SERIAL_CORE_CONSOLE if [SERIAL_TXX9]
    inherited [SERIAL_TXX9]
   }
   config SERIAL_TXX9_STDSERIAL boolean {
    prompt "TX39XX/49XX SIO act as standard serial" if [!SERIAL_8250 && SERIAL_TXX9]
    depends on [!SERIAL_8250 && SERIAL_TXX9]
    inherited [!SERIAL_8250 && SERIAL_TXX9]
   }
   config SERIAL_VR41XX tristate {
    prompt "NEC VR4100 series Serial Interface Unit support" if [CPU_VR41XX]
    depends on [CPU_VR41XX]
    select SERIAL_CORE if [CPU_VR41XX]
    inherited [CPU_VR41XX]
    config SERIAL_VR41XX_CONSOLE boolean {
     prompt "Enable NEC VR4100 series Serial Interface Unit console" if [SERIAL_VR41XX]
     depends on [SERIAL_VR41XX]
     select SERIAL_CORE_CONSOLE if [SERIAL_VR41XX]
     inherited [SERIAL_VR41XX]
    }
   }
   config SERIAL_JSM tristate {
    prompt "Digi International NEO PCI Support" if [PCI]
    depends on [PCI]
    select SERIAL_CORE if [PCI]
    inherited [PCI]
   }
   config SERIAL_SGI_IOC4 tristate {
    prompt "SGI IOC4 controller serial support" if [(IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC4]
    depends on [(IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC4]
    select SERIAL_CORE if [(IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC4]
    inherited [(IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC4]
   }
   config SERIAL_SGI_IOC3 tristate {
    prompt "SGI Altix IOC3 serial support" if [(IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC3]
    depends on [(IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC3]
    select SERIAL_CORE if [(IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC3]
    inherited [(IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC3]
   }
   config SERIAL_NETX boolean {
    prompt "NetX serial port support" if [ARM && ARCH_NETX]
    depends on [ARM && ARCH_NETX]
    select SERIAL_CORE if [ARM && ARCH_NETX]
    inherited [ARM && ARCH_NETX]
    config SERIAL_NETX_CONSOLE boolean {
     prompt "Console on NetX serial port" if [SERIAL_NETX]
     depends on [SERIAL_NETX]
     select SERIAL_CORE_CONSOLE if [SERIAL_NETX]
     inherited [SERIAL_NETX]
    }
   }
  }
  config UNIX98_PTYS boolean {
   prompt "Unix98 PTY support" if [EMBEDDED]
   default [y] if []
  }
  config LEGACY_PTYS boolean {
   prompt "Legacy (BSD) PTY support" if []
   default [y] if []
   config LEGACY_PTY_COUNT integer {
    prompt "Maximum number of legacy PTY in use" if [LEGACY_PTYS]
    depends on [LEGACY_PTYS]
    range [1 256] if [LEGACY_PTYS]
    default [256] if [LEGACY_PTYS]
    inherited [LEGACY_PTYS]
   }
  }
  config BRIQ_PANEL tristate {
   prompt "Total Impact briQ front panel driver" if [PPC_CHRP]
   depends on [PPC_CHRP]
   inherited [PPC_CHRP]
  }
  config PRINTER tristate {
   prompt "Parallel printer support" if [PARPORT]
   depends on [PARPORT]
   inherited [PARPORT]
   config LP_CONSOLE boolean {
    prompt "Support for console on line printer" if [PRINTER]
    depends on [PRINTER]
    inherited [PRINTER]
   }
  }
  config PPDEV tristate {
   prompt "Support for user-space parallel port device drivers" if [PARPORT]
   depends on [PARPORT]
   inherited [PARPORT]
  }
  config TIPAR tristate {
   prompt "Texas Instruments parallel link cable support" if [PARPORT]
   depends on [PARPORT]
   inherited [PARPORT]
  }
  config HVC_DRIVER boolean {
  }
  config HVC_CONSOLE boolean {
   prompt "pSeries Hypervisor Virtual Console support" if [PPC_PSERIES]
   depends on [PPC_PSERIES]
   select HVC_DRIVER if [PPC_PSERIES]
   inherited [PPC_PSERIES]
  }
  config HVC_ISERIES boolean {
   prompt "iSeries Hypervisor Virtual Console support" if [PPC_ISERIES && !VIOCONS]
   depends on [PPC_ISERIES && !VIOCONS]
   select HVC_DRIVER if [PPC_ISERIES && !VIOCONS]
   inherited [PPC_ISERIES && !VIOCONS]
  }
  config HVC_RTAS boolean {
   prompt "IBM RTAS Console support" if [PPC_RTAS]
   depends on [PPC_RTAS]
   select HVC_DRIVER if [PPC_RTAS]
   inherited [PPC_RTAS]
  }
  config HVCS tristate {
   prompt "IBM Hypervisor Virtual Console Server support" if [PPC_PSERIES]
   depends on [PPC_PSERIES]
   inherited [PPC_PSERIES]
  }
  menu "IPMI" {
   config IPMI_HANDLER tristate {
    prompt "IPMI top-level message handler" if []
    config IPMI_PANIC_EVENT boolean {
     prompt "Generate a panic event to all BMCs on a panic" if [IPMI_HANDLER]
     depends on [IPMI_HANDLER]
     inherited [IPMI_HANDLER]
     config IPMI_PANIC_STRING boolean {
      prompt "Generate OEM events containing the panic string" if [IPMI_PANIC_EVENT]
      depends on [IPMI_PANIC_EVENT]
      inherited [IPMI_PANIC_EVENT]
     }
    }
    config IPMI_DEVICE_INTERFACE tristate {
     prompt "Device interface for IPMI" if [IPMI_HANDLER]
     depends on [IPMI_HANDLER]
     inherited [IPMI_HANDLER]
    }
    config IPMI_SI tristate {
     prompt "IPMI System Interface handler" if [IPMI_HANDLER]
     depends on [IPMI_HANDLER]
     inherited [IPMI_HANDLER]
    }
    config IPMI_WATCHDOG tristate {
     prompt "IPMI Watchdog Timer" if [IPMI_HANDLER]
     depends on [IPMI_HANDLER]
     inherited [IPMI_HANDLER]
    }
    config IPMI_POWEROFF tristate {
     prompt "IPMI Poweroff" if [IPMI_HANDLER]
     depends on [IPMI_HANDLER]
     inherited [IPMI_HANDLER]
    }
   }
  }
  menu "Watchdog Cards" {
   config WATCHDOG boolean {
    prompt "Watchdog Timer Support" if []
    config WATCHDOG_NOWAYOUT boolean {
     prompt "Disable watchdog shutdown on close" if [WATCHDOG]
     depends on [WATCHDOG]
     inherited [WATCHDOG]
    }
    config SOFT_WATCHDOG tristate {
     prompt "Software watchdog" if [WATCHDOG]
     depends on [WATCHDOG]
     inherited [WATCHDOG]
    }
    config AT91RM9200_WATCHDOG tristate {
     prompt "AT91RM9200 watchdog" if [WATCHDOG && ARCH_AT91RM9200]
     depends on [WATCHDOG && ARCH_AT91RM9200]
     inherited [WATCHDOG && ARCH_AT91RM9200]
    }
    config 21285_WATCHDOG tristate {
     prompt "DC21285 watchdog" if [WATCHDOG && FOOTBRIDGE]
     depends on [WATCHDOG && FOOTBRIDGE]
     inherited [WATCHDOG && FOOTBRIDGE]
    }
    config 977_WATCHDOG tristate {
     prompt "NetWinder WB83C977 watchdog" if [WATCHDOG && FOOTBRIDGE && ARCH_NETWINDER]
     depends on [WATCHDOG && FOOTBRIDGE && ARCH_NETWINDER]
     inherited [WATCHDOG && FOOTBRIDGE && ARCH_NETWINDER]
    }
    config IXP2000_WATCHDOG tristate {
     prompt "IXP2000 Watchdog" if [WATCHDOG && ARCH_IXP2000]
     depends on [WATCHDOG && ARCH_IXP2000]
     inherited [WATCHDOG && ARCH_IXP2000]
    }
    config IXP4XX_WATCHDOG tristate {
     prompt "IXP4xx Watchdog" if [WATCHDOG && ARCH_IXP4XX]
     depends on [WATCHDOG && ARCH_IXP4XX]
     inherited [WATCHDOG && ARCH_IXP4XX]
    }
    config S3C2410_WATCHDOG tristate {
     prompt "S3C2410 Watchdog" if [WATCHDOG && ARCH_S3C2410]
     depends on [WATCHDOG && ARCH_S3C2410]
     inherited [WATCHDOG && ARCH_S3C2410]
    }
    config SA1100_WATCHDOG tristate {
     prompt "SA1100/PXA2xx watchdog" if [WATCHDOG && (ARCH_SA1100 || ARCH_PXA)]
     depends on [WATCHDOG && (ARCH_SA1100 || ARCH_PXA)]
     inherited [WATCHDOG && (ARCH_SA1100 || ARCH_PXA)]
    }
    config MPCORE_WATCHDOG tristate {
     prompt "MPcore watchdog" if [WATCHDOG && ARM_MPCORE_PLATFORM && LOCAL_TIMERS]
     depends on [WATCHDOG && ARM_MPCORE_PLATFORM && LOCAL_TIMERS]
     inherited [WATCHDOG && ARM_MPCORE_PLATFORM && LOCAL_TIMERS]
    }
    config EP93XX_WATCHDOG tristate {
     prompt "EP93xx Watchdog" if [WATCHDOG && ARCH_EP93XX]
     depends on [WATCHDOG && ARCH_EP93XX]
     inherited [WATCHDOG && ARCH_EP93XX]
    }
    config OMAP_WATCHDOG tristate {
     prompt "OMAP Watchdog" if [WATCHDOG && (ARCH_OMAP16XX || ARCH_OMAP24XX)]
     depends on [WATCHDOG && (ARCH_OMAP16XX || ARCH_OMAP24XX)]
     inherited [WATCHDOG && (ARCH_OMAP16XX || ARCH_OMAP24XX)]
    }
    config PNX4008_WATCHDOG tristate {
     prompt "PNX4008 Watchdog" if [WATCHDOG && ARCH_PNX4008]
     depends on [WATCHDOG && ARCH_PNX4008]
     inherited [WATCHDOG && ARCH_PNX4008]
    }
    config ACQUIRE_WDT tristate {
     prompt "Acquire SBC Watchdog Timer" if [WATCHDOG && X86]
     depends on [WATCHDOG && X86]
     inherited [WATCHDOG && X86]
    }
    config ADVANTECH_WDT tristate {
     prompt "Advantech SBC Watchdog Timer" if [WATCHDOG && X86]
     depends on [WATCHDOG && X86]
     inherited [WATCHDOG && X86]
    }
    config ALIM1535_WDT tristate {
     prompt "ALi M1535 PMU Watchdog Timer" if [WATCHDOG && X86 && PCI]
     depends on [WATCHDOG && X86 && PCI]
     inherited [WATCHDOG && X86 && PCI]
    }
    config ALIM7101_WDT tristate {
     prompt "ALi M7101 PMU Computer Watchdog" if [WATCHDOG && X86 && PCI]
     depends on [WATCHDOG && X86 && PCI]
     inherited [WATCHDOG && X86 && PCI]
    }
    config SC520_WDT tristate {
     prompt "AMD Elan SC520 processor Watchdog" if [WATCHDOG && X86]
     depends on [WATCHDOG && X86]
     inherited [WATCHDOG && X86]
    }
    config EUROTECH_WDT tristate {
     prompt "Eurotech CPU-1220/1410 Watchdog Timer" if [WATCHDOG && X86]
     depends on [WATCHDOG && X86]
     inherited [WATCHDOG && X86]
    }
    config IB700_WDT tristate {
     prompt "IB700 SBC Watchdog Timer" if [WATCHDOG && X86]
     depends on [WATCHDOG && X86]
     inherited [WATCHDOG && X86]
    }
    config IBMASR tristate {
     prompt "IBM Automatic Server Restart" if [WATCHDOG && X86]
     depends on [WATCHDOG && X86]
     inherited [WATCHDOG && X86]
    }
    config WAFER_WDT tristate {
     prompt "ICP Wafer 5823 Single Board Computer Watchdog" if [WATCHDOG && X86]
     depends on [WATCHDOG && X86]
     inherited [WATCHDOG && X86]
    }
    config I6300ESB_WDT tristate {
     prompt "Intel 6300ESB Timer/Watchdog" if [WATCHDOG && X86 && PCI]
     depends on [WATCHDOG && X86 && PCI]
     inherited [WATCHDOG && X86 && PCI]
    }
    config I8XX_TCO tristate {
     prompt "Intel i8xx TCO Timer/Watchdog" if [WATCHDOG && (X86 || IA64) && PCI]
     depends on [WATCHDOG && (X86 || IA64) && PCI]
     inherited [WATCHDOG && (X86 || IA64) && PCI]
    }
    config ITCO_WDT tristate {
     prompt "Intel TCO Timer/Watchdog" if [WATCHDOG && (X86 || IA64) && PCI]
     depends on [WATCHDOG && (X86 || IA64) && PCI]
     inherited [WATCHDOG && (X86 || IA64) && PCI]
     config ITCO_VENDOR_SUPPORT boolean {
      prompt "Intel TCO Timer/Watchdog Specific Vendor Support" if [ITCO_WDT]
      depends on [ITCO_WDT]
      inherited [ITCO_WDT]
     }
    }
    config SC1200_WDT tristate {
     prompt "National Semiconductor PC87307/PC97307 (ala SC1200) Watchdog" if [WATCHDOG && X86]
     depends on [WATCHDOG && X86]
     inherited [WATCHDOG && X86]
    }
    config SCx200_WDT tristate {
     prompt "National Semiconductor SCx200 Watchdog" if [WATCHDOG && SCx200 && PCI]
     depends on [WATCHDOG && SCx200 && PCI]
     inherited [WATCHDOG && SCx200 && PCI]
    }
    config PC87413_WDT tristate {
     prompt "NS PC87413 watchdog" if [WATCHDOG && X86]
     depends on [WATCHDOG && X86]
     inherited [WATCHDOG && X86]
    }
    config 60XX_WDT tristate {
     prompt "SBC-60XX Watchdog Timer" if [WATCHDOG && X86]
     depends on [WATCHDOG && X86]
     inherited [WATCHDOG && X86]
    }
    config SBC8360_WDT tristate {
     prompt "SBC8360 Watchdog Timer" if [WATCHDOG && X86]
     depends on [WATCHDOG && X86]
     inherited [WATCHDOG && X86]
    }
    config CPU5_WDT tristate {
     prompt "SMA CPU5 Watchdog" if [WATCHDOG && X86]
     depends on [WATCHDOG && X86]
     inherited [WATCHDOG && X86]
    }
    config SMSC37B787_WDT tristate {
     prompt "Winbond SMsC37B787 Watchdog Timer" if [WATCHDOG && X86]
     depends on [WATCHDOG && X86]
     inherited [WATCHDOG && X86]
    }
    config W83627HF_WDT tristate {
     prompt "W83627HF Watchdog Timer" if [WATCHDOG && X86]
     depends on [WATCHDOG && X86]
     inherited [WATCHDOG && X86]
    }
    config W83697HF_WDT tristate {
     prompt "W83697HF/W83697HG Watchdog Timer" if [WATCHDOG && X86]
     depends on [WATCHDOG && X86]
     inherited [WATCHDOG && X86]
    }
    config W83877F_WDT tristate {
     prompt "W83877F (EMACS) Watchdog Timer" if [WATCHDOG && X86]
     depends on [WATCHDOG && X86]
     inherited [WATCHDOG && X86]
    }
    config W83977F_WDT tristate {
     prompt "W83977F (PCM-5335) Watchdog Timer" if [WATCHDOG && X86]
     depends on [WATCHDOG && X86]
     inherited [WATCHDOG && X86]
    }
    config MACHZ_WDT tristate {
     prompt "ZF MachZ Watchdog" if [WATCHDOG && X86]
     depends on [WATCHDOG && X86]
     inherited [WATCHDOG && X86]
    }
    config SBC_EPX_C3_WATCHDOG tristate {
     prompt "Winsystems SBC EPX-C3 watchdog" if [WATCHDOG && X86]
     depends on [WATCHDOG && X86]
     inherited [WATCHDOG && X86]
    }
    config 8xx_WDT tristate {
     prompt "MPC8xx Watchdog Timer" if [WATCHDOG && 8xx]
     depends on [WATCHDOG && 8xx]
     inherited [WATCHDOG && 8xx]
    }
    config 83xx_WDT tristate {
     prompt "MPC83xx Watchdog Timer" if [WATCHDOG && PPC_83xx]
     depends on [WATCHDOG && PPC_83xx]
     inherited [WATCHDOG && PPC_83xx]
    }
    config MV64X60_WDT tristate {
     prompt "MV64X60 (Marvell Discovery) Watchdog Timer" if [WATCHDOG && MV64X60]
     depends on [WATCHDOG && MV64X60]
     inherited [WATCHDOG && MV64X60]
    }
    config BOOKE_WDT tristate {
     prompt "PowerPC Book-E Watchdog Timer" if [WATCHDOG && (BOOKE || 4xx)]
     depends on [WATCHDOG && (BOOKE || 4xx)]
     inherited [WATCHDOG && (BOOKE || 4xx)]
    }
    config WATCHDOG_RTAS tristate {
     prompt "RTAS watchdog" if [WATCHDOG && PPC_RTAS]
     depends on [WATCHDOG && PPC_RTAS]
     inherited [WATCHDOG && PPC_RTAS]
    }
    config INDYDOG tristate {
     prompt "Indy/I2 Hardware Watchdog" if [WATCHDOG && SGI_IP22]
     depends on [WATCHDOG && SGI_IP22]
     inherited [WATCHDOG && SGI_IP22]
    }
    config WDT_RM9K_GPI tristate {
     prompt "RM9000/GPI hardware watchdog" if [WATCHDOG && CPU_RM9000]
     depends on [WATCHDOG && CPU_RM9000]
     inherited [WATCHDOG && CPU_RM9000]
    }
    config ZVM_WATCHDOG tristate {
     prompt "z/VM Watchdog Timer" if [WATCHDOG && S390]
     depends on [WATCHDOG && S390]
     inherited [WATCHDOG && S390]
    }
    config SH_WDT tristate {
     prompt "SuperH Watchdog" if [WATCHDOG && SUPERH]
     depends on [WATCHDOG && SUPERH]
     inherited [WATCHDOG && SUPERH]
     config SH_WDT_MMAP boolean {
      prompt "Allow mmap of SH WDT" if [SH_WDT]
      default [n] if [SH_WDT]
      depends on [SH_WDT]
      inherited [SH_WDT]
     }
    }
    config WATCHDOG_CP1XXX tristate {
     prompt "CP1XXX Hardware Watchdog support" if [WATCHDOG && SPARC64 && PCI]
     depends on [WATCHDOG && SPARC64 && PCI]
     inherited [WATCHDOG && SPARC64 && PCI]
    }
    config WATCHDOG_RIO tristate {
     prompt "RIO Hardware Watchdog support" if [WATCHDOG && SPARC64 && PCI]
     depends on [WATCHDOG && SPARC64 && PCI]
     inherited [WATCHDOG && SPARC64 && PCI]
    }
    config PCWATCHDOG tristate {
     prompt "Berkshire Products ISA-PC Watchdog" if [WATCHDOG && ISA]
     depends on [WATCHDOG && ISA]
     inherited [WATCHDOG && ISA]
    }
    config MIXCOMWD tristate {
     prompt "Mixcom Watchdog" if [WATCHDOG && ISA]
     depends on [WATCHDOG && ISA]
     inherited [WATCHDOG && ISA]
    }
    config WDT tristate {
     prompt "WDT Watchdog timer" if [WATCHDOG && ISA]
     depends on [WATCHDOG && ISA]
     inherited [WATCHDOG && ISA]
     config WDT_501 boolean {
      prompt "WDT501 features" if [WDT]
      depends on [WDT]
      inherited [WDT]
     }
    }
    config PCIPCWATCHDOG tristate {
     prompt "Berkshire Products PCI-PC Watchdog" if [WATCHDOG && PCI]
     depends on [WATCHDOG && PCI]
     inherited [WATCHDOG && PCI]
    }
    config WDTPCI tristate {
     prompt "PCI-WDT500/501 Watchdog timer" if [WATCHDOG && PCI]
     depends on [WATCHDOG && PCI]
     inherited [WATCHDOG && PCI]
     config WDT_501_PCI boolean {
      prompt "PCI-WDT501 features" if [WDTPCI]
      depends on [WDTPCI]
      inherited [WDTPCI]
     }
    }
    config USBPCWATCHDOG tristate {
     prompt "Berkshire Products USB-PC Watchdog" if [WATCHDOG && USB]
     depends on [WATCHDOG && USB]
     inherited [WATCHDOG && USB]
    }
   }
  }
  config DS1620 tristate {
   prompt "NetWinder thermometer support" if [ARCH_NETWINDER]
   depends on [ARCH_NETWINDER]
   inherited [ARCH_NETWINDER]
  }
  config NWBUTTON tristate {
   prompt "NetWinder Button" if [ARCH_NETWINDER]
   depends on [ARCH_NETWINDER]
   inherited [ARCH_NETWINDER]
   config NWBUTTON_REBOOT boolean {
    prompt "Reboot Using Button" if [NWBUTTON]
    depends on [NWBUTTON]
    inherited [NWBUTTON]
   }
  }
  config NWFLASH tristate {
   prompt "NetWinder flash support" if [ARCH_NETWINDER]
   depends on [ARCH_NETWINDER]
   inherited [ARCH_NETWINDER]
  }
  config HW_RANDOM tristate {
   prompt "Hardware Random Number Generator Core support" if []
   default [m] if []
   config HW_RANDOM_INTEL tristate {
    prompt "Intel HW Random Number Generator support" if [HW_RANDOM && (X86 || IA64) && PCI]
    depends on [HW_RANDOM && (X86 || IA64) && PCI]
    default [HW_RANDOM] if [HW_RANDOM && (X86 || IA64) && PCI]
    inherited [HW_RANDOM && (X86 || IA64) && PCI]
   }
   config HW_RANDOM_AMD tristate {
    prompt "AMD HW Random Number Generator support" if [HW_RANDOM && X86 && PCI]
    depends on [HW_RANDOM && X86 && PCI]
    default [HW_RANDOM] if [HW_RANDOM && X86 && PCI]
    inherited [HW_RANDOM && X86 && PCI]
   }
   config HW_RANDOM_GEODE tristate {
    prompt "AMD Geode HW Random Number Generator support" if [HW_RANDOM && X86 && PCI]
    depends on [HW_RANDOM && X86 && PCI]
    default [HW_RANDOM] if [HW_RANDOM && X86 && PCI]
    inherited [HW_RANDOM && X86 && PCI]
   }
   config HW_RANDOM_VIA tristate {
    prompt "VIA HW Random Number Generator support" if [HW_RANDOM && X86_32]
    depends on [HW_RANDOM && X86_32]
    default [HW_RANDOM] if [HW_RANDOM && X86_32]
    inherited [HW_RANDOM && X86_32]
   }
   config HW_RANDOM_IXP4XX tristate {
    prompt "Intel IXP4xx NPU HW Random Number Generator support" if [HW_RANDOM && ARCH_IXP4XX]
    depends on [HW_RANDOM && ARCH_IXP4XX]
    default [HW_RANDOM] if [HW_RANDOM && ARCH_IXP4XX]
    inherited [HW_RANDOM && ARCH_IXP4XX]
   }
   config HW_RANDOM_OMAP tristate {
    prompt "OMAP Random Number Generator support" if [HW_RANDOM && (ARCH_OMAP16XX || ARCH_OMAP24XX)]
    depends on [HW_RANDOM && (ARCH_OMAP16XX || ARCH_OMAP24XX)]
    default [HW_RANDOM] if [HW_RANDOM && (ARCH_OMAP16XX || ARCH_OMAP24XX)]
    inherited [HW_RANDOM && (ARCH_OMAP16XX || ARCH_OMAP24XX)]
   }
  }
  config NVRAM tristate {
   prompt "/dev/nvram support" if [ATARI || X86 || ARM || GENERIC_NVRAM]
   depends on [ATARI || X86 || ARM || GENERIC_NVRAM]
   inherited [ATARI || X86 || ARM || GENERIC_NVRAM]
  }
  config RTC tristate {
   prompt "Enhanced Real Time Clock Support" if [!PPC && !PARISC && !IA64 && !M68K && (!SPARC || PCI) && !FRV && !ARM && !SUPERH]
   depends on [!PPC && !PARISC && !IA64 && !M68K && (!SPARC || PCI) && !FRV && !ARM && !SUPERH]
   inherited [!PPC && !PARISC && !IA64 && !M68K && (!SPARC || PCI) && !FRV && !ARM && !SUPERH]
  }
  config SGI_DS1286 tristate {
   prompt "SGI DS1286 RTC support" if [SGI_IP22]
   depends on [SGI_IP22]
   inherited [SGI_IP22]
  }
  config SGI_IP27_RTC boolean {
   prompt "SGI M48T35 RTC support" if [SGI_IP27]
   depends on [SGI_IP27]
   inherited [SGI_IP27]
  }
  config GEN_RTC tristate {
   prompt "Generic /dev/rtc emulation" if [RTC!="y" && !IA64 && !ARM && !M32R && !SPARC && !FRV]
   depends on [RTC!="y" && !IA64 && !ARM && !M32R && !SPARC && !FRV]
   inherited [RTC!="y" && !IA64 && !ARM && !M32R && !SPARC && !FRV]
   config GEN_RTC_X boolean {
    prompt "Extended RTC operation" if [GEN_RTC]
    depends on [GEN_RTC]
    inherited [GEN_RTC]
   }
  }
  config EFI_RTC boolean {
   prompt "EFI Real Time Clock Services" if [IA64]
   depends on [IA64]
   inherited [IA64]
  }
  config DS1302 tristate {
   prompt "DS1302 RTC support" if [M32R && (PLAT_M32700UT || PLAT_OPSPUT)]
   depends on [M32R && (PLAT_M32700UT || PLAT_OPSPUT)]
   inherited [M32R && (PLAT_M32700UT || PLAT_OPSPUT)]
  }
  config COBALT_LCD boolean {
   prompt "Support for Cobalt LCD" if [MIPS_COBALT]
   depends on [MIPS_COBALT]
   inherited [MIPS_COBALT]
  }
  config DTLK tristate {
   prompt "Double Talk PC internal speech card support" if []
  }
  config R3964 tristate {
   prompt "Siemens R3964 line discipline" if []
  }
  config APPLICOM tristate {
   prompt "Applicom intelligent fieldbus card support" if [PCI]
   depends on [PCI]
   inherited [PCI]
  }
  config SONYPI tristate {
   prompt "Sony Vaio Programmable I/O Control Device support (EXPERIMENTAL)" if [EXPERIMENTAL && X86 && PCI && INPUT && !64BIT]
   depends on [EXPERIMENTAL && X86 && PCI && INPUT && !64BIT]
   inherited [EXPERIMENTAL && X86 && PCI && INPUT && !64BIT]
  }
  config TANBAC_TB0219 tristate {
   prompt "TANBAC TB0219 base board support" if [TANBAC_TB022X]
   depends on [TANBAC_TB022X]
   select GPIO_VR41XX if [TANBAC_TB022X]
   inherited [TANBAC_TB022X]
  }
  config AGP tristate {
   prompt "/dev/agpgart (AGP Support)" if [(ALPHA || IA64 || PARISC || PPC || X86) && PCI]
   depends on [ALPHA || IA64 || PARISC || PPC || X86]
   depends on [PCI]
   inherited [(ALPHA || IA64 || PARISC || PPC || X86) && PCI]
   config AGP_ALI tristate {
    prompt "ALI chipset support" if [AGP && X86_32]
    depends on [AGP && X86_32]
    inherited [AGP && X86_32]
   }
   config AGP_ATI tristate {
    prompt "ATI chipset support" if [AGP && X86_32]
    depends on [AGP && X86_32]
    inherited [AGP && X86_32]
   }
   config AGP_AMD tristate {
    prompt "AMD Irongate, 761, and 762 chipset support" if [AGP && X86_32]
    depends on [AGP && X86_32]
    inherited [AGP && X86_32]
   }
   config AGP_AMD64 tristate {
    prompt "AMD Opteron/Athlon64 on-CPU GART support" if [AGP && X86 && !IOMMU]
    depends on [AGP && X86]
    default [y] if [AGP && X86 && IOMMU]
    inherited [AGP && X86]
   }
   config AGP_INTEL tristate {
    prompt "Intel 440LX/BX/GX, I8xx and E7x05 chipset support" if [AGP && X86]
    depends on [AGP && X86]
    inherited [AGP && X86]
   }
   config AGP_NVIDIA tristate {
    prompt "NVIDIA nForce/nForce2 chipset support" if [AGP && X86_32]
    depends on [AGP && X86_32]
    inherited [AGP && X86_32]
   }
   config AGP_SIS tristate {
    prompt "SiS chipset support" if [AGP && X86]
    depends on [AGP && X86]
    inherited [AGP && X86]
   }
   config AGP_SWORKS tristate {
    prompt "Serverworks LE/HE chipset support" if [AGP && X86_32]
    depends on [AGP && X86_32]
    inherited [AGP && X86_32]
   }
   config AGP_VIA tristate {
    prompt "VIA chipset support" if [AGP && X86]
    depends on [AGP && X86]
    inherited [AGP && X86]
   }
   config AGP_I460 tristate {
    prompt "Intel 460GX chipset support" if [AGP && (IA64_DIG || IA64_GENERIC)]
    depends on [AGP && (IA64_DIG || IA64_GENERIC)]
    inherited [AGP && (IA64_DIG || IA64_GENERIC)]
   }
   config AGP_HP_ZX1 tristate {
    prompt "HP ZX1 chipset AGP support" if [AGP && (IA64_HP_ZX1 || IA64_HP_ZX1_SWIOTLB || IA64_GENERIC)]
    depends on [AGP && (IA64_HP_ZX1 || IA64_HP_ZX1_SWIOTLB || IA64_GENERIC)]
    inherited [AGP && (IA64_HP_ZX1 || IA64_HP_ZX1_SWIOTLB || IA64_GENERIC)]
   }
   config AGP_PARISC tristate {
    prompt "HP Quicksilver AGP support" if [AGP && PARISC && 64BIT]
    depends on [AGP && PARISC && 64BIT]
    inherited [AGP && PARISC && 64BIT]
   }
   config AGP_ALPHA_CORE tristate {
    prompt "Alpha AGP support" if [AGP && (ALPHA_GENERIC || ALPHA_TITAN || ALPHA_MARVEL)]
    depends on [AGP && (ALPHA_GENERIC || ALPHA_TITAN || ALPHA_MARVEL)]
    default [AGP] if [AGP && (ALPHA_GENERIC || ALPHA_TITAN || ALPHA_MARVEL)]
    inherited [AGP && (ALPHA_GENERIC || ALPHA_TITAN || ALPHA_MARVEL)]
   }
   config AGP_UNINORTH tristate {
    prompt "Apple UniNorth & U3 AGP support" if [AGP && PPC_PMAC]
    depends on [AGP && PPC_PMAC]
    inherited [AGP && PPC_PMAC]
   }
   config AGP_EFFICEON tristate {
    prompt "Transmeta Efficeon support" if [AGP && X86_32]
    depends on [AGP && X86_32]
    inherited [AGP && X86_32]
   }
   config AGP_SGI_TIOCA tristate {
    prompt "SGI TIO chipset AGP support" if [AGP && (IA64_SGI_SN2 || IA64_GENERIC)]
    depends on [AGP && (IA64_SGI_SN2 || IA64_GENERIC)]
    inherited [AGP && (IA64_SGI_SN2 || IA64_GENERIC)]
   }
  }
  config DRM tristate {
   prompt "Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)" if [(AGP || AGP="n") && PCI]
   depends on [(AGP || AGP="n") && PCI]
   inherited [(AGP || AGP="n") && PCI]
   config DRM_TDFX tristate {
    prompt "3dfx Banshee/Voodoo3+" if [DRM && PCI]
    depends on [DRM && PCI]
    inherited [DRM && PCI]
   }
   config DRM_R128 tristate {
    prompt "ATI Rage 128" if [DRM && PCI]
    depends on [DRM && PCI]
    inherited [DRM && PCI]
   }
   config DRM_RADEON tristate {
    prompt "ATI Radeon" if [DRM && PCI]
    depends on [DRM && PCI]
    inherited [DRM && PCI]
   }
   config DRM_I810 tristate {
    prompt "Intel I810" if [DRM && AGP && AGP_INTEL]
    depends on [DRM && AGP && AGP_INTEL]
    inherited [DRM && AGP && AGP_INTEL]
   }
   choice tristate optional {
    prompt "Intel 830M, 845G, 852GM, 855GM, 865G" if [DRM && AGP && AGP_INTEL]
    depends on [DRM && AGP && AGP_INTEL]
    config DRM_I830 tristate {
     prompt "i830 driver" if [<choice>]
     inherited [<choice>]
    }
    config DRM_I915 tristate {
     prompt "i915 driver" if [<choice>]
     inherited [<choice>]
    }
   }
   config DRM_MGA tristate {
    prompt "Matrox g200/g400" if [DRM]
    depends on [DRM]
    inherited [DRM]
   }
   config DRM_SIS tristate {
    prompt "SiS video cards" if [DRM && AGP]
    depends on [DRM && AGP]
    inherited [DRM && AGP]
   }
   config DRM_VIA tristate {
    prompt "Via unichrome video cards" if [DRM]
    depends on [DRM]
    inherited [DRM]
   }
   config DRM_SAVAGE tristate {
    prompt "Savage video cards" if [DRM]
    depends on [DRM]
    inherited [DRM]
   }
  }
  menu "PCMCIA character devices" {
   depends on [HOTPLUG && PCMCIA!="n"]
   config SYNCLINK_CS tristate {
    prompt "SyncLink PC Card support" if [HOTPLUG && PCMCIA]
    depends on [PCMCIA]
    inherited [HOTPLUG && PCMCIA]
   }
   config CARDMAN_4000 tristate {
    prompt "Omnikey Cardman 4000 support" if [HOTPLUG && PCMCIA]
    depends on [PCMCIA]
    inherited [HOTPLUG && PCMCIA]
   }
   config CARDMAN_4040 tristate {
    prompt "Omnikey CardMan 4040 support" if [HOTPLUG && PCMCIA]
    depends on [PCMCIA]
    inherited [HOTPLUG && PCMCIA]
   }
  }
  config MWAVE tristate {
   prompt "ACP Modem (Mwave) support" if [X86]
   depends on [X86]
   select SERIAL_8250 if [X86]
   inherited [X86]
  }
  config SCx200_GPIO tristate {
   prompt "NatSemi SCx200 GPIO Support" if [SCx200]
   depends on [SCx200]
   select NSC_GPIO if [SCx200]
   inherited [SCx200]
  }
  config PC8736x_GPIO tristate {
   prompt "NatSemi PC8736x GPIO Support" if [X86]
   depends on [X86]
   default [SCx200_GPIO] if [X86]
   select NSC_GPIO if [X86]
   inherited [X86]
  }
  config NSC_GPIO tristate {
   prompt "NatSemi Base GPIO Support" if [X86_32]
   depends on [X86_32]
   inherited [X86_32]
  }
  config CS5535_GPIO tristate {
   prompt "AMD CS5535/CS5536 GPIO (Geode Companion Device)" if [X86_32]
   depends on [X86_32]
   inherited [X86_32]
  }
  config GPIO_VR41XX tristate {
   prompt "NEC VR4100 series General-purpose I/O Unit support" if [CPU_VR41XX]
   depends on [CPU_VR41XX]
   inherited [CPU_VR41XX]
  }
  config RAW_DRIVER tristate {
   prompt "RAW driver (/dev/raw/rawN) (OBSOLETE)" if [BLOCK]
   depends on [BLOCK]
   inherited [BLOCK]
   config MAX_RAW_DEVS integer {
    prompt "Maximum number of RAW devices to support (1-8192)" if [RAW_DRIVER]
    depends on [RAW_DRIVER]
    default [256] if [RAW_DRIVER]
    inherited [RAW_DRIVER]
   }
  }
  config HPET boolean {
   prompt "HPET - High Precision Event Timer" if [ACPI && (X86 || IA64)]
   default [n] if [ACPI]
   depends on [ACPI]
   inherited [ACPI]
   config HPET_RTC_IRQ boolean {
    prompt "HPET Control RTC IRQ" if [HPET && !HPET_EMULATE_RTC]
    default [n] if [HPET]
    depends on [HPET]
    inherited [HPET]
   }
   config HPET_MMAP boolean {
    prompt "Allow mmap of HPET" if [HPET]
    default [y] if [HPET]
    depends on [HPET]
    inherited [HPET]
   }
  }
  config HANGCHECK_TIMER tristate {
   prompt "Hangcheck timer" if [X86 || IA64 || PPC64]
   depends on [X86 || IA64 || PPC64]
   inherited [X86 || IA64 || PPC64]
  }
  config MMTIMER tristate {
   prompt "MMTIMER Memory mapped RTC for SGI Altix" if [IA64_GENERIC || IA64_SGI_SN2]
   depends on [IA64_GENERIC || IA64_SGI_SN2]
   default [y] if [IA64_GENERIC || IA64_SGI_SN2]
   inherited [IA64_GENERIC || IA64_SGI_SN2]
  }
  menu "TPM devices" {
   config TCG_TPM tristate {
    prompt "TPM Hardware Support" if [EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [EXPERIMENTAL]
    config TCG_TIS tristate {
     prompt "TPM Interface Specification 1.2 Interface" if [TCG_TPM && PNPACPI]
     depends on [TCG_TPM && PNPACPI]
     inherited [TCG_TPM && PNPACPI]
    }
    config TCG_NSC tristate {
     prompt "National Semiconductor TPM Interface" if [TCG_TPM && PNPACPI]
     depends on [TCG_TPM && PNPACPI]
     inherited [TCG_TPM && PNPACPI]
    }
    config TCG_ATMEL tristate {
     prompt "Atmel TPM Interface" if [TCG_TPM]
     depends on [TCG_TPM]
     inherited [TCG_TPM]
    }
    config TCG_INFINEON tristate {
     prompt "Infineon Technologies TPM Interface" if [TCG_TPM && PNPACPI]
     depends on [TCG_TPM && PNPACPI]
     inherited [TCG_TPM && PNPACPI]
    }
   }
  }
  config TELCLOCK tristate {
   prompt "Telecom clock driver for MPBL0010 ATCA SBC" if [EXPERIMENTAL && X86]
   depends on [EXPERIMENTAL && X86]
   default [n] if [EXPERIMENTAL && X86]
   inherited [EXPERIMENTAL && X86]
  }
 }
 menu "I2C support" {
  config I2C tristate {
   prompt "I2C support" if []
   config I2C_CHARDEV tristate {
    prompt "I2C device interface" if [I2C]
    depends on [I2C]
    inherited [I2C]
   }
   menu "I2C Algorithms" {
    depends on [I2C]
    config I2C_ALGOBIT tristate {
     prompt "I2C bit-banging interfaces" if [I2C]
     depends on [I2C]
     inherited [I2C]
    }
    config I2C_ALGOPCF tristate {
     prompt "I2C PCF 8584 interfaces" if [I2C]
     depends on [I2C]
     inherited [I2C]
    }
    config I2C_ALGOPCA tristate {
     prompt "I2C PCA 9564 interfaces" if [I2C]
     depends on [I2C]
     inherited [I2C]
    }
    config I2C_ALGO8XX tristate {
     prompt "MPC8xx CPM I2C interface" if [8xx && I2C]
     depends on [8xx && I2C]
     inherited [8xx && I2C]
    }
    config I2C_ALGO_SGI tristate {
     prompt "I2C SGI interfaces" if [I2C && (SGI_IP22 || SGI_IP32 || X86_VISWS)]
     depends on [I2C && (SGI_IP22 || SGI_IP32 || X86_VISWS)]
     inherited [I2C && (SGI_IP22 || SGI_IP32 || X86_VISWS)]
    }
   }
   menu "I2C Hardware Bus support" {
    depends on [I2C]
    config I2C_ALI1535 tristate {
     prompt "ALI 1535" if [I2C && PCI]
     depends on [I2C && PCI]
     inherited [I2C && PCI]
    }
    config I2C_ALI1563 tristate {
     prompt "ALI 1563" if [I2C && PCI && EXPERIMENTAL]
     depends on [I2C && PCI && EXPERIMENTAL]
     inherited [I2C && PCI && EXPERIMENTAL]
    }
    config I2C_ALI15X3 tristate {
     prompt "ALI 15x3" if [I2C && PCI]
     depends on [I2C && PCI]
     inherited [I2C && PCI]
    }
    config I2C_AMD756 tristate {
     prompt "AMD 756/766/768/8111 and nVidia nForce" if [I2C && PCI]
     depends on [I2C && PCI]
     inherited [I2C && PCI]
     config I2C_AMD756_S4882 tristate {
      prompt "SMBus multiplexing on the Tyan S4882" if [I2C && I2C_AMD756 && EXPERIMENTAL]
      depends on [I2C_AMD756 && EXPERIMENTAL]
      inherited [I2C && I2C_AMD756 && EXPERIMENTAL]
     }
    }
    config I2C_AMD8111 tristate {
     prompt "AMD 8111" if [I2C && PCI]
     depends on [I2C && PCI]
     inherited [I2C && PCI]
    }
    config I2C_AT91 tristate {
     prompt "Atmel AT91 I2C Two-Wire interface (TWI)" if [I2C && ARCH_AT91 && EXPERIMENTAL]
     depends on [I2C && ARCH_AT91 && EXPERIMENTAL]
     inherited [I2C && ARCH_AT91 && EXPERIMENTAL]
    }
    config I2C_AU1550 tristate {
     prompt "Au1550/Au1200 SMBus interface" if [I2C && (SOC_AU1550 || SOC_AU1200)]
     depends on [I2C && (SOC_AU1550 || SOC_AU1200)]
     inherited [I2C && (SOC_AU1550 || SOC_AU1200)]
    }
    config I2C_ELEKTOR tristate {
     prompt "Elektor ISA card" if [I2C && ISA && BROKEN_ON_SMP]
     depends on [I2C && ISA && BROKEN_ON_SMP]
     select I2C_ALGOPCF if [I2C && ISA && BROKEN_ON_SMP]
     inherited [I2C && ISA && BROKEN_ON_SMP]
    }
    config I2C_HYDRA tristate {
     prompt "CHRP Apple Hydra Mac I/O I2C interface" if [I2C && PCI && PPC_CHRP && EXPERIMENTAL]
     depends on [I2C && PCI && PPC_CHRP && EXPERIMENTAL]
     select I2C_ALGOBIT if [I2C && PCI && PPC_CHRP && EXPERIMENTAL]
     inherited [I2C && PCI && PPC_CHRP && EXPERIMENTAL]
    }
    config I2C_I801 tristate {
     prompt "Intel 82801 (ICH)" if [I2C && PCI]
     depends on [I2C && PCI]
     inherited [I2C && PCI]
    }
    config I2C_I810 tristate {
     prompt "Intel 810/815" if [I2C && PCI]
     depends on [I2C && PCI]
     select I2C_ALGOBIT if [I2C && PCI]
     inherited [I2C && PCI]
    }
    config I2C_PXA tristate {
     prompt "Intel PXA2XX I2C adapter (EXPERIMENTAL)" if [I2C && EXPERIMENTAL && ARCH_PXA]
     depends on [I2C && EXPERIMENTAL && ARCH_PXA]
     inherited [I2C && EXPERIMENTAL && ARCH_PXA]
     config I2C_PXA_SLAVE boolean {
      prompt "Intel PXA2XX I2C Slave comms support" if [I2C && I2C_PXA]
      depends on [I2C_PXA]
      inherited [I2C && I2C_PXA]
     }
    }
    config I2C_PIIX4 tristate {
     prompt "Intel PIIX4 and compatible (ATI/Serverworks/Broadcom/SMSC)" if [I2C && PCI]
     depends on [I2C && PCI]
     inherited [I2C && PCI]
    }
    config I2C_IBM_IIC tristate {
     prompt "IBM PPC 4xx on-chip I2C interface" if [IBM_OCP && I2C]
     depends on [IBM_OCP && I2C]
     inherited [IBM_OCP && I2C]
    }
    config I2C_IOP3XX tristate {
     prompt "Intel IOPx3xx and IXP4xx on-chip I2C interface" if [(ARCH_IOP32X || ARCH_IOP33X || ARCH_IXP4XX || ARCH_IOP13XX) && I2C]
     depends on [(ARCH_IOP32X || ARCH_IOP33X || ARCH_IXP4XX || ARCH_IOP13XX) && I2C]
     inherited [(ARCH_IOP32X || ARCH_IOP33X || ARCH_IXP4XX || ARCH_IOP13XX) && I2C]
    }
    config I2C_ISA tristate {
     depends on [I2C]
     inherited [I2C]
    }
    config I2C_IXP4XX tristate {
     prompt "IXP4xx GPIO-Based I2C Interface" if [I2C && ARCH_IXP4XX]
     depends on [I2C && ARCH_IXP4XX]
     select I2C_ALGOBIT if [I2C && ARCH_IXP4XX]
     inherited [I2C && ARCH_IXP4XX]
    }
    config I2C_IXP2000 tristate {
     prompt "IXP2000 GPIO-Based I2C Interface" if [I2C && ARCH_IXP2000]
     depends on [I2C && ARCH_IXP2000]
     select I2C_ALGOBIT if [I2C && ARCH_IXP2000]
     inherited [I2C && ARCH_IXP2000]
    }
    config I2C_POWERMAC tristate {
     prompt "Powermac I2C interface" if [I2C && PPC_PMAC]
     depends on [I2C && PPC_PMAC]
     default [y] if [I2C && PPC_PMAC]
     inherited [I2C && PPC_PMAC]
    }
    config I2C_MPC tristate {
     prompt "MPC107/824x/85xx/52xx/86xx" if [I2C && PPC32]
     depends on [I2C && PPC32]
     inherited [I2C && PPC32]
    }
    config I2C_NFORCE2 tristate {
     prompt "Nvidia nForce2, nForce3 and nForce4" if [I2C && PCI]
     depends on [I2C && PCI]
     inherited [I2C && PCI]
    }
    config I2C_OCORES tristate {
     prompt "OpenCores I2C Controller" if [I2C && EXPERIMENTAL]
     depends on [I2C && EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
    config I2C_OMAP tristate {
     prompt "OMAP I2C adapter" if [I2C && ARCH_OMAP]
     depends on [I2C && ARCH_OMAP]
     default [y] if [I2C && ARCH_OMAP && (MACH_OMAP_H3 || MACH_OMAP_OSK)]
     inherited [I2C && ARCH_OMAP]
    }
    config I2C_PARPORT tristate {
     prompt "Parallel port adapter" if [I2C && PARPORT]
     depends on [I2C && PARPORT]
     select I2C_ALGOBIT if [I2C && PARPORT]
     inherited [I2C && PARPORT]
    }
    config I2C_PARPORT_LIGHT tristate {
     prompt "Parallel port adapter (light)" if [I2C]
     depends on [I2C]
     select I2C_ALGOBIT if [I2C]
     inherited [I2C]
    }
    config I2C_PROSAVAGE tristate {
     prompt "S3/VIA (Pro)Savage" if [I2C && PCI]
     depends on [I2C && PCI]
     select I2C_ALGOBIT if [I2C && PCI]
     inherited [I2C && PCI]
    }
    config I2C_RPXLITE tristate {
     prompt "Embedded Planet RPX Lite/Classic support" if [(RPXLITE || RPXCLASSIC) && I2C]
     depends on [(RPXLITE || RPXCLASSIC) && I2C]
     select I2C_ALGO8XX if [(RPXLITE || RPXCLASSIC) && I2C]
     inherited [(RPXLITE || RPXCLASSIC) && I2C]
    }
    config I2C_S3C2410 tristate {
     prompt "S3C2410 I2C Driver" if [I2C && ARCH_S3C2410]
     depends on [I2C && ARCH_S3C2410]
     inherited [I2C && ARCH_S3C2410]
    }
    config I2C_SAVAGE4 tristate {
     prompt "S3 Savage 4" if [I2C && PCI && EXPERIMENTAL]
     depends on [I2C && PCI && EXPERIMENTAL]
     select I2C_ALGOBIT if [I2C && PCI && EXPERIMENTAL]
     inherited [I2C && PCI && EXPERIMENTAL]
    }
    config I2C_SIBYTE tristate {
     prompt "SiByte SMBus interface" if [SIBYTE_SB1xxx_SOC && I2C]
     depends on [SIBYTE_SB1xxx_SOC && I2C]
     inherited [SIBYTE_SB1xxx_SOC && I2C]
    }
    config SCx200_I2C tristate {
     prompt "NatSemi SCx200 I2C using GPIO pins" if [SCx200_GPIO && I2C]
     depends on [SCx200_GPIO && I2C]
     select I2C_ALGOBIT if [SCx200_GPIO && I2C]
     inherited [SCx200_GPIO && I2C]
     config SCx200_I2C_SCL integer {
      prompt "GPIO pin used for SCL" if [I2C && SCx200_I2C]
      depends on [SCx200_I2C]
      default [12] if [I2C && SCx200_I2C]
      inherited [I2C && SCx200_I2C]
     }
     config SCx200_I2C_SDA integer {
      prompt "GPIO pin used for SDA" if [I2C && SCx200_I2C]
      depends on [SCx200_I2C]
      default [13] if [I2C && SCx200_I2C]
      inherited [I2C && SCx200_I2C]
     }
    }
    config SCx200_ACB tristate {
     prompt "Geode ACCESS.bus support" if [X86_32 && I2C && PCI]
     depends on [X86_32 && I2C && PCI]
     inherited [X86_32 && I2C && PCI]
    }
    config I2C_SIS5595 tristate {
     prompt "SiS 5595" if [I2C && PCI]
     depends on [I2C && PCI]
     inherited [I2C && PCI]
    }
    config I2C_SIS630 tristate {
     prompt "SiS 630/730" if [I2C && PCI]
     depends on [I2C && PCI]
     inherited [I2C && PCI]
    }
    config I2C_SIS96X tristate {
     prompt "SiS 96x" if [I2C && PCI]
     depends on [I2C && PCI]
     inherited [I2C && PCI]
    }
    config I2C_STUB tristate {
     prompt "I2C/SMBus Test Stub" if [I2C && EXPERIMENTAL && m && <choice>]
     depends on [I2C && EXPERIMENTAL && m]
     default [n] if [I2C && EXPERIMENTAL && m && <choice>]
     inherited [I2C && EXPERIMENTAL && m && <choice>]
    }
    config I2C_VERSATILE tristate {
     prompt "ARM Versatile/Realview I2C bus support" if [I2C && (ARCH_VERSATILE || ARCH_REALVIEW)]
     depends on [I2C && (ARCH_VERSATILE || ARCH_REALVIEW)]
     select I2C_ALGOBIT if [I2C && (ARCH_VERSATILE || ARCH_REALVIEW)]
     inherited [I2C && (ARCH_VERSATILE || ARCH_REALVIEW)]
    }
    config I2C_VIA tristate {
     prompt "VIA 82C586B" if [I2C && PCI && EXPERIMENTAL]
     depends on [I2C && PCI && EXPERIMENTAL]
     select I2C_ALGOBIT if [I2C && PCI && EXPERIMENTAL]
     inherited [I2C && PCI && EXPERIMENTAL]
    }
    config I2C_VIAPRO tristate {
     prompt "VIA 82C596/82C686/82xx" if [I2C && PCI]
     depends on [I2C && PCI]
     inherited [I2C && PCI]
    }
    config I2C_VOODOO3 tristate {
     prompt "Voodoo 3" if [I2C && PCI]
     depends on [I2C && PCI]
     select I2C_ALGOBIT if [I2C && PCI]
     inherited [I2C && PCI]
    }
    config I2C_PCA_ISA tristate {
     prompt "PCA9564 on an ISA bus" if [I2C]
     depends on [I2C]
     select I2C_ALGOPCA if [I2C]
     default [n] if [I2C]
     inherited [I2C]
    }
    config I2C_MV64XXX tristate {
     prompt "Marvell mv64xxx I2C Controller" if [I2C && MV64X60 && EXPERIMENTAL]
     depends on [I2C && MV64X60 && EXPERIMENTAL]
     inherited [I2C && MV64X60 && EXPERIMENTAL]
    }
    config I2C_PNX tristate {
     prompt "I2C bus support for Philips PNX targets" if [ARCH_PNX4008 && I2C]
     depends on [ARCH_PNX4008 && I2C]
     inherited [ARCH_PNX4008 && I2C]
    }
   }
   menu "Miscellaneous I2C Chip support" {
    depends on [I2C]
    config SENSORS_DS1337 tristate {
     prompt "Dallas Semiconductor DS1337 and DS1339 Real Time Clock" if [I2C && EXPERIMENTAL]
     depends on [I2C && EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
    config SENSORS_DS1374 tristate {
     prompt "Maxim/Dallas Semiconductor DS1374 Real Time Clock" if [I2C && EXPERIMENTAL]
     depends on [I2C && EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
    config SENSORS_EEPROM tristate {
     prompt "EEPROM reader" if [I2C && EXPERIMENTAL]
     depends on [I2C && EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
    config SENSORS_PCF8574 tristate {
     prompt "Philips PCF8574 and PCF8574A" if [I2C && EXPERIMENTAL]
     depends on [I2C && EXPERIMENTAL]
     default [n] if [I2C && EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
    config SENSORS_PCA9539 tristate {
     prompt "Philips PCA9539 16-bit I/O port" if [I2C && EXPERIMENTAL]
     depends on [I2C && EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
    config SENSORS_PCF8591 tristate {
     prompt "Philips PCF8591" if [I2C && EXPERIMENTAL]
     depends on [I2C && EXPERIMENTAL]
     default [n] if [I2C && EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
    config ISP1301_OMAP tristate {
     prompt "Philips ISP1301 with OMAP OTG" if [I2C && ARCH_OMAP_OTG]
     depends on [I2C && ARCH_OMAP_OTG]
     inherited [I2C && ARCH_OMAP_OTG]
    }
    config TPS65010 tristate {
     prompt "TPS6501x Power Management chips" if [I2C && ARCH_OMAP]
     depends on [I2C && ARCH_OMAP]
     default [y] if [I2C && ARCH_OMAP && (MACH_OMAP_H2 || MACH_OMAP_H3 || MACH_OMAP_OSK)]
     inherited [I2C && ARCH_OMAP]
    }
    config SENSORS_M41T00 tristate {
     prompt "ST M41T00 RTC chip" if [I2C && PPC32]
     depends on [I2C && PPC32]
     inherited [I2C && PPC32]
    }
    config SENSORS_MAX6875 tristate {
     prompt "Maxim MAX6875 Power supply supervisor" if [I2C && EXPERIMENTAL]
     depends on [I2C && EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
   }
   config I2C_DEBUG_CORE boolean {
    prompt "I2C Core debugging messages" if [I2C]
    depends on [I2C]
    inherited [I2C]
   }
   config I2C_DEBUG_ALGO boolean {
    prompt "I2C Algorithm debugging messages" if [I2C]
    depends on [I2C]
    inherited [I2C]
   }
   config I2C_DEBUG_BUS boolean {
    prompt "I2C Bus debugging messages" if [I2C]
    depends on [I2C]
    inherited [I2C]
   }
   config I2C_DEBUG_CHIP boolean {
    prompt "I2C Chip debugging messages" if [I2C]
    depends on [I2C]
    inherited [I2C]
   }
  }
 }
 menu "SPI support" {
  config SPI boolean {
   prompt "SPI support" if []
   config SPI_DEBUG boolean {
    prompt "Debug support for SPI drivers" if [SPI && DEBUG_KERNEL]
    depends on [SPI && DEBUG_KERNEL]
    inherited [SPI && DEBUG_KERNEL]
   }
  }
  config SPI_MASTER boolean {
   default [SPI] if []
  }
  config SPI_BITBANG tristate {
   prompt "Bitbanging SPI master" if [SPI_MASTER && EXPERIMENTAL]
   depends on [SPI_MASTER && EXPERIMENTAL]
   inherited [SPI_MASTER && EXPERIMENTAL]
  }
  config SPI_BUTTERFLY tristate {
   prompt "Parallel port adapter for AVR Butterfly (DEVELOPMENT)" if [SPI_MASTER && PARPORT && EXPERIMENTAL]
   depends on [SPI_MASTER && PARPORT && EXPERIMENTAL]
   select SPI_BITBANG if [SPI_MASTER && PARPORT && EXPERIMENTAL]
   inherited [SPI_MASTER && PARPORT && EXPERIMENTAL]
  }
  config SPI_MPC83xx tristate {
   prompt "Freescale MPC83xx SPI controller" if [SPI_MASTER && PPC_83xx && EXPERIMENTAL]
   depends on [SPI_MASTER && PPC_83xx && EXPERIMENTAL]
   select SPI_BITBANG if [SPI_MASTER && PPC_83xx && EXPERIMENTAL]
   inherited [SPI_MASTER && PPC_83xx && EXPERIMENTAL]
  }
  config SPI_PXA2XX tristate {
   prompt "PXA2xx SSP SPI master" if [SPI_MASTER && ARCH_PXA && EXPERIMENTAL]
   depends on [SPI_MASTER && ARCH_PXA && EXPERIMENTAL]
   inherited [SPI_MASTER && ARCH_PXA && EXPERIMENTAL]
  }
  config SPI_S3C24XX_GPIO tristate {
   prompt "Samsung S3C24XX series SPI by GPIO" if [SPI_MASTER && ARCH_S3C2410 && SPI_BITBANG && EXPERIMENTAL]
   depends on [SPI_MASTER && ARCH_S3C2410 && SPI_BITBANG && EXPERIMENTAL]
   inherited [SPI_MASTER && ARCH_S3C2410 && SPI_BITBANG && EXPERIMENTAL]
  }
  config SPI_S3C24XX tristate {
   prompt "Samsung S3C24XX series SPI" if [SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
   depends on [SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
   inherited [SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
  }
 }
 menu "Dallas's 1-wire bus" {
  config W1 tristate {
   prompt "Dallas's 1-wire support" if []
   config W1_CON boolean {
    depends on [CONNECTOR && W1]
    prompt "Userspace communication over connector" if [CONNECTOR && W1]
    default [y] if [CONNECTOR && W1]
    inherited [CONNECTOR && W1]
   }
   menu "1-wire Bus Masters" {
    depends on [W1]
    config W1_MASTER_MATROX tristate {
     prompt "Matrox G400 transport layer for 1-wire" if [W1 && PCI]
     depends on [W1 && PCI]
     inherited [W1 && PCI]
    }
    config W1_MASTER_DS2490 tristate {
     prompt "DS2490 USB <-> W1 transport layer for 1-wire" if [W1 && USB]
     depends on [W1 && USB]
     inherited [W1 && USB]
    }
    config W1_MASTER_DS2482 tristate {
     prompt "Maxim DS2482 I2C to 1-Wire bridge" if [I2C && W1 && EXPERIMENTAL]
     depends on [I2C && W1 && EXPERIMENTAL]
     inherited [I2C && W1 && EXPERIMENTAL]
    }
   }
   menu "1-wire Slaves" {
    depends on [W1]
    config W1_SLAVE_THERM tristate {
     prompt "Thermal family implementation" if [W1]
     depends on [W1]
     inherited [W1]
    }
    config W1_SLAVE_SMEM tristate {
     prompt "Simple 64bit memory family implementation" if [W1]
     depends on [W1]
     inherited [W1]
    }
    config W1_SLAVE_DS2433 tristate {
     prompt "4kb EEPROM family support (DS2433)" if [W1]
     depends on [W1]
     inherited [W1]
     config W1_SLAVE_DS2433_CRC boolean {
      prompt "Protect DS2433 data with a CRC16" if [W1 && W1_SLAVE_DS2433]
      depends on [W1_SLAVE_DS2433]
      select CRC16 if [W1 && W1_SLAVE_DS2433]
      inherited [W1 && W1_SLAVE_DS2433]
     }
    }
   }
  }
 }
 menu "Hardware Monitoring support" {
  config HWMON tristate {
   prompt "Hardware Monitoring support" if []
   default [y] if []
  }
  config HWMON_VID tristate {
   default [n] if []
  }
  config SENSORS_ABITUGURU tristate {
   prompt "Abit uGuru" if [HWMON && EXPERIMENTAL]
   depends on [HWMON && EXPERIMENTAL]
   inherited [HWMON && EXPERIMENTAL]
  }
  config SENSORS_ADM1021 tristate {
   prompt "Analog Devices ADM1021 and compatibles" if [HWMON && I2C]
   depends on [HWMON && I2C]
   inherited [HWMON && I2C]
  }
  config SENSORS_ADM1025 tristate {
   prompt "Analog Devices ADM1025 and compatibles" if [HWMON && I2C]
   depends on [HWMON && I2C]
   select HWMON_VID if [HWMON && I2C]
   inherited [HWMON && I2C]
  }
  config SENSORS_ADM1026 tristate {
   prompt "Analog Devices ADM1026 and compatibles" if [HWMON && I2C && EXPERIMENTAL]
   depends on [HWMON && I2C && EXPERIMENTAL]
   select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
   inherited [HWMON && I2C && EXPERIMENTAL]
  }
  config SENSORS_ADM1031 tristate {
   prompt "Analog Devices ADM1031 and compatibles" if [HWMON && I2C && EXPERIMENTAL]
   depends on [HWMON && I2C && EXPERIMENTAL]
   inherited [HWMON && I2C && EXPERIMENTAL]
  }
  config SENSORS_ADM9240 tristate {
   prompt "Analog Devices ADM9240 and compatibles" if [HWMON && I2C && EXPERIMENTAL]
   depends on [HWMON && I2C && EXPERIMENTAL]
   select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
   inherited [HWMON && I2C && EXPERIMENTAL]
  }
  config SENSORS_K8TEMP tristate {
   prompt "AMD Athlon64/FX or Opteron temperature sensor" if [HWMON && X86 && PCI && EXPERIMENTAL]
   depends on [HWMON && X86 && PCI && EXPERIMENTAL]
   inherited [HWMON && X86 && PCI && EXPERIMENTAL]
  }
  config SENSORS_AMS tristate {
   prompt "Apple Motion Sensor driver" if [HWMON && PPC_PMAC && !PPC64 && INPUT && (ADB_PMU && I2C="y" || ADB_PMU && !I2C || I2C) && EXPERIMENTAL]
   depends on [HWMON && PPC_PMAC && !PPC64 && INPUT && (ADB_PMU && I2C="y" || ADB_PMU && !I2C || I2C) && EXPERIMENTAL]
   inherited [HWMON && PPC_PMAC && !PPC64 && INPUT && (ADB_PMU && I2C="y" || ADB_PMU && !I2C || I2C) && EXPERIMENTAL]
   config SENSORS_AMS_PMU boolean {
    prompt "PMU variant" if [SENSORS_AMS && ADB_PMU]
    depends on [SENSORS_AMS && ADB_PMU]
    default [y] if [SENSORS_AMS && ADB_PMU]
    inherited [SENSORS_AMS && ADB_PMU]
   }
   config SENSORS_AMS_I2C boolean {
    prompt "I2C variant" if [SENSORS_AMS && I2C]
    depends on [SENSORS_AMS && I2C]
    default [y] if [SENSORS_AMS && I2C]
    inherited [SENSORS_AMS && I2C]
   }
  }
  config SENSORS_ASB100 tristate {
   prompt "Asus ASB100 Bach" if [HWMON && I2C && EXPERIMENTAL]
   depends on [HWMON && I2C && EXPERIMENTAL]
   select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
   inherited [HWMON && I2C && EXPERIMENTAL]
  }
  config SENSORS_ATXP1 tristate {
   prompt "Attansic ATXP1 VID controller" if [HWMON && I2C && EXPERIMENTAL]
   depends on [HWMON && I2C && EXPERIMENTAL]
   select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
   inherited [HWMON && I2C && EXPERIMENTAL]
  }
  config SENSORS_DS1621 tristate {
   prompt "Dallas Semiconductor DS1621 and DS1625" if [HWMON && I2C]
   depends on [HWMON && I2C]
   inherited [HWMON && I2C]
  }
  config SENSORS_F71805F tristate {
   prompt "Fintek F71805F/FG and F71872F/FG" if [HWMON && EXPERIMENTAL]
   depends on [HWMON && EXPERIMENTAL]
   inherited [HWMON && EXPERIMENTAL]
  }
  config SENSORS_FSCHER tristate {
   prompt "FSC Hermes" if [HWMON && I2C]
   depends on [HWMON && I2C]
   inherited [HWMON && I2C]
  }
  config SENSORS_FSCPOS tristate {
   prompt "FSC Poseidon" if [HWMON && I2C]
   depends on [HWMON && I2C]
   inherited [HWMON && I2C]
  }
  config SENSORS_GL518SM tristate {
   prompt "Genesys Logic GL518SM" if [HWMON && I2C]
   depends on [HWMON && I2C]
   inherited [HWMON && I2C]
  }
  config SENSORS_GL520SM tristate {
   prompt "Genesys Logic GL520SM" if [HWMON && I2C]
   depends on [HWMON && I2C]
   select HWMON_VID if [HWMON && I2C]
   inherited [HWMON && I2C]
  }
  config SENSORS_IT87 tristate {
   prompt "ITE IT87xx and compatibles" if [HWMON && I2C]
   depends on [HWMON && I2C]
   select I2C_ISA if [HWMON && I2C]
   select HWMON_VID if [HWMON && I2C]
   inherited [HWMON && I2C]
  }
  config SENSORS_LM63 tristate {
   prompt "National Semiconductor LM63" if [HWMON && I2C]
   depends on [HWMON && I2C]
   inherited [HWMON && I2C]
  }
  config SENSORS_LM70 tristate {
   prompt "National Semiconductor LM70" if [HWMON && SPI_MASTER && EXPERIMENTAL]
   depends on [HWMON && SPI_MASTER && EXPERIMENTAL]
   inherited [HWMON && SPI_MASTER && EXPERIMENTAL]
  }
  config SENSORS_LM75 tristate {
   prompt "National Semiconductor LM75 and compatibles" if [HWMON && I2C]
   depends on [HWMON && I2C]
   inherited [HWMON && I2C]
  }
  config SENSORS_LM77 tristate {
   prompt "National Semiconductor LM77" if [HWMON && I2C]
   depends on [HWMON && I2C]
   inherited [HWMON && I2C]
  }
  config SENSORS_LM78 tristate {
   prompt "National Semiconductor LM78 and compatibles" if [HWMON && I2C]
   depends on [HWMON && I2C]
   select I2C_ISA if [HWMON && I2C]
   select HWMON_VID if [HWMON && I2C]
   inherited [HWMON && I2C]
  }
  config SENSORS_LM80 tristate {
   prompt "National Semiconductor LM80" if [HWMON && I2C && EXPERIMENTAL]
   depends on [HWMON && I2C && EXPERIMENTAL]
   inherited [HWMON && I2C && EXPERIMENTAL]
  }
  config SENSORS_LM83 tristate {
   prompt "National Semiconductor LM83 and compatibles" if [HWMON && I2C]
   depends on [HWMON && I2C]
   inherited [HWMON && I2C]
  }
  config SENSORS_LM85 tristate {
   prompt "National Semiconductor LM85 and compatibles" if [HWMON && I2C && EXPERIMENTAL]
   depends on [HWMON && I2C && EXPERIMENTAL]
   select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
   inherited [HWMON && I2C && EXPERIMENTAL]
  }
  config SENSORS_LM87 tristate {
   prompt "National Semiconductor LM87" if [HWMON && I2C]
   depends on [HWMON && I2C]
   select HWMON_VID if [HWMON && I2C]
   inherited [HWMON && I2C]
  }
  config SENSORS_LM90 tristate {
   prompt "National Semiconductor LM90 and compatibles" if [HWMON && I2C]
   depends on [HWMON && I2C]
   inherited [HWMON && I2C]
  }
  config SENSORS_LM92 tristate {
   prompt "National Semiconductor LM92 and compatibles" if [HWMON && I2C]
   depends on [HWMON && I2C]
   inherited [HWMON && I2C]
  }
  config SENSORS_MAX1619 tristate {
   prompt "Maxim MAX1619 sensor chip" if [HWMON && I2C]
   depends on [HWMON && I2C]
   inherited [HWMON && I2C]
  }
  config SENSORS_PC87360 tristate {
   prompt "National Semiconductor PC87360 family" if [HWMON && I2C && EXPERIMENTAL]
   depends on [HWMON && I2C && EXPERIMENTAL]
   select I2C_ISA if [HWMON && I2C && EXPERIMENTAL]
   select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
   inherited [HWMON && I2C && EXPERIMENTAL]
  }
  config SENSORS_PC87427 tristate {
   prompt "National Semiconductor PC87427" if [HWMON && EXPERIMENTAL]
   depends on [HWMON && EXPERIMENTAL]
   inherited [HWMON && EXPERIMENTAL]
  }
  config SENSORS_SIS5595 tristate {
   prompt "Silicon Integrated Systems Corp. SiS5595" if [HWMON && I2C && PCI && EXPERIMENTAL]
   depends on [HWMON && I2C && PCI && EXPERIMENTAL]
   select I2C_ISA if [HWMON && I2C && PCI && EXPERIMENTAL]
   inherited [HWMON && I2C && PCI && EXPERIMENTAL]
  }
  config SENSORS_SMSC47M1 tristate {
   prompt "SMSC LPC47M10x and compatibles" if [HWMON && I2C]
   depends on [HWMON && I2C]
   select I2C_ISA if [HWMON && I2C]
   inherited [HWMON && I2C]
  }
  config SENSORS_SMSC47M192 tristate {
   prompt "SMSC LPC47M192 and compatibles" if [HWMON && I2C && EXPERIMENTAL]
   depends on [HWMON && I2C && EXPERIMENTAL]
   select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
   inherited [HWMON && I2C && EXPERIMENTAL]
  }
  config SENSORS_SMSC47B397 tristate {
   prompt "SMSC LPC47B397-NC" if [HWMON && I2C && EXPERIMENTAL]
   depends on [HWMON && I2C && EXPERIMENTAL]
   select I2C_ISA if [HWMON && I2C && EXPERIMENTAL]
   inherited [HWMON && I2C && EXPERIMENTAL]
  }
  config SENSORS_VIA686A tristate {
   prompt "VIA686A" if [HWMON && I2C && PCI]
   depends on [HWMON && I2C && PCI]
   select I2C_ISA if [HWMON && I2C && PCI]
   inherited [HWMON && I2C && PCI]
  }
  config SENSORS_VT1211 tristate {
   prompt "VIA VT1211" if [HWMON && EXPERIMENTAL]
   depends on [HWMON && EXPERIMENTAL]
   select HWMON_VID if [HWMON && EXPERIMENTAL]
   inherited [HWMON && EXPERIMENTAL]
  }
  config SENSORS_VT8231 tristate {
   prompt "VIA VT8231" if [HWMON && I2C && PCI && EXPERIMENTAL]
   depends on [HWMON && I2C && PCI && EXPERIMENTAL]
   select HWMON_VID if [HWMON && I2C && PCI && EXPERIMENTAL]
   select I2C_ISA if [HWMON && I2C && PCI && EXPERIMENTAL]
   inherited [HWMON && I2C && PCI && EXPERIMENTAL]
  }
  config SENSORS_W83781D tristate {
   prompt "Winbond W83781D, W83782D, W83783S, W83627HF, Asus AS99127F" if [HWMON && I2C]
   depends on [HWMON && I2C]
   select I2C_ISA if [HWMON && I2C]
   select HWMON_VID if [HWMON && I2C]
   inherited [HWMON && I2C]
  }
  config SENSORS_W83791D tristate {
   prompt "Winbond W83791D" if [HWMON && I2C && EXPERIMENTAL]
   depends on [HWMON && I2C && EXPERIMENTAL]
   select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
   inherited [HWMON && I2C && EXPERIMENTAL]
  }
  config SENSORS_W83792D tristate {
   prompt "Winbond W83792D" if [HWMON && I2C && EXPERIMENTAL]
   depends on [HWMON && I2C && EXPERIMENTAL]
   inherited [HWMON && I2C && EXPERIMENTAL]
  }
  config SENSORS_W83793 tristate {
   prompt "Winbond W83793" if [HWMON && I2C && EXPERIMENTAL]
   depends on [HWMON && I2C && EXPERIMENTAL]
   inherited [HWMON && I2C && EXPERIMENTAL]
  }
  config SENSORS_W83L785TS tristate {
   prompt "Winbond W83L785TS-S" if [HWMON && I2C && EXPERIMENTAL]
   depends on [HWMON && I2C && EXPERIMENTAL]
   inherited [HWMON && I2C && EXPERIMENTAL]
  }
  config SENSORS_W83627HF tristate {
   prompt "Winbond W83627HF, W83627THF, W83637HF, W83687THF, W83697HF" if [HWMON && I2C]
   depends on [HWMON && I2C]
   select I2C_ISA if [HWMON && I2C]
   select HWMON_VID if [HWMON && I2C]
   inherited [HWMON && I2C]
  }
  config SENSORS_W83627EHF tristate {
   prompt "Winbond W83627EHF" if [HWMON && I2C && EXPERIMENTAL]
   depends on [HWMON && I2C && EXPERIMENTAL]
   select I2C_ISA if [HWMON && I2C && EXPERIMENTAL]
   inherited [HWMON && I2C && EXPERIMENTAL]
  }
  config SENSORS_HDAPS tristate {
   prompt "IBM Hard Drive Active Protection System (hdaps)" if [HWMON && INPUT && X86]
   depends on [HWMON && INPUT && X86]
   default [n] if [HWMON && INPUT && X86]
   inherited [HWMON && INPUT && X86]
  }
  config HWMON_DEBUG_CHIP boolean {
   prompt "Hardware Monitoring Chip debugging messages" if [HWMON]
   depends on [HWMON]
   default [n] if [HWMON]
   inherited [HWMON]
  }
 }
 menu "Multimedia Capabilities Port drivers" {
  depends on [ARCH_SA1100]
  config MCP tristate {
   inherited [ARCH_SA1100]
  }
  config MCP_SA11X0 tristate {
   prompt "Support SA11x0 MCP interface" if [ARCH_SA1100]
   depends on [ARCH_SA1100]
   select MCP if [ARCH_SA1100]
   inherited [ARCH_SA1100]
  }
  config MCP_UCB1200 tristate {
   prompt "Support for UCB1200 / UCB1300" if [ARCH_SA1100 && MCP]
   depends on [MCP]
   inherited [ARCH_SA1100 && MCP]
   config MCP_UCB1200_TS tristate {
    prompt "Touchscreen interface support" if [ARCH_SA1100 && MCP_UCB1200 && INPUT]
    depends on [MCP_UCB1200 && INPUT]
    inherited [ARCH_SA1100 && MCP_UCB1200 && INPUT]
   }
  }
 }
 menu "Multimedia devices" {
  config VIDEO_DEV tristate {
   prompt "Video For Linux" if []
   config VIDEO_V4L1 boolean {
    prompt "Enable Video For Linux API 1 (DEPRECATED)" if [VIDEO_DEV]
    depends on [VIDEO_DEV]
    select VIDEO_V4L1_COMPAT if [VIDEO_DEV]
    default [y] if [VIDEO_DEV]
    inherited [VIDEO_DEV]
   }
   config VIDEO_V4L1_COMPAT boolean {
    prompt "Enable Video For Linux API 1 compatible Layer" if [VIDEO_DEV]
    depends on [VIDEO_DEV]
    default [y] if [VIDEO_DEV]
    inherited [VIDEO_DEV]
   }
   config VIDEO_V4L2 boolean {
    depends on [VIDEO_DEV]
    default [y] if [VIDEO_DEV]
    inherited [VIDEO_DEV]
   }
   menu "Video Capture Adapters" {
    depends on [VIDEO_DEV]
    config VIDEO_ADV_DEBUG boolean {
     prompt "Enable advanced debug functionality" if [VIDEO_DEV]
     depends on [VIDEO_DEV]
     default [n] if [VIDEO_DEV]
     inherited [VIDEO_DEV]
    }
    config VIDEO_HELPER_CHIPS_AUTO boolean {
     prompt "Autoselect pertinent encoders/decoders and other helper chips" if [VIDEO_DEV]
     default [y] if [VIDEO_DEV]
     inherited [VIDEO_DEV]
     menu "Encoders/decoders and other helper chips" {
      depends on [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO]
      config VIDEO_TVAUDIO tristate {
       prompt "Simple audio decoder chips" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       depends on [VIDEO_V4L1 && I2C]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
      }
      config VIDEO_TDA7432 tristate {
       prompt "Philips TDA7432 audio processor" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       depends on [VIDEO_V4L1 && I2C]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
      }
      config VIDEO_TDA9840 tristate {
       prompt "Philips TDA9840 audio processor" if [!VIDEO_HELPER_CHIPS_AUTO && VIDEO_DEV && I2C]
       depends on [VIDEO_DEV && I2C]
       inherited [!VIDEO_HELPER_CHIPS_AUTO && VIDEO_DEV && I2C]
      }
      config VIDEO_TDA9875 tristate {
       prompt "Philips TDA9875 audio processor" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       depends on [VIDEO_V4L1 && I2C]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
      }
      config VIDEO_TEA6415C tristate {
       prompt "Philips TEA6415C audio processor" if [!VIDEO_HELPER_CHIPS_AUTO && VIDEO_DEV && I2C]
       depends on [VIDEO_DEV && I2C]
       inherited [!VIDEO_HELPER_CHIPS_AUTO && VIDEO_DEV && I2C]
      }
      config VIDEO_TEA6420 tristate {
       prompt "Philips TEA6420 audio processor" if [!VIDEO_HELPER_CHIPS_AUTO && VIDEO_DEV && I2C]
       depends on [VIDEO_DEV && I2C]
       inherited [!VIDEO_HELPER_CHIPS_AUTO && VIDEO_DEV && I2C]
      }
      config VIDEO_MSP3400 tristate {
       prompt "Micronas MSP34xx audio decoders" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       depends on [VIDEO_V4L2 && I2C]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
      }
      config VIDEO_CS53L32A tristate {
       prompt "Cirrus Logic CS53L32A audio ADC" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
       depends on [VIDEO_V4L2 && I2C && EXPERIMENTAL]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
      }
      config VIDEO_TLV320AIC23B tristate {
       prompt "Texas Instruments TLV320AIC23B audio codec" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
       depends on [VIDEO_V4L2 && I2C && EXPERIMENTAL]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
      }
      config VIDEO_WM8775 tristate {
       prompt "Wolfson Microelectronics WM8775 audio ADC with input mixer" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
       depends on [VIDEO_V4L2 && I2C && EXPERIMENTAL]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
      }
      config VIDEO_WM8739 tristate {
       prompt "Wolfson Microelectronics WM8739 stereo audio ADC" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
       depends on [VIDEO_V4L2 && I2C && EXPERIMENTAL]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
      }
      config VIDEO_BT819 tristate {
       prompt "BT819A VideoStream decoder" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       depends on [VIDEO_V4L1 && I2C]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
      }
      config VIDEO_BT856 tristate {
       prompt "BT856 VideoStream decoder" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       depends on [VIDEO_V4L1 && I2C]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
      }
      config VIDEO_BT866 tristate {
       prompt "BT866 VideoStream decoder" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       depends on [VIDEO_V4L1 && I2C]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
      }
      config VIDEO_KS0127 tristate {
       prompt "KS0127 video decoder" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       depends on [VIDEO_V4L1 && I2C]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
      }
      config VIDEO_OV7670 tristate {
       prompt "OmniVision OV7670 sensor support" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && I2C && VIDEO_V4L2]
       depends on [I2C && VIDEO_V4L2]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && I2C && VIDEO_V4L2]
      }
      config VIDEO_SAA7110 tristate {
       prompt "Philips SAA7110 video decoder" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       depends on [VIDEO_V4L1 && I2C]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
      }
      config VIDEO_SAA7111 tristate {
       prompt "Philips SAA7111 video decoder" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       depends on [VIDEO_V4L1 && I2C]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
      }
      config VIDEO_SAA7114 tristate {
       prompt "Philips SAA7114 video decoder" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       depends on [VIDEO_V4L1 && I2C]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
      }
      config VIDEO_SAA711X tristate {
       prompt "Philips SAA7113/4/5 video decoders" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
       depends on [VIDEO_V4L2 && I2C && EXPERIMENTAL]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
      }
      config VIDEO_SAA7191 tristate {
       prompt "Philips SAA7191 video decoder" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       depends on [VIDEO_V4L1 && I2C]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
      }
      config VIDEO_TVP5150 tristate {
       prompt "Texas Instruments TVP5150 video decoder" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       depends on [VIDEO_V4L2 && I2C]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
      }
      config VIDEO_VPX3220 tristate {
       prompt "vpx3220a, vpx3216b & vpx3214c video decoders" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       depends on [VIDEO_V4L1 && I2C]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
      }
      config VIDEO_CX25840 tristate {
       prompt "Conexant CX2584x audio/video decoders" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
       depends on [VIDEO_V4L2 && I2C && EXPERIMENTAL]
       select FW_LOADER if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
      }
      config VIDEO_CX2341X tristate {
       prompt "Conexant CX2341x MPEG encoders" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && EXPERIMENTAL]
       depends on [VIDEO_V4L2 && EXPERIMENTAL]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && EXPERIMENTAL]
      }
      config VIDEO_SAA7127 tristate {
       prompt "Philips SAA7127/9 digital video encoders" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
       depends on [VIDEO_V4L2 && I2C && EXPERIMENTAL]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
      }
      config VIDEO_SAA7185 tristate {
       prompt "Philips SAA7185 video encoder" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       depends on [VIDEO_V4L1 && I2C]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
      }
      config VIDEO_ADV7170 tristate {
       prompt "Analog Devices ADV7170 video encoder" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       depends on [VIDEO_V4L1 && I2C]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
      }
      config VIDEO_ADV7175 tristate {
       prompt "Analog Devices ADV7175 video encoder" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       depends on [VIDEO_V4L1 && I2C]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
      }
      config VIDEO_UPD64031A tristate {
       prompt "NEC Electronics uPD64031A Ghost Reduction" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
       depends on [VIDEO_V4L2 && I2C && EXPERIMENTAL]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
      }
      config VIDEO_UPD64083 tristate {
       prompt "NEC Electronics uPD64083 3-Dimensional Y/C separation" if [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
       depends on [VIDEO_V4L2 && I2C && EXPERIMENTAL]
       inherited [VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
      }
     }
    }
    config VIDEO_VIVI tristate {
     prompt "Virtual Video Driver" if [VIDEO_DEV && VIDEO_V4L2 && !SPARC32 && !SPARC64]
     depends on [VIDEO_V4L2 && !SPARC32 && !SPARC64]
     select VIDEO_BUF if [VIDEO_DEV && VIDEO_V4L2 && !SPARC32 && !SPARC64]
     default [n] if [VIDEO_DEV && VIDEO_V4L2 && !SPARC32 && !SPARC64]
     inherited [VIDEO_DEV && VIDEO_V4L2 && !SPARC32 && !SPARC64]
    }
    config VIDEO_BT848 tristate {
     prompt "BT848 Video For Linux" if [VIDEO_DEV && PCI && I2C && VIDEO_V4L1]
     depends on [VIDEO_DEV && PCI && I2C && VIDEO_V4L1]
     select I2C_ALGOBIT if [VIDEO_DEV && PCI && I2C && VIDEO_V4L1]
     select FW_LOADER if [VIDEO_DEV && PCI && I2C && VIDEO_V4L1]
     select VIDEO_BTCX if [VIDEO_DEV && PCI && I2C && VIDEO_V4L1]
     select VIDEO_BUF if [VIDEO_DEV && PCI && I2C && VIDEO_V4L1]
     select VIDEO_IR if [VIDEO_DEV && PCI && I2C && VIDEO_V4L1]
     select VIDEO_TUNER if [VIDEO_DEV && PCI && I2C && VIDEO_V4L1]
     select VIDEO_TVEEPROM if [VIDEO_DEV && PCI && I2C && VIDEO_V4L1]
     select VIDEO_MSP3400 if [VIDEO_DEV && PCI && I2C && VIDEO_V4L1 && VIDEO_HELPER_CHIPS_AUTO]
     select VIDEO_TVAUDIO if [VIDEO_DEV && PCI && I2C && VIDEO_V4L1 && VIDEO_HELPER_CHIPS_AUTO]
     select VIDEO_TDA7432 if [VIDEO_DEV && PCI && I2C && VIDEO_V4L1 && VIDEO_HELPER_CHIPS_AUTO]
     select VIDEO_TDA9875 if [VIDEO_DEV && PCI && I2C && VIDEO_V4L1 && VIDEO_HELPER_CHIPS_AUTO]
     inherited [VIDEO_DEV && PCI && I2C && VIDEO_V4L1]
     config VIDEO_BT848_DVB boolean {
      prompt "DVB/ATSC Support for bt878 based TV cards" if [VIDEO_DEV && VIDEO_BT848 && DVB_CORE]
      depends on [VIDEO_BT848 && DVB_CORE]
      select DVB_BT8XX if [VIDEO_DEV && VIDEO_BT848 && DVB_CORE]
      inherited [VIDEO_DEV && VIDEO_BT848 && DVB_CORE]
     }
     config VIDEO_SAA6588 tristate {
      prompt "SAA6588 Radio Chip RDS decoder support on BT848 cards" if [VIDEO_DEV && I2C && VIDEO_BT848]
      depends on [I2C && VIDEO_BT848]
      inherited [VIDEO_DEV && I2C && VIDEO_BT848]
     }
    }
    config VIDEO_PMS tristate {
     prompt "Mediavision Pro Movie Studio Video For Linux" if [VIDEO_DEV && ISA && VIDEO_V4L1]
     depends on [ISA && VIDEO_V4L1]
     inherited [VIDEO_DEV && ISA && VIDEO_V4L1]
    }
    config VIDEO_PLANB tristate {
     prompt "PlanB Video-In on PowerMac" if [VIDEO_DEV && PPC_PMAC && VIDEO_V4L1 && BROKEN]
     depends on [PPC_PMAC && VIDEO_V4L1 && BROKEN]
     inherited [VIDEO_DEV && PPC_PMAC && VIDEO_V4L1 && BROKEN]
    }
    config VIDEO_BWQCAM tristate {
     prompt "Quickcam BW Video For Linux" if [VIDEO_DEV && PARPORT && VIDEO_V4L1]
     depends on [PARPORT && VIDEO_V4L1]
     inherited [VIDEO_DEV && PARPORT && VIDEO_V4L1]
    }
    config VIDEO_CQCAM tristate {
     prompt "QuickCam Colour Video For Linux (EXPERIMENTAL)" if [VIDEO_DEV && EXPERIMENTAL && PARPORT && VIDEO_V4L1]
     depends on [EXPERIMENTAL && PARPORT && VIDEO_V4L1]
     inherited [VIDEO_DEV && EXPERIMENTAL && PARPORT && VIDEO_V4L1]
    }
    config VIDEO_W9966 tristate {
     prompt "W9966CF Webcam (FlyCam Supra and others) Video For Linux" if [VIDEO_DEV && PARPORT_1284 && PARPORT && VIDEO_V4L1]
     depends on [PARPORT_1284 && PARPORT && VIDEO_V4L1]
     inherited [VIDEO_DEV && PARPORT_1284 && PARPORT && VIDEO_V4L1]
    }
    config VIDEO_CPIA tristate {
     prompt "CPiA Video For Linux" if [VIDEO_DEV && VIDEO_V4L1]
     depends on [VIDEO_V4L1]
     inherited [VIDEO_DEV && VIDEO_V4L1]
     config VIDEO_CPIA_PP tristate {
      prompt "CPiA Parallel Port Lowlevel Support" if [VIDEO_DEV && PARPORT_1284 && VIDEO_CPIA && PARPORT]
      depends on [PARPORT_1284 && VIDEO_CPIA && PARPORT]
      inherited [VIDEO_DEV && PARPORT_1284 && VIDEO_CPIA && PARPORT]
     }
     config VIDEO_CPIA_USB tristate {
      prompt "CPiA USB Lowlevel Support" if [VIDEO_DEV && VIDEO_CPIA && USB]
      depends on [VIDEO_CPIA && USB]
      inherited [VIDEO_DEV && VIDEO_CPIA && USB]
     }
    }
    config VIDEO_CPIA2 tristate {
     prompt "CPiA2 Video For Linux" if [VIDEO_DEV && USB && VIDEO_V4L1]
     depends on [VIDEO_DEV && USB && VIDEO_V4L1]
     inherited [VIDEO_DEV && USB && VIDEO_V4L1]
    }
    config VIDEO_SAA5246A tristate {
     prompt "SAA5246A, SAA5281 Teletext processor" if [VIDEO_DEV && I2C && VIDEO_V4L2]
     depends on [I2C && VIDEO_V4L2]
     inherited [VIDEO_DEV && I2C && VIDEO_V4L2]
    }
    config VIDEO_SAA5249 tristate {
     prompt "SAA5249 Teletext processor" if [VIDEO_DEV && I2C && VIDEO_V4L2]
     depends on [VIDEO_DEV && I2C && VIDEO_V4L2]
     inherited [VIDEO_DEV && I2C && VIDEO_V4L2]
    }
    config TUNER_3036 tristate {
     prompt "SAB3036 tuner" if [VIDEO_DEV && I2C && VIDEO_V4L1]
     depends on [VIDEO_DEV && I2C && VIDEO_V4L1]
     inherited [VIDEO_DEV && I2C && VIDEO_V4L1]
    }
    config VIDEO_VINO tristate {
     prompt "SGI Vino Video For Linux (EXPERIMENTAL)" if [VIDEO_DEV && I2C && SGI_IP22 && EXPERIMENTAL && VIDEO_V4L2]
     depends on [I2C && SGI_IP22 && EXPERIMENTAL && VIDEO_V4L2]
     select I2C_ALGO_SGI if [VIDEO_DEV && I2C && SGI_IP22 && EXPERIMENTAL && VIDEO_V4L2]
     select VIDEO_SAA7191 if [VIDEO_DEV && I2C && SGI_IP22 && EXPERIMENTAL && VIDEO_V4L2 && VIDEO_HELPER_CHIPS_AUTO]
     inherited [VIDEO_DEV && I2C && SGI_IP22 && EXPERIMENTAL && VIDEO_V4L2]
    }
    config VIDEO_STRADIS tristate {
     prompt "Stradis 4:2:2 MPEG-2 video driver  (EXPERIMENTAL)" if [VIDEO_DEV && EXPERIMENTAL && PCI && VIDEO_V4L1 && !PPC64]
     depends on [EXPERIMENTAL && PCI && VIDEO_V4L1 && !PPC64]
     inherited [VIDEO_DEV && EXPERIMENTAL && PCI && VIDEO_V4L1 && !PPC64]
    }
    config VIDEO_ZORAN_ZR36060 tristate {
     inherited [VIDEO_DEV]
    }
    config VIDEO_ZORAN tristate {
     prompt "Zoran ZR36057/36067 Video For Linux" if [VIDEO_DEV && PCI && I2C_ALGOBIT && VIDEO_V4L1 && !PPC64]
     depends on [PCI && I2C_ALGOBIT && VIDEO_V4L1 && !PPC64]
     inherited [VIDEO_DEV && PCI && I2C_ALGOBIT && VIDEO_V4L1 && !PPC64]
     config VIDEO_ZORAN_BUZ tristate {
      prompt "Iomega Buz support" if [VIDEO_DEV && VIDEO_ZORAN]
      depends on [VIDEO_ZORAN]
      select VIDEO_SAA7111 if [VIDEO_DEV && VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_SAA7185 if [VIDEO_DEV && VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_ZORAN_ZR36060 if [VIDEO_DEV && VIDEO_ZORAN]
      inherited [VIDEO_DEV && VIDEO_ZORAN]
     }
     config VIDEO_ZORAN_DC10 tristate {
      prompt "Pinnacle/Miro DC10(+) support" if [VIDEO_DEV && VIDEO_ZORAN]
      depends on [VIDEO_ZORAN]
      select VIDEO_SAA7110 if [VIDEO_DEV && VIDEO_ZORAN]
      select VIDEO_ADV7175 if [VIDEO_DEV && VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_ZORAN_ZR36060 if [VIDEO_DEV && VIDEO_ZORAN]
      inherited [VIDEO_DEV && VIDEO_ZORAN]
     }
     config VIDEO_ZORAN_DC30 tristate {
      prompt "Pinnacle/Miro DC30(+) support" if [VIDEO_DEV && VIDEO_ZORAN]
      depends on [VIDEO_ZORAN]
      select VIDEO_ADV7175 if [VIDEO_DEV && VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_VPX3220 if [VIDEO_DEV && VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO]
      inherited [VIDEO_DEV && VIDEO_ZORAN]
     }
     config VIDEO_ZORAN_LML33 tristate {
      prompt "Linux Media Labs LML33 support" if [VIDEO_DEV && VIDEO_ZORAN]
      depends on [VIDEO_ZORAN]
      select VIDEO_BT819 if [VIDEO_DEV && VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_BT856 if [VIDEO_DEV && VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_ZORAN_ZR36060 if [VIDEO_DEV && VIDEO_ZORAN]
      inherited [VIDEO_DEV && VIDEO_ZORAN]
     }
     config VIDEO_ZORAN_LML33R10 tristate {
      prompt "Linux Media Labs LML33R10 support" if [VIDEO_DEV && VIDEO_ZORAN]
      depends on [VIDEO_ZORAN]
      select VIDEO_SAA7114 if [VIDEO_DEV && VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_ADV7170 if [VIDEO_DEV && VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_ZORAN_ZR36060 if [VIDEO_DEV && VIDEO_ZORAN]
      inherited [VIDEO_DEV && VIDEO_ZORAN]
     }
     config VIDEO_ZORAN_AVS6EYES tristate {
      prompt "AverMedia 6 Eyes support (EXPERIMENTAL)" if [VIDEO_DEV && VIDEO_ZORAN && EXPERIMENTAL && VIDEO_V4L1]
      depends on [VIDEO_ZORAN && EXPERIMENTAL && VIDEO_V4L1]
      select VIDEO_BT856 if [VIDEO_DEV && VIDEO_ZORAN && EXPERIMENTAL && VIDEO_V4L1 && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_KS0127 if [VIDEO_DEV && VIDEO_ZORAN && EXPERIMENTAL && VIDEO_V4L1 && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_ZORAN_ZR36060 if [VIDEO_DEV && VIDEO_ZORAN && EXPERIMENTAL && VIDEO_V4L1]
      inherited [VIDEO_DEV && VIDEO_ZORAN && EXPERIMENTAL && VIDEO_V4L1]
     }
    }
    config VIDEO_MEYE tristate {
     prompt "Sony Vaio Picturebook Motion Eye Video For Linux" if [VIDEO_DEV && PCI && SONYPI && VIDEO_V4L1]
     depends on [PCI && SONYPI && VIDEO_V4L1]
     inherited [VIDEO_DEV && PCI && SONYPI && VIDEO_V4L1]
    }
    config VIDEO_SAA7134 tristate {
     prompt "Philips SAA7134 support" if [VIDEO_DEV && PCI && I2C]
     depends on [VIDEO_DEV && PCI && I2C]
     select VIDEO_BUF if [VIDEO_DEV && PCI && I2C]
     select VIDEO_IR if [VIDEO_DEV && PCI && I2C]
     select VIDEO_TUNER if [VIDEO_DEV && PCI && I2C]
     select CRC32 if [VIDEO_DEV && PCI && I2C]
     inherited [VIDEO_DEV && PCI && I2C]
     config VIDEO_SAA7134_ALSA tristate {
      prompt "Philips SAA7134 DMA audio support" if [VIDEO_DEV && VIDEO_SAA7134 && SND]
      depends on [VIDEO_SAA7134 && SND]
      select SND_PCM if [VIDEO_DEV && VIDEO_SAA7134 && SND]
      inherited [VIDEO_DEV && VIDEO_SAA7134 && SND]
     }
     config VIDEO_SAA7134_OSS tristate {
      prompt "Philips SAA7134 DMA audio support (OSS, DEPRECATED)" if [VIDEO_DEV && VIDEO_SAA7134 && SOUND_PRIME && !VIDEO_SAA7134_ALSA]
      depends on [VIDEO_SAA7134 && SOUND_PRIME && !VIDEO_SAA7134_ALSA]
      inherited [VIDEO_DEV && VIDEO_SAA7134 && SOUND_PRIME && !VIDEO_SAA7134_ALSA]
     }
     config VIDEO_SAA7134_DVB tristate {
      prompt "DVB/ATSC Support for saa7134 based TV cards" if [VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE]
      depends on [VIDEO_SAA7134 && DVB_CORE]
      select VIDEO_BUF_DVB if [VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE]
      select FW_LOADER if [VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE]
      select DVB_PLL if [VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE]
      select DVB_MT352 if [VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
      select DVB_TDA1004X if [VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
      select DVB_NXT200X if [VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
      select DVB_TDA10086 if [VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
      select DVB_TDA826X if [VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
      select DVB_ISL6421 if [VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
      inherited [VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE]
     }
    }
    config VIDEO_MXB tristate {
     prompt "Siemens-Nixdorf 'Multimedia eXtension Board'" if [VIDEO_DEV && PCI && VIDEO_V4L1 && I2C]
     depends on [PCI && VIDEO_V4L1 && I2C]
     select VIDEO_SAA7146_VV if [VIDEO_DEV && PCI && VIDEO_V4L1 && I2C]
     select VIDEO_TUNER if [VIDEO_DEV && PCI && VIDEO_V4L1 && I2C]
     select VIDEO_SAA7111 if [VIDEO_DEV && PCI && VIDEO_V4L1 && I2C && VIDEO_HELPER_CHIPS_AUTO]
     select VIDEO_TDA9840 if [VIDEO_DEV && PCI && VIDEO_V4L1 && I2C && VIDEO_HELPER_CHIPS_AUTO]
     select VIDEO_TEA6415C if [VIDEO_DEV && PCI && VIDEO_V4L1 && I2C && VIDEO_HELPER_CHIPS_AUTO]
     select VIDEO_TEA6420 if [VIDEO_DEV && PCI && VIDEO_V4L1 && I2C && VIDEO_HELPER_CHIPS_AUTO]
     inherited [VIDEO_DEV && PCI && VIDEO_V4L1 && I2C]
    }
    config VIDEO_DPC tristate {
     prompt "Philips-Semiconductors 'dpc7146 demonstration board'" if [VIDEO_DEV && PCI && VIDEO_V4L1 && I2C]
     depends on [PCI && VIDEO_V4L1 && I2C]
     select VIDEO_SAA7146_VV if [VIDEO_DEV && PCI && VIDEO_V4L1 && I2C]
     select VIDEO_SAA7111 if [VIDEO_DEV && PCI && VIDEO_V4L1 && I2C && VIDEO_HELPER_CHIPS_AUTO]
     inherited [VIDEO_DEV && PCI && VIDEO_V4L1 && I2C]
    }
    config VIDEO_HEXIUM_ORION tristate {
     prompt "Hexium HV-PCI6 and Orion frame grabber" if [VIDEO_DEV && PCI && VIDEO_V4L2 && I2C]
     depends on [PCI && VIDEO_V4L2 && I2C]
     select VIDEO_SAA7146_VV if [VIDEO_DEV && PCI && VIDEO_V4L2 && I2C]
     inherited [VIDEO_DEV && PCI && VIDEO_V4L2 && I2C]
    }
    config VIDEO_HEXIUM_GEMINI tristate {
     prompt "Hexium Gemini frame grabber" if [VIDEO_DEV && PCI && VIDEO_V4L2 && I2C]
     depends on [PCI && VIDEO_V4L2 && I2C]
     select VIDEO_SAA7146_VV if [VIDEO_DEV && PCI && VIDEO_V4L2 && I2C]
     inherited [VIDEO_DEV && PCI && VIDEO_V4L2 && I2C]
    }
    config VIDEO_CX88 tristate {
     prompt "Conexant 2388x (bt878 successor) support" if [VIDEO_DEV && PCI && I2C]
     depends on [VIDEO_DEV && PCI && I2C]
     select I2C_ALGOBIT if [VIDEO_DEV && PCI && I2C]
     select FW_LOADER if [VIDEO_DEV && PCI && I2C]
     select VIDEO_BTCX if [VIDEO_DEV && PCI && I2C]
     select VIDEO_BUF if [VIDEO_DEV && PCI && I2C]
     select VIDEO_TUNER if [VIDEO_DEV && PCI && I2C]
     select VIDEO_TVEEPROM if [VIDEO_DEV && PCI && I2C]
     select VIDEO_IR if [VIDEO_DEV && PCI && I2C]
     inherited [VIDEO_DEV && PCI && I2C]
     config VIDEO_CX88_ALSA tristate {
      prompt "Conexant 2388x DMA audio support" if [VIDEO_DEV && VIDEO_CX88 && SND && EXPERIMENTAL]
      depends on [VIDEO_CX88 && SND && EXPERIMENTAL]
      select SND_PCM if [VIDEO_DEV && VIDEO_CX88 && SND && EXPERIMENTAL]
      inherited [VIDEO_DEV && VIDEO_CX88 && SND && EXPERIMENTAL]
     }
     config VIDEO_CX88_BLACKBIRD tristate {
      prompt "Blackbird MPEG encoder support (cx2388x + cx23416)" if [VIDEO_DEV && VIDEO_CX88]
      depends on [VIDEO_CX88]
      select VIDEO_CX2341X if [VIDEO_DEV && VIDEO_CX88]
      inherited [VIDEO_DEV && VIDEO_CX88]
     }
     config VIDEO_CX88_DVB tristate {
      prompt "DVB/ATSC Support for cx2388x based TV cards" if [VIDEO_DEV && VIDEO_CX88 && DVB_CORE]
      depends on [VIDEO_CX88 && DVB_CORE]
      select VIDEO_BUF_DVB if [VIDEO_DEV && VIDEO_CX88 && DVB_CORE]
      select DVB_PLL if [VIDEO_DEV && VIDEO_CX88 && DVB_CORE]
      select DVB_MT352 if [VIDEO_DEV && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
      select DVB_ZL10353 if [VIDEO_DEV && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
      select DVB_OR51132 if [VIDEO_DEV && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
      select DVB_CX22702 if [VIDEO_DEV && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
      select DVB_LGDT330X if [VIDEO_DEV && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
      select DVB_TUNER_LGH06XF if [VIDEO_DEV && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
      select DVB_NXT200X if [VIDEO_DEV && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
      select DVB_CX24123 if [VIDEO_DEV && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
      select DVB_ISL6421 if [VIDEO_DEV && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
      inherited [VIDEO_DEV && VIDEO_CX88 && DVB_CORE]
      config VIDEO_CX88_VP3054 tristate {
       prompt "VP-3054 Secondary I2C Bus Support" if [VIDEO_DEV && VIDEO_CX88_DVB && DVB_MT352]
       default [m] if [VIDEO_DEV && VIDEO_CX88_DVB && DVB_MT352]
       depends on [VIDEO_CX88_DVB && DVB_MT352]
       inherited [VIDEO_DEV && VIDEO_CX88_DVB && DVB_MT352]
      }
     }
    }
    config VIDEO_M32R_AR tristate {
     prompt "AR devices" if [VIDEO_DEV && M32R && VIDEO_V4L1]
     depends on [M32R && VIDEO_V4L1]
     inherited [VIDEO_DEV && M32R && VIDEO_V4L1]
    }
    config VIDEO_M32R_AR_M64278 tristate {
     prompt "AR device with color module M64278(VGA)" if [VIDEO_DEV && PLAT_M32700UT]
     depends on [PLAT_M32700UT]
     select VIDEO_M32R_AR if [VIDEO_DEV && PLAT_M32700UT]
     inherited [VIDEO_DEV && PLAT_M32700UT]
    }
    config VIDEO_CAFE_CCIC tristate {
     prompt "Marvell 88ALP01 (Cafe) CMOS Camera Controller support" if [VIDEO_DEV && PCI && I2C && VIDEO_V4L2]
     depends on [PCI && I2C && VIDEO_V4L2]
     select VIDEO_OV7670 if [VIDEO_DEV && PCI && I2C && VIDEO_V4L2]
     inherited [VIDEO_DEV && PCI && I2C && VIDEO_V4L2]
    }
    menu "V4L USB devices" {
     depends on [USB && VIDEO_DEV]
     config VIDEO_PVRUSB2 tristate {
      prompt "Hauppauge WinTV-PVR USB2 support" if [VIDEO_DEV && VIDEO_V4L2 && USB && I2C && EXPERIMENTAL]
      depends on [VIDEO_V4L2 && USB && I2C && EXPERIMENTAL]
      select FW_LOADER if [VIDEO_DEV && VIDEO_V4L2 && USB && I2C && EXPERIMENTAL]
      select VIDEO_TUNER if [VIDEO_DEV && VIDEO_V4L2 && USB && I2C && EXPERIMENTAL]
      select VIDEO_TVEEPROM if [VIDEO_DEV && VIDEO_V4L2 && USB && I2C && EXPERIMENTAL]
      select VIDEO_CX2341X if [VIDEO_DEV && VIDEO_V4L2 && USB && I2C && EXPERIMENTAL]
      inherited [VIDEO_DEV && VIDEO_V4L2 && USB && I2C && EXPERIMENTAL]
      config VIDEO_PVRUSB2_29XXX boolean {
       prompt "Hauppauge WinTV-PVR USB2 support for 29xxx model series" if [USB && VIDEO_DEV && VIDEO_PVRUSB2 && EXPERIMENTAL]
       depends on [VIDEO_PVRUSB2 && EXPERIMENTAL]
       select VIDEO_SAA711X if [USB && VIDEO_DEV && VIDEO_PVRUSB2 && EXPERIMENTAL]
       select VIDEO_MSP3400 if [USB && VIDEO_DEV && VIDEO_PVRUSB2 && EXPERIMENTAL]
       inherited [USB && VIDEO_DEV && VIDEO_PVRUSB2 && EXPERIMENTAL]
      }
      config VIDEO_PVRUSB2_24XXX boolean {
       prompt "Hauppauge WinTV-PVR USB2 support for 24xxx model series" if [USB && VIDEO_DEV && VIDEO_PVRUSB2 && EXPERIMENTAL]
       depends on [VIDEO_PVRUSB2 && EXPERIMENTAL]
       select VIDEO_CX25840 if [USB && VIDEO_DEV && VIDEO_PVRUSB2 && EXPERIMENTAL]
       select VIDEO_WM8775 if [USB && VIDEO_DEV && VIDEO_PVRUSB2 && EXPERIMENTAL]
       inherited [USB && VIDEO_DEV && VIDEO_PVRUSB2 && EXPERIMENTAL]
      }
      config VIDEO_PVRUSB2_SYSFS boolean {
       prompt "pvrusb2 sysfs support (EXPERIMENTAL)" if [USB && VIDEO_DEV && VIDEO_PVRUSB2 && SYSFS && EXPERIMENTAL]
       default [y] if [USB && VIDEO_DEV && VIDEO_PVRUSB2 && SYSFS && EXPERIMENTAL]
       depends on [VIDEO_PVRUSB2 && SYSFS && EXPERIMENTAL]
       inherited [USB && VIDEO_DEV && VIDEO_PVRUSB2 && SYSFS && EXPERIMENTAL]
       config VIDEO_PVRUSB2_DEBUGIFC boolean {
        prompt "pvrusb2 debug interface" if [USB && VIDEO_DEV && VIDEO_PVRUSB2_SYSFS]
        depends on [VIDEO_PVRUSB2_SYSFS]
        inherited [USB && VIDEO_DEV && VIDEO_PVRUSB2_SYSFS]
       }
      }
     }
     config VIDEO_EM28XX tristate {
      prompt "Empia EM2800/2820/2840 USB video capture support" if [VIDEO_DEV && VIDEO_V4L1 && USB && I2C]
      depends on [VIDEO_V4L1 && USB && I2C]
      select VIDEO_BUF if [VIDEO_DEV && VIDEO_V4L1 && USB && I2C]
      select VIDEO_TUNER if [VIDEO_DEV && VIDEO_V4L1 && USB && I2C]
      select VIDEO_TVEEPROM if [VIDEO_DEV && VIDEO_V4L1 && USB && I2C]
      select VIDEO_IR if [VIDEO_DEV && VIDEO_V4L1 && USB && I2C]
      select VIDEO_SAA711X if [VIDEO_DEV && VIDEO_V4L1 && USB && I2C && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_TVP5150 if [VIDEO_DEV && VIDEO_V4L1 && USB && I2C && VIDEO_HELPER_CHIPS_AUTO]
      inherited [VIDEO_DEV && VIDEO_V4L1 && USB && I2C]
     }
     config VIDEO_USBVISION tristate {
      prompt "USB video devices based on Nogatech NT1003/1004/1005" if [USB && VIDEO_DEV && I2C && VIDEO_V4L2]
      depends on [I2C && VIDEO_V4L2]
      select VIDEO_TUNER if [USB && VIDEO_DEV && I2C && VIDEO_V4L2]
      select VIDEO_SAA711X if [USB && VIDEO_DEV && I2C && VIDEO_V4L2 && VIDEO_HELPER_CHIPS_AUTO]
      inherited [USB && VIDEO_DEV && I2C && VIDEO_V4L2]
     }
     config VIDEO_USBVIDEO tristate {
      inherited [USB && VIDEO_DEV]
     }
     config USB_VICAM tristate {
      prompt "USB 3com HomeConnect (aka vicam) support (EXPERIMENTAL)" if [USB && VIDEO_DEV && VIDEO_V4L1 && EXPERIMENTAL]
      depends on [USB && VIDEO_DEV && VIDEO_V4L1 && EXPERIMENTAL]
      select VIDEO_USBVIDEO if [USB && VIDEO_DEV && VIDEO_V4L1 && EXPERIMENTAL]
      inherited [USB && VIDEO_DEV && VIDEO_V4L1 && EXPERIMENTAL]
     }
     config USB_IBMCAM tristate {
      prompt "USB IBM (Xirlink) C-it Camera support" if [USB && VIDEO_DEV && VIDEO_V4L1]
      depends on [USB && VIDEO_DEV && VIDEO_V4L1]
      select VIDEO_USBVIDEO if [USB && VIDEO_DEV && VIDEO_V4L1]
      inherited [USB && VIDEO_DEV && VIDEO_V4L1]
     }
     config USB_KONICAWC tristate {
      prompt "USB Konica Webcam support" if [USB && VIDEO_DEV && VIDEO_V4L1]
      depends on [USB && VIDEO_DEV && VIDEO_V4L1]
      select VIDEO_USBVIDEO if [USB && VIDEO_DEV && VIDEO_V4L1]
      inherited [USB && VIDEO_DEV && VIDEO_V4L1]
     }
     config USB_QUICKCAM_MESSENGER tristate {
      prompt "USB Logitech Quickcam Messenger" if [USB && VIDEO_DEV && VIDEO_V4L1]
      depends on [USB && VIDEO_DEV && VIDEO_V4L1]
      select VIDEO_USBVIDEO if [USB && VIDEO_DEV && VIDEO_V4L1]
      inherited [USB && VIDEO_DEV && VIDEO_V4L1]
     }
     config USB_ET61X251 tristate {
      prompt "USB ET61X[12]51 PC Camera Controller support" if [VIDEO_DEV && USB && VIDEO_V4L1]
      depends on [USB && VIDEO_V4L1]
      inherited [VIDEO_DEV && USB && VIDEO_V4L1]
     }
     config VIDEO_OVCAMCHIP tristate {
      prompt "OmniVision Camera Chip support" if [USB && VIDEO_DEV && I2C && VIDEO_V4L1]
      depends on [I2C && VIDEO_V4L1]
      inherited [USB && VIDEO_DEV && I2C && VIDEO_V4L1]
     }
     config USB_W9968CF tristate {
      prompt "USB W996[87]CF JPEG Dual Mode Camera support" if [VIDEO_DEV && USB && VIDEO_V4L1 && I2C]
      depends on [USB && VIDEO_V4L1 && I2C]
      select VIDEO_OVCAMCHIP if [VIDEO_DEV && USB && VIDEO_V4L1 && I2C]
      inherited [VIDEO_DEV && USB && VIDEO_V4L1 && I2C]
     }
     config USB_OV511 tristate {
      prompt "USB OV511 Camera support" if [VIDEO_DEV && USB && VIDEO_V4L1]
      depends on [USB && VIDEO_V4L1]
      inherited [VIDEO_DEV && USB && VIDEO_V4L1]
     }
     config USB_SE401 tristate {
      prompt "USB SE401 Camera support" if [VIDEO_DEV && USB && VIDEO_V4L1]
      depends on [USB && VIDEO_V4L1]
      inherited [VIDEO_DEV && USB && VIDEO_V4L1]
     }
     config USB_SN9C102 tristate {
      prompt "USB SN9C10x PC Camera Controller support" if [VIDEO_DEV && USB && VIDEO_V4L1]
      depends on [USB && VIDEO_V4L1]
      inherited [VIDEO_DEV && USB && VIDEO_V4L1]
     }
     config USB_STV680 tristate {
      prompt "USB STV680 (Pencam) Camera support" if [VIDEO_DEV && USB && VIDEO_V4L1]
      depends on [USB && VIDEO_V4L1]
      inherited [VIDEO_DEV && USB && VIDEO_V4L1]
     }
     config USB_ZC0301 tristate {
      prompt "USB ZC0301[P] Image Processor and Control Chip support" if [VIDEO_DEV && USB && VIDEO_V4L1]
      depends on [USB && VIDEO_V4L1]
      inherited [VIDEO_DEV && USB && VIDEO_V4L1]
     }
     config USB_PWC tristate {
      prompt "USB Philips Cameras" if [VIDEO_DEV && USB && VIDEO_V4L1]
      depends on [USB && VIDEO_V4L1]
      inherited [VIDEO_DEV && USB && VIDEO_V4L1]
      config USB_PWC_DEBUG boolean {
       prompt "USB Philips Cameras verbose debug" if [USB && VIDEO_DEV && USB_PWC]
       depends on [USB_PWC]
       inherited [USB && VIDEO_DEV && USB_PWC]
      }
     }
    }
   }
   menu "Radio Adapters" {
    depends on [VIDEO_DEV!="n"]
    config RADIO_CADET tristate {
     prompt "ADS Cadet AM/FM Tuner" if [VIDEO_DEV!="n" && ISA && VIDEO_V4L2]
     depends on [ISA && VIDEO_V4L2]
     inherited [VIDEO_DEV!="n" && ISA && VIDEO_V4L2]
    }
    config RADIO_RTRACK tristate {
     prompt "AIMSlab RadioTrack (aka RadioReveal) support" if [VIDEO_DEV!="n" && ISA && VIDEO_V4L2]
     depends on [ISA && VIDEO_V4L2]
     inherited [VIDEO_DEV!="n" && ISA && VIDEO_V4L2]
     config RADIO_RTRACK_PORT hex {
      prompt "RadioTrack i/o port (0x20f or 0x30f)" if [VIDEO_DEV && RADIO_RTRACK="y"]
      depends on [RADIO_RTRACK="y"]
      default [20f] if [VIDEO_DEV && RADIO_RTRACK="y"]
      inherited [VIDEO_DEV && RADIO_RTRACK="y"]
     }
    }
    config RADIO_RTRACK2 tristate {
     prompt "AIMSlab RadioTrack II support" if [VIDEO_DEV!="n" && ISA && VIDEO_V4L2]
     depends on [ISA && VIDEO_V4L2]
     inherited [VIDEO_DEV!="n" && ISA && VIDEO_V4L2]
     config RADIO_RTRACK2_PORT hex {
      prompt "RadioTrack II i/o port (0x20c or 0x30c)" if [VIDEO_DEV && RADIO_RTRACK2="y"]
      depends on [RADIO_RTRACK2="y"]
      default [30c] if [VIDEO_DEV && RADIO_RTRACK2="y"]
      inherited [VIDEO_DEV && RADIO_RTRACK2="y"]
     }
    }
    config RADIO_AZTECH tristate {
     prompt "Aztech/Packard Bell Radio" if [VIDEO_DEV!="n" && ISA && VIDEO_V4L2]
     depends on [ISA && VIDEO_V4L2]
     inherited [VIDEO_DEV!="n" && ISA && VIDEO_V4L2]
     config RADIO_AZTECH_PORT hex {
      prompt "Aztech/Packard Bell I/O port (0x350 or 0x358)" if [VIDEO_DEV && RADIO_AZTECH="y"]
      depends on [RADIO_AZTECH="y"]
      default [350] if [VIDEO_DEV && RADIO_AZTECH="y"]
      inherited [VIDEO_DEV && RADIO_AZTECH="y"]
     }
    }
    config RADIO_GEMTEK tristate {
     prompt "GemTek Radio Card support" if [VIDEO_DEV!="n" && ISA && VIDEO_V4L2]
     depends on [ISA && VIDEO_V4L2]
     inherited [VIDEO_DEV!="n" && ISA && VIDEO_V4L2]
     config RADIO_GEMTEK_PORT hex {
      prompt "GemTek i/o port (0x20c, 0x30c, 0x24c or 0x34c)" if [VIDEO_DEV && RADIO_GEMTEK="y"]
      depends on [RADIO_GEMTEK="y"]
      default [34c] if [VIDEO_DEV && RADIO_GEMTEK="y"]
      inherited [VIDEO_DEV && RADIO_GEMTEK="y"]
     }
    }
    config RADIO_GEMTEK_PCI tristate {
     prompt "GemTek PCI Radio Card support" if [VIDEO_DEV!="n" && VIDEO_V4L2 && PCI]
     depends on [VIDEO_V4L2 && PCI]
     inherited [VIDEO_DEV!="n" && VIDEO_V4L2 && PCI]
    }
    config RADIO_MAXIRADIO tristate {
     prompt "Guillemot MAXI Radio FM 2000 radio" if [VIDEO_DEV!="n" && VIDEO_V4L2 && PCI]
     depends on [VIDEO_V4L2 && PCI]
     inherited [VIDEO_DEV!="n" && VIDEO_V4L2 && PCI]
    }
    config RADIO_MAESTRO tristate {
     prompt "Maestro on board radio" if [VIDEO_DEV!="n" && VIDEO_V4L2 && PCI]
     depends on [VIDEO_V4L2 && PCI]
     inherited [VIDEO_DEV!="n" && VIDEO_V4L2 && PCI]
    }
    config RADIO_SF16FMI tristate {
     prompt "SF16FMI Radio" if [VIDEO_DEV!="n" && ISA && VIDEO_V4L2]
     depends on [ISA && VIDEO_V4L2]
     inherited [VIDEO_DEV!="n" && ISA && VIDEO_V4L2]
    }
    config RADIO_SF16FMR2 tristate {
     prompt "SF16FMR2 Radio" if [VIDEO_DEV!="n" && ISA && VIDEO_V4L2]
     depends on [ISA && VIDEO_V4L2]
     inherited [VIDEO_DEV!="n" && ISA && VIDEO_V4L2]
    }
    config RADIO_TERRATEC tristate {
     prompt "TerraTec ActiveRadio ISA Standalone" if [VIDEO_DEV!="n" && ISA && VIDEO_V4L2]
     depends on [ISA && VIDEO_V4L2]
     inherited [VIDEO_DEV!="n" && ISA && VIDEO_V4L2]
     config RADIO_TERRATEC_PORT hex {
      prompt "Terratec i/o port (normally 0x590)" if [VIDEO_DEV && RADIO_TERRATEC="y"]
      depends on [RADIO_TERRATEC="y"]
      default [590] if [VIDEO_DEV && RADIO_TERRATEC="y"]
      inherited [VIDEO_DEV && RADIO_TERRATEC="y"]
     }
    }
    config RADIO_TRUST tristate {
     prompt "Trust FM radio card" if [VIDEO_DEV!="n" && ISA && VIDEO_V4L2]
     depends on [ISA && VIDEO_V4L2]
     inherited [VIDEO_DEV!="n" && ISA && VIDEO_V4L2]
     config RADIO_TRUST_PORT hex {
      prompt "Trust i/o port (usually 0x350 or 0x358)" if [VIDEO_DEV && RADIO_TRUST="y"]
      depends on [RADIO_TRUST="y"]
      default [350] if [VIDEO_DEV && RADIO_TRUST="y"]
      inherited [VIDEO_DEV && RADIO_TRUST="y"]
     }
    }
    config RADIO_TYPHOON tristate {
     prompt "Typhoon Radio (a.k.a. EcoRadio)" if [VIDEO_DEV!="n" && ISA && VIDEO_V4L2]
     depends on [ISA && VIDEO_V4L2]
     inherited [VIDEO_DEV!="n" && ISA && VIDEO_V4L2]
     config RADIO_TYPHOON_PROC_FS boolean {
      prompt "Support for /proc/radio-typhoon" if [VIDEO_DEV && PROC_FS && RADIO_TYPHOON]
      depends on [PROC_FS && RADIO_TYPHOON]
      inherited [VIDEO_DEV && PROC_FS && RADIO_TYPHOON]
     }
     config RADIO_TYPHOON_PORT hex {
      prompt "Typhoon I/O port (0x316 or 0x336)" if [VIDEO_DEV && RADIO_TYPHOON="y"]
      depends on [RADIO_TYPHOON="y"]
      default [316] if [VIDEO_DEV && RADIO_TYPHOON="y"]
      inherited [VIDEO_DEV && RADIO_TYPHOON="y"]
     }
     config RADIO_TYPHOON_MUTEFREQ integer {
      prompt "Typhoon frequency set when muting the device (kHz)" if [VIDEO_DEV && RADIO_TYPHOON="y"]
      depends on [RADIO_TYPHOON="y"]
      default [87500] if [VIDEO_DEV && RADIO_TYPHOON="y"]
      inherited [VIDEO_DEV && RADIO_TYPHOON="y"]
     }
    }
    config RADIO_ZOLTRIX tristate {
     prompt "Zoltrix Radio" if [VIDEO_DEV!="n" && ISA && VIDEO_V4L2]
     depends on [ISA && VIDEO_V4L2]
     inherited [VIDEO_DEV!="n" && ISA && VIDEO_V4L2]
     config RADIO_ZOLTRIX_PORT hex {
      prompt "ZOLTRIX I/O port (0x20c or 0x30c)" if [VIDEO_DEV && RADIO_ZOLTRIX="y"]
      depends on [RADIO_ZOLTRIX="y"]
      default [20c] if [VIDEO_DEV && RADIO_ZOLTRIX="y"]
      inherited [VIDEO_DEV && RADIO_ZOLTRIX="y"]
     }
    }
    config USB_DSBR tristate {
     prompt "D-Link USB FM radio support (EXPERIMENTAL)" if [VIDEO_DEV!="n" && USB && VIDEO_V4L2 && EXPERIMENTAL]
     depends on [USB && VIDEO_V4L2 && EXPERIMENTAL]
     inherited [VIDEO_DEV!="n" && USB && VIDEO_V4L2 && EXPERIMENTAL]
    }
   }
  }
  menu "Digital Video Broadcasting Devices" {
   config DVB boolean {
    prompt "DVB For Linux" if [NET && INET]
    depends on [NET && INET]
    inherited [NET && INET]
    config DVB_CORE tristate {
     prompt "DVB Core Support" if [DVB]
     depends on [DVB]
     select CRC32 if [DVB]
     inherited [DVB]
     config DVB_CORE_ATTACH boolean {
      prompt "Load and attach frontend modules as needed" if [DVB_CORE && MODULES]
      depends on [DVB_CORE]
      depends on [MODULES]
      inherited [DVB_CORE && MODULES]
     }
     config DVB_AV7110 tristate {
      prompt "AV7110 cards" if [DVB_CORE && PCI && I2C && VIDEO_V4L1]
      depends on [DVB_CORE && PCI && I2C && VIDEO_V4L1]
      select FW_LOADER if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_AV7110_FIRMWARE]
      select VIDEO_SAA7146_VV if [DVB_CORE && PCI && I2C && VIDEO_V4L1]
      select DVB_PLL if [DVB_CORE && PCI && I2C && VIDEO_V4L1]
      select DVB_VES1820 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_VES1X93 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_STV0299 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_TDA8083 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_SP8870 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_STV0297 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_L64781 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_LNBP21 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      inherited [DVB_CORE && PCI && I2C && VIDEO_V4L1]
      config DVB_AV7110_FIRMWARE boolean {
       prompt "Compile AV7110 firmware into the driver" if [DVB_AV7110 && !STANDALONE]
       depends on [DVB_AV7110 && !STANDALONE]
       default [y] if [!STANDALONE && DVB_AV7110="y"]
       inherited [DVB_AV7110 && !STANDALONE]
       config DVB_AV7110_FIRMWARE_FILE string {
        prompt "Full pathname of av7110 firmware file" if [DVB_AV7110_FIRMWARE]
        depends on [DVB_AV7110_FIRMWARE]
        default ["/usr/lib/hotplug/firmware/dvb-ttpci-01.fw"] if [DVB_AV7110_FIRMWARE]
        inherited [DVB_AV7110_FIRMWARE]
       }
      }
      config DVB_AV7110_OSD boolean {
       prompt "AV7110 OSD support" if [DVB_AV7110]
       depends on [DVB_AV7110]
       default [y] if [DVB_AV7110]
       inherited [DVB_AV7110]
      }
     }
     config DVB_BUDGET tristate {
      prompt "Budget cards" if [DVB_CORE && PCI && I2C && VIDEO_V4L1]
      depends on [DVB_CORE && PCI && I2C && VIDEO_V4L1]
      select VIDEO_SAA7146 if [DVB_CORE && PCI && I2C && VIDEO_V4L1]
      select DVB_PLL if [DVB_CORE && PCI && I2C && VIDEO_V4L1]
      select DVB_STV0299 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_VES1X93 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_VES1820 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_L64781 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_TDA8083 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_TDA10021 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_S5H1420 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_TDA10086 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_TDA826X if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_LNBP21 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      inherited [DVB_CORE && PCI && I2C && VIDEO_V4L1]
     }
     config DVB_BUDGET_CI tristate {
      prompt "Budget cards with onboard CI connector" if [DVB_CORE && PCI && I2C && VIDEO_V4L1]
      depends on [DVB_CORE && PCI && I2C && VIDEO_V4L1]
      select VIDEO_SAA7146 if [DVB_CORE && PCI && I2C && VIDEO_V4L1]
      select DVB_PLL if [DVB_CORE && PCI && I2C && VIDEO_V4L1]
      select DVB_STV0297 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_STV0299 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_TDA1004X if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_LNBP21 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select VIDEO_IR if [DVB_CORE && PCI && I2C && VIDEO_V4L1]
      inherited [DVB_CORE && PCI && I2C && VIDEO_V4L1]
     }
     config DVB_BUDGET_AV tristate {
      prompt "Budget cards with analog video inputs" if [DVB_CORE && PCI && I2C && VIDEO_V4L1]
      depends on [DVB_CORE && PCI && I2C && VIDEO_V4L1]
      select VIDEO_SAA7146_VV if [DVB_CORE && PCI && I2C && VIDEO_V4L1]
      select DVB_PLL if [DVB_CORE && PCI && I2C && VIDEO_V4L1]
      select DVB_STV0299 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_TDA1004X if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_TDA10021 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_TUA6100 if [DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select FW_LOADER if [DVB_CORE && PCI && I2C && VIDEO_V4L1]
      inherited [DVB_CORE && PCI && I2C && VIDEO_V4L1]
     }
     config DVB_BUDGET_PATCH tristate {
      prompt "AV7110 cards with Budget Patch" if [DVB_CORE && DVB_BUDGET && VIDEO_V4L1]
      depends on [DVB_CORE && DVB_BUDGET && VIDEO_V4L1]
      select DVB_AV7110 if [DVB_CORE && DVB_BUDGET && VIDEO_V4L1]
      select DVB_PLL if [DVB_CORE && DVB_BUDGET && VIDEO_V4L1]
      select DVB_STV0299 if [DVB_CORE && DVB_BUDGET && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_VES1X93 if [DVB_CORE && DVB_BUDGET && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_TDA8083 if [DVB_CORE && DVB_BUDGET && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      inherited [DVB_CORE && DVB_BUDGET && VIDEO_V4L1]
     }
     config DVB_USB tristate {
      prompt "Support for various USB DVB devices" if [DVB_CORE && USB && I2C]
      depends on [DVB_CORE && USB && I2C]
      select FW_LOADER if [DVB_CORE && USB && I2C]
      select DVB_PLL if [DVB_CORE && USB && I2C]
      inherited [DVB_CORE && USB && I2C]
      config DVB_USB_DEBUG boolean {
       prompt "Enable extended debug support for all DVB-USB devices" if [DVB_USB]
       depends on [DVB_USB]
       inherited [DVB_USB]
      }
      config DVB_USB_A800 tristate {
       prompt "AVerMedia AverTV DVB-T USB 2.0 (A800)" if [DVB_USB]
       depends on [DVB_USB]
       select DVB_DIB3000MC if [DVB_USB]
       select DVB_TUNER_MT2060 if [DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [DVB_USB]
      }
      config DVB_USB_DIBUSB_MB tristate {
       prompt "DiBcom USB DVB-T devices (based on the DiB3000M-B) (see help for device list)" if [DVB_USB]
       depends on [DVB_USB]
       select DVB_DIB3000MB if [DVB_USB]
       select DVB_TUNER_MT2060 if [DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [DVB_USB]
       config DVB_USB_DIBUSB_MB_FAULTY boolean {
        prompt "Support faulty USB IDs" if [DVB_USB_DIBUSB_MB]
        depends on [DVB_USB_DIBUSB_MB]
        inherited [DVB_USB_DIBUSB_MB]
       }
      }
      config DVB_USB_DIBUSB_MC tristate {
       prompt "DiBcom USB DVB-T devices (based on the DiB3000M-C/P) (see help for device list)" if [DVB_USB]
       depends on [DVB_USB]
       select DVB_DIB3000MC if [DVB_USB]
       select DVB_TUNER_MT2060 if [DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [DVB_USB]
      }
      config DVB_USB_DIB0700 tristate {
       prompt "DiBcom DiB0700 USB DVB devices (see help for supported devices)" if [DVB_USB]
       depends on [DVB_USB]
       select DVB_DIB7000P if [DVB_USB]
       select DVB_DIB7000M if [DVB_USB]
       select DVB_DIB3000MC if [DVB_USB]
       select DVB_TUNER_MT2060 if [DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [DVB_USB]
      }
      config DVB_USB_UMT_010 tristate {
       prompt "HanfTek UMT-010 DVB-T USB2.0 support" if [DVB_USB]
       depends on [DVB_USB]
       select DVB_DIB3000MC if [DVB_USB]
       select DVB_TUNER_MT2060 if [DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [DVB_USB]
      }
      config DVB_USB_CXUSB tristate {
       prompt "Conexant USB2.0 hybrid reference design support" if [DVB_USB]
       depends on [DVB_USB]
       select DVB_CX22702 if [DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_LGDT330X if [DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_TUNER_LGH06XF if [DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_MT352 if [DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_ZL10353 if [DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [DVB_USB]
      }
      config DVB_USB_DIGITV tristate {
       prompt "Nebula Electronics uDigiTV DVB-T USB2.0 support" if [DVB_USB]
       depends on [DVB_USB]
       select DVB_NXT6000 if [DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_MT352 if [DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [DVB_USB]
      }
      config DVB_USB_VP7045 tristate {
       prompt "TwinhanDTV Alpha/MagicBoxII, DNTV tinyUSB2, Beetle USB2.0 support" if [DVB_USB]
       depends on [DVB_USB]
       inherited [DVB_USB]
      }
      config DVB_USB_VP702X tristate {
       prompt "TwinhanDTV StarBox and clones DVB-S USB2.0 support" if [DVB_USB]
       depends on [DVB_USB]
       inherited [DVB_USB]
      }
      config DVB_USB_GP8PSK tristate {
       prompt "GENPIX 8PSK->USB module support" if [DVB_USB]
       depends on [DVB_USB]
       inherited [DVB_USB]
      }
      config DVB_USB_NOVA_T_USB2 tristate {
       prompt "Hauppauge WinTV-NOVA-T usb2 DVB-T USB2.0 support" if [DVB_USB]
       depends on [DVB_USB]
       select DVB_DIB3000MC if [DVB_USB]
       select DVB_TUNER_MT2060 if [DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [DVB_USB]
      }
      config DVB_USB_TTUSB2 tristate {
       prompt "Pinnacle 400e DVB-S USB2.0 support" if [DVB_USB]
       depends on [DVB_USB]
       select DVB_TDA10086 if [DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_LNBP21 if [DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_TDA826X if [DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [DVB_USB]
      }
      config DVB_USB_DTT200U tristate {
       prompt "WideView WT-200U and WT-220U (pen) DVB-T USB2.0 support (Yakumo/Hama/Typhoon/Yuan)" if [DVB_USB]
       depends on [DVB_USB]
       inherited [DVB_USB]
      }
     }
     config DVB_TTUSB_BUDGET tristate {
      prompt "Technotrend/Hauppauge Nova-USB devices" if [DVB_CORE && USB && I2C]
      depends on [DVB_CORE && USB && I2C]
      select DVB_PLL if [DVB_CORE && USB && I2C]
      select DVB_CX22700 if [DVB_CORE && USB && I2C && !DVB_FE_CUSTOMISE]
      select DVB_TDA1004X if [DVB_CORE && USB && I2C && !DVB_FE_CUSTOMISE]
      select DVB_VES1820 if [DVB_CORE && USB && I2C && !DVB_FE_CUSTOMISE]
      select DVB_TDA8083 if [DVB_CORE && USB && I2C && !DVB_FE_CUSTOMISE]
      select DVB_STV0299 if [DVB_CORE && USB && I2C && !DVB_FE_CUSTOMISE]
      select DVB_STV0297 if [DVB_CORE && USB && I2C && !DVB_FE_CUSTOMISE]
      select DVB_LNBP21 if [DVB_CORE && USB && I2C && !DVB_FE_CUSTOMISE]
      inherited [DVB_CORE && USB && I2C]
     }
     config DVB_TTUSB_DEC tristate {
      prompt "Technotrend/Hauppauge USB DEC devices" if [DVB_CORE && USB]
      depends on [DVB_CORE && USB]
      select FW_LOADER if [DVB_CORE && USB]
      select CRC32 if [DVB_CORE && USB]
      inherited [DVB_CORE && USB]
     }
     config DVB_CINERGYT2 tristate {
      prompt "Terratec CinergyT2/qanu USB2 DVB-T receiver" if [DVB_CORE && USB]
      depends on [DVB_CORE && USB]
      inherited [DVB_CORE && USB]
      config DVB_CINERGYT2_TUNING boolean {
       prompt "sophisticated fine-tuning for CinergyT2 cards" if [DVB_CINERGYT2]
       depends on [DVB_CINERGYT2]
       inherited [DVB_CINERGYT2]
       config DVB_CINERGYT2_STREAM_URB_COUNT integer {
        prompt "Number of queued USB Request Blocks for Highspeed Stream Transfers" if [DVB_CINERGYT2_TUNING]
        depends on [DVB_CINERGYT2_TUNING]
        default [32] if [DVB_CINERGYT2_TUNING]
        inherited [DVB_CINERGYT2_TUNING]
       }
       config DVB_CINERGYT2_STREAM_BUF_SIZE integer {
        prompt "Size of URB Stream Buffers for Highspeed Transfers" if [DVB_CINERGYT2_TUNING]
        depends on [DVB_CINERGYT2_TUNING]
        default [512] if [DVB_CINERGYT2_TUNING]
        inherited [DVB_CINERGYT2_TUNING]
       }
       config DVB_CINERGYT2_QUERY_INTERVAL integer {
        prompt "Status update interval [milliseconds]" if [DVB_CINERGYT2_TUNING]
        depends on [DVB_CINERGYT2_TUNING]
        default [250] if [DVB_CINERGYT2_TUNING]
        inherited [DVB_CINERGYT2_TUNING]
       }
       config DVB_CINERGYT2_ENABLE_RC_INPUT_DEVICE boolean {
        prompt "Register the onboard IR Remote Control Receiver as Input Device" if [DVB_CINERGYT2_TUNING]
        depends on [DVB_CINERGYT2_TUNING]
        default [y] if [DVB_CINERGYT2_TUNING]
        inherited [DVB_CINERGYT2_TUNING]
        config DVB_CINERGYT2_RC_QUERY_INTERVAL integer {
         prompt "Infrared Remote Controller update interval [milliseconds]" if [DVB_CINERGYT2_TUNING && DVB_CINERGYT2_ENABLE_RC_INPUT_DEVICE]
         depends on [DVB_CINERGYT2_TUNING && DVB_CINERGYT2_ENABLE_RC_INPUT_DEVICE]
         default [50] if [DVB_CINERGYT2_TUNING && DVB_CINERGYT2_ENABLE_RC_INPUT_DEVICE]
         inherited [DVB_CINERGYT2_TUNING && DVB_CINERGYT2_ENABLE_RC_INPUT_DEVICE]
        }
       }
      }
     }
     config DVB_B2C2_FLEXCOP tristate {
      prompt "Technisat/B2C2 FlexCopII(b) and FlexCopIII adapters" if [DVB_CORE && I2C]
      depends on [DVB_CORE && I2C]
      select DVB_PLL if [DVB_CORE && I2C]
      select DVB_STV0299 if [DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_MT352 if [DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_MT312 if [DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_NXT200X if [DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_STV0297 if [DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_BCM3510 if [DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_LGDT330X if [DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_TUNER_LGH06XF if [DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      inherited [DVB_CORE && I2C]
      config DVB_B2C2_FLEXCOP_PCI tristate {
       prompt "Technisat/B2C2 Air/Sky/Cable2PC PCI" if [DVB_B2C2_FLEXCOP && PCI && I2C]
       depends on [DVB_B2C2_FLEXCOP && PCI && I2C]
       inherited [DVB_B2C2_FLEXCOP && PCI && I2C]
      }
      config DVB_B2C2_FLEXCOP_USB tristate {
       prompt "Technisat/B2C2 Air/Sky/Cable2PC USB" if [DVB_B2C2_FLEXCOP && USB && I2C]
       depends on [DVB_B2C2_FLEXCOP && USB && I2C]
       inherited [DVB_B2C2_FLEXCOP && USB && I2C]
      }
      config DVB_B2C2_FLEXCOP_DEBUG boolean {
       prompt "Enable debug for the B2C2 FlexCop drivers" if [DVB_B2C2_FLEXCOP]
       depends on [DVB_B2C2_FLEXCOP]
       inherited [DVB_B2C2_FLEXCOP]
      }
     }
     config DVB_BT8XX tristate {
      prompt "BT8xx based PCI cards" if [DVB_CORE && PCI && I2C && VIDEO_BT848]
      depends on [DVB_CORE && PCI && I2C && VIDEO_BT848]
      select DVB_MT352 if [DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select DVB_SP887X if [DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select DVB_NXT6000 if [DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select DVB_CX24110 if [DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select DVB_OR51211 if [DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select DVB_LGDT330X if [DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select DVB_TUNER_LGH06XF if [DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select DVB_ZL10353 if [DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select FW_LOADER if [DVB_CORE && PCI && I2C && VIDEO_BT848]
      inherited [DVB_CORE && PCI && I2C && VIDEO_BT848]
     }
     config DVB_PLUTO2 tristate {
      prompt "Pluto2 cards" if [DVB_CORE && PCI && I2C]
      depends on [DVB_CORE && PCI && I2C]
      select I2C_ALGOBIT if [DVB_CORE && PCI && I2C]
      select DVB_PLL if [DVB_CORE && PCI && I2C]
      select DVB_TDA1004X if [DVB_CORE && PCI && I2C]
      inherited [DVB_CORE && PCI && I2C]
     }
     menu "Customise DVB Frontends" {
      depends on [DVB_CORE]
      config DVB_FE_CUSTOMISE boolean {
       prompt "Customise the frontend modules to build" if [DVB_CORE]
       default [N] if [DVB_CORE]
       inherited [DVB_CORE]
      }
      config DVB_STV0299 tristate {
       prompt "ST STV0299 based" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_CX24110 tristate {
       prompt "Conexant CX24110 based" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_CX24123 tristate {
       prompt "Conexant CX24123 based" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_TDA8083 tristate {
       prompt "Philips TDA8083 based" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_MT312 tristate {
       prompt "Zarlink VP310/MT312 based" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_VES1X93 tristate {
       prompt "VLSI VES1893 or VES1993 based" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_S5H1420 tristate {
       prompt "Samsung S5H1420 based" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_TDA10086 tristate {
       prompt "Philips TDA10086 based" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_SP8870 tristate {
       prompt "Spase sp8870 based" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       select FW_LOADER if [DVB_CORE && I2C]
       inherited [DVB_CORE && I2C]
      }
      config DVB_SP887X tristate {
       prompt "Spase sp887x based" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       select FW_LOADER if [DVB_CORE && I2C]
       inherited [DVB_CORE && I2C]
      }
      config DVB_CX22700 tristate {
       prompt "Conexant CX22700 based" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_CX22702 tristate {
       prompt "Conexant cx22702 demodulator (OFDM)" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_L64781 tristate {
       prompt "LSI L64781" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_TDA1004X tristate {
       prompt "Philips TDA10045H/TDA10046H based" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       select FW_LOADER if [DVB_CORE && I2C]
       inherited [DVB_CORE && I2C]
      }
      config DVB_NXT6000 tristate {
       prompt "NxtWave Communications NXT6000 based" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_MT352 tristate {
       prompt "Zarlink MT352 based" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_ZL10353 tristate {
       prompt "Zarlink ZL10353 based" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_DIB3000MB tristate {
       prompt "DiBcom 3000M-B" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_DIB3000MC tristate {
       prompt "DiBcom 3000P/M-C" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_DIB7000M tristate {
       prompt "DiBcom 7000MA/MB/PA/PB/MC" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_DIB7000P tristate {
       prompt "DiBcom 7000PC" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_VES1820 tristate {
       prompt "VLSI VES1820 based" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_TDA10021 tristate {
       prompt "Philips TDA10021 based" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_STV0297 tristate {
       prompt "ST STV0297 based" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_NXT200X tristate {
       prompt "NxtWave Communications NXT2002/NXT2004 based" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       select FW_LOADER if [DVB_CORE && I2C]
       inherited [DVB_CORE && I2C]
      }
      config DVB_OR51211 tristate {
       prompt "Oren OR51211 based" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       select FW_LOADER if [DVB_CORE && I2C]
       inherited [DVB_CORE && I2C]
      }
      config DVB_OR51132 tristate {
       prompt "Oren OR51132 based" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       select FW_LOADER if [DVB_CORE && I2C]
       inherited [DVB_CORE && I2C]
      }
      config DVB_BCM3510 tristate {
       prompt "Broadcom BCM3510" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       select FW_LOADER if [DVB_CORE && I2C]
       inherited [DVB_CORE && I2C]
      }
      config DVB_LGDT330X tristate {
       prompt "LG Electronics LGDT3302/LGDT3303 based" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_PLL tristate {
       depends on [DVB_CORE && I2C]
       inherited [DVB_CORE && I2C]
      }
      config DVB_TDA826X tristate {
       prompt "Philips TDA826X silicon tuner" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_TUNER_MT2060 tristate {
       prompt "Microtune MT2060 silicon IF tuner" if [DVB_CORE && I2C]
       depends on [I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_TUNER_LGH06XF tristate {
       prompt "LG TDVS-H06xF ATSC tuner" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       select DVB_PLL if [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_LNBP21 tristate {
       prompt "LNBP21 SEC controller" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_ISL6421 tristate {
       prompt "ISL6421 SEC controller" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
      config DVB_TUA6100 tristate {
       prompt "TUA6100 PLL" if [DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [DVB_CORE && I2C]
      }
     }
    }
   }
  }
  config VIDEO_SAA7146 tristate {
   depends on [I2C]
   inherited [I2C]
  }
  config VIDEO_SAA7146_VV tristate {
   select VIDEO_BUF if []
   select VIDEO_VIDEOBUF if []
   select VIDEO_SAA7146 if []
  }
  config VIDEO_VIDEOBUF tristate {
  }
  config VIDEO_TUNER tristate {
   depends on [I2C]
   inherited [I2C]
  }
  config VIDEO_BUF tristate {
  }
  config VIDEO_BUF_DVB tristate {
  }
  config VIDEO_BTCX tristate {
  }
  config VIDEO_IR tristate {
  }
  config VIDEO_TVEEPROM tristate {
   depends on [I2C]
   inherited [I2C]
  }
  config USB_DABUSB tristate {
   prompt "DABUSB driver" if [USB]
   depends on [USB]
   inherited [USB]
  }
 }
 menu "Graphics support" {
  config FIRMWARE_EDID boolean {
   prompt "Enable firmware EDID" if []
   default [y] if []
  }
  config FB tristate {
   prompt "Support for frame buffer devices" if []
   config FB_DDC tristate {
    depends on [FB && I2C && I2C_ALGOBIT]
    default [n] if [FB && I2C && I2C_ALGOBIT]
    inherited [FB && I2C && I2C_ALGOBIT]
   }
   config FB_CFB_FILLRECT tristate {
    depends on [FB]
    default [n] if [FB]
    inherited [FB]
   }
   config FB_CFB_COPYAREA tristate {
    depends on [FB]
    default [n] if [FB]
    inherited [FB]
   }
   config FB_CFB_IMAGEBLIT tristate {
    depends on [FB]
    default [n] if [FB]
    inherited [FB]
   }
   config FB_MACMODES tristate {
    depends on [FB]
    default [n] if [FB]
    inherited [FB]
   }
   config FB_BACKLIGHT boolean {
    depends on [FB]
    select BACKLIGHT_LCD_SUPPORT if [FB]
    select BACKLIGHT_CLASS_DEVICE if [FB]
    default [n] if [FB]
    inherited [FB]
   }
   config FB_MODE_HELPERS boolean {
    prompt "Enable Video Mode Handling Helpers" if [FB]
    depends on [FB]
    default [n] if [FB]
    inherited [FB]
   }
   config FB_TILEBLITTING boolean {
    prompt "Enable Tile Blitting Support" if [FB]
    depends on [FB]
    default [n] if [FB]
    inherited [FB]
   }
   config FB_CIRRUS tristate {
    prompt "Cirrus Logic support" if [FB && (ZORRO || PCI)]
    depends on [FB && (ZORRO || PCI)]
    select FB_CFB_FILLRECT if [FB && (ZORRO || PCI)]
    select FB_CFB_COPYAREA if [FB && (ZORRO || PCI)]
    select FB_CFB_IMAGEBLIT if [FB && (ZORRO || PCI)]
    inherited [FB && (ZORRO || PCI)]
   }
   config FB_PM2 tristate {
    prompt "Permedia2 support" if [FB && (AMIGA && BROKEN || PCI)]
    depends on [FB && (AMIGA && BROKEN || PCI)]
    select FB_CFB_FILLRECT if [FB && (AMIGA && BROKEN || PCI)]
    select FB_CFB_COPYAREA if [FB && (AMIGA && BROKEN || PCI)]
    select FB_CFB_IMAGEBLIT if [FB && (AMIGA && BROKEN || PCI)]
    inherited [FB && (AMIGA && BROKEN || PCI)]
    config FB_PM2_FIFO_DISCONNECT boolean {
     prompt "enable FIFO disconnect feature" if [FB_PM2 && PCI]
     depends on [FB_PM2 && PCI]
     inherited [FB_PM2 && PCI]
    }
   }
   config FB_ARMCLCD tristate {
    prompt "ARM PrimeCell PL110 support" if [FB && ARM && ARM_AMBA]
    depends on [FB && ARM && ARM_AMBA]
    select FB_CFB_FILLRECT if [FB && ARM && ARM_AMBA]
    select FB_CFB_COPYAREA if [FB && ARM && ARM_AMBA]
    select FB_CFB_IMAGEBLIT if [FB && ARM && ARM_AMBA]
    inherited [FB && ARM && ARM_AMBA]
    choice boolean {
     depends on [FB_ARMCLCD && (ARCH_LH7A40X || ARCH_LH7952X)]
     prompt "LCD Panel" if [FB_ARMCLCD && (ARCH_LH7A40X || ARCH_LH7952X)]
     default [FB_ARMCLCD_SHARP_LQ035Q7DB02] if [FB_ARMCLCD && (ARCH_LH7A40X || ARCH_LH7952X)]
     config FB_ARMCLCD_SHARP_LQ035Q7DB02_HRTFT boolean {
      prompt "LogicPD LCD 3.5\" QVGA w/HRTFT IC" if [<choice>]
      inherited [<choice>]
     }
     config FB_ARMCLCD_SHARP_LQ057Q3DC02 boolean {
      prompt "LogicPD LCD 5.7\" QVGA" if [<choice>]
      inherited [<choice>]
     }
     config FB_ARMCLCD_SHARP_LQ64D343 boolean {
      prompt "LogicPD LCD 6.4\" VGA" if [<choice>]
      inherited [<choice>]
     }
     config FB_ARMCLCD_SHARP_LQ10D368 boolean {
      prompt "LogicPD LCD 10.4\" VGA" if [<choice>]
      inherited [<choice>]
     }
     config FB_ARMCLCD_SHARP_LQ121S1DG41 boolean {
      prompt "LogicPD LCD 12.1\" SVGA" if [<choice>]
      inherited [<choice>]
     }
     config FB_ARMCLCD_AUO_A070VW01_WIDE boolean {
      prompt "AU Optronics A070VW01 LCD 7.0\" WIDE" if [<choice>]
      inherited [<choice>]
     }
     config FB_ARMCLCD_HITACHI boolean {
      prompt "Hitachi Wide Screen 800x480" if [<choice>]
      inherited [<choice>]
     }
    }
   }
   config FB_ACORN boolean {
    prompt "Acorn VIDC support" if [FB="y" && ARM && (ARCH_ACORN || ARCH_CLPS7500)]
    depends on [FB="y" && ARM && (ARCH_ACORN || ARCH_CLPS7500)]
    select FB_CFB_FILLRECT if [FB="y" && ARM && (ARCH_ACORN || ARCH_CLPS7500)]
    select FB_CFB_COPYAREA if [FB="y" && ARM && (ARCH_ACORN || ARCH_CLPS7500)]
    select FB_CFB_IMAGEBLIT if [FB="y" && ARM && (ARCH_ACORN || ARCH_CLPS7500)]
    inherited [FB="y" && ARM && (ARCH_ACORN || ARCH_CLPS7500)]
   }
   config FB_CLPS711X boolean {
    prompt "CLPS711X LCD support" if [FB="y" && ARM && ARCH_CLPS711X]
    depends on [FB="y" && ARM && ARCH_CLPS711X]
    select FB_CFB_FILLRECT if [FB="y" && ARM && ARCH_CLPS711X]
    select FB_CFB_COPYAREA if [FB="y" && ARM && ARCH_CLPS711X]
    select FB_CFB_IMAGEBLIT if [FB="y" && ARM && ARCH_CLPS711X]
    inherited [FB="y" && ARM && ARCH_CLPS711X]
   }
   config FB_SA1100 boolean {
    prompt "SA-1100 LCD support" if [FB="y" && ARM && ARCH_SA1100]
    depends on [FB="y" && ARM && ARCH_SA1100]
    select FB_CFB_FILLRECT if [FB="y" && ARM && ARCH_SA1100]
    select FB_CFB_COPYAREA if [FB="y" && ARM && ARCH_SA1100]
    select FB_CFB_IMAGEBLIT if [FB="y" && ARM && ARCH_SA1100]
    inherited [FB="y" && ARM && ARCH_SA1100]
   }
   config FB_IMX tristate {
    prompt "Motorola i.MX LCD support" if [FB && ARM && ARCH_IMX]
    depends on [FB && ARM && ARCH_IMX]
    select FB_CFB_FILLRECT if [FB && ARM && ARCH_IMX]
    select FB_CFB_COPYAREA if [FB && ARM && ARCH_IMX]
    select FB_CFB_IMAGEBLIT if [FB && ARM && ARCH_IMX]
    inherited [FB && ARM && ARCH_IMX]
   }
   config FB_CYBER2000 tristate {
    prompt "CyberPro 2000/2010/5000 support" if [FB && PCI && (BROKEN || !SPARC64)]
    depends on [FB && PCI && (BROKEN || !SPARC64)]
    select FB_CFB_FILLRECT if [FB && PCI && (BROKEN || !SPARC64)]
    select FB_CFB_COPYAREA if [FB && PCI && (BROKEN || !SPARC64)]
    select FB_CFB_IMAGEBLIT if [FB && PCI && (BROKEN || !SPARC64)]
    inherited [FB && PCI && (BROKEN || !SPARC64)]
   }
   config FB_APOLLO boolean {
    depends on [FB="y" && APOLLO]
    default [y] if [FB="y" && APOLLO]
    select FB_CFB_FILLRECT if [FB="y" && APOLLO]
    select FB_CFB_IMAGEBLIT if [FB="y" && APOLLO]
    inherited [FB="y" && APOLLO]
   }
   config FB_Q40 boolean {
    depends on [FB="y" && Q40]
    default [y] if [FB="y" && Q40]
    select FB_CFB_FILLRECT if [FB="y" && Q40]
    select FB_CFB_COPYAREA if [FB="y" && Q40]
    select FB_CFB_IMAGEBLIT if [FB="y" && Q40]
    inherited [FB="y" && Q40]
   }
   config FB_AMIGA tristate {
    prompt "Amiga native chipset support" if [FB && AMIGA]
    depends on [FB && AMIGA]
    inherited [FB && AMIGA]
    config FB_AMIGA_OCS boolean {
     prompt "Amiga OCS chipset support" if [FB_AMIGA]
     depends on [FB_AMIGA]
     inherited [FB_AMIGA]
    }
    config FB_AMIGA_ECS boolean {
     prompt "Amiga ECS chipset support" if [FB_AMIGA]
     depends on [FB_AMIGA]
     inherited [FB_AMIGA]
    }
    config FB_AMIGA_AGA boolean {
     prompt "Amiga AGA chipset support" if [FB_AMIGA]
     depends on [FB_AMIGA]
     inherited [FB_AMIGA]
    }
   }
   config FB_CYBER tristate {
    prompt "Amiga CyberVision 64 support" if [FB && ZORRO && BROKEN]
    depends on [FB && ZORRO && BROKEN]
    select FB_CFB_FILLRECT if [FB && ZORRO && BROKEN]
    select FB_CFB_COPYAREA if [FB && ZORRO && BROKEN]
    select FB_CFB_IMAGEBLIT if [FB && ZORRO && BROKEN]
    inherited [FB && ZORRO && BROKEN]
   }
   config FB_VIRGE boolean {
    prompt "Amiga CyberVision 64/3D support " if [FB="y" && ZORRO && BROKEN]
    depends on [FB="y" && ZORRO && BROKEN]
    select FB_CFB_FILLRECT if [FB="y" && ZORRO && BROKEN]
    select FB_CFB_COPYAREA if [FB="y" && ZORRO && BROKEN]
    select FB_CFB_IMAGEBLIT if [FB="y" && ZORRO && BROKEN]
    inherited [FB="y" && ZORRO && BROKEN]
   }
   config FB_RETINAZ3 tristate {
    prompt "Amiga Retina Z3 support" if [FB="y" && ZORRO && BROKEN]
    depends on [FB="y" && ZORRO && BROKEN]
    inherited [FB="y" && ZORRO && BROKEN]
   }
   config FB_FM2 boolean {
    prompt "Amiga FrameMaster II/Rainbow II support" if [FB="y" && ZORRO]
    depends on [FB="y" && ZORRO]
    select FB_CFB_FILLRECT if [FB="y" && ZORRO]
    select FB_CFB_COPYAREA if [FB="y" && ZORRO]
    select FB_CFB_IMAGEBLIT if [FB="y" && ZORRO]
    inherited [FB="y" && ZORRO]
   }
   config FB_ARC tristate {
    prompt "Arc Monochrome LCD board support" if [FB && X86]
    depends on [FB && X86]
    select FB_CFB_FILLRECT if [FB && X86]
    select FB_CFB_COPYAREA if [FB && X86]
    select FB_CFB_IMAGEBLIT if [FB && X86]
    inherited [FB && X86]
   }
   config FB_ATARI boolean {
    prompt "Atari native chipset support" if [FB="y" && ATARI && BROKEN]
    depends on [FB="y" && ATARI && BROKEN]
    inherited [FB="y" && ATARI && BROKEN]
   }
   config FB_OF boolean {
    prompt "Open Firmware frame buffer device support" if [FB="y" && (PPC64 || PPC_OF)]
    depends on [FB="y" && (PPC64 || PPC_OF)]
    select FB_CFB_FILLRECT if [FB="y" && (PPC64 || PPC_OF)]
    select FB_CFB_COPYAREA if [FB="y" && (PPC64 || PPC_OF)]
    select FB_CFB_IMAGEBLIT if [FB="y" && (PPC64 || PPC_OF)]
    select FB_MACMODES if [FB="y" && (PPC64 || PPC_OF)]
    inherited [FB="y" && (PPC64 || PPC_OF)]
   }
   config FB_CONTROL boolean {
    prompt "Apple \"control\" display support" if [FB="y" && PPC_PMAC && PPC32]
    depends on [FB="y" && PPC_PMAC && PPC32]
    select FB_CFB_FILLRECT if [FB="y" && PPC_PMAC && PPC32]
    select FB_CFB_COPYAREA if [FB="y" && PPC_PMAC && PPC32]
    select FB_CFB_IMAGEBLIT if [FB="y" && PPC_PMAC && PPC32]
    select FB_MACMODES if [FB="y" && PPC_PMAC && PPC32]
    inherited [FB="y" && PPC_PMAC && PPC32]
   }
   config FB_PLATINUM boolean {
    prompt "Apple \"platinum\" display support" if [FB="y" && PPC_PMAC && PPC32]
    depends on [FB="y" && PPC_PMAC && PPC32]
    select FB_CFB_FILLRECT if [FB="y" && PPC_PMAC && PPC32]
    select FB_CFB_COPYAREA if [FB="y" && PPC_PMAC && PPC32]
    select FB_CFB_IMAGEBLIT if [FB="y" && PPC_PMAC && PPC32]
    select FB_MACMODES if [FB="y" && PPC_PMAC && PPC32]
    inherited [FB="y" && PPC_PMAC && PPC32]
   }
   config FB_VALKYRIE boolean {
    prompt "Apple \"valkyrie\" display support" if [FB="y" && (MAC || PPC_PMAC && PPC32)]
    depends on [FB="y" && (MAC || PPC_PMAC && PPC32)]
    select FB_CFB_FILLRECT if [FB="y" && (MAC || PPC_PMAC && PPC32)]
    select FB_CFB_COPYAREA if [FB="y" && (MAC || PPC_PMAC && PPC32)]
    select FB_CFB_IMAGEBLIT if [FB="y" && (MAC || PPC_PMAC && PPC32)]
    select FB_MACMODES if [FB="y" && (MAC || PPC_PMAC && PPC32)]
    inherited [FB="y" && (MAC || PPC_PMAC && PPC32)]
   }
   config FB_CT65550 boolean {
    prompt "Chips 65550 display support" if [FB="y" && PPC32]
    depends on [FB="y" && PPC32]
    select FB_CFB_FILLRECT if [FB="y" && PPC32]
    select FB_CFB_COPYAREA if [FB="y" && PPC32]
    select FB_CFB_IMAGEBLIT if [FB="y" && PPC32]
    inherited [FB="y" && PPC32]
   }
   config FB_ASILIANT boolean {
    prompt "Asiliant (Chips) 69000 display support" if [FB="y" && PCI]
    depends on [FB="y" && PCI]
    select FB_CFB_FILLRECT if [FB="y" && PCI]
    select FB_CFB_COPYAREA if [FB="y" && PCI]
    select FB_CFB_IMAGEBLIT if [FB="y" && PCI]
    inherited [FB="y" && PCI]
   }
   config FB_IMSTT boolean {
    prompt "IMS Twin Turbo display support" if [FB="y" && PCI]
    depends on [FB="y" && PCI]
    select FB_CFB_IMAGEBLIT if [FB="y" && PCI]
    select FB_MACMODES if [FB="y" && PCI && PPC]
    inherited [FB="y" && PCI]
   }
   config FB_VGA16 tristate {
    prompt "VGA 16-color graphics support" if [FB && (X86 || PPC)]
    depends on [FB && (X86 || PPC)]
    select FB_CFB_FILLRECT if [FB && (X86 || PPC)]
    select FB_CFB_COPYAREA if [FB && (X86 || PPC)]
    select FB_CFB_IMAGEBLIT if [FB && (X86 || PPC)]
    inherited [FB && (X86 || PPC)]
   }
   config FB_STI tristate {
    prompt "HP STI frame buffer device support" if [FB && PARISC]
    depends on [FB && PARISC]
    select FB_CFB_FILLRECT if [FB && PARISC]
    select FB_CFB_COPYAREA if [FB && PARISC]
    select FB_CFB_IMAGEBLIT if [FB && PARISC]
    default [y] if [FB && PARISC]
    inherited [FB && PARISC]
   }
   config FB_MAC boolean {
    prompt "Generic Macintosh display support" if [FB="y" && MAC]
    depends on [FB="y" && MAC]
    select FB_CFB_FILLRECT if [FB="y" && MAC]
    select FB_CFB_COPYAREA if [FB="y" && MAC]
    select FB_CFB_IMAGEBLIT if [FB="y" && MAC]
    select FB_MACMODES if [FB="y" && MAC]
    inherited [FB="y" && MAC]
   }
   config FB_HP300 boolean {
    depends on [FB="y" && HP300]
    select FB_CFB_FILLRECT if [FB="y" && HP300]
    select FB_CFB_IMAGEBLIT if [FB="y" && HP300]
    default [y] if [FB="y" && HP300]
    inherited [FB="y" && HP300]
   }
   config FB_TGA tristate {
    prompt "TGA framebuffer support" if [FB && ALPHA]
    depends on [FB && ALPHA]
    select FB_CFB_FILLRECT if [FB && ALPHA]
    select FB_CFB_COPYAREA if [FB && ALPHA]
    select FB_CFB_IMAGEBLIT if [FB && ALPHA]
    select BITREVERSE if [FB && ALPHA]
    inherited [FB && ALPHA]
   }
   config FB_VESA boolean {
    prompt "VESA VGA graphics support" if [FB="y" && X86]
    depends on [FB="y" && X86]
    select FB_CFB_FILLRECT if [FB="y" && X86]
    select FB_CFB_COPYAREA if [FB="y" && X86]
    select FB_CFB_IMAGEBLIT if [FB="y" && X86]
    select VIDEO_SELECT if [FB="y" && X86]
    inherited [FB="y" && X86]
   }
   config FB_IMAC boolean {
    prompt "Intel-based Macintosh Framebuffer Support" if [FB="y" && X86 && EFI]
    depends on [FB="y" && X86 && EFI]
    select FB_CFB_FILLRECT if [FB="y" && X86 && EFI]
    select FB_CFB_COPYAREA if [FB="y" && X86 && EFI]
    select FB_CFB_IMAGEBLIT if [FB="y" && X86 && EFI]
    inherited [FB="y" && X86 && EFI]
   }
   config FB_HGA tristate {
    prompt "Hercules mono graphics support" if [FB && X86]
    depends on [FB && X86]
    select FB_CFB_FILLRECT if [FB && X86]
    select FB_CFB_COPYAREA if [FB && X86]
    select FB_CFB_IMAGEBLIT if [FB && X86]
    inherited [FB && X86]
    config FB_HGA_ACCEL boolean {
     prompt "Hercules mono Acceleration functions (EXPERIMENTAL)" if [FB_HGA && EXPERIMENTAL]
     depends on [FB_HGA && EXPERIMENTAL]
     inherited [FB_HGA && EXPERIMENTAL]
    }
   }
   config FB_SGIVW tristate {
    prompt "SGI Visual Workstation framebuffer support" if [FB && X86_VISWS]
    depends on [FB && X86_VISWS]
    select FB_CFB_FILLRECT if [FB && X86_VISWS]
    select FB_CFB_COPYAREA if [FB && X86_VISWS]
    select FB_CFB_IMAGEBLIT if [FB && X86_VISWS]
    inherited [FB && X86_VISWS]
   }
   config FB_GBE boolean {
    prompt "SGI Graphics Backend frame buffer support" if [FB="y" && (SGI_IP32 || X86_VISWS)]
    depends on [FB="y" && (SGI_IP32 || X86_VISWS)]
    select FB_CFB_FILLRECT if [FB="y" && (SGI_IP32 || X86_VISWS)]
    select FB_CFB_COPYAREA if [FB="y" && (SGI_IP32 || X86_VISWS)]
    select FB_CFB_IMAGEBLIT if [FB="y" && (SGI_IP32 || X86_VISWS)]
    inherited [FB="y" && (SGI_IP32 || X86_VISWS)]
    config FB_GBE_MEM integer {
     prompt "Video memory size in MB" if [FB_GBE]
     depends on [FB_GBE]
     default [4] if [FB_GBE]
     inherited [FB_GBE]
    }
   }
   config FB_SUN3 boolean {
    prompt "Sun3 framebuffer support" if [FB="y" && (SUN3 || SUN3X) && BROKEN]
    depends on [FB="y" && (SUN3 || SUN3X) && BROKEN]
    inherited [FB="y" && (SUN3 || SUN3X) && BROKEN]
   }
   config FB_SBUS boolean {
    prompt "SBUS and UPA framebuffers" if [FB="y" && SPARC]
    depends on [FB="y" && SPARC]
    inherited [FB="y" && SPARC]
   }
   config FB_BW2 boolean {
    prompt "BWtwo support" if [FB="y" && (SPARC && FB_SBUS || (SUN3 || SUN3X) && FB_SUN3)]
    depends on [FB="y" && (SPARC && FB_SBUS || (SUN3 || SUN3X) && FB_SUN3)]
    select FB_CFB_FILLRECT if [FB="y" && (SPARC && FB_SBUS || (SUN3 || SUN3X) && FB_SUN3)]
    select FB_CFB_COPYAREA if [FB="y" && (SPARC && FB_SBUS || (SUN3 || SUN3X) && FB_SUN3)]
    select FB_CFB_IMAGEBLIT if [FB="y" && (SPARC && FB_SBUS || (SUN3 || SUN3X) && FB_SUN3)]
    inherited [FB="y" && (SPARC && FB_SBUS || (SUN3 || SUN3X) && FB_SUN3)]
   }
   config FB_CG3 boolean {
    prompt "CGthree support" if [FB="y" && (SPARC && FB_SBUS || (SUN3 || SUN3X) && FB_SUN3)]
    depends on [FB="y" && (SPARC && FB_SBUS || (SUN3 || SUN3X) && FB_SUN3)]
    select FB_CFB_FILLRECT if [FB="y" && (SPARC && FB_SBUS || (SUN3 || SUN3X) && FB_SUN3)]
    select FB_CFB_COPYAREA if [FB="y" && (SPARC && FB_SBUS || (SUN3 || SUN3X) && FB_SUN3)]
    select FB_CFB_IMAGEBLIT if [FB="y" && (SPARC && FB_SBUS || (SUN3 || SUN3X) && FB_SUN3)]
    inherited [FB="y" && (SPARC && FB_SBUS || (SUN3 || SUN3X) && FB_SUN3)]
   }
   config FB_CG6 boolean {
    prompt "CGsix (GX,TurboGX) support" if [FB="y" && (SPARC && FB_SBUS || (SUN3 || SUN3X) && FB_SUN3)]
    depends on [FB="y" && (SPARC && FB_SBUS || (SUN3 || SUN3X) && FB_SUN3)]
    select FB_CFB_COPYAREA if [FB="y" && (SPARC && FB_SBUS || (SUN3 || SUN3X) && FB_SUN3)]
    select FB_CFB_IMAGEBLIT if [FB="y" && (SPARC && FB_SBUS || (SUN3 || SUN3X) && FB_SUN3)]
    inherited [FB="y" && (SPARC && FB_SBUS || (SUN3 || SUN3X) && FB_SUN3)]
   }
   config FB_PVR2 tristate {
    prompt "NEC PowerVR 2 display support" if [FB && SH_DREAMCAST]
    depends on [FB && SH_DREAMCAST]
    select FB_CFB_FILLRECT if [FB && SH_DREAMCAST]
    select FB_CFB_COPYAREA if [FB && SH_DREAMCAST]
    select FB_CFB_IMAGEBLIT if [FB && SH_DREAMCAST]
    inherited [FB && SH_DREAMCAST]
   }
   config FB_EPSON1355 boolean {
    prompt "Epson 1355 framebuffer support" if [FB="y" && (SUPERH || ARCH_CEIVA)]
    depends on [FB="y" && (SUPERH || ARCH_CEIVA)]
    select FB_CFB_FILLRECT if [FB="y" && (SUPERH || ARCH_CEIVA)]
    select FB_CFB_COPYAREA if [FB="y" && (SUPERH || ARCH_CEIVA)]
    select FB_CFB_IMAGEBLIT if [FB="y" && (SUPERH || ARCH_CEIVA)]
    inherited [FB="y" && (SUPERH || ARCH_CEIVA)]
   }
   config FB_S1D13XXX tristate {
    prompt "Epson S1D13XXX framebuffer support" if [FB]
    depends on [FB]
    select FB_CFB_FILLRECT if [FB]
    select FB_CFB_COPYAREA if [FB]
    select FB_CFB_IMAGEBLIT if [FB]
    inherited [FB]
   }
   config FB_NVIDIA tristate {
    prompt "nVidia Framebuffer Support" if [FB && PCI]
    depends on [FB && PCI]
    select I2C_ALGOBIT if [FB && PCI && FB_NVIDIA_I2C]
    select I2C if [FB && PCI && FB_NVIDIA_I2C]
    select FB_MODE_HELPERS if [FB && PCI]
    select FB_CFB_FILLRECT if [FB && PCI]
    select FB_CFB_COPYAREA if [FB && PCI]
    select FB_CFB_IMAGEBLIT if [FB && PCI]
    select BITREVERSE if [FB && PCI]
    inherited [FB && PCI]
    config FB_NVIDIA_I2C boolean {
     prompt "Enable DDC Support" if [FB_NVIDIA]
     depends on [FB_NVIDIA]
     inherited [FB_NVIDIA]
    }
    config FB_NVIDIA_BACKLIGHT boolean {
     prompt "Support for backlight control" if [FB_NVIDIA && PMAC_BACKLIGHT]
     depends on [FB_NVIDIA && PMAC_BACKLIGHT]
     select FB_BACKLIGHT if [FB_NVIDIA && PMAC_BACKLIGHT]
     default [y] if [FB_NVIDIA && PMAC_BACKLIGHT]
     inherited [FB_NVIDIA && PMAC_BACKLIGHT]
    }
   }
   config FB_RIVA tristate {
    prompt "nVidia Riva support" if [FB && PCI]
    depends on [FB && PCI]
    select I2C_ALGOBIT if [FB && PCI && FB_RIVA_I2C]
    select I2C if [FB && PCI && FB_RIVA_I2C]
    select FB_DDC if [FB && PCI && FB_RIVA_I2C]
    select FB_MODE_HELPERS if [FB && PCI]
    select FB_CFB_FILLRECT if [FB && PCI]
    select FB_CFB_COPYAREA if [FB && PCI]
    select FB_CFB_IMAGEBLIT if [FB && PCI]
    select BITREVERSE if [FB && PCI]
    inherited [FB && PCI]
    config FB_RIVA_I2C boolean {
     prompt "Enable DDC Support" if [FB_RIVA]
     depends on [FB_RIVA]
     inherited [FB_RIVA]
    }
    config FB_RIVA_DEBUG boolean {
     prompt "Lots of debug output from Riva(nVidia) driver" if [FB_RIVA]
     depends on [FB_RIVA]
     default [n] if [FB_RIVA]
     inherited [FB_RIVA]
    }
    config FB_RIVA_BACKLIGHT boolean {
     prompt "Support for backlight control" if [FB_RIVA && PMAC_BACKLIGHT]
     depends on [FB_RIVA && PMAC_BACKLIGHT]
     select FB_BACKLIGHT if [FB_RIVA && PMAC_BACKLIGHT]
     default [y] if [FB_RIVA && PMAC_BACKLIGHT]
     inherited [FB_RIVA && PMAC_BACKLIGHT]
    }
   }
   config FB_I810 tristate {
    prompt "Intel 810/815 support (EXPERIMENTAL)" if [FB && EXPERIMENTAL && PCI && X86_32]
    depends on [FB && EXPERIMENTAL && PCI && X86_32]
    select AGP if [FB && EXPERIMENTAL && PCI && X86_32]
    select AGP_INTEL if [FB && EXPERIMENTAL && PCI && X86_32]
    select FB_MODE_HELPERS if [FB && EXPERIMENTAL && PCI && X86_32]
    select FB_CFB_FILLRECT if [FB && EXPERIMENTAL && PCI && X86_32]
    select FB_CFB_COPYAREA if [FB && EXPERIMENTAL && PCI && X86_32]
    select FB_CFB_IMAGEBLIT if [FB && EXPERIMENTAL && PCI && X86_32]
    inherited [FB && EXPERIMENTAL && PCI && X86_32]
    config FB_I810_GTF boolean {
     prompt "use VESA Generalized Timing Formula" if [FB_I810]
     depends on [FB_I810]
     inherited [FB_I810]
     config FB_I810_I2C boolean {
      prompt "Enable DDC Support" if [FB_I810 && FB_I810_GTF]
      depends on [FB_I810 && FB_I810_GTF]
      select I2C if [FB_I810 && FB_I810_GTF]
      select I2C_ALGOBIT if [FB_I810 && FB_I810_GTF]
      select FB_DDC if [FB_I810 && FB_I810_GTF]
      inherited [FB_I810 && FB_I810_GTF]
     }
    }
   }
   config FB_INTEL tristate {
    prompt "Intel 830M/845G/852GM/855GM/865G/915G/945G support (EXPERIMENTAL)" if [FB && EXPERIMENTAL && PCI && X86]
    depends on [FB && EXPERIMENTAL && PCI && X86]
    select AGP if [FB && EXPERIMENTAL && PCI && X86]
    select AGP_INTEL if [FB && EXPERIMENTAL && PCI && X86]
    select I2C_ALGOBIT if [FB && EXPERIMENTAL && PCI && X86 && FB_INTEL_I2C]
    select I2C if [FB && EXPERIMENTAL && PCI && X86 && FB_INTEL_I2C]
    select FB_MODE_HELPERS if [FB && EXPERIMENTAL && PCI && X86]
    select FB_CFB_FILLRECT if [FB && EXPERIMENTAL && PCI && X86]
    select FB_CFB_COPYAREA if [FB && EXPERIMENTAL && PCI && X86]
    select FB_CFB_IMAGEBLIT if [FB && EXPERIMENTAL && PCI && X86]
    inherited [FB && EXPERIMENTAL && PCI && X86]
    config FB_INTEL_DEBUG boolean {
     prompt "Intel driver Debug Messages" if [FB_INTEL]
     depends on [FB_INTEL]
     inherited [FB_INTEL]
    }
    config FB_INTEL_I2C boolean {
     prompt "DDC/I2C for Intel framebuffer support" if [FB_INTEL]
     depends on [FB_INTEL]
     default [y] if [FB_INTEL]
     inherited [FB_INTEL]
    }
   }
   config FB_MATROX tristate {
    prompt "Matrox acceleration" if [FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [FB && PCI]
    select FB_CFB_COPYAREA if [FB && PCI]
    select FB_CFB_IMAGEBLIT if [FB && PCI]
    select FB_TILEBLITTING if [FB && PCI]
    select FB_MACMODES if [FB && PCI && PPC_PMAC]
    inherited [FB && PCI]
    config FB_MATROX_MILLENIUM boolean {
     prompt "Millennium I/II support" if [FB_MATROX]
     depends on [FB_MATROX]
     inherited [FB_MATROX]
    }
    config FB_MATROX_MYSTIQUE boolean {
     prompt "Mystique support" if [FB_MATROX]
     depends on [FB_MATROX]
     inherited [FB_MATROX]
    }
    config FB_MATROX_G boolean {
     prompt "G100/G200/G400/G450/G550 support" if [FB_MATROX]
     depends on [FB_MATROX]
     inherited [FB_MATROX]
    }
    config FB_MATROX_I2C tristate {
     prompt "Matrox I2C support" if [FB_MATROX && I2C]
     depends on [FB_MATROX && I2C]
     select I2C_ALGOBIT if [FB_MATROX && I2C]
     inherited [FB_MATROX && I2C]
     config FB_MATROX_MAVEN tristate {
      prompt "G400 second head support" if [FB_MATROX_G && FB_MATROX_I2C]
      depends on [FB_MATROX_G && FB_MATROX_I2C]
      inherited [FB_MATROX_G && FB_MATROX_I2C]
     }
    }
    config FB_MATROX_MULTIHEAD boolean {
     prompt "Multihead support" if [FB_MATROX]
     depends on [FB_MATROX]
     inherited [FB_MATROX]
    }
   }
   config FB_RADEON tristate {
    prompt "ATI Radeon display support" if [FB && PCI]
    depends on [FB && PCI]
    select I2C_ALGOBIT if [FB && PCI && FB_RADEON_I2C]
    select I2C if [FB && PCI && FB_RADEON_I2C]
    select FB_DDC if [FB && PCI && FB_RADEON_I2C]
    select FB_MODE_HELPERS if [FB && PCI]
    select FB_CFB_FILLRECT if [FB && PCI]
    select FB_CFB_COPYAREA if [FB && PCI]
    select FB_CFB_IMAGEBLIT if [FB && PCI]
    select FB_MACMODES if [FB && PCI && PPC_OF]
    inherited [FB && PCI]
    config FB_RADEON_I2C boolean {
     prompt "DDC/I2C for ATI Radeon support" if [FB_RADEON]
     depends on [FB_RADEON]
     default [y] if [FB_RADEON]
     inherited [FB_RADEON]
    }
    config FB_RADEON_BACKLIGHT boolean {
     prompt "Support for backlight control" if [FB_RADEON && PMAC_BACKLIGHT]
     depends on [FB_RADEON && PMAC_BACKLIGHT]
     select FB_BACKLIGHT if [FB_RADEON && PMAC_BACKLIGHT]
     default [y] if [FB_RADEON && PMAC_BACKLIGHT]
     inherited [FB_RADEON && PMAC_BACKLIGHT]
    }
    config FB_RADEON_DEBUG boolean {
     prompt "Lots of debug output from Radeon driver" if [FB_RADEON]
     depends on [FB_RADEON]
     default [n] if [FB_RADEON]
     inherited [FB_RADEON]
    }
   }
   config FB_ATY128 tristate {
    prompt "ATI Rage128 display support" if [FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [FB && PCI]
    select FB_CFB_COPYAREA if [FB && PCI]
    select FB_CFB_IMAGEBLIT if [FB && PCI]
    select FB_MACMODES if [FB && PCI && PPC_PMAC]
    inherited [FB && PCI]
    config FB_ATY128_BACKLIGHT boolean {
     prompt "Support for backlight control" if [FB_ATY128 && PMAC_BACKLIGHT]
     depends on [FB_ATY128 && PMAC_BACKLIGHT]
     select FB_BACKLIGHT if [FB_ATY128 && PMAC_BACKLIGHT]
     default [y] if [FB_ATY128 && PMAC_BACKLIGHT]
     inherited [FB_ATY128 && PMAC_BACKLIGHT]
    }
   }
   config FB_ATY tristate {
    prompt "ATI Mach64 display support" if [FB && !SPARC32 && (PCI || ATARI)]
    depends on [FB && !SPARC32]
    select FB_CFB_FILLRECT if [FB && !SPARC32]
    select FB_CFB_COPYAREA if [FB && !SPARC32]
    select FB_CFB_IMAGEBLIT if [FB && !SPARC32]
    select FB_MACMODES if [FB && !SPARC32 && PPC]
    inherited [FB && !SPARC32]
    config FB_ATY_CT boolean {
     prompt "Mach64 CT/VT/GT/LT (incl. 3D RAGE) support" if [PCI && FB_ATY]
     depends on [PCI && FB_ATY]
     default [y] if [PCI && FB_ATY && SPARC64 && FB_PCI]
     inherited [PCI && FB_ATY]
     config FB_ATY_GENERIC_LCD boolean {
      prompt "Mach64 generic LCD support (EXPERIMENTAL)" if [FB_ATY_CT]
      depends on [FB_ATY_CT]
      inherited [FB_ATY_CT]
     }
    }
    config FB_ATY_GX boolean {
     prompt "Mach64 GX support" if [FB_ATY && PCI]
     depends on [FB_ATY]
     default [y] if [FB_ATY && ATARI]
     inherited [FB_ATY]
    }
    config FB_ATY_BACKLIGHT boolean {
     prompt "Support for backlight control" if [FB_ATY && PMAC_BACKLIGHT]
     depends on [FB_ATY && PMAC_BACKLIGHT]
     select FB_BACKLIGHT if [FB_ATY && PMAC_BACKLIGHT]
     default [y] if [FB_ATY && PMAC_BACKLIGHT]
     inherited [FB_ATY && PMAC_BACKLIGHT]
    }
   }
   config FB_S3TRIO boolean {
    prompt "S3 Trio display support" if [FB="y" && PPC && BROKEN]
    depends on [FB="y" && PPC && BROKEN]
    inherited [FB="y" && PPC && BROKEN]
   }
   config FB_SAVAGE tristate {
    prompt "S3 Savage support" if [FB && PCI && EXPERIMENTAL]
    depends on [FB && PCI && EXPERIMENTAL]
    select I2C_ALGOBIT if [FB && PCI && EXPERIMENTAL && FB_SAVAGE_I2C]
    select I2C if [FB && PCI && EXPERIMENTAL && FB_SAVAGE_I2C]
    select FB_DDC if [FB && PCI && EXPERIMENTAL && FB_SAVAGE_I2C]
    select FB_MODE_HELPERS if [FB && PCI && EXPERIMENTAL]
    select FB_CFB_FILLRECT if [FB && PCI && EXPERIMENTAL]
    select FB_CFB_COPYAREA if [FB && PCI && EXPERIMENTAL]
    select FB_CFB_IMAGEBLIT if [FB && PCI && EXPERIMENTAL]
    inherited [FB && PCI && EXPERIMENTAL]
    config FB_SAVAGE_I2C boolean {
     prompt "Enable DDC2 Support" if [FB_SAVAGE]
     depends on [FB_SAVAGE]
     inherited [FB_SAVAGE]
    }
    config FB_SAVAGE_ACCEL boolean {
     prompt "Enable Console Acceleration" if [FB_SAVAGE]
     depends on [FB_SAVAGE]
     default [n] if [FB_SAVAGE]
     inherited [FB_SAVAGE]
    }
   }
   config FB_SIS tristate {
    prompt "SiS/XGI display support" if [FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [FB && PCI]
    select FB_CFB_COPYAREA if [FB && PCI]
    select FB_CFB_IMAGEBLIT if [FB && PCI]
    inherited [FB && PCI]
    config FB_SIS_300 boolean {
     prompt "SiS 300 series support" if [FB_SIS]
     depends on [FB_SIS]
     inherited [FB_SIS]
    }
    config FB_SIS_315 boolean {
     prompt "SiS 315/330/340 series and XGI support" if [FB_SIS]
     depends on [FB_SIS]
     inherited [FB_SIS]
    }
   }
   config FB_NEOMAGIC tristate {
    prompt "NeoMagic display support" if [FB && PCI]
    depends on [FB && PCI]
    select FB_MODE_HELPERS if [FB && PCI]
    select FB_CFB_FILLRECT if [FB && PCI]
    select FB_CFB_COPYAREA if [FB && PCI]
    select FB_CFB_IMAGEBLIT if [FB && PCI]
    inherited [FB && PCI]
   }
   config FB_KYRO tristate {
    prompt "IMG Kyro support" if [FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [FB && PCI]
    select FB_CFB_COPYAREA if [FB && PCI]
    select FB_CFB_IMAGEBLIT if [FB && PCI]
    inherited [FB && PCI]
   }
   config FB_3DFX tristate {
    prompt "3Dfx Banshee/Voodoo3 display support" if [FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_IMAGEBLIT if [FB && PCI]
    select FB_CFB_FILLRECT if [FB && PCI]
    select FB_CFB_COPYAREA if [FB && PCI]
    inherited [FB && PCI]
    config FB_3DFX_ACCEL boolean {
     prompt "3Dfx Banshee/Voodoo3 Acceleration functions (EXPERIMENTAL)" if [FB_3DFX && EXPERIMENTAL]
     depends on [FB_3DFX && EXPERIMENTAL]
     inherited [FB_3DFX && EXPERIMENTAL]
    }
   }
   config FB_VOODOO1 tristate {
    prompt "3Dfx Voodoo Graphics (sst1) support" if [FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [FB && PCI]
    select FB_CFB_COPYAREA if [FB && PCI]
    select FB_CFB_IMAGEBLIT if [FB && PCI]
    inherited [FB && PCI]
   }
   config FB_CYBLA tristate {
    prompt "Cyberblade/i1 support" if [FB && PCI && X86_32 && !64BIT]
    depends on [FB && PCI && X86_32 && !64BIT]
    select FB_CFB_IMAGEBLIT if [FB && PCI && X86_32 && !64BIT]
    select VIDEO_SELECT if [FB && PCI && X86_32 && !64BIT]
    inherited [FB && PCI && X86_32 && !64BIT]
   }
   config FB_TRIDENT tristate {
    prompt "Trident support" if [FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [FB && PCI]
    select FB_CFB_COPYAREA if [FB && PCI]
    select FB_CFB_IMAGEBLIT if [FB && PCI]
    inherited [FB && PCI]
    config FB_TRIDENT_ACCEL boolean {
     prompt "Trident Acceleration functions (EXPERIMENTAL)" if [FB_TRIDENT && EXPERIMENTAL]
     depends on [FB_TRIDENT && EXPERIMENTAL]
     inherited [FB_TRIDENT && EXPERIMENTAL]
    }
   }
   config FB_PM3 tristate {
    prompt "Permedia3 support" if [FB && PCI && BROKEN]
    depends on [FB && PCI && BROKEN]
    inherited [FB && PCI && BROKEN]
   }
   config FB_AU1100 boolean {
    prompt "Au1100 LCD Driver" if [FB="y" && EXPERIMENTAL && PCI && MIPS && MIPS_PB1100="y"]
    depends on [FB="y" && EXPERIMENTAL && PCI && MIPS && MIPS_PB1100="y"]
    inherited [FB="y" && EXPERIMENTAL && PCI && MIPS && MIPS_PB1100="y"]
   }
   config FB_AU1200 boolean {
    prompt "Au1200 LCD Driver" if [FB && MIPS && SOC_AU1200]
    depends on [FB && MIPS && SOC_AU1200]
    select FB_CFB_FILLRECT if [FB && MIPS && SOC_AU1200]
    select FB_CFB_COPYAREA if [FB && MIPS && SOC_AU1200]
    select FB_CFB_IMAGEBLIT if [FB && MIPS && SOC_AU1200]
    inherited [FB && MIPS && SOC_AU1200]
   }
   config FB_GEODE boolean {
    prompt "AMD Geode family framebuffer support (EXPERIMENTAL)" if [FB && PCI && EXPERIMENTAL && X86]
    depends on [FB && PCI && EXPERIMENTAL && X86]
    inherited [FB && PCI && EXPERIMENTAL && X86]
    config FB_GEODE_GX tristate {
     prompt "AMD Geode GX framebuffer support (EXPERIMENTAL)" if [FB && FB_GEODE && EXPERIMENTAL]
     depends on [FB && FB_GEODE && EXPERIMENTAL]
     select FB_CFB_FILLRECT if [FB && FB_GEODE && EXPERIMENTAL]
     select FB_CFB_COPYAREA if [FB && FB_GEODE && EXPERIMENTAL]
     select FB_CFB_IMAGEBLIT if [FB && FB_GEODE && EXPERIMENTAL]
     inherited [FB && FB_GEODE && EXPERIMENTAL]
     config FB_GEODE_GX_SET_FBSIZE boolean {
      prompt "Manually specify the Geode GX framebuffer size" if [FB_GEODE_GX]
      depends on [FB_GEODE_GX]
      default [n] if [FB_GEODE_GX]
      inherited [FB_GEODE_GX]
      config FB_GEODE_GX_FBSIZE hex {
       prompt "Size of the GX framebuffer, in bytes" if [FB_GEODE_GX_SET_FBSIZE]
       depends on [FB_GEODE_GX_SET_FBSIZE]
       default [0x1600000] if [FB_GEODE_GX_SET_FBSIZE]
       inherited [FB_GEODE_GX_SET_FBSIZE]
      }
     }
    }
    config FB_GEODE_GX1 tristate {
     prompt "AMD Geode GX1 framebuffer support (EXPERIMENTAL)" if [FB && FB_GEODE && EXPERIMENTAL]
     depends on [FB && FB_GEODE && EXPERIMENTAL]
     select FB_CFB_FILLRECT if [FB && FB_GEODE && EXPERIMENTAL]
     select FB_CFB_COPYAREA if [FB && FB_GEODE && EXPERIMENTAL]
     select FB_CFB_IMAGEBLIT if [FB && FB_GEODE && EXPERIMENTAL]
     inherited [FB && FB_GEODE && EXPERIMENTAL]
    }
   }
  }
  config FB_FFB boolean {
   prompt "Creator/Creator3D/Elite3D support" if [FB_SBUS && SPARC64]
   depends on [FB_SBUS && SPARC64]
   select FB_CFB_COPYAREA if [FB_SBUS && SPARC64]
   select FB_CFB_IMAGEBLIT if [FB_SBUS && SPARC64]
   inherited [FB_SBUS && SPARC64]
  }
  config FB_TCX boolean {
   prompt "TCX (SS4/SS5 only) support" if [FB_SBUS]
   depends on [FB_SBUS]
   select FB_CFB_FILLRECT if [FB_SBUS]
   select FB_CFB_COPYAREA if [FB_SBUS]
   select FB_CFB_IMAGEBLIT if [FB_SBUS]
   inherited [FB_SBUS]
  }
  config FB_CG14 boolean {
   prompt "CGfourteen (SX) support" if [FB_SBUS]
   depends on [FB_SBUS]
   select FB_CFB_FILLRECT if [FB_SBUS]
   select FB_CFB_COPYAREA if [FB_SBUS]
   select FB_CFB_IMAGEBLIT if [FB_SBUS]
   inherited [FB_SBUS]
  }
  config FB_P9100 boolean {
   prompt "P9100 (Sparcbook 3 only) support" if [FB_SBUS]
   depends on [FB_SBUS]
   select FB_CFB_FILLRECT if [FB_SBUS]
   select FB_CFB_COPYAREA if [FB_SBUS]
   select FB_CFB_IMAGEBLIT if [FB_SBUS]
   inherited [FB_SBUS]
  }
  config FB_LEO boolean {
   prompt "Leo (ZX) support" if [FB_SBUS]
   depends on [FB_SBUS]
   select FB_CFB_FILLRECT if [FB_SBUS]
   select FB_CFB_COPYAREA if [FB_SBUS]
   select FB_CFB_IMAGEBLIT if [FB_SBUS]
   inherited [FB_SBUS]
  }
  config FB_PCI boolean {
   prompt "PCI framebuffers" if [FB="y" && PCI && SPARC]
   depends on [FB="y" && PCI && SPARC]
   inherited [FB="y" && PCI && SPARC]
   config FB_IGA boolean {
    prompt "IGA 168x display support" if [SPARC32 && FB_PCI]
    depends on [SPARC32 && FB_PCI]
    select FB_CFB_FILLRECT if [SPARC32 && FB_PCI]
    select FB_CFB_COPYAREA if [SPARC32 && FB_PCI]
    select FB_CFB_IMAGEBLIT if [SPARC32 && FB_PCI]
    inherited [SPARC32 && FB_PCI]
   }
  }
  config FB_HIT tristate {
   prompt "HD64461 Frame Buffer support" if [FB && HD64461]
   depends on [FB && HD64461]
   select FB_CFB_FILLRECT if [FB && HD64461]
   select FB_CFB_COPYAREA if [FB && HD64461]
   select FB_CFB_IMAGEBLIT if [FB && HD64461]
   inherited [FB && HD64461]
  }
  config FB_PMAG_AA boolean {
   prompt "PMAG-AA TURBOchannel framebuffer support" if [FB="y" && TC]
   depends on [FB="y" && TC]
   select FB_CFB_FILLRECT if [FB="y" && TC]
   select FB_CFB_COPYAREA if [FB="y" && TC]
   select FB_CFB_IMAGEBLIT if [FB="y" && TC]
   inherited [FB="y" && TC]
  }
  config FB_PMAG_BA boolean {
   prompt "PMAG-BA TURBOchannel framebuffer support" if [FB="y" && TC]
   depends on [FB="y" && TC]
   select FB_CFB_FILLRECT if [FB="y" && TC]
   select FB_CFB_COPYAREA if [FB="y" && TC]
   select FB_CFB_IMAGEBLIT if [FB="y" && TC]
   inherited [FB="y" && TC]
  }
  config FB_PMAGB_B boolean {
   prompt "PMAGB-B TURBOchannel framebuffer support" if [FB="y" && TC]
   depends on [FB="y" && TC]
   select FB_CFB_FILLRECT if [FB="y" && TC]
   select FB_CFB_COPYAREA if [FB="y" && TC]
   select FB_CFB_IMAGEBLIT if [FB="y" && TC]
   inherited [FB="y" && TC]
  }
  config FB_MAXINE boolean {
   prompt "Maxine (Personal DECstation) onboard framebuffer support" if [FB="y" && MACH_DECSTATION]
   depends on [FB="y" && MACH_DECSTATION]
   select FB_CFB_FILLRECT if [FB="y" && MACH_DECSTATION]
   select FB_CFB_COPYAREA if [FB="y" && MACH_DECSTATION]
   select FB_CFB_IMAGEBLIT if [FB="y" && MACH_DECSTATION]
   inherited [FB="y" && MACH_DECSTATION]
  }
  config FB_TX3912 boolean {
   prompt "TMPTX3912/PR31700 frame buffer support" if [FB="y" && NINO]
   depends on [FB="y" && NINO]
   select FB_CFB_FILLRECT if [FB="y" && NINO]
   select FB_CFB_COPYAREA if [FB="y" && NINO]
   select FB_CFB_IMAGEBLIT if [FB="y" && NINO]
   inherited [FB="y" && NINO]
  }
  config FB_G364 boolean {
   prompt "G364 frame buffer support" if [FB="y" && (MIPS_MAGNUM_4000 || OLIVETTI_M700)]
   depends on [FB="y" && (MIPS_MAGNUM_4000 || OLIVETTI_M700)]
   select FB_CFB_FILLRECT if [FB="y" && (MIPS_MAGNUM_4000 || OLIVETTI_M700)]
   select FB_CFB_COPYAREA if [FB="y" && (MIPS_MAGNUM_4000 || OLIVETTI_M700)]
   select FB_CFB_IMAGEBLIT if [FB="y" && (MIPS_MAGNUM_4000 || OLIVETTI_M700)]
   inherited [FB="y" && (MIPS_MAGNUM_4000 || OLIVETTI_M700)]
  }
  config FB_68328 boolean {
   prompt "Motorola 68328 native frame buffer support" if [FB && (M68328 || M68EZ328 || M68VZ328)]
   depends on [FB && (M68328 || M68EZ328 || M68VZ328)]
   select FB_CFB_FILLRECT if [FB && (M68328 || M68EZ328 || M68VZ328)]
   select FB_CFB_COPYAREA if [FB && (M68328 || M68EZ328 || M68VZ328)]
   select FB_CFB_IMAGEBLIT if [FB && (M68328 || M68EZ328 || M68VZ328)]
   inherited [FB && (M68328 || M68EZ328 || M68VZ328)]
  }
  config FB_PXA tristate {
   prompt "PXA LCD framebuffer support" if [FB && ARCH_PXA]
   depends on [FB && ARCH_PXA]
   select FB_CFB_FILLRECT if [FB && ARCH_PXA]
   select FB_CFB_COPYAREA if [FB && ARCH_PXA]
   select FB_CFB_IMAGEBLIT if [FB && ARCH_PXA]
   inherited [FB && ARCH_PXA]
   config FB_PXA_PARAMETERS boolean {
    prompt "PXA LCD command line parameters" if [FB_PXA]
    default [n] if [FB_PXA]
    depends on [FB_PXA]
    inherited [FB_PXA]
   }
  }
  config FB_MBX tristate {
   prompt "2700G LCD framebuffer support" if [FB && ARCH_PXA]
   depends on [FB && ARCH_PXA]
   select FB_CFB_FILLRECT if [FB && ARCH_PXA]
   select FB_CFB_COPYAREA if [FB && ARCH_PXA]
   select FB_CFB_IMAGEBLIT if [FB && ARCH_PXA]
   inherited [FB && ARCH_PXA]
   config FB_MBX_DEBUG boolean {
    prompt "Enable debugging info via debugfs" if [FB_MBX && DEBUG_FS]
    depends on [FB_MBX && DEBUG_FS]
    default [n] if [FB_MBX && DEBUG_FS]
    inherited [FB_MBX && DEBUG_FS]
   }
  }
  config FB_W100 tristate {
   prompt "W100 frame buffer support" if [FB && PXA_SHARPSL]
   depends on [FB && PXA_SHARPSL]
   select FB_CFB_FILLRECT if [FB && PXA_SHARPSL]
   select FB_CFB_COPYAREA if [FB && PXA_SHARPSL]
   select FB_CFB_IMAGEBLIT if [FB && PXA_SHARPSL]
   inherited [FB && PXA_SHARPSL]
  }
  config FB_S3C2410 tristate {
   prompt "S3C2410 LCD framebuffer support" if [FB && ARCH_S3C2410]
   depends on [FB && ARCH_S3C2410]
   select FB_CFB_FILLRECT if [FB && ARCH_S3C2410]
   select FB_CFB_COPYAREA if [FB && ARCH_S3C2410]
   select FB_CFB_IMAGEBLIT if [FB && ARCH_S3C2410]
   inherited [FB && ARCH_S3C2410]
   config FB_S3C2410_DEBUG boolean {
    prompt "S3C2410 lcd debug messages" if [FB_S3C2410]
    depends on [FB_S3C2410]
    inherited [FB_S3C2410]
   }
  }
  config FB_PNX4008_DUM tristate {
   prompt "Display Update Module support on Philips PNX4008 board" if [FB && ARCH_PNX4008]
   depends on [FB && ARCH_PNX4008]
   inherited [FB && ARCH_PNX4008]
   config FB_PNX4008_DUM_RGB tristate {
    prompt "RGB Framebuffer support on Philips PNX4008 board" if [FB_PNX4008_DUM]
    depends on [FB_PNX4008_DUM]
    select FB_CFB_FILLRECT if [FB_PNX4008_DUM]
    select FB_CFB_COPYAREA if [FB_PNX4008_DUM]
    select FB_CFB_IMAGEBLIT if [FB_PNX4008_DUM]
    inherited [FB_PNX4008_DUM]
   }
  }
  config FB_IBM_GXT4500 tristate {
   prompt "Framebuffer support for IBM GXT4500P adaptor" if [PPC]
   depends on [PPC]
   select FB_CFB_FILLRECT if [PPC]
   select FB_CFB_COPYAREA if [PPC]
   select FB_CFB_IMAGEBLIT if [PPC]
   inherited [PPC]
  }
  config FB_VIRTUAL tristate {
   prompt "Virtual Frame Buffer support (ONLY FOR TESTING!)" if [FB]
   depends on [FB]
   select FB_CFB_FILLRECT if [FB]
   select FB_CFB_COPYAREA if [FB]
   select FB_CFB_IMAGEBLIT if [FB]
   inherited [FB]
  }
  if [VT] {
   menu "Console display driver support" {
    depends on [VT]
    config VGA_CONSOLE boolean {
     prompt "VGA text console" if [VT && !ARCH_ACORN && !ARCH_EBSA110 && !4xx && !8xx && !SPARC && !M68K && !PARISC && !FRV && !ARCH_VERSATILE && !SUPERH && (EMBEDDED || !X86)]
     depends on [!ARCH_ACORN && !ARCH_EBSA110 && !4xx && !8xx && !SPARC && !M68K && !PARISC && !FRV && !ARCH_VERSATILE && !SUPERH]
     default [y] if [VT && !ARCH_ACORN && !ARCH_EBSA110 && !4xx && !8xx && !SPARC && !M68K && !PARISC && !FRV && !ARCH_VERSATILE && !SUPERH]
     inherited [VT && !ARCH_ACORN && !ARCH_EBSA110 && !4xx && !8xx && !SPARC && !M68K && !PARISC && !FRV && !ARCH_VERSATILE && !SUPERH]
     config VGACON_SOFT_SCROLLBACK boolean {
      prompt "Enable Scrollback Buffer in System RAM" if [VT && VGA_CONSOLE]
      depends on [VGA_CONSOLE]
      default [n] if [VT && VGA_CONSOLE]
      inherited [VT && VGA_CONSOLE]
      config VGACON_SOFT_SCROLLBACK_SIZE integer {
       prompt "Scrollback Buffer Size (in KB)" if [VT && VGACON_SOFT_SCROLLBACK]
       depends on [VGACON_SOFT_SCROLLBACK]
       default [64] if [VT && VGACON_SOFT_SCROLLBACK]
       inherited [VT && VGACON_SOFT_SCROLLBACK]
      }
     }
     config VIDEO_SELECT boolean {
      prompt "Video mode selection support" if [VT && X86 && VGA_CONSOLE]
      depends on [X86 && VGA_CONSOLE]
      inherited [VT && X86 && VGA_CONSOLE]
     }
    }
    config MDA_CONSOLE tristate {
     depends on [!M68K && !PARISC && ISA]
     prompt "MDA text console (dual-headed) (EXPERIMENTAL)" if [VT && !M68K && !PARISC && ISA]
     inherited [VT && !M68K && !PARISC && ISA]
    }
    config SGI_NEWPORT_CONSOLE tristate {
     prompt "SGI Newport Console support" if [VT && SGI_IP22]
     depends on [SGI_IP22]
     inherited [VT && SGI_IP22]
    }
    config PROM_CONSOLE boolean {
     prompt "PROM console" if [VT && SPARC]
     depends on [SPARC]
     inherited [VT && SPARC]
    }
    config DUMMY_CONSOLE boolean {
     depends on [PROM_CONSOLE!="y" || VGA_CONSOLE!="y" || SGI_NEWPORT_CONSOLE!="y"]
     default [y] if [VT && (!PROM_CONSOLE || !VGA_CONSOLE || SGI_NEWPORT_CONSOLE!="y")]
     inherited [VT && (!PROM_CONSOLE || !VGA_CONSOLE || SGI_NEWPORT_CONSOLE!="y")]
    }
    config DUMMY_CONSOLE_COLUMNS integer {
     prompt "Initial number of console screen columns" if [VT && PARISC && DUMMY_CONSOLE]
     depends on [PARISC && DUMMY_CONSOLE]
     default [160] if [VT && PARISC && DUMMY_CONSOLE]
     inherited [VT && PARISC && DUMMY_CONSOLE]
    }
    config DUMMY_CONSOLE_ROWS integer {
     prompt "Initial number of console screen rows" if [VT && PARISC && DUMMY_CONSOLE]
     depends on [PARISC && DUMMY_CONSOLE]
     default [64] if [VT && PARISC && DUMMY_CONSOLE]
     inherited [VT && PARISC && DUMMY_CONSOLE]
    }
    config FRAMEBUFFER_CONSOLE tristate {
     prompt "Framebuffer Console support" if [VT && FB]
     depends on [FB]
     select CRC32 if [VT && FB]
     inherited [VT && FB]
     config FRAMEBUFFER_CONSOLE_ROTATION boolean {
      prompt "Framebuffer Console Rotation" if [VT && FRAMEBUFFER_CONSOLE]
      depends on [FRAMEBUFFER_CONSOLE]
      inherited [VT && FRAMEBUFFER_CONSOLE]
     }
    }
    config STI_CONSOLE tristate {
     prompt "STI text console" if [VT && PARISC]
     depends on [PARISC]
     default [y] if [VT && PARISC]
     inherited [VT && PARISC]
    }
    config FONTS boolean {
     prompt "Select compiled-in fonts" if [VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE)]
     depends on [FRAMEBUFFER_CONSOLE || STI_CONSOLE]
     inherited [VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE)]
     config FONT_8x8 boolean {
      prompt "VGA 8x8 font" if [VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE) && FONTS]
      depends on [FRAMEBUFFER_CONSOLE || STI_CONSOLE]
      default [y] if [VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE) && !SPARC && !FONTS]
      inherited [VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE)]
     }
     config FONT_8x16 boolean {
      prompt "VGA 8x16 font" if [VT && (FRAMEBUFFER_CONSOLE || SGI_NEWPORT_CONSOLE="y" || STI_CONSOLE || USB_SISUSBVGA_CON) && FONTS]
      depends on [FRAMEBUFFER_CONSOLE || SGI_NEWPORT_CONSOLE="y" || STI_CONSOLE || USB_SISUSBVGA_CON]
      default [y] if [VT && (FRAMEBUFFER_CONSOLE || SGI_NEWPORT_CONSOLE="y" || STI_CONSOLE || USB_SISUSBVGA_CON) && !SPARC && !FONTS]
      inherited [VT && (FRAMEBUFFER_CONSOLE || SGI_NEWPORT_CONSOLE="y" || STI_CONSOLE || USB_SISUSBVGA_CON)]
     }
     config FONT_6x11 boolean {
      prompt "Mac console 6x11 font (not supported by all drivers)" if [VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE) && FONTS]
      depends on [FRAMEBUFFER_CONSOLE || STI_CONSOLE]
      default [y] if [VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE) && !SPARC && !FONTS && MAC]
      inherited [VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE)]
     }
     config FONT_7x14 boolean {
      prompt "console 7x14 font (not supported by all drivers)" if [VT && FRAMEBUFFER_CONSOLE && FONTS]
      depends on [FRAMEBUFFER_CONSOLE]
      inherited [VT && FRAMEBUFFER_CONSOLE]
     }
     config FONT_PEARL_8x8 boolean {
      prompt "Pearl (old m68k) console 8x8 font" if [VT && FRAMEBUFFER_CONSOLE && FONTS]
      depends on [FRAMEBUFFER_CONSOLE]
      default [y] if [VT && FRAMEBUFFER_CONSOLE && !SPARC && !FONTS && AMIGA]
      inherited [VT && FRAMEBUFFER_CONSOLE]
     }
     config FONT_ACORN_8x8 boolean {
      prompt "Acorn console 8x8 font" if [VT && FRAMEBUFFER_CONSOLE && FONTS]
      depends on [FRAMEBUFFER_CONSOLE]
      default [y] if [VT && FRAMEBUFFER_CONSOLE && !SPARC && !FONTS && ARM && ARCH_ACORN]
      inherited [VT && FRAMEBUFFER_CONSOLE]
     }
     config FONT_MINI_4x6 boolean {
      prompt "Mini 4x6 font" if [VT && !SPARC && FONTS]
      depends on [!SPARC && FONTS]
      inherited [VT && !SPARC && FONTS]
     }
    }
    config FONT_SUN8x16 boolean {
     prompt "Sparc console 8x16 font" if [VT && FRAMEBUFFER_CONSOLE && (!SPARC && FONTS || SPARC)]
     depends on [FRAMEBUFFER_CONSOLE && (!SPARC && FONTS || SPARC)]
     inherited [VT && FRAMEBUFFER_CONSOLE && (!SPARC && FONTS || SPARC)]
    }
    config FONT_SUN12x22 boolean {
     prompt "Sparc console 12x22 font (not supported by all drivers)" if [VT && FRAMEBUFFER_CONSOLE && (!SPARC && FONTS || SPARC)]
     depends on [FRAMEBUFFER_CONSOLE && (!SPARC && FONTS || SPARC)]
     inherited [VT && FRAMEBUFFER_CONSOLE && (!SPARC && FONTS || SPARC)]
    }
    config FONT_10x18 boolean {
     prompt "console 10x18 font (not supported by all drivers)" if [VT && FRAMEBUFFER_CONSOLE && FONTS]
     depends on [FRAMEBUFFER_CONSOLE]
     inherited [VT && FRAMEBUFFER_CONSOLE]
    }
   }
  }
  if [FB || SGI_NEWPORT_CONSOLE] {
   menu "Logo configuration" {
    depends on [FB || SGI_NEWPORT_CONSOLE]
    config LOGO boolean {
     prompt "Bootup logo" if [FB || SGI_NEWPORT_CONSOLE]
     depends on [FB || SGI_NEWPORT_CONSOLE]
     inherited [FB || SGI_NEWPORT_CONSOLE]
     config LOGO_LINUX_MONO boolean {
      prompt "Standard black and white Linux logo" if [(FB || SGI_NEWPORT_CONSOLE) && LOGO]
      depends on [LOGO]
      default [y] if [(FB || SGI_NEWPORT_CONSOLE) && LOGO]
      inherited [(FB || SGI_NEWPORT_CONSOLE) && LOGO]
     }
     config LOGO_LINUX_VGA16 boolean {
      prompt "Standard 16-color Linux logo" if [(FB || SGI_NEWPORT_CONSOLE) && LOGO]
      depends on [LOGO]
      default [y] if [(FB || SGI_NEWPORT_CONSOLE) && LOGO]
      inherited [(FB || SGI_NEWPORT_CONSOLE) && LOGO]
     }
     config LOGO_LINUX_CLUT224 boolean {
      prompt "Standard 224-color Linux logo" if [(FB || SGI_NEWPORT_CONSOLE) && LOGO]
      depends on [LOGO]
      default [y] if [(FB || SGI_NEWPORT_CONSOLE) && LOGO]
      inherited [(FB || SGI_NEWPORT_CONSOLE) && LOGO]
     }
     config LOGO_DEC_CLUT224 boolean {
      prompt "224-color Digital Equipment Corporation Linux logo" if [(FB || SGI_NEWPORT_CONSOLE) && LOGO && (MACH_DECSTATION || ALPHA)]
      depends on [LOGO && (MACH_DECSTATION || ALPHA)]
      default [y] if [(FB || SGI_NEWPORT_CONSOLE) && LOGO && (MACH_DECSTATION || ALPHA)]
      inherited [(FB || SGI_NEWPORT_CONSOLE) && LOGO && (MACH_DECSTATION || ALPHA)]
     }
     config LOGO_MAC_CLUT224 boolean {
      prompt "224-color Macintosh Linux logo" if [(FB || SGI_NEWPORT_CONSOLE) && LOGO && MAC]
      depends on [LOGO && MAC]
      default [y] if [(FB || SGI_NEWPORT_CONSOLE) && LOGO && MAC]
      inherited [(FB || SGI_NEWPORT_CONSOLE) && LOGO && MAC]
     }
     config LOGO_PARISC_CLUT224 boolean {
      prompt "224-color PA-RISC Linux logo" if [(FB || SGI_NEWPORT_CONSOLE) && LOGO && PARISC]
      depends on [LOGO && PARISC]
      default [y] if [(FB || SGI_NEWPORT_CONSOLE) && LOGO && PARISC]
      inherited [(FB || SGI_NEWPORT_CONSOLE) && LOGO && PARISC]
     }
     config LOGO_SGI_CLUT224 boolean {
      prompt "224-color SGI Linux logo" if [(FB || SGI_NEWPORT_CONSOLE) && LOGO && (SGI_IP22 || SGI_IP27 || SGI_IP32 || X86_VISWS)]
      depends on [LOGO && (SGI_IP22 || SGI_IP27 || SGI_IP32 || X86_VISWS)]
      default [y] if [(FB || SGI_NEWPORT_CONSOLE) && LOGO && (SGI_IP22 || SGI_IP27 || SGI_IP32 || X86_VISWS)]
      inherited [(FB || SGI_NEWPORT_CONSOLE) && LOGO && (SGI_IP22 || SGI_IP27 || SGI_IP32 || X86_VISWS)]
     }
     config LOGO_SUN_CLUT224 boolean {
      prompt "224-color Sun Linux logo" if [(FB || SGI_NEWPORT_CONSOLE) && LOGO && SPARC]
      depends on [LOGO && SPARC]
      default [y] if [(FB || SGI_NEWPORT_CONSOLE) && LOGO && SPARC]
      inherited [(FB || SGI_NEWPORT_CONSOLE) && LOGO && SPARC]
     }
     config LOGO_SUPERH_MONO boolean {
      prompt "Black and white SuperH Linux logo" if [(FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
      depends on [LOGO && SUPERH]
      default [y] if [(FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
      inherited [(FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
     }
     config LOGO_SUPERH_VGA16 boolean {
      prompt "16-color SuperH Linux logo" if [(FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
      depends on [LOGO && SUPERH]
      default [y] if [(FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
      inherited [(FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
     }
     config LOGO_SUPERH_CLUT224 boolean {
      prompt "224-color SuperH Linux logo" if [(FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
      depends on [LOGO && SUPERH]
      default [y] if [(FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
      inherited [(FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
     }
     config LOGO_M32R_CLUT224 boolean {
      prompt "224-color M32R Linux logo" if [(FB || SGI_NEWPORT_CONSOLE) && LOGO && M32R]
      depends on [LOGO && M32R]
      default [y] if [(FB || SGI_NEWPORT_CONSOLE) && LOGO && M32R]
      inherited [(FB || SGI_NEWPORT_CONSOLE) && LOGO && M32R]
     }
    }
   }
  }
  if [SYSFS] {
   menuconfig BACKLIGHT_LCD_SUPPORT boolean {
    prompt "Backlight & LCD device support" if [SYSFS]
    inherited [SYSFS]
    config BACKLIGHT_CLASS_DEVICE tristate {
     prompt "Lowlevel Backlight controls" if [SYSFS && BACKLIGHT_LCD_SUPPORT]
     depends on [BACKLIGHT_LCD_SUPPORT]
     default [m] if [SYSFS && BACKLIGHT_LCD_SUPPORT]
     inherited [SYSFS && BACKLIGHT_LCD_SUPPORT]
     config BACKLIGHT_DEVICE boolean {
      depends on [BACKLIGHT_CLASS_DEVICE]
      default [y] if [SYSFS && BACKLIGHT_CLASS_DEVICE]
      inherited [SYSFS && BACKLIGHT_CLASS_DEVICE]
     }
    }
    config LCD_CLASS_DEVICE tristate {
     prompt "Lowlevel LCD controls" if [SYSFS && BACKLIGHT_LCD_SUPPORT]
     depends on [BACKLIGHT_LCD_SUPPORT]
     default [m] if [SYSFS && BACKLIGHT_LCD_SUPPORT]
     inherited [SYSFS && BACKLIGHT_LCD_SUPPORT]
     config LCD_DEVICE boolean {
      depends on [LCD_CLASS_DEVICE]
      default [y] if [SYSFS && LCD_CLASS_DEVICE]
      inherited [SYSFS && LCD_CLASS_DEVICE]
     }
    }
   }
   config BACKLIGHT_CORGI tristate {
    prompt "Sharp Corgi Backlight Driver (SL Series)" if [SYSFS && BACKLIGHT_DEVICE && PXA_SHARPSL]
    depends on [BACKLIGHT_DEVICE && PXA_SHARPSL]
    default [y] if [SYSFS && BACKLIGHT_DEVICE && PXA_SHARPSL]
    inherited [SYSFS && BACKLIGHT_DEVICE && PXA_SHARPSL]
   }
   config BACKLIGHT_LOCOMO tristate {
    prompt "Sharp LOCOMO LCD/Backlight Driver" if [SYSFS && BACKLIGHT_DEVICE && SHARP_LOCOMO]
    depends on [BACKLIGHT_DEVICE && SHARP_LOCOMO]
    default [y] if [SYSFS && BACKLIGHT_DEVICE && SHARP_LOCOMO]
    inherited [SYSFS && BACKLIGHT_DEVICE && SHARP_LOCOMO]
   }
   config BACKLIGHT_HP680 tristate {
    prompt "HP Jornada 680 Backlight Driver" if [SYSFS && BACKLIGHT_DEVICE && SH_HP6XX]
    depends on [BACKLIGHT_DEVICE && SH_HP6XX]
    default [y] if [SYSFS && BACKLIGHT_DEVICE && SH_HP6XX]
    inherited [SYSFS && BACKLIGHT_DEVICE && SH_HP6XX]
   }
  }
 }
 menu "Sound" {
  config SOUND tristate {
   prompt "Sound card support" if []
   config DMASOUND_ATARI tristate {
    prompt "Atari DMA sound support" if [ATARI && SOUND]
    depends on [ATARI && SOUND]
    select DMASOUND if [ATARI && SOUND]
    inherited [ATARI && SOUND]
   }
   config DMASOUND_PMAC tristate {
    prompt "PowerMac DMA sound support" if [PPC32 && PPC_PMAC && SOUND && I2C]
    depends on [PPC32 && PPC_PMAC && SOUND && I2C]
    select DMASOUND if [PPC32 && PPC_PMAC && SOUND && I2C]
    inherited [PPC32 && PPC_PMAC && SOUND && I2C]
   }
   config DMASOUND_PAULA tristate {
    prompt "Amiga DMA sound support" if [(AMIGA || APUS) && SOUND]
    depends on [(AMIGA || APUS) && SOUND]
    select DMASOUND if [(AMIGA || APUS) && SOUND]
    inherited [(AMIGA || APUS) && SOUND]
   }
   config DMASOUND_Q40 tristate {
    prompt "Q40 sound support" if [Q40 && SOUND]
    depends on [Q40 && SOUND]
    select DMASOUND if [Q40 && SOUND]
    inherited [Q40 && SOUND]
   }
  }
  config DMASOUND tristate {
  }
  if [!M68K] {
   menu "Advanced Linux Sound Architecture" {
    depends on [!M68K && SOUND!="n"]
    config SND tristate {
     prompt "Advanced Linux Sound Architecture" if [!M68K && SOUND]
     depends on [SOUND]
     inherited [!M68K && SOUND]
     config SND_TIMER tristate {
      depends on [SND]
      inherited [!M68K && SOUND!="n" && SND]
     }
     config SND_PCM tristate {
      select SND_TIMER if [!M68K && SOUND!="n" && SND]
      depends on [SND]
      inherited [!M68K && SOUND!="n" && SND]
     }
     config SND_HWDEP tristate {
      depends on [SND]
      inherited [!M68K && SOUND!="n" && SND]
     }
     config SND_RAWMIDI tristate {
      depends on [SND]
      inherited [!M68K && SOUND!="n" && SND]
     }
     config SND_SEQUENCER tristate {
      prompt "Sequencer support" if [!M68K && SOUND!="n" && SND]
      depends on [SND]
      select SND_TIMER if [!M68K && SOUND!="n" && SND]
      inherited [!M68K && SOUND!="n" && SND]
      config SND_SEQ_DUMMY tristate {
       prompt "Sequencer dummy client" if [!M68K && SOUND!="n" && SND_SEQUENCER]
       depends on [SND_SEQUENCER]
       inherited [!M68K && SOUND!="n" && SND_SEQUENCER]
      }
     }
     config SND_OSSEMUL boolean {
      depends on [SND]
      inherited [!M68K && SOUND && SND]
     }
     config SND_MIXER_OSS tristate {
      prompt "OSS Mixer API" if [!M68K && SOUND!="n" && SND]
      depends on [SND]
      select SND_OSSEMUL if [!M68K && SOUND!="n" && SND]
      inherited [!M68K && SOUND!="n" && SND]
     }
     config SND_PCM_OSS tristate {
      prompt "OSS PCM (digital audio) API" if [!M68K && SOUND!="n" && SND]
      depends on [SND]
      select SND_OSSEMUL if [!M68K && SOUND!="n" && SND]
      select SND_PCM if [!M68K && SOUND!="n" && SND]
      inherited [!M68K && SOUND!="n" && SND]
      config SND_PCM_OSS_PLUGINS boolean {
       prompt "OSS PCM (digital audio) API - Include plugin system" if [!M68K && SOUND && SND_PCM_OSS]
       depends on [SND_PCM_OSS]
       default [y] if [!M68K && SOUND && SND_PCM_OSS]
       inherited [!M68K && SOUND && SND_PCM_OSS]
      }
     }
     config SND_SEQUENCER_OSS boolean {
      prompt "OSS Sequencer API" if [!M68K && SOUND && SND && SND_SEQUENCER]
      depends on [SND && SND_SEQUENCER]
      select SND_OSSEMUL if [!M68K && SOUND && SND && SND_SEQUENCER]
      inherited [!M68K && SOUND && SND && SND_SEQUENCER]
     }
     config SND_RTCTIMER tristate {
      prompt "RTC Timer support" if [!M68K && SOUND!="n" && SND && RTC]
      depends on [SND && RTC]
      select SND_TIMER if [!M68K && SOUND!="n" && SND && RTC]
      inherited [!M68K && SOUND!="n" && SND && RTC]
      config SND_SEQ_RTCTIMER_DEFAULT boolean {
       prompt "Use RTC as default sequencer timer" if [!M68K && SOUND && SND_RTCTIMER && SND_SEQUENCER]
       depends on [SND_RTCTIMER && SND_SEQUENCER]
       default [y] if [!M68K && SOUND && SND_RTCTIMER && SND_SEQUENCER]
       inherited [!M68K && SOUND && SND_RTCTIMER && SND_SEQUENCER]
      }
     }
     config SND_DYNAMIC_MINORS boolean {
      prompt "Dynamic device file minor numbers" if [!M68K && SOUND && SND]
      depends on [SND]
      inherited [!M68K && SOUND && SND]
     }
     config SND_SUPPORT_OLD_API boolean {
      prompt "Support old ALSA API" if [!M68K && SOUND && SND]
      depends on [SND]
      default [y] if [!M68K && SOUND && SND]
      inherited [!M68K && SOUND && SND]
     }
     config SND_VERBOSE_PROCFS boolean {
      prompt "Verbose procfs contents" if [!M68K && SOUND && SND && PROC_FS]
      depends on [SND && PROC_FS]
      default [y] if [!M68K && SOUND && SND && PROC_FS]
      inherited [!M68K && SOUND && SND && PROC_FS]
     }
     config SND_VERBOSE_PRINTK boolean {
      prompt "Verbose printk" if [!M68K && SOUND && SND]
      depends on [SND]
      inherited [!M68K && SOUND && SND]
     }
     config SND_DEBUG boolean {
      prompt "Debug" if [!M68K && SOUND && SND]
      depends on [SND]
      inherited [!M68K && SOUND && SND]
      config SND_DEBUG_DETECT boolean {
       prompt "Debug detection" if [!M68K && SOUND && SND_DEBUG]
       depends on [SND_DEBUG]
       inherited [!M68K && SOUND && SND_DEBUG]
      }
      config SND_PCM_XRUN_DEBUG boolean {
       prompt "Enable PCM ring buffer overrun/underrun debugging" if [!M68K && SOUND && SND_DEBUG && SND_VERBOSE_PROCFS]
       default [n] if [!M68K && SOUND && SND_DEBUG && SND_VERBOSE_PROCFS]
       depends on [SND_DEBUG && SND_VERBOSE_PROCFS]
       inherited [!M68K && SOUND && SND_DEBUG && SND_VERBOSE_PROCFS]
      }
     }
     menu "Generic devices" {
      depends on [!M68K && SOUND!="n" && SND!="n"]
      config SND_MPU401_UART tristate {
       select SND_RAWMIDI if [!M68K && SOUND!="n" && SND!="n"]
       inherited [!M68K && SOUND!="n" && SND!="n"]
      }
      config SND_OPL3_LIB tristate {
       select SND_TIMER if [!M68K && SOUND!="n" && SND!="n"]
       select SND_HWDEP if [!M68K && SOUND!="n" && SND!="n"]
       inherited [!M68K && SOUND!="n" && SND!="n"]
      }
      config SND_OPL4_LIB tristate {
       select SND_TIMER if [!M68K && SOUND!="n" && SND!="n"]
       select SND_HWDEP if [!M68K && SOUND!="n" && SND!="n"]
       inherited [!M68K && SOUND!="n" && SND!="n"]
      }
      config SND_VX_LIB tristate {
       select SND_HWDEP if [!M68K && SOUND!="n" && SND!="n"]
       select SND_PCM if [!M68K && SOUND!="n" && SND!="n"]
       inherited [!M68K && SOUND!="n" && SND!="n"]
      }
      config SND_AC97_CODEC tristate {
       select SND_PCM if [!M68K && SOUND!="n" && SND!="n"]
       select AC97_BUS if [!M68K && SOUND!="n" && SND!="n"]
       inherited [!M68K && SOUND!="n" && SND!="n"]
      }
      config SND_DUMMY tristate {
       prompt "Dummy (/dev/null) soundcard" if [!M68K && SOUND!="n" && SND]
       depends on [SND]
       select SND_PCM if [!M68K && SOUND!="n" && SND]
       inherited [!M68K && SOUND!="n" && SND]
      }
      config SND_VIRMIDI tristate {
       prompt "Virtual MIDI soundcard" if [!M68K && SOUND!="n" && SND!="n" && SND_SEQUENCER]
       depends on [SND_SEQUENCER]
       select SND_TIMER if [!M68K && SOUND!="n" && SND!="n" && SND_SEQUENCER]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && SND!="n" && SND_SEQUENCER]
       inherited [!M68K && SOUND!="n" && SND!="n" && SND_SEQUENCER]
      }
      config SND_MTPAV tristate {
       prompt "MOTU MidiTimePiece AV multiport MIDI" if [!M68K && SOUND!="n" && SND]
       depends on [SND]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && SND]
       inherited [!M68K && SOUND!="n" && SND]
      }
      config SND_MTS64 tristate {
       prompt "ESI Miditerminal 4140 driver" if [!M68K && SOUND!="n" && SND && PARPORT]
       depends on [SND && PARPORT]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && SND && PARPORT]
       inherited [!M68K && SOUND!="n" && SND && PARPORT]
      }
      config SND_SERIAL_U16550 tristate {
       prompt "UART16550 serial MIDI driver" if [!M68K && SOUND!="n" && SND]
       depends on [SND]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && SND]
       inherited [!M68K && SOUND!="n" && SND]
      }
      config SND_MPU401 tristate {
       prompt "Generic MPU-401 UART driver" if [!M68K && SOUND!="n" && SND]
       depends on [SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && SND]
       inherited [!M68K && SOUND!="n" && SND]
      }
     }
     menu "ISA devices" {
      depends on [!M68K && SOUND!="n" && SND!="n" && ISA && ISA_DMA_API]
      config SND_AD1848_LIB tristate {
       select SND_PCM if [!M68K && SOUND!="n" && SND!="n" && ISA && ISA_DMA_API]
       inherited [!M68K && SOUND!="n" && SND!="n" && ISA && ISA_DMA_API]
      }
      config SND_CS4231_LIB tristate {
       select SND_PCM if [!M68K && SOUND!="n" && SND!="n" && ISA && ISA_DMA_API]
       inherited [!M68K && SOUND!="n" && SND!="n" && ISA && ISA_DMA_API]
      }
      config SND_ADLIB tristate {
       prompt "AdLib FM card" if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       depends on [SND]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       inherited [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      }
      config SND_AD1816A tristate {
       prompt "Analog Devices SoundPort AD1816A" if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       depends on [SND && PNP && ISA]
       select ISAPNP if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       select SND_PCM if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       inherited [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      }
      config SND_AD1848 tristate {
       prompt "Generic AD1848/CS4248 driver" if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       depends on [SND]
       select SND_AD1848_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       inherited [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      }
      config SND_ALS100 tristate {
       prompt "Avance Logic ALS100/ALS120" if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       depends on [SND && PNP && ISA]
       select ISAPNP if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       select SND_PCM if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       inherited [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      }
      config SND_AZT2320 tristate {
       prompt "Aztech Systems AZT2320" if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       depends on [SND && PNP && ISA]
       select ISAPNP if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       select SND_CS4231_LIB if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       inherited [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      }
      config SND_CMI8330 tristate {
       prompt "C-Media CMI8330" if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       depends on [SND]
       select SND_AD1848_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       inherited [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      }
      config SND_CS4231 tristate {
       prompt "Generic Cirrus Logic CS4231 driver" if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       depends on [SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_CS4231_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       inherited [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      }
      config SND_CS4232 tristate {
       prompt "Generic Cirrus Logic CS4232 driver" if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       depends on [SND]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_CS4231_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       inherited [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      }
      config SND_CS4236 tristate {
       prompt "Generic Cirrus Logic CS4236+ driver" if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       depends on [SND]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_CS4231_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       inherited [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      }
      config SND_DT019X tristate {
       prompt "Diamond Technologies DT-019X, Avance Logic ALS-007" if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       depends on [SND && PNP && ISA]
       select ISAPNP if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       select SND_PCM if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       inherited [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      }
      config SND_ES968 tristate {
       prompt "Generic ESS ES968 driver" if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       depends on [SND && PNP && ISA]
       select ISAPNP if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       select SND_PCM if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       inherited [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      }
      config SND_ES1688 tristate {
       prompt "Generic ESS ES688/ES1688 driver" if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       depends on [SND]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_PCM if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       inherited [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      }
      config SND_ES18XX tristate {
       prompt "Generic ESS ES18xx driver" if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       depends on [SND]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_PCM if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       inherited [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      }
      config SND_GUS_SYNTH tristate {
       inherited [!M68K && SOUND!="n" && SND!="n" && ISA && ISA_DMA_API]
      }
      config SND_GUSCLASSIC tristate {
       prompt "Gravis UltraSound Classic" if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       depends on [SND]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_PCM if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_GUS_SYNTH if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       inherited [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      }
      config SND_GUSEXTREME tristate {
       prompt "Gravis UltraSound Extreme" if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       depends on [SND]
       select SND_HWDEP if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_PCM if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_GUS_SYNTH if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       inherited [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      }
      config SND_GUSMAX tristate {
       prompt "Gravis UltraSound MAX" if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       depends on [SND]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_CS4231_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_GUS_SYNTH if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       inherited [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      }
      config SND_INTERWAVE tristate {
       prompt "AMD InterWave, Gravis UltraSound PnP" if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       depends on [SND && PNP && ISA]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       select SND_CS4231_LIB if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       select SND_GUS_SYNTH if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       inherited [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      }
      config SND_INTERWAVE_STB tristate {
       prompt "AMD InterWave + TEA6330T (UltraSound 32-Pro)" if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       depends on [SND && PNP && ISA]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       select SND_CS4231_LIB if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       select SND_GUS_SYNTH if [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
       inherited [!M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      }
      config SND_OPL3SA2 tristate {
       prompt "Yamaha OPL3-SA2/SA3" if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       depends on [SND]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_CS4231_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       inherited [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      }
      config SND_OPTI92X_AD1848 tristate {
       prompt "OPTi 82C92x - AD1848" if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       depends on [SND]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_OPL4_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_AD1848_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       inherited [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      }
      config SND_OPTI92X_CS4231 tristate {
       prompt "OPTi 82C92x - CS4231" if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       depends on [SND]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_OPL4_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_CS4231_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       inherited [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      }
      config SND_OPTI93X tristate {
       prompt "OPTi 82C93x" if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       depends on [SND]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_PCM if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       inherited [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      }
      config SND_MIRO tristate {
       prompt "Miro miroSOUND PCM1pro/PCM12/PCM20radio driver" if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       depends on [SND]
       select SND_OPL4_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_CS4231_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_PCM if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       inherited [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      }
      config SND_SB8 tristate {
       prompt "Sound Blaster 1.0/2.0/Pro (8-bit)" if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       depends on [SND]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_PCM if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       inherited [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      }
      config SND_SB16 tristate {
       prompt "Sound Blaster 16 (PnP)" if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       depends on [SND]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_PCM if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       inherited [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      }
      config SND_SBAWE tristate {
       prompt "Sound Blaster AWE (32,64) (PnP)" if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       depends on [SND]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_PCM if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       inherited [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       config SND_SB16_CSP boolean {
        prompt "Sound Blaster 16/AWE CSP support" if [!M68K && SOUND && SND && ISA && ISA_DMA_API && (SND_SB16 || SND_SBAWE) && (BROKEN || !PPC)]
        depends on [(SND_SB16 || SND_SBAWE) && (BROKEN || !PPC)]
        inherited [!M68K && SOUND && SND && ISA && ISA_DMA_API && (SND_SB16 || SND_SBAWE) && (BROKEN || !PPC)]
       }
      }
      config SND_SGALAXY tristate {
       prompt "Aztech Sound Galaxy" if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       depends on [SND]
       select SND_AD1848_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       inherited [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      }
      config SND_SSCAPE tristate {
       prompt "Ensoniq SoundScape PnP driver" if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       depends on [SND]
       select SND_HWDEP if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_CS4231_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       inherited [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      }
      config SND_WAVEFRONT tristate {
       prompt "Turtle Beach Maui,Tropez,Tropez+ (Wavefront)" if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       depends on [SND]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       select SND_CS4231_LIB if [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
       inherited [!M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      }
     }
     menu "PCI devices" {
      depends on [!M68K && SOUND!="n" && SND!="n" && PCI]
      config SND_AD1889 tristate {
       prompt "Analog Devices AD1889" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_ALS300 tristate {
       prompt "Avance Logic ALS300/ALS300+" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_ALS4000 tristate {
       prompt "Avance Logic ALS4000" if [!M68K && SOUND!="n" && PCI && SND && ISA_DMA_API]
       depends on [SND && ISA_DMA_API]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && PCI && SND && ISA_DMA_API]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && PCI && SND && ISA_DMA_API]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND && ISA_DMA_API]
       inherited [!M68K && SOUND!="n" && PCI && SND && ISA_DMA_API]
      }
      config SND_ALI5451 tristate {
       prompt "ALi M5451 PCI Audio Controller" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && PCI && SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_ATIIXP tristate {
       prompt "ATI IXP AC97 Controller" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_ATIIXP_MODEM tristate {
       prompt "ATI IXP Modem" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_AU8810 tristate {
       prompt "Aureal Advantage" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && PCI && SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_AU8820 tristate {
       prompt "Aureal Vortex" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && PCI && SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_AU8830 tristate {
       prompt "Aureal Vortex 2" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && PCI && SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_AZT3328 tristate {
       prompt "Aztech AZF3328 / PCI168 (EXPERIMENTAL)" if [!M68K && SOUND!="n" && PCI && SND && EXPERIMENTAL]
       depends on [SND && EXPERIMENTAL]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && PCI && SND && EXPERIMENTAL]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && PCI && SND && EXPERIMENTAL]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND && EXPERIMENTAL]
       inherited [!M68K && SOUND!="n" && PCI && SND && EXPERIMENTAL]
      }
      config SND_BT87X tristate {
       prompt "Bt87x Audio Capture" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
       config SND_BT87X_OVERCLOCK boolean {
        prompt "Bt87x Audio overclocking" if [!M68K && SOUND && SND && PCI && SND_BT87X]
        depends on [SND_BT87X]
        inherited [!M68K && SOUND && SND && PCI && SND_BT87X]
       }
      }
      config SND_CA0106 tristate {
       prompt "SB Audigy LS / Live 24bit" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_CMIPCI tristate {
       prompt "C-Media 8738, 8338" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && PCI && SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && PCI && SND]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_CS4281 tristate {
       prompt "Cirrus Logic (Sound Fusion) CS4281" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && PCI && SND]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && PCI && SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_CS46XX tristate {
       prompt "Cirrus Logic (Sound Fusion) CS4280/CS461x/CS462x/CS463x" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && PCI && SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
       config SND_CS46XX_NEW_DSP boolean {
        prompt "Cirrus Logic (Sound Fusion) New DSP support" if [!M68K && SOUND && SND && PCI && SND_CS46XX]
        depends on [SND_CS46XX]
        default [y] if [!M68K && SOUND && SND && PCI && SND_CS46XX]
        inherited [!M68K && SOUND && SND && PCI && SND_CS46XX]
       }
      }
      config SND_CS5535AUDIO tristate {
       prompt "CS5535/CS5536 Audio" if [!M68K && SOUND!="n" && PCI && SND && X86 && !X86_64]
       depends on [SND && X86 && !X86_64]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND && X86 && !X86_64]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND && X86 && !X86_64]
       inherited [!M68K && SOUND!="n" && PCI && SND && X86 && !X86_64]
      }
      config SND_DARLA20 tristate {
       prompt "(Echoaudio) Darla20" if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       depends on [SND]
       depends on [FW_LOADER]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       inherited [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
      }
      config SND_GINA20 tristate {
       prompt "(Echoaudio) Gina20" if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       depends on [SND]
       depends on [FW_LOADER]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       inherited [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
      }
      config SND_LAYLA20 tristate {
       prompt "(Echoaudio) Layla20" if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       depends on [SND]
       depends on [FW_LOADER]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       inherited [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
      }
      config SND_DARLA24 tristate {
       prompt "(Echoaudio) Darla24" if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       depends on [SND]
       depends on [FW_LOADER]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       inherited [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
      }
      config SND_GINA24 tristate {
       prompt "(Echoaudio) Gina24" if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       depends on [SND]
       depends on [FW_LOADER]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       inherited [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
      }
      config SND_LAYLA24 tristate {
       prompt "(Echoaudio) Layla24" if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       depends on [SND]
       depends on [FW_LOADER]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       inherited [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
      }
      config SND_MONA tristate {
       prompt "(Echoaudio) Mona" if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       depends on [SND]
       depends on [FW_LOADER]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       inherited [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
      }
      config SND_MIA tristate {
       prompt "(Echoaudio) Mia" if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       depends on [SND]
       depends on [FW_LOADER]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       inherited [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
      }
      config SND_ECHO3G tristate {
       prompt "(Echoaudio) 3G cards" if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       depends on [SND]
       depends on [FW_LOADER]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       inherited [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
      }
      config SND_INDIGO tristate {
       prompt "(Echoaudio) Indigo" if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       depends on [SND]
       depends on [FW_LOADER]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       inherited [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
      }
      config SND_INDIGOIO tristate {
       prompt "(Echoaudio) Indigo IO" if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       depends on [SND]
       depends on [FW_LOADER]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       inherited [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
      }
      config SND_INDIGODJ tristate {
       prompt "(Echoaudio) Indigo DJ" if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       depends on [SND]
       depends on [FW_LOADER]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       inherited [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
      }
      config SND_EMU10K1 tristate {
       prompt "Emu10k1 (SB Live!, Audigy, E-mu APS)" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_HWDEP if [!M68K && SOUND!="n" && PCI && SND]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && PCI && SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_EMU10K1X tristate {
       prompt "Emu10k1X (Dell OEM Version)" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_ENS1370 tristate {
       prompt "(Creative) Ensoniq AudioPCI 1370" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && PCI && SND]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_ENS1371 tristate {
       prompt "(Creative) Ensoniq AudioPCI 1371/1373" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && PCI && SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_ES1938 tristate {
       prompt "ESS ES1938/1946/1969 (Solo-1)" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && PCI && SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && PCI && SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_ES1968 tristate {
       prompt "ESS ES1968/1978 (Maestro-1/2/2E)" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && PCI && SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_FM801 tristate {
       prompt "ForteMedia FM801" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && PCI && SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && PCI && SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
       config SND_FM801_TEA575X_BOOL boolean {
        prompt "ForteMedia FM801 + TEA5757 tuner" if [!M68K && SOUND && SND && PCI && SND_FM801]
        depends on [SND_FM801]
        inherited [!M68K && SOUND && SND && PCI && SND_FM801]
        config SND_FM801_TEA575X tristate {
         depends on [SND_FM801_TEA575X_BOOL]
         default [SND_FM801] if [!M68K && SOUND!="n" && SND!="n" && PCI && SND_FM801_TEA575X_BOOL]
         select VIDEO_V4L1 if [!M68K && SOUND!="n" && SND!="n" && PCI && SND_FM801_TEA575X_BOOL]
         select VIDEO_DEV if [!M68K && SOUND!="n" && SND!="n" && PCI && SND_FM801_TEA575X_BOOL]
         inherited [!M68K && SOUND!="n" && SND!="n" && PCI && SND_FM801_TEA575X_BOOL]
        }
       }
      }
      config SND_HDA_INTEL tristate {
       prompt "Intel HD Audio" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_HDSP tristate {
       prompt "RME Hammerfall DSP Audio" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_HWDEP if [!M68K && SOUND!="n" && PCI && SND]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && PCI && SND]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_HDSPM tristate {
       prompt "RME Hammerfall DSP MADI" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_HWDEP if [!M68K && SOUND!="n" && PCI && SND]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && PCI && SND]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_ICE1712 tristate {
       prompt "ICEnsemble ICE1712 (Envy24)" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && PCI && SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_ICE1724 tristate {
       prompt "ICE/VT1724/1720 (Envy24HT/PT)" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && PCI && SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_INTEL8X0 tristate {
       prompt "Intel/SiS/nVidia/AMD/ALi AC97 Controller" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_INTEL8X0M tristate {
       prompt "Intel/SiS/nVidia/AMD MC97 Modem" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_KORG1212 tristate {
       prompt "Korg 1212 IO" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_MAESTRO3 tristate {
       prompt "ESS Allegro/Maestro3" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_MIXART tristate {
       prompt "Digigram miXart" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_HWDEP if [!M68K && SOUND!="n" && PCI && SND]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_NM256 tristate {
       prompt "NeoMagic NM256AV/ZX" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_PCXHR tristate {
       prompt "Digigram PCXHR" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND]
       select SND_HWDEP if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_RIPTIDE tristate {
       prompt "Conexant Riptide" if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       depends on [SND]
       depends on [FW_LOADER]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
       inherited [!M68K && SOUND!="n" && PCI && SND && FW_LOADER]
      }
      config SND_RME32 tristate {
       prompt "RME Digi32, 32/8, 32 PRO" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_RME96 tristate {
       prompt "RME Digi96, 96/8, 96/8 PRO" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_RME9652 tristate {
       prompt "RME Digi9652 (Hammerfall)" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_PCM if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_SONICVIBES tristate {
       prompt "S3 SonicVibes" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && PCI && SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && PCI && SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_TRIDENT tristate {
       prompt "Trident 4D-Wave DX/NX; SiS 7018" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && PCI && SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_VIA82XX tristate {
       prompt "VIA 82C686A/B, 8233/8235 AC97 Controller" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && PCI && SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_VIA82XX_MODEM tristate {
       prompt "VIA 82C686A/B, 8233 based Modems" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_VX222 tristate {
       prompt "Digigram VX222" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_VX_LIB if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_YMFPCI tristate {
       prompt "Yamaha YMF724/740/744/754" if [!M68K && SOUND!="n" && PCI && SND]
       depends on [SND]
       select SND_OPL3_LIB if [!M68K && SOUND!="n" && PCI && SND]
       select SND_MPU401_UART if [!M68K && SOUND!="n" && PCI && SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && PCI && SND]
       inherited [!M68K && SOUND!="n" && PCI && SND]
      }
      config SND_AC97_POWER_SAVE boolean {
       prompt "AC97 Power-Saving Mode" if [!M68K && SOUND && SND && PCI && SND_AC97_CODEC && EXPERIMENTAL]
       depends on [SND_AC97_CODEC && EXPERIMENTAL]
       default [n] if [!M68K && SOUND && SND && PCI && SND_AC97_CODEC && EXPERIMENTAL]
       inherited [!M68K && SOUND && SND && PCI && SND_AC97_CODEC && EXPERIMENTAL]
      }
     }
     menu "ALSA PowerMac devices" {
      depends on [!M68K && SOUND!="n" && SND!="n" && PPC]
      config SND_POWERMAC tristate {
       prompt "PowerMac (AWACS, DACA, Burgundy, Tumbler, Keywest)" if [!M68K && SOUND!="n" && PPC && SND && I2C && INPUT && PPC_PMAC]
       depends on [SND && I2C && INPUT && PPC_PMAC]
       select SND_PCM if [!M68K && SOUND!="n" && PPC && SND && I2C && INPUT && PPC_PMAC]
       inherited [!M68K && SOUND!="n" && PPC && SND && I2C && INPUT && PPC_PMAC]
       config SND_POWERMAC_AUTO_DRC boolean {
        prompt "Toggle DRC automatically at headphone/line plug-in" if [!M68K && SOUND && SND && PPC && SND_POWERMAC]
        depends on [SND_POWERMAC]
        default [y] if [!M68K && SOUND && SND && PPC && SND_POWERMAC]
        inherited [!M68K && SOUND && SND && PPC && SND_POWERMAC]
       }
      }
     }
     menu "Apple Onboard Audio driver" {
      depends on [!M68K && SOUND!="n" && SND!="n" && PPC_PMAC]
      config SND_AOA tristate {
       prompt "Apple Onboard Audio driver" if [!M68K && SOUND!="n" && PPC_PMAC && SND]
       depends on [SND]
       select SND_PCM if [!M68K && SOUND!="n" && PPC_PMAC && SND]
       inherited [!M68K && SOUND!="n" && PPC_PMAC && SND]
       config SND_AOA_FABRIC_LAYOUT tristate {
        prompt "layout-id fabric" if [!M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
        depends on [SND_AOA]
        select SND_AOA_SOUNDBUS if [!M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
        select SND_AOA_SOUNDBUS_I2S if [!M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
        inherited [!M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
       }
       config SND_AOA_ONYX tristate {
        prompt "support Onyx chip" if [!M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
        depends on [SND_AOA]
        select I2C if [!M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
        select I2C_POWERMAC if [!M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
        inherited [!M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
       }
       config SND_AOA_TAS tristate {
        prompt "support TAS chips" if [!M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
        depends on [SND_AOA]
        select I2C if [!M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
        select I2C_POWERMAC if [!M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
        inherited [!M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
       }
       config SND_AOA_TOONIE tristate {
        prompt "support Toonie chip" if [!M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
        depends on [SND_AOA]
        inherited [!M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
       }
      }
      config SND_AOA_SOUNDBUS tristate {
       prompt "Apple Soundbus support" if [!M68K && SND!="n" && PPC_PMAC && SOUND]
       depends on [SOUND]
       select SND_PCM if [!M68K && SND!="n" && PPC_PMAC && SOUND]
       inherited [!M68K && SND!="n" && PPC_PMAC && SOUND]
       config SND_AOA_SOUNDBUS_I2S tristate {
        prompt "I2S bus support" if [!M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA_SOUNDBUS && PCI]
        depends on [SND_AOA_SOUNDBUS && PCI]
        inherited [!M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA_SOUNDBUS && PCI]
       }
      }
     }
     menu "ALSA ARM devices" {
      depends on [!M68K && SOUND!="n" && SND!="n" && ARM]
      config SND_SA11XX_UDA1341 tristate {
       prompt "SA11xx UDA1341TS driver (iPaq H3600)" if [!M68K && SOUND!="n" && ARM && ARCH_SA1100 && SND && L3]
       depends on [ARCH_SA1100 && SND && L3]
       select SND_PCM if [!M68K && SOUND!="n" && ARM && ARCH_SA1100 && SND && L3]
       inherited [!M68K && SOUND!="n" && ARM && ARCH_SA1100 && SND && L3]
      }
      config SND_ARMAACI tristate {
       prompt "ARM PrimeCell PL041 AC Link support" if [!M68K && SOUND!="n" && ARM && SND && ARM_AMBA]
       depends on [SND && ARM_AMBA]
       select SND_PCM if [!M68K && SOUND!="n" && ARM && SND && ARM_AMBA]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && ARM && SND && ARM_AMBA]
       inherited [!M68K && SOUND!="n" && ARM && SND && ARM_AMBA]
      }
      config SND_PXA2XX_PCM tristate {
       select SND_PCM if [!M68K && SOUND!="n" && SND!="n" && ARM]
       inherited [!M68K && SOUND!="n" && SND!="n" && ARM]
      }
      config SND_PXA2XX_AC97 tristate {
       prompt "AC97 driver for the Intel PXA2xx chip" if [!M68K && SOUND!="n" && ARM && ARCH_PXA && SND]
       depends on [ARCH_PXA && SND]
       select SND_PXA2XX_PCM if [!M68K && SOUND!="n" && ARM && ARCH_PXA && SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && ARM && ARCH_PXA && SND]
       inherited [!M68K && SOUND!="n" && ARM && ARCH_PXA && SND]
      }
     }
     menu "ALSA MIPS devices" {
      depends on [!M68K && SOUND!="n" && SND!="n" && MIPS]
      config SND_AU1X00 tristate {
       prompt "Au1x00 AC97 Port Driver" if [!M68K && SOUND!="n" && MIPS && (SOC_AU1000 || SOC_AU1100 || SOC_AU1500) && SND]
       depends on [(SOC_AU1000 || SOC_AU1100 || SOC_AU1500) && SND]
       select SND_PCM if [!M68K && SOUND!="n" && MIPS && (SOC_AU1000 || SOC_AU1100 || SOC_AU1500) && SND]
       select SND_AC97_CODEC if [!M68K && SOUND!="n" && MIPS && (SOC_AU1000 || SOC_AU1100 || SOC_AU1500) && SND]
       inherited [!M68K && SOUND!="n" && MIPS && (SOC_AU1000 || SOC_AU1100 || SOC_AU1500) && SND]
      }
     }
     menu "USB devices" {
      depends on [!M68K && SOUND!="n" && SND!="n" && USB!="n"]
      config SND_USB_AUDIO tristate {
       prompt "USB Audio/MIDI driver" if [!M68K && SOUND!="n" && SND && USB]
       depends on [SND && USB]
       select SND_HWDEP if [!M68K && SOUND!="n" && SND && USB]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && SND && USB]
       select SND_PCM if [!M68K && SOUND!="n" && SND && USB]
       inherited [!M68K && SOUND!="n" && SND && USB]
      }
      config SND_USB_USX2Y tristate {
       prompt "Tascam US-122, US-224 and US-428 USB driver" if [!M68K && SOUND!="n" && SND && USB && (X86 || PPC || ALPHA)]
       depends on [SND && USB && (X86 || PPC || ALPHA)]
       select SND_HWDEP if [!M68K && SOUND!="n" && SND && USB && (X86 || PPC || ALPHA)]
       select SND_RAWMIDI if [!M68K && SOUND!="n" && SND && USB && (X86 || PPC || ALPHA)]
       select SND_PCM if [!M68K && SOUND!="n" && SND && USB && (X86 || PPC || ALPHA)]
       inherited [!M68K && SOUND!="n" && SND && USB && (X86 || PPC || ALPHA)]
      }
     }
     menu "PCMCIA devices" {
      depends on [!M68K && SOUND!="n" && SND!="n" && PCMCIA]
      config SND_VXPOCKET tristate {
       prompt "Digigram VXpocket" if [!M68K && SOUND!="n" && SND && PCMCIA]
       depends on [SND && PCMCIA]
       select SND_VX_LIB if [!M68K && SOUND!="n" && SND && PCMCIA]
       inherited [!M68K && SOUND!="n" && SND && PCMCIA]
      }
      config SND_PDAUDIOCF tristate {
       prompt "Sound Core PDAudioCF" if [!M68K && SOUND!="n" && SND && PCMCIA]
       depends on [SND && PCMCIA]
       select SND_PCM if [!M68K && SOUND!="n" && SND && PCMCIA]
       inherited [!M68K && SOUND!="n" && SND && PCMCIA]
      }
     }
     menu "ALSA Sparc devices" {
      depends on [!M68K && SOUND!="n" && SND!="n" && SPARC]
      config SND_SUN_AMD7930 tristate {
       prompt "Sun AMD7930" if [!M68K && SOUND!="n" && SPARC && SBUS && SND]
       depends on [SBUS && SND]
       select SND_PCM if [!M68K && SOUND!="n" && SPARC && SBUS && SND]
       inherited [!M68K && SOUND!="n" && SPARC && SBUS && SND]
      }
      config SND_SUN_CS4231 tristate {
       prompt "Sun CS4231" if [!M68K && SOUND!="n" && SPARC && SND]
       depends on [SND]
       select SND_PCM if [!M68K && SOUND!="n" && SPARC && SND]
       inherited [!M68K && SOUND!="n" && SPARC && SND]
      }
      config SND_SUN_DBRI tristate {
       prompt "Sun DBRI" if [!M68K && SOUND!="n" && SPARC && SND && SBUS]
       depends on [SND && SBUS]
       select SND_PCM if [!M68K && SOUND!="n" && SPARC && SND && SBUS]
       inherited [!M68K && SOUND!="n" && SPARC && SND && SBUS]
      }
     }
     menu "GSC devices" {
      depends on [!M68K && SOUND!="n" && SND!="n" && GSC]
      config SND_HARMONY tristate {
       prompt "Harmony/Vivace sound chip" if [!M68K && SOUND!="n" && GSC && SND]
       depends on [SND]
       select SND_PCM if [!M68K && SOUND!="n" && GSC && SND]
       inherited [!M68K && SOUND!="n" && GSC && SND]
      }
     }
    }
   }
   menu "Open Sound System" {
    depends on [!M68K && SOUND!="n"]
    config SOUND_PRIME tristate {
     prompt "Open Sound System (DEPRECATED)" if [!M68K && SOUND]
     depends on [SOUND]
     inherited [!M68K && SOUND]
     config SOUND_BT878 tristate {
      prompt "BT878 audio dma" if [!M68K && SOUND!="n" && SOUND_PRIME && PCI]
      depends on [SOUND_PRIME && PCI]
      inherited [!M68K && SOUND!="n" && SOUND_PRIME && PCI]
     }
     config SOUND_BCM_CS4297A tristate {
      prompt "Crystal Sound CS4297a (for Swarm)" if [!M68K && SOUND!="n" && SOUND_PRIME && SIBYTE_SWARM]
      depends on [SOUND_PRIME && SIBYTE_SWARM]
      inherited [!M68K && SOUND!="n" && SOUND_PRIME && SIBYTE_SWARM]
     }
     config SOUND_ES1371 tristate {
      prompt "Creative Ensoniq AudioPCI 97 (ES1371)" if [!M68K && SOUND!="n" && SOUND_PRIME && PCI]
      depends on [SOUND_PRIME && PCI]
      inherited [!M68K && SOUND!="n" && SOUND_PRIME && PCI]
     }
     config SOUND_ICH tristate {
      prompt "Intel ICH (i8xx) audio support" if [!M68K && SOUND!="n" && SOUND_PRIME && PCI]
      depends on [SOUND_PRIME && PCI]
      inherited [!M68K && SOUND!="n" && SOUND_PRIME && PCI]
     }
     config SOUND_VWSND tristate {
      prompt "SGI Visual Workstation Sound" if [!M68K && SOUND!="n" && SOUND_PRIME && X86_VISWS]
      depends on [SOUND_PRIME && X86_VISWS]
      inherited [!M68K && SOUND!="n" && SOUND_PRIME && X86_VISWS]
     }
     config SOUND_HAL2 tristate {
      prompt "SGI HAL2 sound (EXPERIMENTAL)" if [!M68K && SOUND!="n" && SOUND_PRIME && SGI_IP22 && EXPERIMENTAL]
      depends on [SOUND_PRIME && SGI_IP22 && EXPERIMENTAL]
      inherited [!M68K && SOUND!="n" && SOUND_PRIME && SGI_IP22 && EXPERIMENTAL]
     }
     config SOUND_VRC5477 tristate {
      prompt "NEC Vrc5477 AC97 sound" if [!M68K && SOUND!="n" && SOUND_PRIME && DDB5477]
      depends on [SOUND_PRIME && DDB5477]
      inherited [!M68K && SOUND!="n" && SOUND_PRIME && DDB5477]
     }
     config SOUND_AU1550_AC97 tristate {
      prompt "Au1550/Au1200 AC97 Sound" if [!M68K && SOUND!="n" && SOUND_PRIME && (SOC_AU1550 || SOC_AU1200)]
      select SND_AC97_CODEC if [!M68K && SOUND!="n" && SOUND_PRIME && (SOC_AU1550 || SOC_AU1200)]
      depends on [SOUND_PRIME && (SOC_AU1550 || SOC_AU1200)]
      inherited [!M68K && SOUND!="n" && SOUND_PRIME && (SOC_AU1550 || SOC_AU1200)]
     }
     config SOUND_TRIDENT tristate {
      prompt "Trident 4DWave DX/NX, SiS 7018 or ALi 5451 PCI Audio Core" if [!M68K && SOUND!="n" && SOUND_PRIME && PCI]
      depends on [SOUND_PRIME && PCI]
      inherited [!M68K && SOUND!="n" && SOUND_PRIME && PCI]
     }
     config SOUND_MSNDCLAS tristate {
      prompt "Support for Turtle Beach MultiSound Classic, Tahiti, Monterey" if [!M68K && SOUND!="n" && SOUND_PRIME && (m && <choice> || !STANDALONE)]
      depends on [SOUND_PRIME && (m || !STANDALONE)]
      inherited [!M68K && SOUND!="n" && SOUND_PRIME && (m && <choice> || !STANDALONE)]
      config MSNDCLAS_HAVE_BOOT boolean {
       depends on [SOUND_MSNDCLAS="y" && !STANDALONE]
       default [y] if [!M68K && SOUND && SOUND_MSNDCLAS="y" && !STANDALONE]
       inherited [!M68K && SOUND && SOUND_MSNDCLAS="y" && !STANDALONE]
      }
      config MSNDCLAS_INIT_FILE string {
       prompt "Full pathname of MSNDINIT.BIN firmware file" if [!M68K && SOUND && SOUND_MSNDCLAS]
       depends on [SOUND_MSNDCLAS]
       default ["/etc/sound/msndinit.bin"] if [!M68K && SOUND && SOUND_MSNDCLAS]
       inherited [!M68K && SOUND && SOUND_MSNDCLAS]
      }
      config MSNDCLAS_PERM_FILE string {
       prompt "Full pathname of MSNDPERM.BIN firmware file" if [!M68K && SOUND && SOUND_MSNDCLAS]
       depends on [SOUND_MSNDCLAS]
       default ["/etc/sound/msndperm.bin"] if [!M68K && SOUND && SOUND_MSNDCLAS]
       inherited [!M68K && SOUND && SOUND_MSNDCLAS]
      }
      config MSNDCLAS_IRQ integer {
       prompt "MSND Classic IRQ 5, 7, 9, 10, 11, 12" if [!M68K && SOUND && SOUND_MSNDCLAS="y"]
       depends on [SOUND_MSNDCLAS="y"]
       default [5] if [!M68K && SOUND && SOUND_MSNDCLAS="y"]
       inherited [!M68K && SOUND && SOUND_MSNDCLAS="y"]
      }
      config MSNDCLAS_MEM hex {
       prompt "MSND Classic memory B0000, C8000, D0000, D8000, E0000, E8000" if [!M68K && SOUND && SOUND_MSNDCLAS="y"]
       depends on [SOUND_MSNDCLAS="y"]
       default [D0000] if [!M68K && SOUND && SOUND_MSNDCLAS="y"]
       inherited [!M68K && SOUND && SOUND_MSNDCLAS="y"]
      }
      config MSNDCLAS_IO hex {
       prompt "MSND Classic I/O 210, 220, 230, 240, 250, 260, 290, 3E0" if [!M68K && SOUND && SOUND_MSNDCLAS="y"]
       depends on [SOUND_MSNDCLAS="y"]
       default [290] if [!M68K && SOUND && SOUND_MSNDCLAS="y"]
       inherited [!M68K && SOUND && SOUND_MSNDCLAS="y"]
      }
     }
     config SOUND_MSNDPIN tristate {
      prompt "Support for Turtle Beach MultiSound Pinnacle, Fiji" if [!M68K && SOUND!="n" && SOUND_PRIME && (m && <choice> || !STANDALONE)]
      depends on [SOUND_PRIME && (m || !STANDALONE)]
      inherited [!M68K && SOUND!="n" && SOUND_PRIME && (m && <choice> || !STANDALONE)]
      config MSNDPIN_HAVE_BOOT boolean {
       depends on [SOUND_MSNDPIN="y"]
       default [y] if [!M68K && SOUND && SOUND_MSNDPIN="y"]
       inherited [!M68K && SOUND && SOUND_MSNDPIN="y"]
      }
      config MSNDPIN_INIT_FILE string {
       prompt "Full pathname of PNDSPINI.BIN firmware file" if [!M68K && SOUND && SOUND_MSNDPIN]
       depends on [SOUND_MSNDPIN]
       default ["/etc/sound/pndspini.bin"] if [!M68K && SOUND && SOUND_MSNDPIN]
       inherited [!M68K && SOUND && SOUND_MSNDPIN]
      }
      config MSNDPIN_PERM_FILE string {
       prompt "Full pathname of PNDSPERM.BIN firmware file" if [!M68K && SOUND && SOUND_MSNDPIN]
       depends on [SOUND_MSNDPIN]
       default ["/etc/sound/pndsperm.bin"] if [!M68K && SOUND && SOUND_MSNDPIN]
       inherited [!M68K && SOUND && SOUND_MSNDPIN]
      }
      config MSNDPIN_IRQ integer {
       prompt "MSND Pinnacle IRQ 5, 7, 9, 10, 11, 12" if [!M68K && SOUND && SOUND_MSNDPIN="y"]
       depends on [SOUND_MSNDPIN="y"]
       default [5] if [!M68K && SOUND && SOUND_MSNDPIN="y"]
       inherited [!M68K && SOUND && SOUND_MSNDPIN="y"]
      }
      config MSNDPIN_MEM hex {
       prompt "MSND Pinnacle memory B0000, C8000, D0000, D8000, E0000, E8000" if [!M68K && SOUND && SOUND_MSNDPIN="y"]
       depends on [SOUND_MSNDPIN="y"]
       default [D0000] if [!M68K && SOUND && SOUND_MSNDPIN="y"]
       inherited [!M68K && SOUND && SOUND_MSNDPIN="y"]
      }
      config MSNDPIN_IO hex {
       prompt "MSND Pinnacle I/O 210, 220, 230, 240, 250, 260, 290, 3E0" if [!M68K && SOUND && SOUND_MSNDPIN="y"]
       depends on [SOUND_MSNDPIN="y"]
       default [290] if [!M68K && SOUND && SOUND_MSNDPIN="y"]
       inherited [!M68K && SOUND && SOUND_MSNDPIN="y"]
      }
      config MSNDPIN_DIGITAL boolean {
       prompt "MSND Pinnacle has S/PDIF I/O" if [!M68K && SOUND && SOUND_MSNDPIN="y"]
       depends on [SOUND_MSNDPIN="y"]
       inherited [!M68K && SOUND && SOUND_MSNDPIN="y"]
      }
      config MSNDPIN_NONPNP boolean {
       prompt "MSND Pinnacle non-PnP Mode" if [!M68K && SOUND && SOUND_MSNDPIN="y"]
       depends on [SOUND_MSNDPIN="y"]
       inherited [!M68K && SOUND && SOUND_MSNDPIN="y"]
       config MSNDPIN_CFG hex {
        prompt "MSND Pinnacle config port 250,260,270" if [!M68K && SOUND && MSNDPIN_NONPNP]
        depends on [MSNDPIN_NONPNP]
        default [250] if [!M68K && SOUND && MSNDPIN_NONPNP]
        inherited [!M68K && SOUND && MSNDPIN_NONPNP]
       }
       config MSNDPIN_MPU_IO hex {
        prompt "MSND Pinnacle MPU I/O (e.g. 330)" if [!M68K && SOUND && MSNDPIN_NONPNP]
        depends on [MSNDPIN_NONPNP]
        default [0] if [!M68K && SOUND && MSNDPIN_NONPNP]
        inherited [!M68K && SOUND && MSNDPIN_NONPNP]
       }
       config MSNDPIN_MPU_IRQ integer {
        prompt "MSND Pinnacle MPU IRQ (e.g. 9)" if [!M68K && SOUND && MSNDPIN_NONPNP]
        depends on [MSNDPIN_NONPNP]
        default [0] if [!M68K && SOUND && MSNDPIN_NONPNP]
        inherited [!M68K && SOUND && MSNDPIN_NONPNP]
       }
       config MSNDPIN_IDE_IO0 hex {
        prompt "MSND Pinnacle IDE I/O 0 (e.g. 170)" if [!M68K && SOUND && MSNDPIN_NONPNP]
        depends on [MSNDPIN_NONPNP]
        default [0] if [!M68K && SOUND && MSNDPIN_NONPNP]
        inherited [!M68K && SOUND && MSNDPIN_NONPNP]
       }
       config MSNDPIN_IDE_IO1 hex {
        prompt "MSND Pinnacle IDE I/O 1 (e.g. 376)" if [!M68K && SOUND && MSNDPIN_NONPNP]
        depends on [MSNDPIN_NONPNP]
        default [0] if [!M68K && SOUND && MSNDPIN_NONPNP]
        inherited [!M68K && SOUND && MSNDPIN_NONPNP]
       }
       config MSNDPIN_IDE_IRQ integer {
        prompt "MSND Pinnacle IDE IRQ (e.g. 15)" if [!M68K && SOUND && MSNDPIN_NONPNP]
        depends on [MSNDPIN_NONPNP]
        default [0] if [!M68K && SOUND && MSNDPIN_NONPNP]
        inherited [!M68K && SOUND && MSNDPIN_NONPNP]
       }
       config MSNDPIN_JOYSTICK_IO hex {
        prompt "MSND Pinnacle joystick I/O (e.g. 200)" if [!M68K && SOUND && MSNDPIN_NONPNP]
        depends on [MSNDPIN_NONPNP]
        default [0] if [!M68K && SOUND && MSNDPIN_NONPNP]
        inherited [!M68K && SOUND && MSNDPIN_NONPNP]
       }
      }
     }
     config MSND_FIFOSIZE integer {
      prompt "MSND buffer size (kB)" if [!M68K && SOUND && SOUND_PRIME && (SOUND_MSNDPIN="y" || SOUND_MSNDCLAS="y")]
      depends on [SOUND_PRIME && (SOUND_MSNDPIN="y" || SOUND_MSNDCLAS="y")]
      default [128] if [!M68K && SOUND && SOUND_PRIME && (SOUND_MSNDPIN="y" || SOUND_MSNDCLAS="y")]
      inherited [!M68K && SOUND && SOUND_PRIME && (SOUND_MSNDPIN="y" || SOUND_MSNDCLAS="y")]
     }
     config SOUND_VIA82CXXX tristate {
      prompt "VIA 82C686 Audio Codec" if [!M68K && SOUND!="n" && SOUND_PRIME && PCI]
      depends on [SOUND_PRIME && PCI]
      inherited [!M68K && SOUND!="n" && SOUND_PRIME && PCI]
      config MIDI_VIA82CXXX boolean {
       prompt "VIA 82C686 MIDI" if [!M68K && SOUND && SOUND_VIA82CXXX && ISA_DMA_API]
       depends on [SOUND_VIA82CXXX && ISA_DMA_API]
       inherited [!M68K && SOUND && SOUND_VIA82CXXX && ISA_DMA_API]
      }
     }
     config SOUND_OSS tristate {
      prompt "OSS sound modules" if [!M68K && SOUND!="n" && SOUND_PRIME && ISA_DMA_API]
      depends on [SOUND_PRIME && ISA_DMA_API]
      inherited [!M68K && SOUND!="n" && SOUND_PRIME && ISA_DMA_API]
      config SOUND_TRACEINIT boolean {
       prompt "Verbose initialisation" if [!M68K && SOUND && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [!M68K && SOUND && SOUND_OSS]
      }
      config SOUND_DMAP boolean {
       prompt "Persistent DMA buffers" if [!M68K && SOUND && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [!M68K && SOUND && SOUND_OSS]
      }
      config SOUND_CS4232 tristate {
       prompt "Crystal CS4232 based (PnP) cards" if [!M68K && SOUND!="n" && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [!M68K && SOUND!="n" && SOUND_OSS]
      }
      config SOUND_SSCAPE tristate {
       prompt "Ensoniq SoundScape support" if [!M68K && SOUND!="n" && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [!M68K && SOUND!="n" && SOUND_OSS]
      }
      config SOUND_VMIDI tristate {
       prompt "Loopback MIDI device support" if [!M68K && SOUND!="n" && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [!M68K && SOUND!="n" && SOUND_OSS]
      }
      config SOUND_TRIX tristate {
       prompt "MediaTrix AudioTrix Pro support" if [!M68K && SOUND!="n" && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [!M68K && SOUND!="n" && SOUND_OSS]
       config TRIX_HAVE_BOOT boolean {
        prompt "Have TRXPRO.HEX firmware file" if [!M68K && SOUND && SOUND_TRIX="y" && !STANDALONE]
        depends on [SOUND_TRIX="y" && !STANDALONE]
        inherited [!M68K && SOUND && SOUND_TRIX="y" && !STANDALONE]
        config TRIX_BOOT_FILE string {
         prompt "Full pathname of TRXPRO.HEX firmware file" if [!M68K && SOUND && TRIX_HAVE_BOOT]
         depends on [TRIX_HAVE_BOOT]
         default ["/etc/sound/trxpro.hex"] if [!M68K && SOUND && TRIX_HAVE_BOOT]
         inherited [!M68K && SOUND && TRIX_HAVE_BOOT]
        }
       }
      }
      config SOUND_MSS tristate {
       prompt "Microsoft Sound System support" if [!M68K && SOUND!="n" && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [!M68K && SOUND!="n" && SOUND_OSS]
      }
      config SOUND_MPU401 tristate {
       prompt "MPU-401 support (NOT for SB16)" if [!M68K && SOUND!="n" && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [!M68K && SOUND!="n" && SOUND_OSS]
      }
      config SOUND_PAS tristate {
       prompt "ProAudioSpectrum 16 support" if [!M68K && SOUND!="n" && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [!M68K && SOUND!="n" && SOUND_OSS]
       config PAS_JOYSTICK boolean {
        prompt "Enable PAS16 joystick port" if [!M68K && SOUND && SOUND_PAS="y"]
        depends on [SOUND_PAS="y"]
        inherited [!M68K && SOUND && SOUND_PAS="y"]
       }
      }
      config SOUND_PSS tristate {
       prompt "PSS (AD1848, ADSP-2115, ESC614) support" if [!M68K && SOUND!="n" && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [!M68K && SOUND!="n" && SOUND_OSS]
       config PSS_MIXER boolean {
        prompt "Enable PSS mixer (Beethoven ADSP-16 and other compatible)" if [!M68K && SOUND && SOUND_PSS]
        depends on [SOUND_PSS]
        inherited [!M68K && SOUND && SOUND_PSS]
       }
       config PSS_HAVE_BOOT boolean {
        prompt "Have DSPxxx.LD firmware file" if [!M68K && SOUND && SOUND_PSS && !STANDALONE]
        depends on [SOUND_PSS && !STANDALONE]
        inherited [!M68K && SOUND && SOUND_PSS && !STANDALONE]
        config PSS_BOOT_FILE string {
         prompt "Full pathname of DSPxxx.LD firmware file" if [!M68K && SOUND && PSS_HAVE_BOOT]
         depends on [PSS_HAVE_BOOT]
         default ["/etc/sound/dsp001.ld"] if [!M68K && SOUND && PSS_HAVE_BOOT]
         inherited [!M68K && SOUND && PSS_HAVE_BOOT]
        }
       }
      }
      config SOUND_SB tristate {
       prompt "100% Sound Blaster compatibles (SB16/32/64, ESS, Jazz16) support" if [!M68K && SOUND!="n" && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [!M68K && SOUND!="n" && SOUND_OSS]
      }
      config SOUND_YM3812 tristate {
       prompt "Yamaha FM synthesizer (YM3812/OPL-3) support" if [!M68K && SOUND!="n" && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [!M68K && SOUND!="n" && SOUND_OSS]
      }
      config SOUND_UART6850 tristate {
       prompt "6850 UART support" if [!M68K && SOUND!="n" && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [!M68K && SOUND!="n" && SOUND_OSS]
      }
      config SOUND_AEDSP16 tristate {
       prompt "Gallant Audio Cards (SC-6000 and SC-6600 based)" if [!M68K && SOUND!="n" && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [!M68K && SOUND!="n" && SOUND_OSS]
       config SC6600 boolean {
        prompt "SC-6600 based audio cards (new Audio Excel DSP 16)" if [!M68K && SOUND && SOUND_AEDSP16]
        depends on [SOUND_AEDSP16]
        inherited [!M68K && SOUND && SOUND_AEDSP16]
        config SC6600_JOY boolean {
         prompt "Activate SC-6600 Joystick Interface" if [!M68K && SOUND && SC6600]
         depends on [SC6600]
         inherited [!M68K && SOUND && SC6600]
        }
        config SC6600_CDROM integer {
         prompt "SC-6600 CDROM Interface (4=None, 3=IDE, 1=Panasonic, 0=?Sony?)" if [!M68K && SOUND && SC6600]
         depends on [SC6600]
         default [4] if [!M68K && SOUND && SC6600]
         inherited [!M68K && SOUND && SC6600]
        }
        config SC6600_CDROMBASE hex {
         prompt "SC-6600 CDROM Interface I/O Address" if [!M68K && SOUND && SC6600]
         depends on [SC6600]
         default [0] if [!M68K && SOUND && SC6600]
         inherited [!M68K && SOUND && SC6600]
        }
       }
       choice boolean optional {
        prompt "Audio Excel DSP 16" if [!M68K && SOUND && SOUND_AEDSP16]
        depends on [SOUND_AEDSP16]
        config AEDSP16_MSS boolean {
         prompt "MSS emulation" if [<choice> && SOUND_MSS]
         depends on [SOUND_MSS]
         inherited [<choice> && SOUND_MSS]
        }
        config AEDSP16_SBPRO boolean {
         prompt "SBPro emulation" if [<choice> && SOUND_SB]
         depends on [SOUND_SB]
         inherited [<choice> && SOUND_SB]
        }
       }
       config AEDSP16_MPU401 boolean {
        prompt "Audio Excel DSP 16 (MPU401 emulation)" if [!M68K && SOUND && SOUND_AEDSP16 && SOUND_MPU401]
        depends on [SOUND_AEDSP16 && SOUND_MPU401]
        inherited [!M68K && SOUND && SOUND_AEDSP16 && SOUND_MPU401]
       }
      }
      config SOUND_VIDC tristate {
       prompt "VIDC 16-bit sound" if [!M68K && SOUND!="n" && ARM && (ARCH_ACORN || ARCH_CLPS7500) && SOUND_OSS]
       depends on [ARM && (ARCH_ACORN || ARCH_CLPS7500) && SOUND_OSS]
       inherited [!M68K && SOUND!="n" && ARM && (ARCH_ACORN || ARCH_CLPS7500) && SOUND_OSS]
      }
      config SOUND_WAVEARTIST tristate {
       prompt "Netwinder WaveArtist" if [!M68K && SOUND!="n" && ARM && SOUND_OSS && ARCH_NETWINDER]
       depends on [ARM && SOUND_OSS && ARCH_NETWINDER]
       inherited [!M68K && SOUND!="n" && ARM && SOUND_OSS && ARCH_NETWINDER]
      }
     }
     config SOUND_TVMIXER tristate {
      prompt "TV card (bt848) mixer support" if [!M68K && SOUND!="n" && SOUND_PRIME && I2C && VIDEO_V4L1]
      depends on [SOUND_PRIME && I2C && VIDEO_V4L1]
      inherited [!M68K && SOUND!="n" && SOUND_PRIME && I2C && VIDEO_V4L1]
     }
    }
    config SOUND_KAHLUA tristate {
     prompt "XpressAudio Sound Blaster emulation" if [!M68K && SOUND!="n" && SOUND_SB]
     depends on [SOUND_SB]
     inherited [!M68K && SOUND!="n" && SOUND_SB]
    }
    config SOUND_SH_DAC_AUDIO tristate {
     prompt "SuperH DAC audio support" if [!M68K && SOUND!="n" && SOUND_PRIME && CPU_SH3]
     depends on [SOUND_PRIME && CPU_SH3]
     inherited [!M68K && SOUND!="n" && SOUND_PRIME && CPU_SH3]
     config SOUND_SH_DAC_AUDIO_CHANNEL integer {
      prompt "DAC channel" if [!M68K && SOUND && SOUND_SH_DAC_AUDIO]
      default [1] if [!M68K && SOUND && SOUND_SH_DAC_AUDIO]
      depends on [SOUND_SH_DAC_AUDIO]
      inherited [!M68K && SOUND && SOUND_SH_DAC_AUDIO]
     }
    }
   }
  }
  config AC97_BUS tristate {
  }
 }
 menu "HID Devices" {
  depends on [INPUT]
  config HID tristate {
   prompt "Generic HID support" if [INPUT]
   depends on [INPUT]
   default [y] if [INPUT]
   inherited [INPUT]
  }
 }
 menu "USB support" {
  config USB_ARCH_HAS_HCD boolean {
   default [y] if [USB_ARCH_HAS_OHCI]
   default [y] if [USB_ARCH_HAS_EHCI]
   default [y] if [ARM]
   default [PCI] if []
  }
  config USB_ARCH_HAS_OHCI boolean {
   default [y] if [SA1111]
   default [y] if [ARCH_OMAP]
   default [y] if [ARCH_LH7A404]
   default [y] if [ARCH_S3C2410]
   default [y] if [PXA27x]
   default [y] if [ARCH_EP93XX]
   default [y] if [ARCH_AT91]
   default [y] if [ARCH_PNX4008]
   default [y] if [STB03xxx]
   default [y] if [PPC_MPC52xx]
   default [y] if [SOC_AU1X00]
   default [PCI] if []
  }
  config USB_ARCH_HAS_EHCI boolean {
   default [y] if [PPC_83xx]
   default [y] if [SOC_AU1200]
   default [PCI] if []
  }
  config USB tristate {
   prompt "Support for Host-side USB" if [USB_ARCH_HAS_HCD]
   depends on [USB_ARCH_HAS_HCD]
   inherited [USB_ARCH_HAS_HCD]
   config USB_DEBUG boolean {
    prompt "USB verbose debug messages" if [USB]
    depends on [USB]
    inherited [USB]
   }
   config USB_DEVICEFS boolean {
    prompt "USB device filesystem" if [USB]
    depends on [USB]
    inherited [USB]
   }
   config USB_BANDWIDTH boolean {
    prompt "Enforce USB bandwidth allocation (EXPERIMENTAL)" if [USB && EXPERIMENTAL]
    depends on [USB && EXPERIMENTAL]
    inherited [USB && EXPERIMENTAL]
   }
   config USB_DYNAMIC_MINORS boolean {
    prompt "Dynamic USB minor allocation (EXPERIMENTAL)" if [USB && EXPERIMENTAL]
    depends on [USB && EXPERIMENTAL]
    inherited [USB && EXPERIMENTAL]
   }
   config USB_SUSPEND boolean {
    prompt "USB selective suspend/resume and wakeup (EXPERIMENTAL)" if [USB && PM && EXPERIMENTAL]
    depends on [USB && PM && EXPERIMENTAL]
    inherited [USB && PM && EXPERIMENTAL]
   }
   config USB_OTG boolean {
    depends on [USB && EXPERIMENTAL]
    select USB_SUSPEND if [USB && EXPERIMENTAL]
    default [n] if [USB && EXPERIMENTAL]
    prompt "OTG Support" if [<choice> && USB_GADGET_OMAP && ARCH_OMAP_OTG && USB_OHCI_HCD]
    depends on [USB_GADGET_OMAP && ARCH_OMAP_OTG && USB_OHCI_HCD]
    inherited [USB && EXPERIMENTAL]
   }
   config USB_OTG_WHITELIST boolean {
    prompt "Rely on OTG Targeted Peripherals List" if [USB_OTG]
    depends on [USB_OTG]
    default [y] if [USB_OTG]
    inherited [USB_OTG]
   }
   config USB_OTG_BLACKLIST_HUB boolean {
    prompt "Disable external hubs" if [USB_OTG]
    depends on [USB_OTG]
    inherited [USB_OTG]
   }
   config USB_EHCI_HCD tristate {
    prompt "EHCI HCD (USB 2.0) support" if [USB && USB_ARCH_HAS_EHCI]
    depends on [USB && USB_ARCH_HAS_EHCI]
    inherited [USB && USB_ARCH_HAS_EHCI]
    config USB_EHCI_SPLIT_ISO boolean {
     prompt "Full speed ISO transactions (EXPERIMENTAL)" if [USB_EHCI_HCD && EXPERIMENTAL]
     depends on [USB_EHCI_HCD && EXPERIMENTAL]
     default [n] if [USB_EHCI_HCD && EXPERIMENTAL]
     inherited [USB_EHCI_HCD && EXPERIMENTAL]
    }
    config USB_EHCI_ROOT_HUB_TT boolean {
     prompt "Root Hub Transaction Translators (EXPERIMENTAL)" if [USB_EHCI_HCD && EXPERIMENTAL]
     depends on [USB_EHCI_HCD && EXPERIMENTAL]
     inherited [USB_EHCI_HCD && EXPERIMENTAL]
    }
    config USB_EHCI_TT_NEWSCHED boolean {
     prompt "Improved Transaction Translator scheduling (EXPERIMENTAL)" if [USB_EHCI_HCD && EXPERIMENTAL]
     depends on [USB_EHCI_HCD && EXPERIMENTAL]
     inherited [USB_EHCI_HCD && EXPERIMENTAL]
    }
   }
   config USB_ISP116X_HCD tristate {
    prompt "ISP116X HCD support" if [USB]
    depends on [USB]
    inherited [USB]
   }
   config USB_OHCI_HCD tristate {
    prompt "OHCI HCD support" if [USB && USB_ARCH_HAS_OHCI]
    depends on [USB && USB_ARCH_HAS_OHCI]
    select ISP1301_OMAP if [USB && USB_ARCH_HAS_OHCI && (MACH_OMAP_H2 || MACH_OMAP_H3)]
    select I2C if [USB && USB_ARCH_HAS_OHCI && ARCH_PNX4008]
    inherited [USB && USB_ARCH_HAS_OHCI]
    config USB_OHCI_HCD_PPC_SOC boolean {
     prompt "OHCI support for on-chip PPC USB controller" if [USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
     depends on [USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
     default [y] if [USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
     select USB_OHCI_BIG_ENDIAN if [USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
     inherited [USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
    }
    config USB_OHCI_HCD_PCI boolean {
     prompt "OHCI support for PCI-bus USB controllers" if [USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx)]
     depends on [USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx)]
     default [y] if [USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx)]
     select USB_OHCI_LITTLE_ENDIAN if [USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx)]
     inherited [USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx)]
    }
    config USB_OHCI_BIG_ENDIAN boolean {
     depends on [USB_OHCI_HCD]
     default [n] if [USB_OHCI_HCD]
     inherited [USB_OHCI_HCD]
    }
    config USB_OHCI_LITTLE_ENDIAN boolean {
     depends on [USB_OHCI_HCD]
     default [n] if [USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
     default [y] if [USB_OHCI_HCD]
     inherited [USB_OHCI_HCD]
    }
   }
   config USB_UHCI_HCD tristate {
    prompt "UHCI HCD (most Intel and VIA) support" if [USB && PCI]
    depends on [USB && PCI]
    inherited [USB && PCI]
   }
   config USB_U132_HCD tristate {
    prompt "Elan U132 Adapter Host Controller" if [USB && USB_FTDI_ELAN]
    depends on [USB && USB_FTDI_ELAN]
    default [M] if [USB && USB_FTDI_ELAN]
    inherited [USB && USB_FTDI_ELAN]
   }
   config USB_SL811_HCD tristate {
    prompt "SL811HS HCD support" if [USB]
    depends on [USB]
    inherited [USB]
    config USB_SL811_CS tristate {
     prompt "CF/PCMCIA support for SL811HS HCD" if [USB_SL811_HCD && PCMCIA]
     depends on [USB_SL811_HCD && PCMCIA]
     inherited [USB_SL811_HCD && PCMCIA]
    }
   }
   config USB_ACM tristate {
    prompt "USB Modem (CDC ACM) support" if [USB]
    depends on [USB]
    inherited [USB]
   }
   config USB_PRINTER tristate {
    prompt "USB Printer support" if [USB]
    depends on [USB]
    inherited [USB]
   }
  }
  config USB_STORAGE tristate {
   prompt "USB Mass Storage support" if [USB && SCSI]
   depends on [USB && SCSI]
   inherited [USB && SCSI]
   config USB_STORAGE_DEBUG boolean {
    prompt "USB Mass Storage verbose debug" if [USB_STORAGE]
    depends on [USB_STORAGE]
    inherited [USB_STORAGE]
   }
   config USB_STORAGE_DATAFAB boolean {
    prompt "Datafab Compact Flash Reader support (EXPERIMENTAL)" if [USB_STORAGE && EXPERIMENTAL]
    depends on [USB_STORAGE && EXPERIMENTAL]
    inherited [USB_STORAGE && EXPERIMENTAL]
   }
   config USB_STORAGE_FREECOM boolean {
    prompt "Freecom USB/ATAPI Bridge support" if [USB_STORAGE]
    depends on [USB_STORAGE]
    inherited [USB_STORAGE]
   }
   config USB_STORAGE_ISD200 boolean {
    prompt "ISD-200 USB/ATA Bridge support" if [USB_STORAGE && (BLK_DEV_IDE="y" || BLK_DEV_IDE="USB_STORAGE")]
    depends on [USB_STORAGE]
    depends on [BLK_DEV_IDE="y" || BLK_DEV_IDE="USB_STORAGE"]
    inherited [USB_STORAGE && (BLK_DEV_IDE="y" || BLK_DEV_IDE="USB_STORAGE")]
   }
   config USB_STORAGE_DPCM boolean {
    prompt "Microtech/ZiO! CompactFlash/SmartMedia support" if [USB_STORAGE]
    depends on [USB_STORAGE]
    inherited [USB_STORAGE]
   }
   config USB_STORAGE_USBAT boolean {
    prompt "USBAT/USBAT02-based storage support (EXPERIMENTAL)" if [USB_STORAGE && EXPERIMENTAL]
    depends on [USB_STORAGE && EXPERIMENTAL]
    inherited [USB_STORAGE && EXPERIMENTAL]
   }
   config USB_STORAGE_SDDR09 boolean {
    prompt "SanDisk SDDR-09 (and other SmartMedia) support (EXPERIMENTAL)" if [USB_STORAGE && EXPERIMENTAL]
    depends on [USB_STORAGE && EXPERIMENTAL]
    inherited [USB_STORAGE && EXPERIMENTAL]
   }
   config USB_STORAGE_SDDR55 boolean {
    prompt "SanDisk SDDR-55 SmartMedia support (EXPERIMENTAL)" if [USB_STORAGE && EXPERIMENTAL]
    depends on [USB_STORAGE && EXPERIMENTAL]
    inherited [USB_STORAGE && EXPERIMENTAL]
   }
   config USB_STORAGE_JUMPSHOT boolean {
    prompt "Lexar Jumpshot Compact Flash Reader (EXPERIMENTAL)" if [USB_STORAGE && EXPERIMENTAL]
    depends on [USB_STORAGE && EXPERIMENTAL]
    inherited [USB_STORAGE && EXPERIMENTAL]
   }
   config USB_STORAGE_ALAUDA boolean {
    prompt "Olympus MAUSB-10/Fuji DPC-R1 support (EXPERIMENTAL)" if [USB_STORAGE && EXPERIMENTAL]
    depends on [USB_STORAGE && EXPERIMENTAL]
    inherited [USB_STORAGE && EXPERIMENTAL]
   }
   config USB_STORAGE_ONETOUCH boolean {
    prompt "Support OneTouch Button on Maxtor Hard Drives (EXPERIMENTAL)" if [USB_STORAGE && INPUT_EVDEV && EXPERIMENTAL && !PM]
    depends on [USB_STORAGE && INPUT_EVDEV && EXPERIMENTAL && !PM]
    inherited [USB_STORAGE && INPUT_EVDEV && EXPERIMENTAL && !PM]
   }
   config USB_STORAGE_KARMA boolean {
    prompt "Support for Rio Karma music player" if [USB_STORAGE]
    depends on [USB_STORAGE]
    inherited [USB_STORAGE]
   }
  }
  config USB_LIBUSUAL boolean {
   prompt "The shared table of common (or usual) storage devices" if [USB]
   depends on [USB]
   inherited [USB]
  }
  config USB_HID tristate {
   prompt "USB Human Interface Device (full HID) support" if [USB && INPUT]
   default [y] if [USB && INPUT]
   depends on [USB && INPUT]
   select HID if [USB && INPUT]
   inherited [USB && INPUT]
   config USB_HIDINPUT_POWERBOOK boolean {
    prompt "Enable support for iBook/PowerBook special keys" if [USB_HID]
    default [n] if [USB_HID]
    depends on [USB_HID]
    inherited [USB_HID]
   }
   config HID_FF boolean {
    prompt "Force feedback support (EXPERIMENTAL)" if [USB_HID && EXPERIMENTAL]
    depends on [USB_HID && EXPERIMENTAL]
    inherited [USB_HID && EXPERIMENTAL]
    config HID_PID boolean {
     prompt "PID device support" if [HID_FF]
     depends on [HID_FF]
     inherited [HID_FF]
    }
    config LOGITECH_FF boolean {
     prompt "Logitech WingMan *3D support" if [HID_FF]
     depends on [HID_FF]
     select INPUT_FF_MEMLESS if [HID_FF && USB_HID]
     inherited [HID_FF]
    }
    config THRUSTMASTER_FF boolean {
     prompt "ThrustMaster FireStorm Dual Power 2 support (EXPERIMENTAL)" if [HID_FF && EXPERIMENTAL]
     depends on [HID_FF && EXPERIMENTAL]
     select INPUT_FF_MEMLESS if [HID_FF && EXPERIMENTAL && USB_HID]
     inherited [HID_FF && EXPERIMENTAL]
    }
    config ZEROPLUS_FF boolean {
     prompt "Zeroplus based game controller support" if [HID_FF]
     depends on [HID_FF]
     select INPUT_FF_MEMLESS if [HID_FF && USB_HID]
     inherited [HID_FF]
    }
   }
   config USB_HIDDEV boolean {
    prompt "/dev/hiddev raw HID device support" if [USB_HID]
    depends on [USB_HID]
    inherited [USB_HID]
   }
  }
  menu "USB HID Boot Protocol drivers" {
   depends on [USB!="n" && USB_HID!="y"]
   config USB_KBD tristate {
    prompt "USB HIDBP Keyboard (simple Boot) support" if [USB_HID!="y" && USB && INPUT]
    depends on [USB && INPUT]
    inherited [USB_HID!="y" && USB && INPUT]
   }
   config USB_MOUSE tristate {
    prompt "USB HIDBP Mouse (simple Boot) support" if [USB_HID!="y" && USB && INPUT]
    depends on [USB && INPUT]
    inherited [USB_HID!="y" && USB && INPUT]
   }
  }
  config USB_AIPTEK tristate {
   prompt "Aiptek 6000U/8000U tablet support" if [USB && INPUT]
   depends on [USB && INPUT]
   inherited [USB && INPUT]
  }
  config USB_WACOM tristate {
   prompt "Wacom Intuos/Graphire tablet support" if [USB && INPUT]
   depends on [USB && INPUT]
   inherited [USB && INPUT]
  }
  config USB_ACECAD tristate {
   prompt "Acecad Flair tablet support" if [USB && INPUT]
   depends on [USB && INPUT]
   inherited [USB && INPUT]
  }
  config USB_KBTAB tristate {
   prompt "KB Gear JamStudio tablet support" if [USB && INPUT]
   depends on [USB && INPUT]
   inherited [USB && INPUT]
  }
  config USB_POWERMATE tristate {
   prompt "Griffin PowerMate and Contour Jog support" if [USB && INPUT]
   depends on [USB && INPUT]
   inherited [USB && INPUT]
  }
  config USB_TOUCHSCREEN tristate {
   prompt "USB Touchscreen Driver" if [USB && INPUT]
   depends on [USB && INPUT]
   inherited [USB && INPUT]
   config USB_TOUCHSCREEN_EGALAX boolean {
    default [y] if [USB_TOUCHSCREEN]
    prompt "eGalax, eTurboTouch CT-410/510/700 device support" if [USB_TOUCHSCREEN && EMBEDDED]
    depends on [USB_TOUCHSCREEN]
    inherited [USB_TOUCHSCREEN]
   }
   config USB_TOUCHSCREEN_PANJIT boolean {
    default [y] if [USB_TOUCHSCREEN]
    prompt "PanJit device support" if [USB_TOUCHSCREEN && EMBEDDED]
    depends on [USB_TOUCHSCREEN]
    inherited [USB_TOUCHSCREEN]
   }
   config USB_TOUCHSCREEN_3M boolean {
    default [y] if [USB_TOUCHSCREEN]
    prompt "3M/Microtouch EX II series device support" if [USB_TOUCHSCREEN && EMBEDDED]
    depends on [USB_TOUCHSCREEN]
    inherited [USB_TOUCHSCREEN]
   }
   config USB_TOUCHSCREEN_ITM boolean {
    default [y] if [USB_TOUCHSCREEN]
    prompt "ITM device support" if [USB_TOUCHSCREEN && EMBEDDED]
    depends on [USB_TOUCHSCREEN]
    inherited [USB_TOUCHSCREEN]
   }
   config USB_TOUCHSCREEN_ETURBO boolean {
    default [y] if [USB_TOUCHSCREEN]
    prompt "eTurboTouch (non-eGalax compatible) device support" if [USB_TOUCHSCREEN && EMBEDDED]
    depends on [USB_TOUCHSCREEN]
    inherited [USB_TOUCHSCREEN]
   }
   config USB_TOUCHSCREEN_GUNZE boolean {
    default [y] if [USB_TOUCHSCREEN]
    prompt "Gunze AHL61 device support" if [USB_TOUCHSCREEN && EMBEDDED]
    depends on [USB_TOUCHSCREEN]
    inherited [USB_TOUCHSCREEN]
   }
   config USB_TOUCHSCREEN_DMC_TSC10 boolean {
    default [y] if [USB_TOUCHSCREEN]
    prompt "DMC TSC-10/25 device support" if [USB_TOUCHSCREEN && EMBEDDED]
    depends on [USB_TOUCHSCREEN]
    inherited [USB_TOUCHSCREEN]
   }
  }
  config USB_YEALINK tristate {
   prompt "Yealink usb-p1k voip phone" if [USB && INPUT && EXPERIMENTAL]
   depends on [USB && INPUT && EXPERIMENTAL]
   inherited [USB && INPUT && EXPERIMENTAL]
  }
  config USB_XPAD tristate {
   prompt "X-Box gamepad support" if [USB && INPUT]
   depends on [USB && INPUT]
   inherited [USB && INPUT]
  }
  config USB_ATI_REMOTE tristate {
   prompt "ATI / X10 USB RF remote control" if [USB && INPUT]
   depends on [USB && INPUT]
   inherited [USB && INPUT]
  }
  config USB_ATI_REMOTE2 tristate {
   prompt "ATI / Philips USB RF remote control" if [USB && INPUT]
   depends on [USB && INPUT]
   inherited [USB && INPUT]
  }
  config USB_KEYSPAN_REMOTE tristate {
   prompt "Keyspan DMR USB remote control (EXPERIMENTAL)" if [USB && INPUT && EXPERIMENTAL]
   depends on [USB && INPUT && EXPERIMENTAL]
   inherited [USB && INPUT && EXPERIMENTAL]
  }
  config USB_APPLETOUCH tristate {
   prompt "Apple USB Touchpad support" if [USB && INPUT]
   depends on [USB && INPUT]
   inherited [USB && INPUT]
  }
  config USB_MDC800 tristate {
   prompt "USB Mustek MDC800 Digital Camera support (EXPERIMENTAL)" if [USB && EXPERIMENTAL]
   depends on [USB && EXPERIMENTAL]
   inherited [USB && EXPERIMENTAL]
  }
  config USB_MICROTEK tristate {
   prompt "Microtek X6USB scanner support" if [USB && SCSI]
   depends on [USB && SCSI]
   inherited [USB && SCSI]
  }
  menu "USB Network Adapters" {
   depends on [USB && NET]
   config USB_CATC tristate {
    prompt "USB CATC NetMate-based Ethernet device support (EXPERIMENTAL)" if [USB && NET && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    select CRC32 if [USB && NET && EXPERIMENTAL]
    inherited [USB && NET && EXPERIMENTAL]
   }
   config USB_KAWETH tristate {
    prompt "USB KLSI KL5USB101-based ethernet device support" if [USB && NET]
    inherited [USB && NET]
   }
   config USB_PEGASUS tristate {
    prompt "USB Pegasus/Pegasus-II based ethernet device support" if [USB && NET]
    select MII if [USB && NET]
    inherited [USB && NET]
   }
   config USB_RTL8150 tristate {
    prompt "USB RTL8150 based ethernet device support (EXPERIMENTAL)" if [USB && NET && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [USB && NET && EXPERIMENTAL]
   }
   config USB_USBNET_MII tristate {
    default [n] if [USB && NET]
    inherited [USB && NET]
   }
   config USB_USBNET tristate {
    prompt "Multi-purpose USB Networking Framework" if [USB && NET]
    select MII if [USB && NET && USBNET_MII!="n"]
    inherited [USB && NET]
    config USB_NET_AX8817X tristate {
     prompt "ASIX AX88xxx Based USB 2.0 Ethernet Adapters" if [USB && NET && USB_USBNET && NET_ETHERNET]
     depends on [USB_USBNET && NET_ETHERNET]
     select CRC32 if [USB && NET && USB_USBNET && NET_ETHERNET]
     select USB_USBNET_MII if [USB && NET && USB_USBNET && NET_ETHERNET]
     default [y] if [USB && NET && USB_USBNET && NET_ETHERNET]
     inherited [USB && NET && USB_USBNET && NET_ETHERNET]
    }
    config USB_NET_CDCETHER tristate {
     prompt "CDC Ethernet support (smart devices such as cable modems)" if [USB && NET && USB_USBNET]
     depends on [USB_USBNET]
     default [y] if [USB && NET && USB_USBNET]
     inherited [USB && NET && USB_USBNET]
    }
    config USB_NET_GL620A tristate {
     prompt "GeneSys GL620USB-A based cables" if [USB && NET && USB_USBNET]
     depends on [USB_USBNET]
     inherited [USB && NET && USB_USBNET]
    }
    config USB_NET_NET1080 tristate {
     prompt "NetChip 1080 based cables (Laplink, ...)" if [USB && NET && USB_USBNET]
     default [y] if [USB && NET && USB_USBNET]
     depends on [USB_USBNET]
     inherited [USB && NET && USB_USBNET]
    }
    config USB_NET_PLUSB tristate {
     prompt "Prolific PL-2301/2302 based cables" if [USB && NET && USB_USBNET && EXPERIMENTAL]
     depends on [USB_USBNET && EXPERIMENTAL]
     inherited [USB && NET && USB_USBNET && EXPERIMENTAL]
    }
    config USB_NET_MCS7830 tristate {
     prompt "MosChip MCS7830 based Ethernet adapters" if [USB && NET && USB_USBNET]
     depends on [USB_USBNET]
     select USB_USBNET_MII if [USB && NET && USB_USBNET]
     inherited [USB && NET && USB_USBNET]
    }
    config USB_NET_RNDIS_HOST tristate {
     prompt "Host for RNDIS devices (EXPERIMENTAL)" if [USB && NET && USB_USBNET && EXPERIMENTAL]
     depends on [USB_USBNET && EXPERIMENTAL]
     select USB_NET_CDCETHER if [USB && NET && USB_USBNET && EXPERIMENTAL]
     inherited [USB && NET && USB_USBNET && EXPERIMENTAL]
    }
    config USB_NET_CDC_SUBSET tristate {
     prompt "Simple USB Network Links (CDC Ethernet subset)" if [USB && NET && USB_USBNET]
     depends on [USB_USBNET]
     inherited [USB && NET && USB_USBNET]
     config USB_ALI_M5632 boolean {
      prompt "ALi M5632 based 'USB 2.0 Data Link' cables" if [USB && NET && USB_NET_CDC_SUBSET]
      depends on [USB_NET_CDC_SUBSET]
      inherited [USB && NET && USB_NET_CDC_SUBSET]
     }
     config USB_AN2720 boolean {
      prompt "AnchorChips 2720 based cables (Xircom PGUNET, ...)" if [USB && NET && USB_NET_CDC_SUBSET]
      depends on [USB_NET_CDC_SUBSET]
      inherited [USB && NET && USB_NET_CDC_SUBSET]
     }
     config USB_BELKIN boolean {
      prompt "eTEK based host-to-host cables (Advance, Belkin, ...)" if [USB && NET && USB_NET_CDC_SUBSET]
      depends on [USB_NET_CDC_SUBSET]
      default [y] if [USB && NET && USB_NET_CDC_SUBSET]
      inherited [USB && NET && USB_NET_CDC_SUBSET]
     }
     config USB_ARMLINUX boolean {
      prompt "Embedded ARM Linux links (iPaq, ...)" if [USB && NET && USB_NET_CDC_SUBSET]
      depends on [USB_NET_CDC_SUBSET]
      default [y] if [USB && NET && USB_NET_CDC_SUBSET]
      inherited [USB && NET && USB_NET_CDC_SUBSET]
     }
     config USB_EPSON2888 boolean {
      prompt "Epson 2888 based firmware (DEVELOPMENT)" if [USB && NET && USB_NET_CDC_SUBSET]
      depends on [USB_NET_CDC_SUBSET]
      inherited [USB && NET && USB_NET_CDC_SUBSET]
     }
    }
    config USB_NET_ZAURUS tristate {
     prompt "Sharp Zaurus (stock ROMs) and compatible" if [USB && NET && USB_USBNET]
     depends on [USB_USBNET]
     select USB_NET_CDCETHER if [USB && NET && USB_USBNET]
     select CRC32 if [USB && NET && USB_USBNET]
     default [y] if [USB && NET && USB_USBNET]
     inherited [USB && NET && USB_USBNET]
    }
   }
  }
  config USB_MON boolean {
   prompt "USB Monitor" if [USB]
   depends on [USB]
   default [y] if [USB]
   inherited [USB]
  }
  config USB_USS720 tristate {
   prompt "USS720 parport driver" if [USB && PARPORT]
   depends on [USB && PARPORT]
   select PARPORT_NOT_PC if [USB && PARPORT]
   inherited [USB && PARPORT]
  }
  menu "USB Serial Converter support" {
   depends on [USB!="n"]
   config USB_SERIAL tristate {
    prompt "USB Serial Converter support" if [USB]
    depends on [USB]
    inherited [USB]
    config USB_SERIAL_CONSOLE boolean {
     prompt "USB Serial Console device support (EXPERIMENTAL)" if [USB && USB_SERIAL="y" && EXPERIMENTAL]
     depends on [USB_SERIAL="y" && EXPERIMENTAL]
     inherited [USB && USB_SERIAL="y" && EXPERIMENTAL]
    }
    config USB_SERIAL_GENERIC boolean {
     prompt "USB Generic Serial Driver" if [USB && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB && USB_SERIAL]
    }
    config USB_SERIAL_AIRCABLE tristate {
     prompt "USB AIRcable Bluetooth Dongle Driver (EXPERIMENTAL)" if [USB!="n" && USB_SERIAL && EXPERIMENTAL]
     depends on [USB_SERIAL && EXPERIMENTAL]
     inherited [USB!="n" && USB_SERIAL && EXPERIMENTAL]
    }
    config USB_SERIAL_AIRPRIME tristate {
     prompt "USB AirPrime CDMA Wireless Driver" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_ARK3116 tristate {
     prompt "USB ARK Micro 3116 USB Serial Driver (EXPERIMENTAL)" if [USB!="n" && USB_SERIAL && EXPERIMENTAL]
     depends on [USB_SERIAL && EXPERIMENTAL]
     inherited [USB!="n" && USB_SERIAL && EXPERIMENTAL]
    }
    config USB_SERIAL_BELKIN tristate {
     prompt "USB Belkin and Peracom Single Port Serial Driver" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_WHITEHEAT tristate {
     prompt "USB ConnectTech WhiteHEAT Serial Driver" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_DIGI_ACCELEPORT tristate {
     prompt "USB Digi International AccelePort USB Serial Driver" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_CP2101 tristate {
     prompt "USB CP2101 UART Bridge Controller" if [USB!="n" && USB_SERIAL && EXPERIMENTAL]
     depends on [USB_SERIAL && EXPERIMENTAL]
     inherited [USB!="n" && USB_SERIAL && EXPERIMENTAL]
    }
    config USB_SERIAL_CYPRESS_M8 tristate {
     prompt "USB Cypress M8 USB Serial Driver" if [USB!="n" && USB_SERIAL && EXPERIMENTAL]
     depends on [USB_SERIAL && EXPERIMENTAL]
     inherited [USB!="n" && USB_SERIAL && EXPERIMENTAL]
    }
    config USB_SERIAL_EMPEG tristate {
     prompt "USB Empeg empeg-car Mark I/II Driver" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_FTDI_SIO tristate {
     prompt "USB FTDI Single Port Serial Driver (EXPERIMENTAL)" if [USB!="n" && USB_SERIAL && EXPERIMENTAL]
     depends on [USB_SERIAL && EXPERIMENTAL]
     inherited [USB!="n" && USB_SERIAL && EXPERIMENTAL]
    }
    config USB_SERIAL_FUNSOFT tristate {
     prompt "USB Fundamental Software Dongle Driver" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_VISOR tristate {
     prompt "USB Handspring Visor / Palm m50x / Sony Clie Driver" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_IPAQ tristate {
     prompt "USB PocketPC PDA Driver" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_IR tristate {
     prompt "USB IR Dongle Serial Driver (EXPERIMENTAL)" if [USB!="n" && USB_SERIAL && EXPERIMENTAL]
     depends on [USB_SERIAL && EXPERIMENTAL]
     inherited [USB!="n" && USB_SERIAL && EXPERIMENTAL]
    }
    config USB_SERIAL_EDGEPORT tristate {
     prompt "USB Inside Out Edgeport Serial Driver" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_EDGEPORT_TI tristate {
     prompt "USB Inside Out Edgeport Serial Driver (TI devices)" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_GARMIN tristate {
     prompt "USB Garmin GPS driver" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_IPW tristate {
     prompt "USB IPWireless (3G UMTS TDD) Driver (EXPERIMENTAL)" if [USB!="n" && USB_SERIAL && EXPERIMENTAL]
     depends on [USB_SERIAL && EXPERIMENTAL]
     inherited [USB!="n" && USB_SERIAL && EXPERIMENTAL]
    }
    config USB_SERIAL_KEYSPAN_PDA tristate {
     prompt "USB Keyspan PDA Single Port Serial Driver" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_KEYSPAN tristate {
     prompt "USB Keyspan USA-xxx Serial Driver" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
     config USB_SERIAL_KEYSPAN_MPR boolean {
      prompt "USB Keyspan MPR Firmware" if [USB && USB_SERIAL_KEYSPAN]
      depends on [USB_SERIAL_KEYSPAN]
      inherited [USB && USB_SERIAL_KEYSPAN]
     }
     config USB_SERIAL_KEYSPAN_USA28 boolean {
      prompt "USB Keyspan USA-28 Firmware" if [USB && USB_SERIAL_KEYSPAN]
      depends on [USB_SERIAL_KEYSPAN]
      inherited [USB && USB_SERIAL_KEYSPAN]
     }
     config USB_SERIAL_KEYSPAN_USA28X boolean {
      prompt "USB Keyspan USA-28X Firmware" if [USB && USB_SERIAL_KEYSPAN]
      depends on [USB_SERIAL_KEYSPAN]
      inherited [USB && USB_SERIAL_KEYSPAN]
     }
     config USB_SERIAL_KEYSPAN_USA28XA boolean {
      prompt "USB Keyspan USA-28XA Firmware" if [USB && USB_SERIAL_KEYSPAN]
      depends on [USB_SERIAL_KEYSPAN]
      inherited [USB && USB_SERIAL_KEYSPAN]
     }
     config USB_SERIAL_KEYSPAN_USA28XB boolean {
      prompt "USB Keyspan USA-28XB Firmware" if [USB && USB_SERIAL_KEYSPAN]
      depends on [USB_SERIAL_KEYSPAN]
      inherited [USB && USB_SERIAL_KEYSPAN]
     }
     config USB_SERIAL_KEYSPAN_USA19 boolean {
      prompt "USB Keyspan USA-19 Firmware" if [USB && USB_SERIAL_KEYSPAN]
      depends on [USB_SERIAL_KEYSPAN]
      inherited [USB && USB_SERIAL_KEYSPAN]
     }
     config USB_SERIAL_KEYSPAN_USA18X boolean {
      prompt "USB Keyspan USA-18X Firmware" if [USB && USB_SERIAL_KEYSPAN]
      depends on [USB_SERIAL_KEYSPAN]
      inherited [USB && USB_SERIAL_KEYSPAN]
     }
     config USB_SERIAL_KEYSPAN_USA19W boolean {
      prompt "USB Keyspan USA-19W Firmware" if [USB && USB_SERIAL_KEYSPAN]
      depends on [USB_SERIAL_KEYSPAN]
      inherited [USB && USB_SERIAL_KEYSPAN]
     }
     config USB_SERIAL_KEYSPAN_USA19QW boolean {
      prompt "USB Keyspan USA-19QW Firmware" if [USB && USB_SERIAL_KEYSPAN]
      depends on [USB_SERIAL_KEYSPAN]
      inherited [USB && USB_SERIAL_KEYSPAN]
     }
     config USB_SERIAL_KEYSPAN_USA19QI boolean {
      prompt "USB Keyspan USA-19QI Firmware" if [USB && USB_SERIAL_KEYSPAN]
      depends on [USB_SERIAL_KEYSPAN]
      inherited [USB && USB_SERIAL_KEYSPAN]
     }
     config USB_SERIAL_KEYSPAN_USA49W boolean {
      prompt "USB Keyspan USA-49W Firmware" if [USB && USB_SERIAL_KEYSPAN]
      depends on [USB_SERIAL_KEYSPAN]
      inherited [USB && USB_SERIAL_KEYSPAN]
     }
     config USB_SERIAL_KEYSPAN_USA49WLC boolean {
      prompt "USB Keyspan USA-49WLC Firmware" if [USB && USB_SERIAL_KEYSPAN]
      depends on [USB_SERIAL_KEYSPAN]
      inherited [USB && USB_SERIAL_KEYSPAN]
     }
    }
    config USB_SERIAL_KLSI tristate {
     prompt "USB KL5KUSB105 (Palmconnect) Driver (EXPERIMENTAL)" if [USB!="n" && USB_SERIAL && EXPERIMENTAL]
     depends on [USB_SERIAL && EXPERIMENTAL]
     inherited [USB!="n" && USB_SERIAL && EXPERIMENTAL]
    }
    config USB_SERIAL_KOBIL_SCT tristate {
     prompt "USB KOBIL chipcard reader" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_MCT_U232 tristate {
     prompt "USB MCT Single Port Serial Driver" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_MOS7720 tristate {
     prompt "USB Moschip 7720 Single Port Serial Driver" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_MOS7840 tristate {
     prompt "USB Moschip 7840/7820 USB Serial Driver" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_NAVMAN tristate {
     prompt "USB Navman GPS device" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_PL2303 tristate {
     prompt "USB Prolific 2303 Single Port Serial Driver" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_HP4X tristate {
     prompt "USB HP4x Calculators support" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_SAFE tristate {
     prompt "USB Safe Serial (Encapsulated) Driver (EXPERIMENTAL)" if [USB!="n" && USB_SERIAL && EXPERIMENTAL]
     depends on [USB_SERIAL && EXPERIMENTAL]
     inherited [USB!="n" && USB_SERIAL && EXPERIMENTAL]
     config USB_SERIAL_SAFE_PADDED boolean {
      prompt "USB Secure Encapsulated Driver - Padded" if [USB && USB_SERIAL_SAFE]
      depends on [USB_SERIAL_SAFE]
      inherited [USB && USB_SERIAL_SAFE]
     }
    }
    config USB_SERIAL_SIERRAWIRELESS tristate {
     prompt "USB Sierra Wireless Driver" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_TI tristate {
     prompt "USB TI 3410/5052 Serial Driver" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_CYBERJACK tristate {
     prompt "USB REINER SCT cyberJack pinpad/e-com chipcard reader (EXPERIMENTAL)" if [USB!="n" && USB_SERIAL && EXPERIMENTAL]
     depends on [USB_SERIAL && EXPERIMENTAL]
     inherited [USB!="n" && USB_SERIAL && EXPERIMENTAL]
    }
    config USB_SERIAL_XIRCOM tristate {
     prompt "USB Xircom / Entregra Single Port Serial Driver" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_OPTION tristate {
     prompt "USB driver for GSM and CDMA modems" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
    config USB_SERIAL_OMNINET tristate {
     prompt "USB ZyXEL omni.net LCD Plus Driver (EXPERIMENTAL)" if [USB!="n" && USB_SERIAL && EXPERIMENTAL]
     depends on [USB_SERIAL && EXPERIMENTAL]
     inherited [USB!="n" && USB_SERIAL && EXPERIMENTAL]
    }
    config USB_SERIAL_DEBUG tristate {
     prompt "USB Debugging Device" if [USB!="n" && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [USB!="n" && USB_SERIAL]
    }
   }
   config USB_EZUSB boolean {
    depends on [USB_SERIAL_KEYSPAN_PDA || USB_SERIAL_XIRCOM || USB_SERIAL_KEYSPAN || USB_SERIAL_WHITEHEAT]
    default [y] if [USB && (USB_SERIAL_KEYSPAN_PDA || USB_SERIAL_XIRCOM || USB_SERIAL_KEYSPAN || USB_SERIAL_WHITEHEAT)]
    inherited [USB && (USB_SERIAL_KEYSPAN_PDA || USB_SERIAL_XIRCOM || USB_SERIAL_KEYSPAN || USB_SERIAL_WHITEHEAT)]
   }
  }
  config USB_EMI62 tristate {
   prompt "EMI 6|2m USB Audio interface support" if [USB]
   depends on [USB]
   inherited [USB]
  }
  config USB_EMI26 tristate {
   prompt "EMI 2|6 USB Audio interface support" if [USB]
   depends on [USB]
   inherited [USB]
  }
  config USB_ADUTUX tristate {
   prompt "ADU devices from Ontrak Control Systems (EXPERIMENTAL)" if [USB && EXPERIMENTAL]
   depends on [USB && EXPERIMENTAL]
   inherited [USB && EXPERIMENTAL]
  }
  config USB_AUERSWALD tristate {
   prompt "USB Auerswald ISDN support (EXPERIMENTAL)" if [USB && EXPERIMENTAL]
   depends on [USB && EXPERIMENTAL]
   inherited [USB && EXPERIMENTAL]
  }
  config USB_RIO500 tristate {
   prompt "USB Diamond Rio500 support (EXPERIMENTAL)" if [USB && EXPERIMENTAL]
   depends on [USB && EXPERIMENTAL]
   inherited [USB && EXPERIMENTAL]
  }
  config USB_LEGOTOWER tristate {
   prompt "USB Lego Infrared Tower support (EXPERIMENTAL)" if [USB && EXPERIMENTAL]
   depends on [USB && EXPERIMENTAL]
   inherited [USB && EXPERIMENTAL]
  }
  config USB_LCD tristate {
   prompt "USB LCD driver support" if [USB]
   depends on [USB]
   inherited [USB]
  }
  config USB_LED tristate {
   prompt "USB LED driver support" if [USB]
   depends on [USB]
   inherited [USB]
  }
  config USB_CYPRESS_CY7C63 tristate {
   prompt "Cypress CY7C63xxx USB driver support" if [USB]
   depends on [USB]
   inherited [USB]
  }
  config USB_CYTHERM tristate {
   prompt "Cypress USB thermometer driver support" if [USB]
   depends on [USB]
   inherited [USB]
  }
  config USB_PHIDGET tristate {
   prompt "USB Phidgets drivers" if [USB]
   depends on [USB]
   inherited [USB]
   config USB_PHIDGETKIT tristate {
    prompt "USB PhidgetInterfaceKit support" if [USB_PHIDGET]
    depends on [USB_PHIDGET]
    inherited [USB_PHIDGET]
   }
   config USB_PHIDGETMOTORCONTROL tristate {
    prompt "USB PhidgetMotorControl support" if [USB_PHIDGET]
    depends on [USB_PHIDGET]
    inherited [USB_PHIDGET]
   }
   config USB_PHIDGETSERVO tristate {
    prompt "USB PhidgetServo support" if [USB_PHIDGET]
    depends on [USB_PHIDGET]
    inherited [USB_PHIDGET]
   }
  }
  config USB_IDMOUSE tristate {
   prompt "Siemens ID USB Mouse Fingerprint sensor support" if [USB]
   depends on [USB]
   inherited [USB]
  }
  config USB_FTDI_ELAN tristate {
   prompt "Elan PCMCIA CardBus Adapter USB Client" if [USB]
   depends on [USB]
   default [M] if [USB]
   inherited [USB]
  }
  config USB_APPLEDISPLAY tristate {
   prompt "Apple Cinema Display support" if [USB]
   depends on [USB]
   select BACKLIGHT_LCD_SUPPORT if [USB]
   select BACKLIGHT_CLASS_DEVICE if [USB]
   inherited [USB]
  }
  config USB_SISUSBVGA tristate {
   prompt "USB 2.0 SVGA dongle support (Net2280/SiS315)" if [USB && USB_EHCI_HCD]
   depends on [USB && USB_EHCI_HCD]
   inherited [USB && USB_EHCI_HCD]
   config USB_SISUSBVGA_CON boolean {
    prompt "Text console and mode switching support" if [VT && USB_SISUSBVGA]
    depends on [VT]
    select FONT_8x16 if [VT]
    inherited [VT]
   }
  }
  config USB_LD tristate {
   prompt "USB LD driver" if [USB]
   depends on [USB]
   inherited [USB]
  }
  config USB_TRANCEVIBRATOR tristate {
   prompt "PlayStation 2 Trance Vibrator driver support" if [USB]
   depends on [USB]
   inherited [USB]
  }
  config USB_TEST tristate {
   prompt "USB testing driver (DEVELOPMENT)" if [USB && USB_DEVICEFS && EXPERIMENTAL]
   depends on [USB && USB_DEVICEFS && EXPERIMENTAL]
   inherited [USB && USB_DEVICEFS && EXPERIMENTAL]
  }
  menu "USB DSL modem support" {
   depends on [USB]
   config USB_ATM tristate {
    prompt "USB DSL modem support" if [USB && ATM]
    depends on [USB && ATM]
    select CRC32 if [USB && ATM]
    default [n] if [USB && ATM]
    inherited [USB && ATM]
    config USB_SPEEDTOUCH tristate {
     prompt "Speedtouch USB support" if [USB && USB_ATM]
     depends on [USB_ATM]
     select FW_LOADER if [USB && USB_ATM]
     inherited [USB && USB_ATM]
    }
    config USB_CXACRU tristate {
     prompt "Conexant AccessRunner USB support" if [USB && USB_ATM]
     depends on [USB_ATM]
     select FW_LOADER if [USB && USB_ATM]
     inherited [USB && USB_ATM]
    }
    config USB_UEAGLEATM tristate {
     prompt "ADI 930 and eagle USB DSL modem" if [USB && USB_ATM]
     depends on [USB_ATM]
     select FW_LOADER if [USB && USB_ATM]
     inherited [USB && USB_ATM]
    }
    config USB_XUSBATM tristate {
     prompt "Other USB DSL modem support" if [USB && USB_ATM]
     depends on [USB_ATM]
     inherited [USB && USB_ATM]
    }
   }
  }
  menu "USB Gadget Support" {
   config USB_GADGET tristate {
    prompt "Support for USB Gadgets" if []
    config USB_GADGET_DEBUG_FILES boolean {
     prompt "Debugging information files" if [USB_GADGET && PROC_FS]
     depends on [USB_GADGET && PROC_FS]
     inherited [USB_GADGET && PROC_FS]
    }
   }
   config USB_GADGET_SELECTED boolean {
   }
   choice boolean {
    prompt "USB Peripheral Controller" if [USB_GADGET]
    depends on [USB_GADGET]
    config USB_GADGET_NET2280 boolean {
     prompt "NetChip 228x" if [<choice> && PCI]
     depends on [PCI]
     select USB_GADGET_DUALSPEED if [<choice> && PCI]
     inherited [<choice> && PCI]
     config USB_NET2280 tristate {
      depends on [USB_GADGET_NET2280]
      default [USB_GADGET] if [<choice> && USB_GADGET_NET2280]
      select USB_GADGET_SELECTED if [<choice> && USB_GADGET_NET2280]
      inherited [<choice> && USB_GADGET_NET2280]
     }
    }
    config USB_GADGET_PXA2XX boolean {
     prompt "PXA 25x or IXP 4xx" if [<choice> && (ARCH_PXA && PXA25x || ARCH_IXP4XX)]
     depends on [ARCH_PXA && PXA25x || ARCH_IXP4XX]
     inherited [<choice> && (ARCH_PXA && PXA25x || ARCH_IXP4XX)]
     config USB_PXA2XX tristate {
      depends on [USB_GADGET_PXA2XX]
      default [USB_GADGET] if [<choice> && USB_GADGET_PXA2XX]
      select USB_GADGET_SELECTED if [<choice> && USB_GADGET_PXA2XX]
      inherited [<choice> && USB_GADGET_PXA2XX]
     }
     config USB_PXA2XX_SMALL boolean {
      depends on [USB_GADGET_PXA2XX]
      default [n] if [<choice> && USB_GADGET_PXA2XX && USB_ETH_RNDIS]
      default [y] if [<choice> && USB_GADGET_PXA2XX && USB_ZERO]
      default [y] if [<choice> && USB_GADGET_PXA2XX && USB_ETH]
      default [y] if [<choice> && USB_GADGET_PXA2XX && USB_G_SERIAL]
      inherited [<choice> && USB_GADGET_PXA2XX]
     }
    }
    config USB_GADGET_GOKU boolean {
     prompt "Toshiba TC86C001 'Goku-S'" if [<choice> && PCI]
     depends on [PCI]
     inherited [<choice> && PCI]
     config USB_GOKU tristate {
      depends on [USB_GADGET_GOKU]
      default [USB_GADGET] if [<choice> && USB_GADGET_GOKU]
      select USB_GADGET_SELECTED if [<choice> && USB_GADGET_GOKU]
      inherited [<choice> && USB_GADGET_GOKU]
     }
    }
    config USB_GADGET_LH7A40X boolean {
     prompt "LH7A40X" if [<choice> && ARCH_LH7A40X]
     depends on [ARCH_LH7A40X]
     inherited [<choice> && ARCH_LH7A40X]
     config USB_LH7A40X tristate {
      depends on [USB_GADGET_LH7A40X]
      default [USB_GADGET] if [<choice> && USB_GADGET_LH7A40X]
      select USB_GADGET_SELECTED if [<choice> && USB_GADGET_LH7A40X]
      inherited [<choice> && USB_GADGET_LH7A40X]
     }
    }
    config USB_GADGET_OMAP boolean {
     prompt "OMAP USB Device Controller" if [<choice> && ARCH_OMAP]
     depends on [ARCH_OMAP]
     select ISP1301_OMAP if [<choice> && ARCH_OMAP && (MACH_OMAP_H2 || MACH_OMAP_H3)]
     inherited [<choice> && ARCH_OMAP]
     config USB_OMAP tristate {
      depends on [USB_GADGET_OMAP]
      default [USB_GADGET] if [<choice> && USB_GADGET_OMAP]
      select USB_GADGET_SELECTED if [<choice> && USB_GADGET_OMAP]
      inherited [<choice> && USB_GADGET_OMAP]
     }
     config USB_OTG boolean {
      depends on [USB && EXPERIMENTAL]
      select USB_SUSPEND if [USB && EXPERIMENTAL]
      default [n] if [USB && EXPERIMENTAL]
      prompt "OTG Support" if [<choice> && USB_GADGET_OMAP && ARCH_OMAP_OTG && USB_OHCI_HCD]
      depends on [USB_GADGET_OMAP && ARCH_OMAP_OTG && USB_OHCI_HCD]
      inherited [<choice> && USB_GADGET_OMAP && ARCH_OMAP_OTG && USB_OHCI_HCD]
     }
    }
    config USB_GADGET_AT91 boolean {
     prompt "AT91 USB Device Port" if [<choice> && ARCH_AT91]
     depends on [ARCH_AT91]
     select USB_GADGET_SELECTED if [<choice> && ARCH_AT91]
     inherited [<choice> && ARCH_AT91]
     config USB_AT91 tristate {
      depends on [USB_GADGET_AT91]
      default [USB_GADGET] if [<choice> && USB_GADGET_AT91]
      inherited [<choice> && USB_GADGET_AT91]
     }
    }
    config USB_GADGET_DUMMY_HCD boolean {
     prompt "Dummy HCD (DEVELOPMENT)" if [<choice> && (USB="y" || USB="m" && USB_GADGET="m") && EXPERIMENTAL]
     depends on [(USB="y" || USB="m" && USB_GADGET="m") && EXPERIMENTAL]
     select USB_GADGET_DUALSPEED if [<choice> && (USB="y" || USB="m" && USB_GADGET="m") && EXPERIMENTAL]
     inherited [<choice> && (USB="y" || USB="m" && USB_GADGET="m") && EXPERIMENTAL]
     config USB_DUMMY_HCD tristate {
      depends on [USB_GADGET_DUMMY_HCD]
      default [USB_GADGET] if [<choice> && USB_GADGET_DUMMY_HCD]
      select USB_GADGET_SELECTED if [<choice> && USB_GADGET_DUMMY_HCD]
      inherited [<choice> && USB_GADGET_DUMMY_HCD]
     }
    }
   }
   config USB_GADGET_DUALSPEED boolean {
    depends on [USB_GADGET]
    default [n] if [USB_GADGET]
    inherited [USB_GADGET]
   }
   choice tristate {
    prompt "USB Gadget Drivers" if [USB_GADGET && USB_GADGET_SELECTED]
    depends on [USB_GADGET && USB_GADGET_SELECTED]
    default [USB_ETH] if [USB_GADGET && USB_GADGET_SELECTED]
    config USB_ZERO tristate {
     prompt "Gadget Zero (DEVELOPMENT)" if [<choice> && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [<choice> && EXPERIMENTAL]
     config USB_ZERO_HNPTEST boolean {
      prompt "HNP Test Device" if [<choice> && USB_ZERO && USB_OTG]
      depends on [USB_ZERO && USB_OTG]
      inherited [<choice> && USB_ZERO && USB_OTG]
     }
    }
    config USB_ETH tristate {
     prompt "Ethernet Gadget (with CDC Ethernet support)" if [<choice> && NET]
     depends on [NET]
     inherited [<choice> && NET]
     config USB_ETH_RNDIS boolean {
      prompt "RNDIS support (EXPERIMENTAL)" if [<choice> && USB_ETH && EXPERIMENTAL]
      depends on [USB_ETH && EXPERIMENTAL]
      default [y] if [<choice> && USB_ETH && EXPERIMENTAL]
      inherited [<choice> && USB_ETH && EXPERIMENTAL]
     }
    }
    config USB_GADGETFS tristate {
     prompt "Gadget Filesystem (EXPERIMENTAL)" if [<choice> && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [<choice> && EXPERIMENTAL]
    }
    config USB_FILE_STORAGE tristate {
     prompt "File-backed Storage Gadget" if [<choice>]
     inherited [<choice>]
     config USB_FILE_STORAGE_TEST boolean {
      prompt "File-backed Storage Gadget testing version" if [<choice> && USB_FILE_STORAGE]
      depends on [USB_FILE_STORAGE]
      default [n] if [<choice> && USB_FILE_STORAGE]
      inherited [<choice> && USB_FILE_STORAGE]
     }
    }
    config USB_G_SERIAL tristate {
     prompt "Serial Gadget (with CDC ACM support)" if [<choice>]
     inherited [<choice>]
    }
    config USB_MIDI_GADGET tristate {
     prompt "MIDI Gadget (EXPERIMENTAL)" if [<choice> && SND && EXPERIMENTAL]
     depends on [SND && EXPERIMENTAL]
     select SND_RAWMIDI if [<choice> && SND && EXPERIMENTAL]
     inherited [<choice> && SND && EXPERIMENTAL]
    }
   }
  }
 }
 menu "MMC/SD Card support" {
  config MMC tristate {
   prompt "MMC support" if []
   config MMC_DEBUG boolean {
    prompt "MMC debugging" if [MMC]
    depends on [MMC]
    inherited [MMC]
   }
   config MMC_BLOCK tristate {
    prompt "MMC block device driver" if [MMC && BLOCK]
    depends on [MMC && BLOCK]
    default [y] if [MMC && BLOCK]
    inherited [MMC && BLOCK]
   }
   config MMC_ARMMMCI tristate {
    prompt "ARM AMBA Multimedia Card Interface support" if [ARM_AMBA && MMC]
    depends on [ARM_AMBA && MMC]
    inherited [ARM_AMBA && MMC]
   }
   config MMC_PXA tristate {
    prompt "Intel PXA25x/26x/27x Multimedia Card Interface support" if [ARCH_PXA && MMC]
    depends on [ARCH_PXA && MMC]
    inherited [ARCH_PXA && MMC]
   }
   config MMC_SDHCI tristate {
    prompt "Secure Digital Host Controller Interface support  (EXPERIMENTAL)" if [PCI && MMC && EXPERIMENTAL]
    depends on [PCI && MMC && EXPERIMENTAL]
    inherited [PCI && MMC && EXPERIMENTAL]
   }
   config MMC_OMAP tristate {
    prompt "TI OMAP Multimedia Card Interface support" if [ARCH_OMAP && MMC]
    depends on [ARCH_OMAP && MMC]
    select TPS65010 if [ARCH_OMAP && MMC && MACH_OMAP_H2]
    inherited [ARCH_OMAP && MMC]
   }
   config MMC_WBSD tristate {
    prompt "Winbond W83L51xD SD/MMC Card Interface support" if [MMC && ISA_DMA_API]
    depends on [MMC && ISA_DMA_API]
    inherited [MMC && ISA_DMA_API]
   }
   config MMC_AU1X tristate {
    prompt "Alchemy AU1XX0 MMC Card Interface support" if [MMC && SOC_AU1200]
    depends on [MMC && SOC_AU1200]
    inherited [MMC && SOC_AU1200]
   }
   config MMC_AT91 tristate {
    prompt "AT91 SD/MMC Card Interface support" if [ARCH_AT91 && MMC]
    depends on [ARCH_AT91 && MMC]
    inherited [ARCH_AT91 && MMC]
   }
   config MMC_IMX tristate {
    prompt "Motorola i.MX Multimedia Card Interface support" if [ARCH_IMX && MMC]
    depends on [ARCH_IMX && MMC]
    inherited [ARCH_IMX && MMC]
   }
   config MMC_TIFM_SD tristate {
    prompt "TI Flash Media MMC/SD Interface support  (EXPERIMENTAL)" if [MMC && EXPERIMENTAL]
    depends on [MMC && EXPERIMENTAL]
    select TIFM_CORE if [MMC && EXPERIMENTAL]
    inherited [MMC && EXPERIMENTAL]
   }
  }
 }
 menu "LED devices" {
  config NEW_LEDS boolean {
   prompt "LED Support" if []
   config LEDS_CLASS tristate {
    prompt "LED Class Support" if [NEW_LEDS]
    depends on [NEW_LEDS]
    inherited [NEW_LEDS]
   }
  }
  config LEDS_CORGI tristate {
   prompt "LED Support for the Sharp SL-C7x0 series" if [LEDS_CLASS && PXA_SHARP_C7xx]
   depends on [LEDS_CLASS && PXA_SHARP_C7xx]
   inherited [LEDS_CLASS && PXA_SHARP_C7xx]
  }
  config LEDS_LOCOMO tristate {
   prompt "LED Support for Locomo device" if [LEDS_CLASS && SHARP_LOCOMO]
   depends on [LEDS_CLASS && SHARP_LOCOMO]
   inherited [LEDS_CLASS && SHARP_LOCOMO]
  }
  config LEDS_SPITZ tristate {
   prompt "LED Support for the Sharp SL-Cxx00 series" if [LEDS_CLASS && PXA_SHARP_Cxx00]
   depends on [LEDS_CLASS && PXA_SHARP_Cxx00]
   inherited [LEDS_CLASS && PXA_SHARP_Cxx00]
  }
  config LEDS_IXP4XX tristate {
   prompt "LED Support for GPIO connected LEDs on IXP4XX processors" if [LEDS_CLASS && ARCH_IXP4XX]
   depends on [LEDS_CLASS && ARCH_IXP4XX]
   inherited [LEDS_CLASS && ARCH_IXP4XX]
  }
  config LEDS_TOSA tristate {
   prompt "LED Support for the Sharp SL-6000 series" if [LEDS_CLASS && PXA_SHARPSL]
   depends on [LEDS_CLASS && PXA_SHARPSL]
   inherited [LEDS_CLASS && PXA_SHARPSL]
  }
  config LEDS_S3C24XX tristate {
   prompt "LED Support for Samsung S3C24XX GPIO LEDs" if [LEDS_CLASS && ARCH_S3C2410]
   depends on [LEDS_CLASS && ARCH_S3C2410]
   inherited [LEDS_CLASS && ARCH_S3C2410]
  }
  config LEDS_AMS_DELTA tristate {
   prompt "LED Support for the Amstrad Delta (E3)" if [LEDS_CLASS && MACH_AMS_DELTA]
   depends on [LEDS_CLASS && MACH_AMS_DELTA]
   inherited [LEDS_CLASS && MACH_AMS_DELTA]
  }
  config LEDS_NET48XX tristate {
   prompt "LED Support for Soekris net48xx series Error LED" if [LEDS_CLASS && SCx200_GPIO]
   depends on [LEDS_CLASS && SCx200_GPIO]
   inherited [LEDS_CLASS && SCx200_GPIO]
  }
  config LEDS_WRAP tristate {
   prompt "LED Support for the WRAP series LEDs" if [LEDS_CLASS && SCx200_GPIO]
   depends on [LEDS_CLASS && SCx200_GPIO]
   inherited [LEDS_CLASS && SCx200_GPIO]
  }
  config LEDS_TRIGGERS boolean {
   prompt "LED Trigger support" if [NEW_LEDS]
   depends on [NEW_LEDS]
   inherited [NEW_LEDS]
   config LEDS_TRIGGER_TIMER tristate {
    prompt "LED Timer Trigger" if [LEDS_TRIGGERS]
    depends on [LEDS_TRIGGERS]
    inherited [LEDS_TRIGGERS]
   }
   config LEDS_TRIGGER_IDE_DISK boolean {
    prompt "LED IDE Disk Trigger" if [LEDS_TRIGGERS && BLK_DEV_IDEDISK]
    depends on [LEDS_TRIGGERS && BLK_DEV_IDEDISK]
    inherited [LEDS_TRIGGERS && BLK_DEV_IDEDISK]
   }
   config LEDS_TRIGGER_HEARTBEAT tristate {
    prompt "LED Heartbeat Trigger" if [LEDS_TRIGGERS]
    depends on [LEDS_TRIGGERS]
    inherited [LEDS_TRIGGERS]
   }
  }
 }
 menu "InfiniBand support" {
  config INFINIBAND tristate {
   depends on [PCI || BROKEN]
   prompt "InfiniBand support" if [PCI || BROKEN]
   inherited [PCI || BROKEN]
   config INFINIBAND_USER_MAD tristate {
    prompt "InfiniBand userspace MAD support" if [INFINIBAND]
    depends on [INFINIBAND]
    inherited [INFINIBAND]
   }
   config INFINIBAND_USER_ACCESS tristate {
    prompt "InfiniBand userspace access (verbs and CM)" if [INFINIBAND]
    depends on [INFINIBAND]
    inherited [INFINIBAND]
   }
   config INFINIBAND_ADDR_TRANS boolean {
    depends on [INFINIBAND && INET]
    default [y] if [INFINIBAND && INET]
    inherited [INFINIBAND && INET]
   }
   config INFINIBAND_MTHCA tristate {
    prompt "Mellanox HCA support" if [PCI && INFINIBAND]
    depends on [PCI && INFINIBAND]
    inherited [PCI && INFINIBAND]
    config INFINIBAND_MTHCA_DEBUG boolean {
     prompt "Verbose debugging output" if [INFINIBAND_MTHCA && EMBEDDED]
     depends on [INFINIBAND_MTHCA]
     default [y] if [INFINIBAND_MTHCA]
     inherited [INFINIBAND_MTHCA]
    }
   }
   config INFINIBAND_IPATH tristate {
    prompt "QLogic InfiniPath Driver" if [(PCI_MSI || HT_IRQ) && 64BIT && INFINIBAND && NET]
    depends on [(PCI_MSI || HT_IRQ) && 64BIT && INFINIBAND && NET]
    inherited [(PCI_MSI || HT_IRQ) && 64BIT && INFINIBAND && NET]
   }
   config INFINIBAND_EHCA tristate {
    prompt "eHCA support" if [IBMEBUS && INFINIBAND]
    depends on [IBMEBUS && INFINIBAND]
    inherited [IBMEBUS && INFINIBAND]
    config INFINIBAND_EHCA_SCALING boolean {
     prompt "Scaling support (EXPERIMENTAL)" if [IBMEBUS && INFINIBAND_EHCA && HOTPLUG_CPU && EXPERIMENTAL]
     depends on [IBMEBUS && INFINIBAND_EHCA && HOTPLUG_CPU && EXPERIMENTAL]
     default [y] if [IBMEBUS && INFINIBAND_EHCA && HOTPLUG_CPU && EXPERIMENTAL]
     inherited [IBMEBUS && INFINIBAND_EHCA && HOTPLUG_CPU && EXPERIMENTAL]
    }
   }
   config INFINIBAND_AMSO1100 tristate {
    prompt "Ammasso 1100 HCA support" if [PCI && INET && INFINIBAND]
    depends on [PCI && INET && INFINIBAND]
    inherited [PCI && INET && INFINIBAND]
    config INFINIBAND_AMSO1100_DEBUG boolean {
     prompt "Verbose debugging output" if [INFINIBAND_AMSO1100]
     depends on [INFINIBAND_AMSO1100]
     default [n] if [INFINIBAND_AMSO1100]
     inherited [INFINIBAND_AMSO1100]
    }
   }
   config INFINIBAND_IPOIB tristate {
    prompt "IP-over-InfiniBand" if [INFINIBAND && NETDEVICES && INET]
    depends on [INFINIBAND && NETDEVICES && INET]
    inherited [INFINIBAND && NETDEVICES && INET]
    config INFINIBAND_IPOIB_DEBUG boolean {
     prompt "IP-over-InfiniBand debugging" if [INFINIBAND_IPOIB && EMBEDDED]
     depends on [INFINIBAND_IPOIB]
     default [y] if [INFINIBAND_IPOIB]
     inherited [INFINIBAND_IPOIB]
     config INFINIBAND_IPOIB_DEBUG_DATA boolean {
      prompt "IP-over-InfiniBand data path debugging" if [INFINIBAND_IPOIB_DEBUG]
      depends on [INFINIBAND_IPOIB_DEBUG]
      inherited [INFINIBAND_IPOIB_DEBUG]
     }
    }
   }
   config INFINIBAND_SRP tristate {
    prompt "InfiniBand SCSI RDMA Protocol" if [INFINIBAND && SCSI]
    depends on [INFINIBAND && SCSI]
    inherited [INFINIBAND && SCSI]
   }
   config INFINIBAND_ISER tristate {
    prompt "iSCSI Extensions for RDMA (iSER)" if [INFINIBAND && SCSI && INET]
    depends on [INFINIBAND && SCSI && INET]
    select SCSI_ISCSI_ATTRS if [INFINIBAND && SCSI && INET]
    inherited [INFINIBAND && SCSI && INET]
   }
  }
 }
 menu "EDAC - error detection and reporting (RAS) (EXPERIMENTAL)" {
  config EDAC tristate {
   prompt "EDAC core system error reporting (EXPERIMENTAL)" if [X86 && EXPERIMENTAL]
   depends on [X86 && EXPERIMENTAL]
   inherited [X86 && EXPERIMENTAL]
   config EDAC_DEBUG boolean {
    prompt "Debugging" if [EDAC]
    depends on [EDAC]
    inherited [EDAC]
   }
   config EDAC_MM_EDAC tristate {
    prompt "Main Memory EDAC (Error Detection And Correction) reporting" if [EDAC]
    depends on [EDAC]
    default [y] if [EDAC]
    inherited [EDAC]
    config EDAC_AMD76X tristate {
     prompt "AMD 76x (760, 762, 768)" if [EDAC_MM_EDAC && PCI && X86_32]
     depends on [EDAC_MM_EDAC && PCI && X86_32]
     inherited [EDAC_MM_EDAC && PCI && X86_32]
    }
    config EDAC_E7XXX tristate {
     prompt "Intel e7xxx (e7205, e7500, e7501, e7505)" if [EDAC_MM_EDAC && PCI && X86_32]
     depends on [EDAC_MM_EDAC && PCI && X86_32]
     inherited [EDAC_MM_EDAC && PCI && X86_32]
    }
    config EDAC_E752X tristate {
     prompt "Intel e752x (e7520, e7525, e7320)" if [EDAC_MM_EDAC && PCI && X86 && HOTPLUG]
     depends on [EDAC_MM_EDAC && PCI && X86 && HOTPLUG]
     inherited [EDAC_MM_EDAC && PCI && X86 && HOTPLUG]
    }
    config EDAC_I82875P tristate {
     prompt "Intel 82875p (D82875P, E7210)" if [EDAC_MM_EDAC && PCI && X86_32]
     depends on [EDAC_MM_EDAC && PCI && X86_32]
     inherited [EDAC_MM_EDAC && PCI && X86_32]
    }
    config EDAC_I82860 tristate {
     prompt "Intel 82860" if [EDAC_MM_EDAC && PCI && X86_32]
     depends on [EDAC_MM_EDAC && PCI && X86_32]
     inherited [EDAC_MM_EDAC && PCI && X86_32]
    }
    config EDAC_R82600 tristate {
     prompt "Radisys 82600 embedded chipset" if [EDAC_MM_EDAC && PCI && X86_32]
     depends on [EDAC_MM_EDAC && PCI && X86_32]
     inherited [EDAC_MM_EDAC && PCI && X86_32]
    }
   }
   choice boolean {
    prompt "Error detecting method" if [EDAC]
    depends on [EDAC]
    default [EDAC_POLL] if [EDAC]
    config EDAC_POLL boolean {
     prompt "Poll for errors" if [<choice> && EDAC]
     depends on [EDAC]
     inherited [<choice> && EDAC]
    }
   }
  }
 }
 menu "Real Time Clock" {
  config RTC_LIB tristate {
  }
  config RTC_CLASS tristate {
   prompt "RTC class" if [EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   default [n] if [EXPERIMENTAL]
   select RTC_LIB if [EXPERIMENTAL]
   inherited [EXPERIMENTAL]
   config RTC_HCTOSYS boolean {
    prompt "Set system time from RTC on startup" if [RTC_CLASS="y"]
    depends on [RTC_CLASS="y"]
    default [y] if [RTC_CLASS="y"]
    inherited [RTC_CLASS="y"]
    config RTC_HCTOSYS_DEVICE string {
     prompt "The RTC to read the time from" if [RTC_HCTOSYS]
     depends on [RTC_HCTOSYS="y"]
     default ["rtc0"] if [RTC_HCTOSYS]
     inherited [RTC_HCTOSYS]
    }
   }
   config RTC_DEBUG boolean {
    prompt "RTC debug support" if [RTC_CLASS="y"]
    depends on [RTC_CLASS="y"]
    inherited [RTC_CLASS="y"]
   }
   config RTC_INTF_SYSFS tristate {
    prompt "sysfs" if [RTC_CLASS && SYSFS]
    depends on [RTC_CLASS && SYSFS]
    default [RTC_CLASS] if [RTC_CLASS && SYSFS]
    inherited [RTC_CLASS && SYSFS]
   }
   config RTC_INTF_PROC tristate {
    prompt "proc" if [RTC_CLASS && PROC_FS]
    depends on [RTC_CLASS && PROC_FS]
    default [RTC_CLASS] if [RTC_CLASS && PROC_FS]
    inherited [RTC_CLASS && PROC_FS]
   }
   config RTC_INTF_DEV tristate {
    prompt "dev" if [RTC_CLASS]
    depends on [RTC_CLASS]
    default [RTC_CLASS] if [RTC_CLASS]
    inherited [RTC_CLASS]
    config RTC_INTF_DEV_UIE_EMUL boolean {
     prompt "RTC UIE emulation on dev interface" if [RTC_INTF_DEV]
     depends on [RTC_INTF_DEV]
     inherited [RTC_INTF_DEV]
    }
   }
   config RTC_DRV_X1205 tristate {
    prompt "Xicor/Intersil X1205" if [RTC_CLASS && I2C]
    depends on [RTC_CLASS && I2C]
    inherited [RTC_CLASS && I2C]
   }
   config RTC_DRV_DS1307 tristate {
    prompt "Dallas/Maxim DS1307 and similar I2C RTC chips" if [RTC_CLASS && I2C]
    depends on [RTC_CLASS && I2C]
    inherited [RTC_CLASS && I2C]
   }
   config RTC_DRV_DS1553 tristate {
    prompt "Dallas DS1553" if [RTC_CLASS]
    depends on [RTC_CLASS]
    inherited [RTC_CLASS]
   }
   config RTC_DRV_ISL1208 tristate {
    prompt "Intersil 1208" if [RTC_CLASS && I2C]
    depends on [RTC_CLASS && I2C]
    inherited [RTC_CLASS && I2C]
   }
   config RTC_DRV_DS1672 tristate {
    prompt "Dallas/Maxim DS1672" if [RTC_CLASS && I2C]
    depends on [RTC_CLASS && I2C]
    inherited [RTC_CLASS && I2C]
   }
   config RTC_DRV_DS1742 tristate {
    prompt "Dallas DS1742/1743" if [RTC_CLASS]
    depends on [RTC_CLASS]
    inherited [RTC_CLASS]
   }
   config RTC_DRV_OMAP tristate {
    prompt "TI OMAP1" if [RTC_CLASS && (ARCH_OMAP15XX || ARCH_OMAP16XX || ARCH_OMAP730)]
    depends on [RTC_CLASS && (ARCH_OMAP15XX || ARCH_OMAP16XX || ARCH_OMAP730)]
    inherited [RTC_CLASS && (ARCH_OMAP15XX || ARCH_OMAP16XX || ARCH_OMAP730)]
   }
   config RTC_DRV_PCF8563 tristate {
    prompt "Philips PCF8563/Epson RTC8564" if [RTC_CLASS && I2C]
    depends on [RTC_CLASS && I2C]
    inherited [RTC_CLASS && I2C]
   }
   config RTC_DRV_PCF8583 tristate {
    prompt "Philips PCF8583" if [RTC_CLASS && I2C]
    depends on [RTC_CLASS && I2C]
    inherited [RTC_CLASS && I2C]
   }
   config RTC_DRV_RS5C348 tristate {
    prompt "Ricoh RS5C348A/B" if [RTC_CLASS && SPI]
    depends on [RTC_CLASS && SPI]
    inherited [RTC_CLASS && SPI]
   }
   config RTC_DRV_RS5C372 tristate {
    prompt "Ricoh RS5C372A/B" if [RTC_CLASS && I2C]
    depends on [RTC_CLASS && I2C]
    inherited [RTC_CLASS && I2C]
   }
   config RTC_DRV_S3C tristate {
    prompt "Samsung S3C series SoC RTC" if [RTC_CLASS && ARCH_S3C2410]
    depends on [RTC_CLASS && ARCH_S3C2410]
    inherited [RTC_CLASS && ARCH_S3C2410]
   }
   config RTC_DRV_M48T86 tristate {
    prompt "ST M48T86/Dallas DS12887" if [RTC_CLASS]
    depends on [RTC_CLASS]
    inherited [RTC_CLASS]
   }
   config RTC_DRV_EP93XX tristate {
    prompt "Cirrus Logic EP93XX" if [RTC_CLASS && ARCH_EP93XX]
    depends on [RTC_CLASS && ARCH_EP93XX]
    inherited [RTC_CLASS && ARCH_EP93XX]
   }
   config RTC_DRV_SA1100 tristate {
    prompt "SA11x0/PXA2xx" if [RTC_CLASS && (ARCH_SA1100 || ARCH_PXA)]
    depends on [RTC_CLASS && (ARCH_SA1100 || ARCH_PXA)]
    inherited [RTC_CLASS && (ARCH_SA1100 || ARCH_PXA)]
   }
   config RTC_DRV_SH tristate {
    prompt "SuperH On-Chip RTC" if [RTC_CLASS && SUPERH]
    depends on [RTC_CLASS && SUPERH]
    inherited [RTC_CLASS && SUPERH]
   }
   config RTC_DRV_VR41XX tristate {
    prompt "NEC VR41XX" if [RTC_CLASS && CPU_VR41XX]
    depends on [RTC_CLASS && CPU_VR41XX]
    inherited [RTC_CLASS && CPU_VR41XX]
   }
   config RTC_DRV_PL031 tristate {
    prompt "ARM AMBA PL031 RTC" if [RTC_CLASS && ARM_AMBA]
    depends on [RTC_CLASS && ARM_AMBA]
    inherited [RTC_CLASS && ARM_AMBA]
   }
   config RTC_DRV_AT91RM9200 tristate {
    prompt "AT91RM9200" if [RTC_CLASS && ARCH_AT91RM9200]
    depends on [RTC_CLASS && ARCH_AT91RM9200]
    inherited [RTC_CLASS && ARCH_AT91RM9200]
   }
   config RTC_DRV_TEST tristate {
    prompt "Test driver/device" if [RTC_CLASS]
    depends on [RTC_CLASS]
    inherited [RTC_CLASS]
   }
   config RTC_DRV_MAX6902 tristate {
    prompt "Maxim 6902" if [RTC_CLASS && SPI]
    depends on [RTC_CLASS && SPI]
    inherited [RTC_CLASS && SPI]
   }
   config RTC_DRV_V3020 tristate {
    prompt "EM Microelectronic V3020" if [RTC_CLASS]
    depends on [RTC_CLASS]
    inherited [RTC_CLASS]
   }
  }
 }
 menu "DMA Engine support" {
  config DMA_ENGINE boolean {
   prompt "Support for DMA engines" if []
  }
  config NET_DMA boolean {
   prompt "Network: TCP receive copy offload" if [DMA_ENGINE && NET]
   depends on [DMA_ENGINE && NET]
   default [y] if [DMA_ENGINE && NET]
   inherited [DMA_ENGINE && NET]
  }
  config INTEL_IOATDMA tristate {
   prompt "Intel I/OAT DMA support" if [DMA_ENGINE && PCI]
   depends on [DMA_ENGINE && PCI]
   default [m] if [DMA_ENGINE && PCI]
   inherited [DMA_ENGINE && PCI]
  }
 }
 menu "Virtualization" {
  config KVM tristate {
   prompt "Kernel-based Virtual Machine (KVM) support" if [X86 && EXPERIMENTAL]
   depends on [X86 && EXPERIMENTAL]
   inherited [X86 && EXPERIMENTAL]
   config KVM_INTEL tristate {
    prompt "KVM for Intel processors support" if [KVM]
    depends on [KVM]
    inherited [KVM]
   }
   config KVM_AMD tristate {
    prompt "KVM for AMD processors support" if [KVM]
    depends on [KVM]
    inherited [KVM]
   }
  }
 }
}
menu "File systems" {
 if [BLOCK] {
  config EXT2_FS tristate {
   prompt "Second extended fs support" if [BLOCK]
   inherited [BLOCK]
   config EXT2_FS_XATTR boolean {
    prompt "Ext2 extended attributes" if [BLOCK && EXT2_FS]
    depends on [EXT2_FS]
    inherited [BLOCK && EXT2_FS]
    config EXT2_FS_POSIX_ACL boolean {
     prompt "Ext2 POSIX Access Control Lists" if [BLOCK && EXT2_FS_XATTR]
     depends on [EXT2_FS_XATTR]
     select FS_POSIX_ACL if [BLOCK && EXT2_FS_XATTR]
     inherited [BLOCK && EXT2_FS_XATTR]
    }
    config EXT2_FS_SECURITY boolean {
     prompt "Ext2 Security Labels" if [BLOCK && EXT2_FS_XATTR]
     depends on [EXT2_FS_XATTR]
     inherited [BLOCK && EXT2_FS_XATTR]
    }
   }
   config EXT2_FS_XIP boolean {
    prompt "Ext2 execute in place support" if [BLOCK && EXT2_FS && MMU]
    depends on [EXT2_FS && MMU]
    inherited [BLOCK && EXT2_FS && MMU]
    config FS_XIP boolean {
     depends on [EXT2_FS_XIP]
     default [y] if [BLOCK && EXT2_FS_XIP]
     inherited [BLOCK && EXT2_FS_XIP]
    }
   }
  }
  config EXT3_FS tristate {
   prompt "Ext3 journalling file system support" if [BLOCK]
   select JBD if [BLOCK]
   inherited [BLOCK]
   config EXT3_FS_XATTR boolean {
    prompt "Ext3 extended attributes" if [BLOCK && EXT3_FS]
    depends on [EXT3_FS]
    default [y] if [BLOCK && EXT3_FS]
    inherited [BLOCK && EXT3_FS]
    config EXT3_FS_POSIX_ACL boolean {
     prompt "Ext3 POSIX Access Control Lists" if [BLOCK && EXT3_FS_XATTR]
     depends on [EXT3_FS_XATTR]
     select FS_POSIX_ACL if [BLOCK && EXT3_FS_XATTR]
     inherited [BLOCK && EXT3_FS_XATTR]
    }
    config EXT3_FS_SECURITY boolean {
     prompt "Ext3 Security Labels" if [BLOCK && EXT3_FS_XATTR]
     depends on [EXT3_FS_XATTR]
     inherited [BLOCK && EXT3_FS_XATTR]
    }
   }
  }
  config EXT4DEV_FS tristate {
   prompt "Ext4dev/ext4 extended fs support development (EXPERIMENTAL)" if [BLOCK && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select JBD2 if [BLOCK && EXPERIMENTAL]
   inherited [BLOCK && EXPERIMENTAL]
   config EXT4DEV_FS_XATTR boolean {
    prompt "Ext4dev extended attributes" if [BLOCK && EXT4DEV_FS]
    depends on [EXT4DEV_FS]
    default [y] if [BLOCK && EXT4DEV_FS]
    inherited [BLOCK && EXT4DEV_FS]
    config EXT4DEV_FS_POSIX_ACL boolean {
     prompt "Ext4dev POSIX Access Control Lists" if [BLOCK && EXT4DEV_FS_XATTR]
     depends on [EXT4DEV_FS_XATTR]
     select FS_POSIX_ACL if [BLOCK && EXT4DEV_FS_XATTR]
     inherited [BLOCK && EXT4DEV_FS_XATTR]
    }
    config EXT4DEV_FS_SECURITY boolean {
     prompt "Ext4dev Security Labels" if [BLOCK && EXT4DEV_FS_XATTR]
     depends on [EXT4DEV_FS_XATTR]
     inherited [BLOCK && EXT4DEV_FS_XATTR]
    }
   }
  }
  config JBD tristate {
   inherited [BLOCK]
  }
  config JBD_DEBUG boolean {
   prompt "JBD (ext3) debugging support" if [BLOCK && JBD]
   depends on [JBD]
   inherited [BLOCK && JBD]
  }
  config JBD2 tristate {
   inherited [BLOCK]
  }
  config JBD2_DEBUG boolean {
   prompt "JBD2 (ext4dev/ext4) debugging support" if [BLOCK && JBD2]
   depends on [JBD2]
   inherited [BLOCK && JBD2]
  }
  config FS_MBCACHE tristate {
   depends on [EXT2_FS_XATTR || EXT3_FS_XATTR || EXT4DEV_FS_XATTR]
   default [y] if [BLOCK && (EXT2_FS_XATTR || EXT3_FS_XATTR || EXT4DEV_FS_XATTR) && (EXT2_FS="y" || EXT3_FS="y" || EXT4DEV_FS="y")]
   default [m] if [BLOCK && (EXT2_FS_XATTR || EXT3_FS_XATTR || EXT4DEV_FS_XATTR) && (EXT2_FS="m" || EXT3_FS="m" || EXT4DEV_FS="m")]
   inherited [BLOCK && (EXT2_FS_XATTR || EXT3_FS_XATTR || EXT4DEV_FS_XATTR)]
  }
  config REISERFS_FS tristate {
   prompt "Reiserfs support" if [BLOCK]
   inherited [BLOCK]
   config REISERFS_CHECK boolean {
    prompt "Enable reiserfs debug mode" if [BLOCK && REISERFS_FS]
    depends on [REISERFS_FS]
    inherited [BLOCK && REISERFS_FS]
   }
   config REISERFS_PROC_INFO boolean {
    prompt "Stats in /proc/fs/reiserfs" if [BLOCK && REISERFS_FS]
    depends on [REISERFS_FS]
    inherited [BLOCK && REISERFS_FS]
   }
   config REISERFS_FS_XATTR boolean {
    prompt "ReiserFS extended attributes" if [BLOCK && REISERFS_FS]
    depends on [REISERFS_FS]
    inherited [BLOCK && REISERFS_FS]
    config REISERFS_FS_POSIX_ACL boolean {
     prompt "ReiserFS POSIX Access Control Lists" if [BLOCK && REISERFS_FS_XATTR]
     depends on [REISERFS_FS_XATTR]
     select FS_POSIX_ACL if [BLOCK && REISERFS_FS_XATTR]
     inherited [BLOCK && REISERFS_FS_XATTR]
    }
    config REISERFS_FS_SECURITY boolean {
     prompt "ReiserFS Security Labels" if [BLOCK && REISERFS_FS_XATTR]
     depends on [REISERFS_FS_XATTR]
     inherited [BLOCK && REISERFS_FS_XATTR]
    }
   }
  }
  config JFS_FS tristate {
   prompt "JFS filesystem support" if [BLOCK]
   select NLS if [BLOCK]
   inherited [BLOCK]
   config JFS_POSIX_ACL boolean {
    prompt "JFS POSIX Access Control Lists" if [BLOCK && JFS_FS]
    depends on [JFS_FS]
    select FS_POSIX_ACL if [BLOCK && JFS_FS]
    inherited [BLOCK && JFS_FS]
   }
   config JFS_SECURITY boolean {
    prompt "JFS Security Labels" if [BLOCK && JFS_FS]
    depends on [JFS_FS]
    inherited [BLOCK && JFS_FS]
   }
   config JFS_DEBUG boolean {
    prompt "JFS debugging" if [BLOCK && JFS_FS]
    depends on [JFS_FS]
    inherited [BLOCK && JFS_FS]
   }
   config JFS_STATISTICS boolean {
    prompt "JFS statistics" if [BLOCK && JFS_FS]
    depends on [JFS_FS]
    inherited [BLOCK && JFS_FS]
   }
  }
  config FS_POSIX_ACL boolean {
   default [n] if [BLOCK]
   inherited [BLOCK]
  }
  config XFS_FS tristate {
   prompt "XFS filesystem support" if [BLOCK]
   depends on [BLOCK]
   inherited [BLOCK]
   config XFS_QUOTA boolean {
    prompt "XFS Quota support" if [BLOCK && XFS_FS]
    depends on [XFS_FS]
    inherited [BLOCK && XFS_FS]
   }
   config XFS_SECURITY boolean {
    prompt "XFS Security Label support" if [BLOCK && XFS_FS]
    depends on [XFS_FS]
    inherited [BLOCK && XFS_FS]
   }
   config XFS_POSIX_ACL boolean {
    prompt "XFS POSIX ACL support" if [BLOCK && XFS_FS]
    depends on [XFS_FS]
    inherited [BLOCK && XFS_FS]
   }
   config XFS_RT boolean {
    prompt "XFS Realtime subvolume support" if [BLOCK && XFS_FS]
    depends on [XFS_FS]
    inherited [BLOCK && XFS_FS]
   }
  }
  config GFS2_FS tristate {
   prompt "GFS2 file system support" if [BLOCK && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select FS_POSIX_ACL if [BLOCK && EXPERIMENTAL]
   select CRC32 if [BLOCK && EXPERIMENTAL]
   inherited [BLOCK && EXPERIMENTAL]
   config GFS2_FS_LOCKING_NOLOCK tristate {
    prompt "GFS2 \"nolock\" locking module" if [BLOCK && GFS2_FS]
    depends on [GFS2_FS]
    inherited [BLOCK && GFS2_FS]
   }
   config GFS2_FS_LOCKING_DLM tristate {
    prompt "GFS2 DLM locking module" if [BLOCK && GFS2_FS && NET && INET && (IPV6 || IPV6="n")]
    depends on [GFS2_FS && NET && INET && (IPV6 || IPV6="n")]
    select IP_SCTP if [BLOCK && GFS2_FS && NET && INET && (IPV6 || IPV6="n") && DLM_SCTP]
    select CONFIGFS_FS if [BLOCK && GFS2_FS && NET && INET && (IPV6 || IPV6="n")]
    select DLM if [BLOCK && GFS2_FS && NET && INET && (IPV6 || IPV6="n")]
    inherited [BLOCK && GFS2_FS && NET && INET && (IPV6 || IPV6="n")]
   }
  }
  config OCFS2_FS tristate {
   prompt "OCFS2 file system support" if [BLOCK && NET && SYSFS]
   depends on [NET && SYSFS]
   select CONFIGFS_FS if [BLOCK && NET && SYSFS]
   select JBD if [BLOCK && NET && SYSFS]
   select CRC32 if [BLOCK && NET && SYSFS]
   select INET if [BLOCK && NET && SYSFS]
   inherited [BLOCK && NET && SYSFS]
   config OCFS2_DEBUG_MASKLOG boolean {
    prompt "OCFS2 logging support" if [BLOCK && OCFS2_FS]
    depends on [OCFS2_FS]
    default [y] if [BLOCK && OCFS2_FS]
    inherited [BLOCK && OCFS2_FS]
   }
  }
  config MINIX_FS tristate {
   prompt "Minix fs support" if [BLOCK]
   inherited [BLOCK]
  }
  config ROMFS_FS tristate {
   prompt "ROM file system support" if [BLOCK]
   inherited [BLOCK]
  }
 }
 config INOTIFY boolean {
  prompt "Inotify file change notification support" if []
  default [y] if []
  config INOTIFY_USER boolean {
   prompt "Inotify support for userspace" if [INOTIFY]
   depends on [INOTIFY]
   default [y] if [INOTIFY]
   inherited [INOTIFY]
  }
 }
 config QUOTA boolean {
  prompt "Quota support" if []
  config QFMT_V1 tristate {
   prompt "Old quota format support" if [QUOTA]
   depends on [QUOTA]
   inherited [QUOTA]
  }
  config QFMT_V2 tristate {
   prompt "Quota format v2 support" if [QUOTA]
   depends on [QUOTA]
   inherited [QUOTA]
  }
  config QUOTACTL boolean {
   depends on [XFS_QUOTA || QUOTA]
   default [y] if [XFS_QUOTA || QUOTA]
   inherited [XFS_QUOTA || QUOTA]
  }
 }
 config DNOTIFY boolean {
  prompt "Dnotify support" if [EMBEDDED]
  default [y] if []
 }
 config AUTOFS_FS tristate {
  prompt "Kernel automounter support" if []
 }
 config AUTOFS4_FS tristate {
  prompt "Kernel automounter version 4 support (also supports v3)" if []
 }
 config FUSE_FS tristate {
  prompt "Filesystem in Userspace support" if []
 }
 config GENERIC_ACL boolean {
  select FS_POSIX_ACL if []
 }
 if [BLOCK] {
  menu "CD-ROM/DVD Filesystems" {
   depends on [BLOCK]
   config ISO9660_FS tristate {
    prompt "ISO 9660 CDROM file system support" if [BLOCK]
    inherited [BLOCK]
    config JOLIET boolean {
     prompt "Microsoft Joliet CDROM extensions" if [BLOCK && ISO9660_FS]
     depends on [ISO9660_FS]
     select NLS if [BLOCK && ISO9660_FS]
     inherited [BLOCK && ISO9660_FS]
    }
    config ZISOFS boolean {
     prompt "Transparent decompression extension" if [BLOCK && ISO9660_FS]
     depends on [ISO9660_FS]
     select ZLIB_INFLATE if [BLOCK && ISO9660_FS]
     inherited [BLOCK && ISO9660_FS]
     config ZISOFS_FS tristate {
      depends on [ZISOFS]
      default [ISO9660_FS] if [BLOCK && ZISOFS]
      inherited [BLOCK && ZISOFS]
     }
    }
   }
   config UDF_FS tristate {
    prompt "UDF file system support" if [BLOCK]
    inherited [BLOCK]
    config UDF_NLS boolean {
     default [y] if [BLOCK && (UDF_FS="m" && NLS || UDF_FS="y" && NLS="y")]
     depends on [UDF_FS="m" && NLS || UDF_FS="y" && NLS="y"]
     inherited [BLOCK && (UDF_FS="m" && NLS || UDF_FS="y" && NLS="y")]
    }
   }
  }
 }
 if [BLOCK] {
  menu "DOS/FAT/NT Filesystems" {
   depends on [BLOCK]
   config FAT_FS tristate {
    select NLS if [BLOCK]
    inherited [BLOCK]
   }
   config MSDOS_FS tristate {
    prompt "MSDOS fs support" if [BLOCK]
    select FAT_FS if [BLOCK]
    inherited [BLOCK]
   }
   config VFAT_FS tristate {
    prompt "VFAT (Windows-95) fs support" if [BLOCK]
    select FAT_FS if [BLOCK]
    inherited [BLOCK]
    config FAT_DEFAULT_CODEPAGE integer {
     prompt "Default codepage for FAT" if [BLOCK && (MSDOS_FS || VFAT_FS)]
     depends on [MSDOS_FS || VFAT_FS]
     default [437] if [BLOCK && (MSDOS_FS || VFAT_FS)]
     inherited [BLOCK && (MSDOS_FS || VFAT_FS)]
    }
    config FAT_DEFAULT_IOCHARSET string {
     prompt "Default iocharset for FAT" if [BLOCK && VFAT_FS]
     depends on [VFAT_FS]
     default ["iso8859-1"] if [BLOCK && VFAT_FS]
     inherited [BLOCK && VFAT_FS]
    }
   }
   config NTFS_FS tristate {
    prompt "NTFS file system support" if [BLOCK]
    select NLS if [BLOCK]
    inherited [BLOCK]
    config NTFS_DEBUG boolean {
     prompt "NTFS debugging support" if [BLOCK && NTFS_FS]
     depends on [NTFS_FS]
     inherited [BLOCK && NTFS_FS]
    }
    config NTFS_RW boolean {
     prompt "NTFS write support" if [BLOCK && NTFS_FS]
     depends on [NTFS_FS]
     inherited [BLOCK && NTFS_FS]
    }
   }
  }
 }
 menu "Pseudo filesystems" {
  config PROC_FS boolean {
   prompt "/proc file system support" if [EMBEDDED]
   default [y] if []
   config PROC_KCORE boolean {
    prompt "/proc/kcore support" if [PROC_FS && MMU && !ARM]
    depends on [PROC_FS && MMU]
    inherited [PROC_FS && MMU]
   }
   config PROC_VMCORE boolean {
    prompt "/proc/vmcore support (EXPERIMENTAL)" if [PROC_FS && EXPERIMENTAL && CRASH_DUMP]
    depends on [PROC_FS && EXPERIMENTAL && CRASH_DUMP]
    default [y] if [PROC_FS && EXPERIMENTAL && CRASH_DUMP]
    inherited [PROC_FS && EXPERIMENTAL && CRASH_DUMP]
   }
   config PROC_SYSCTL boolean {
    prompt "Sysctl support (/proc/sys)" if [PROC_FS && EMBEDDED]
    depends on [PROC_FS]
    select SYSCTL if [PROC_FS]
    default [y] if [PROC_FS]
    inherited [PROC_FS]
   }
  }
  config SYSFS boolean {
   prompt "sysfs file system support" if [EMBEDDED]
   default [y] if []
  }
  config TMPFS boolean {
   prompt "Virtual memory file system support (former shm fs)" if []
   config TMPFS_POSIX_ACL boolean {
    prompt "Tmpfs POSIX Access Control Lists" if [TMPFS]
    depends on [TMPFS]
    select GENERIC_ACL if [TMPFS]
    inherited [TMPFS]
   }
  }
  config HUGETLBFS boolean {
   prompt "HugeTLB file system support" if [X86 || IA64 || PPC64 || SPARC64 || SUPERH || BROKEN]
   depends on [X86 || IA64 || PPC64 || SPARC64 || SUPERH || BROKEN]
   inherited [X86 || IA64 || PPC64 || SPARC64 || SUPERH || BROKEN]
  }
  config HUGETLB_PAGE boolean {
   default [HUGETLBFS] if []
  }
  config RAMFS boolean {
   default [y] if []
  }
  config CONFIGFS_FS tristate {
   prompt "Userspace-driven configuration filesystem (EXPERIMENTAL)" if [SYSFS && EXPERIMENTAL]
   depends on [SYSFS && EXPERIMENTAL]
   inherited [SYSFS && EXPERIMENTAL]
  }
 }
 menu "Miscellaneous filesystems" {
  config ADFS_FS tristate {
   prompt "ADFS file system support (EXPERIMENTAL)" if [BLOCK && EXPERIMENTAL]
   depends on [BLOCK && EXPERIMENTAL]
   inherited [BLOCK && EXPERIMENTAL]
   config ADFS_FS_RW boolean {
    prompt "ADFS write support (DANGEROUS)" if [ADFS_FS]
    depends on [ADFS_FS]
    inherited [ADFS_FS]
   }
  }
  config AFFS_FS tristate {
   prompt "Amiga FFS file system support (EXPERIMENTAL)" if [BLOCK && EXPERIMENTAL]
   depends on [BLOCK && EXPERIMENTAL]
   inherited [BLOCK && EXPERIMENTAL]
  }
  config ECRYPT_FS tristate {
   prompt "eCrypt filesystem layer support (EXPERIMENTAL)" if [EXPERIMENTAL && KEYS && CRYPTO]
   depends on [EXPERIMENTAL && KEYS && CRYPTO]
   inherited [EXPERIMENTAL && KEYS && CRYPTO]
  }
  config HFS_FS tristate {
   prompt "Apple Macintosh file system support (EXPERIMENTAL)" if [BLOCK && EXPERIMENTAL]
   depends on [BLOCK && EXPERIMENTAL]
   select NLS if [BLOCK && EXPERIMENTAL]
   inherited [BLOCK && EXPERIMENTAL]
  }
  config HFSPLUS_FS tristate {
   prompt "Apple Extended HFS file system support" if [BLOCK]
   depends on [BLOCK]
   select NLS if [BLOCK]
   select NLS_UTF8 if [BLOCK]
   inherited [BLOCK]
  }
  config BEFS_FS tristate {
   prompt "BeOS file system (BeFS) support (read only) (EXPERIMENTAL)" if [BLOCK && EXPERIMENTAL]
   depends on [BLOCK && EXPERIMENTAL]
   select NLS if [BLOCK && EXPERIMENTAL]
   inherited [BLOCK && EXPERIMENTAL]
   config BEFS_DEBUG boolean {
    prompt "Debug BeFS" if [BEFS_FS]
    depends on [BEFS_FS]
    inherited [BEFS_FS]
   }
  }
  config BFS_FS tristate {
   prompt "BFS file system support (EXPERIMENTAL)" if [BLOCK && EXPERIMENTAL]
   depends on [BLOCK && EXPERIMENTAL]
   inherited [BLOCK && EXPERIMENTAL]
  }
  config EFS_FS tristate {
   prompt "EFS file system support (read only) (EXPERIMENTAL)" if [BLOCK && EXPERIMENTAL]
   depends on [BLOCK && EXPERIMENTAL]
   inherited [BLOCK && EXPERIMENTAL]
  }
  config JFFS_FS tristate {
   prompt "Journalling Flash File System (JFFS) support" if [MTD && BLOCK && BROKEN]
   depends on [MTD && BLOCK && BROKEN]
   inherited [MTD && BLOCK && BROKEN]
   config JFFS_FS_VERBOSE integer {
    prompt "JFFS debugging verbosity (0 = quiet, 3 = noisy)" if [JFFS_FS]
    depends on [JFFS_FS]
    default [0] if [JFFS_FS]
    inherited [JFFS_FS]
   }
   config JFFS_PROC_FS boolean {
    prompt "JFFS stats available in /proc filesystem" if [JFFS_FS && PROC_FS]
    depends on [JFFS_FS && PROC_FS]
    inherited [JFFS_FS && PROC_FS]
   }
  }
  config JFFS2_FS tristate {
   prompt "Journalling Flash File System v2 (JFFS2) support" if [MTD]
   select CRC32 if [MTD]
   depends on [MTD]
   inherited [MTD]
   config JFFS2_FS_DEBUG integer {
    prompt "JFFS2 debugging verbosity (0 = quiet, 2 = noisy)" if [JFFS2_FS]
    depends on [JFFS2_FS]
    default [0] if [JFFS2_FS]
    inherited [JFFS2_FS]
   }
   config JFFS2_FS_WRITEBUFFER boolean {
    prompt "JFFS2 write-buffering support" if [JFFS2_FS]
    depends on [JFFS2_FS]
    default [y] if [JFFS2_FS]
    inherited [JFFS2_FS]
   }
   config JFFS2_SUMMARY boolean {
    prompt "JFFS2 summary support (EXPERIMENTAL)" if [JFFS2_FS && EXPERIMENTAL]
    depends on [JFFS2_FS && EXPERIMENTAL]
    default [n] if [JFFS2_FS && EXPERIMENTAL]
    inherited [JFFS2_FS && EXPERIMENTAL]
   }
   config JFFS2_FS_XATTR boolean {
    prompt "JFFS2 XATTR support (EXPERIMENTAL)" if [JFFS2_FS && EXPERIMENTAL]
    depends on [JFFS2_FS && EXPERIMENTAL]
    default [n] if [JFFS2_FS && EXPERIMENTAL]
    inherited [JFFS2_FS && EXPERIMENTAL]
    config JFFS2_FS_POSIX_ACL boolean {
     prompt "JFFS2 POSIX Access Control Lists" if [JFFS2_FS_XATTR]
     depends on [JFFS2_FS_XATTR]
     default [y] if [JFFS2_FS_XATTR]
     select FS_POSIX_ACL if [JFFS2_FS_XATTR]
     inherited [JFFS2_FS_XATTR]
    }
    config JFFS2_FS_SECURITY boolean {
     prompt "JFFS2 Security Labels" if [JFFS2_FS_XATTR]
     depends on [JFFS2_FS_XATTR]
     default [y] if [JFFS2_FS_XATTR]
     inherited [JFFS2_FS_XATTR]
    }
   }
   config JFFS2_COMPRESSION_OPTIONS boolean {
    prompt "Advanced compression options for JFFS2" if [JFFS2_FS]
    depends on [JFFS2_FS]
    default [n] if [JFFS2_FS]
    inherited [JFFS2_FS]
    config JFFS2_ZLIB boolean {
     prompt "JFFS2 ZLIB compression support" if [JFFS2_FS && JFFS2_COMPRESSION_OPTIONS]
     select ZLIB_INFLATE if [JFFS2_FS]
     select ZLIB_DEFLATE if [JFFS2_FS]
     depends on [JFFS2_FS]
     default [y] if [JFFS2_FS]
     inherited [JFFS2_FS]
    }
    config JFFS2_RTIME boolean {
     prompt "JFFS2 RTIME compression support" if [JFFS2_FS && JFFS2_COMPRESSION_OPTIONS]
     depends on [JFFS2_FS]
     default [y] if [JFFS2_FS]
     inherited [JFFS2_FS]
    }
    config JFFS2_RUBIN boolean {
     prompt "JFFS2 RUBIN compression support" if [JFFS2_FS && JFFS2_COMPRESSION_OPTIONS]
     depends on [JFFS2_FS]
     default [n] if [JFFS2_FS]
     inherited [JFFS2_FS]
    }
    choice boolean {
     prompt "JFFS2 default compression mode" if [JFFS2_FS && JFFS2_COMPRESSION_OPTIONS]
     default [JFFS2_CMODE_PRIORITY] if [JFFS2_FS]
     depends on [JFFS2_FS]
     config JFFS2_CMODE_NONE boolean {
      prompt "no compression" if [<choice>]
      inherited [<choice>]
     }
     config JFFS2_CMODE_PRIORITY boolean {
      prompt "priority" if [<choice>]
      inherited [<choice>]
     }
     config JFFS2_CMODE_SIZE boolean {
      prompt "size (EXPERIMENTAL)" if [<choice>]
      inherited [<choice>]
     }
    }
   }
  }
  config CRAMFS tristate {
   prompt "Compressed ROM file system support (cramfs)" if [BLOCK]
   depends on [BLOCK]
   select ZLIB_INFLATE if [BLOCK]
   inherited [BLOCK]
  }
  config VXFS_FS tristate {
   prompt "FreeVxFS file system support (VERITAS VxFS(TM) compatible)" if [BLOCK]
   depends on [BLOCK]
   inherited [BLOCK]
  }
  config HPFS_FS tristate {
   prompt "OS/2 HPFS file system support" if [BLOCK]
   depends on [BLOCK]
   inherited [BLOCK]
  }
  config QNX4FS_FS tristate {
   prompt "QNX4 file system support (read only)" if [BLOCK]
   depends on [BLOCK]
   inherited [BLOCK]
   config QNX4FS_RW boolean {
    prompt "QNX4FS write support (DANGEROUS)" if [QNX4FS_FS && EXPERIMENTAL && BROKEN]
    depends on [QNX4FS_FS && EXPERIMENTAL && BROKEN]
    inherited [QNX4FS_FS && EXPERIMENTAL && BROKEN]
   }
  }
  config SYSV_FS tristate {
   prompt "System V/Xenix/V7/Coherent file system support" if [BLOCK]
   depends on [BLOCK]
   inherited [BLOCK]
  }
  config UFS_FS tristate {
   prompt "UFS file system support (read only)" if [BLOCK]
   depends on [BLOCK]
   inherited [BLOCK]
   config UFS_FS_WRITE boolean {
    prompt "UFS file system write support (DANGEROUS)" if [UFS_FS && EXPERIMENTAL]
    depends on [UFS_FS && EXPERIMENTAL]
    inherited [UFS_FS && EXPERIMENTAL]
   }
   config UFS_DEBUG boolean {
    prompt "UFS debugging" if [UFS_FS]
    depends on [UFS_FS]
    inherited [UFS_FS]
   }
  }
 }
 menu "Network File Systems" {
  depends on [NET]
  config NFS_FS tristate {
   prompt "NFS file system support" if [NET && INET]
   depends on [INET]
   select LOCKD if [NET && INET]
   select SUNRPC if [NET && INET]
   select NFS_ACL_SUPPORT if [NET && INET && NFS_V3_ACL]
   inherited [NET && INET]
   config NFS_V3 boolean {
    prompt "Provide NFSv3 client support" if [NET && NFS_FS]
    depends on [NFS_FS]
    inherited [NET && NFS_FS]
    config NFS_V3_ACL boolean {
     prompt "Provide client support for the NFSv3 ACL protocol extension" if [NET && NFS_V3]
     depends on [NFS_V3]
     inherited [NET && NFS_V3]
    }
   }
   config NFS_V4 boolean {
    prompt "Provide NFSv4 client support (EXPERIMENTAL)" if [NET && NFS_FS && EXPERIMENTAL]
    depends on [NFS_FS && EXPERIMENTAL]
    select RPCSEC_GSS_KRB5 if [NET && NFS_FS && EXPERIMENTAL]
    inherited [NET && NFS_FS && EXPERIMENTAL]
   }
   config NFS_DIRECTIO boolean {
    prompt "Allow direct I/O on NFS files" if [NET && NFS_FS]
    depends on [NFS_FS]
    inherited [NET && NFS_FS]
   }
  }
  config NFSD tristate {
   prompt "NFS server support" if [NET && INET]
   depends on [INET]
   select LOCKD if [NET && INET]
   select SUNRPC if [NET && INET]
   select EXPORTFS if [NET && INET]
   select NFSD_V2_ACL if [NET && INET && NFSD_V3_ACL]
   select NFS_ACL_SUPPORT if [NET && INET && NFSD_V2_ACL]
   select NFSD_TCP if [NET && INET && NFSD_V4]
   select CRYPTO_MD5 if [NET && INET && NFSD_V4]
   select CRYPTO if [NET && INET && NFSD_V4]
   select FS_POSIX_ACL if [NET && INET && NFSD_V4]
   inherited [NET && INET]
   config NFSD_V2_ACL boolean {
    depends on [NFSD]
    inherited [NET && NFSD]
   }
   config NFSD_V3 boolean {
    prompt "Provide NFSv3 server support" if [NET && NFSD]
    depends on [NFSD]
    inherited [NET && NFSD]
    config NFSD_V3_ACL boolean {
     prompt "Provide server support for the NFSv3 ACL protocol extension" if [NET && NFSD_V3]
     depends on [NFSD_V3]
     inherited [NET && NFSD_V3]
    }
    config NFSD_V4 boolean {
     prompt "Provide NFSv4 server support (EXPERIMENTAL)" if [NET && NFSD_V3 && EXPERIMENTAL]
     depends on [NFSD_V3 && EXPERIMENTAL]
     inherited [NET && NFSD_V3 && EXPERIMENTAL]
    }
   }
   config NFSD_TCP boolean {
    prompt "Provide NFS server over TCP support" if [NET && NFSD]
    depends on [NFSD]
    default [y] if [NET && NFSD]
    inherited [NET && NFSD]
   }
  }
  config ROOT_NFS boolean {
   prompt "Root file system on NFS" if [NET && NFS_FS="y" && IP_PNP]
   depends on [NFS_FS="y" && IP_PNP]
   inherited [NET && NFS_FS="y" && IP_PNP]
  }
  config LOCKD tristate {
   inherited [NET]
  }
  config LOCKD_V4 boolean {
   depends on [NFSD_V3 || NFS_V3]
   default [y] if [NET && (NFSD_V3 || NFS_V3)]
   inherited [NET && (NFSD_V3 || NFS_V3)]
  }
  config EXPORTFS tristate {
   inherited [NET]
  }
  config NFS_ACL_SUPPORT tristate {
   select FS_POSIX_ACL if [NET]
   inherited [NET]
  }
  config NFS_COMMON boolean {
   depends on [NFSD || NFS_FS]
   default [y] if [NET && (NFSD || NFS_FS)]
   inherited [NET && (NFSD || NFS_FS)]
  }
  config SUNRPC tristate {
   inherited [NET]
  }
  config SUNRPC_GSS tristate {
   inherited [NET]
  }
  config RPCSEC_GSS_KRB5 tristate {
   prompt "Secure RPC: Kerberos V mechanism (EXPERIMENTAL)" if [NET && SUNRPC && EXPERIMENTAL]
   depends on [SUNRPC && EXPERIMENTAL]
   select SUNRPC_GSS if [NET && SUNRPC && EXPERIMENTAL]
   select CRYPTO if [NET && SUNRPC && EXPERIMENTAL]
   select CRYPTO_MD5 if [NET && SUNRPC && EXPERIMENTAL]
   select CRYPTO_DES if [NET && SUNRPC && EXPERIMENTAL]
   select CRYPTO_CBC if [NET && SUNRPC && EXPERIMENTAL]
   inherited [NET && SUNRPC && EXPERIMENTAL]
  }
  config RPCSEC_GSS_SPKM3 tristate {
   prompt "Secure RPC: SPKM3 mechanism (EXPERIMENTAL)" if [NET && SUNRPC && EXPERIMENTAL]
   depends on [SUNRPC && EXPERIMENTAL]
   select SUNRPC_GSS if [NET && SUNRPC && EXPERIMENTAL]
   select CRYPTO if [NET && SUNRPC && EXPERIMENTAL]
   select CRYPTO_MD5 if [NET && SUNRPC && EXPERIMENTAL]
   select CRYPTO_DES if [NET && SUNRPC && EXPERIMENTAL]
   select CRYPTO_CAST5 if [NET && SUNRPC && EXPERIMENTAL]
   select CRYPTO_CBC if [NET && SUNRPC && EXPERIMENTAL]
   inherited [NET && SUNRPC && EXPERIMENTAL]
  }
  config SMB_FS tristate {
   prompt "SMB file system support (to mount Windows shares etc.)" if [NET && INET]
   depends on [INET]
   select NLS if [NET && INET]
   inherited [NET && INET]
   config SMB_NLS_DEFAULT boolean {
    prompt "Use a default NLS" if [NET && SMB_FS]
    depends on [SMB_FS]
    inherited [NET && SMB_FS]
    config SMB_NLS_REMOTE string {
     prompt "Default Remote NLS Option" if [NET && SMB_NLS_DEFAULT]
     depends on [SMB_NLS_DEFAULT]
     default ["cp437"] if [NET && SMB_NLS_DEFAULT]
     inherited [NET && SMB_NLS_DEFAULT]
    }
   }
  }
  config CIFS tristate {
   prompt "CIFS support (advanced network filesystem for Samba, Window and other CIFS compliant servers)" if [NET && INET]
   depends on [INET]
   select NLS if [NET && INET]
   inherited [NET && INET]
   config CIFS_STATS boolean {
    prompt "CIFS statistics" if [NET && CIFS]
    depends on [CIFS]
    inherited [NET && CIFS]
    config CIFS_STATS2 boolean {
     prompt "Extended statistics" if [NET && CIFS_STATS]
     depends on [CIFS_STATS]
     inherited [NET && CIFS_STATS]
    }
   }
   config CIFS_WEAK_PW_HASH boolean {
    prompt "Support legacy servers which use weaker LANMAN security" if [NET && CIFS]
    depends on [CIFS]
    inherited [NET && CIFS]
   }
   config CIFS_XATTR boolean {
    prompt "CIFS extended attributes" if [NET && CIFS]
    depends on [CIFS]
    inherited [NET && CIFS]
    config CIFS_POSIX boolean {
     prompt "CIFS POSIX Extensions" if [NET && CIFS_XATTR]
     depends on [CIFS_XATTR]
     inherited [NET && CIFS_XATTR]
    }
   }
   config CIFS_DEBUG2 boolean {
    prompt "Enable additional CIFS debugging routines" if [NET && CIFS]
    depends on [CIFS]
    inherited [NET && CIFS]
   }
   config CIFS_EXPERIMENTAL boolean {
    prompt "CIFS Experimental Features (EXPERIMENTAL)" if [NET && CIFS && EXPERIMENTAL]
    depends on [CIFS && EXPERIMENTAL]
    inherited [NET && CIFS && EXPERIMENTAL]
    config CIFS_UPCALL boolean {
     prompt "Kerberos/SPNEGO advanced session setup (EXPERIMENTAL)" if [NET && CIFS_EXPERIMENTAL && CONNECTOR]
     depends on [CIFS_EXPERIMENTAL]
     depends on [CONNECTOR]
     inherited [NET && CIFS_EXPERIMENTAL && CONNECTOR]
    }
   }
  }
  config NCP_FS tristate {
   prompt "NCP file system support (to mount NetWare volumes)" if [NET && (IPX!="n" || INET)]
   depends on [IPX!="n" || INET]
   inherited [NET && (IPX!="n" || INET)]
   config NCPFS_PACKET_SIGNING boolean {
    prompt "Packet signatures" if [NET && NCP_FS]
    depends on [NCP_FS]
    inherited [NET && NCP_FS]
   }
   config NCPFS_IOCTL_LOCKING boolean {
    prompt "Proprietary file locking" if [NET && NCP_FS]
    depends on [NCP_FS]
    inherited [NET && NCP_FS]
   }
   config NCPFS_STRONG boolean {
    prompt "Clear remove/delete inhibit when needed" if [NET && NCP_FS]
    depends on [NCP_FS]
    inherited [NET && NCP_FS]
   }
   config NCPFS_NFS_NS boolean {
    prompt "Use NFS namespace if available" if [NET && NCP_FS]
    depends on [NCP_FS]
    inherited [NET && NCP_FS]
   }
   config NCPFS_OS2_NS boolean {
    prompt "Use LONG (OS/2) namespace if available" if [NET && NCP_FS]
    depends on [NCP_FS]
    inherited [NET && NCP_FS]
   }
   config NCPFS_SMALLDOS boolean {
    prompt "Lowercase DOS filenames" if [NET && NCP_FS]
    depends on [NCP_FS]
    inherited [NET && NCP_FS]
   }
   config NCPFS_NLS boolean {
    prompt "Use Native Language Support" if [NET && NCP_FS]
    depends on [NCP_FS]
    select NLS if [NET && NCP_FS]
    inherited [NET && NCP_FS]
   }
   config NCPFS_EXTRAS boolean {
    prompt "Enable symbolic links and execute flags" if [NET && NCP_FS]
    depends on [NCP_FS]
    inherited [NET && NCP_FS]
   }
  }
  config CODA_FS tristate {
   prompt "Coda file system support (advanced network fs)" if [NET && INET]
   depends on [INET]
   inherited [NET && INET]
   config CODA_FS_OLD_API boolean {
    prompt "Use 96-bit Coda file identifiers" if [NET && CODA_FS]
    depends on [CODA_FS]
    inherited [NET && CODA_FS]
   }
  }
  config AFS_FS tristate {
   prompt "Andrew File System support (AFS) (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL]
   depends on [INET && EXPERIMENTAL]
   select RXRPC if [NET && INET && EXPERIMENTAL]
   inherited [NET && INET && EXPERIMENTAL]
  }
  config RXRPC tristate {
   inherited [NET]
  }
  config 9P_FS tristate {
   prompt "Plan 9 Resource Sharing Support (9P2000) (Experimental)" if [NET && INET && EXPERIMENTAL]
   depends on [INET && EXPERIMENTAL]
   inherited [NET && INET && EXPERIMENTAL]
  }
 }
 if [BLOCK] {
  menu "Partition Types" {
   depends on [BLOCK]
   config PARTITION_ADVANCED boolean {
    prompt "Advanced partition selection" if [BLOCK]
    inherited [BLOCK]
    config ACORN_PARTITION boolean {
     prompt "Acorn partition support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && ARCH_ACORN]
     inherited [BLOCK]
     config ACORN_PARTITION_CUMANA boolean {
      prompt "Cumana partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
     config ACORN_PARTITION_EESOX boolean {
      prompt "EESOX partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
     config ACORN_PARTITION_ICS boolean {
      prompt "ICS partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
     config ACORN_PARTITION_ADFS boolean {
      prompt "Native filecore partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
     config ACORN_PARTITION_POWERTEC boolean {
      prompt "PowerTec partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
     config ACORN_PARTITION_RISCIX boolean {
      prompt "RISCiX partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
    }
    config OSF_PARTITION boolean {
     prompt "Alpha OSF partition support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && ALPHA]
     inherited [BLOCK]
    }
    config AMIGA_PARTITION boolean {
     prompt "Amiga partition table support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && (AMIGA || AFFS_FS="y")]
     inherited [BLOCK]
    }
    config ATARI_PARTITION boolean {
     prompt "Atari partition table support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && ATARI]
     inherited [BLOCK]
    }
    config IBM_PARTITION boolean {
     prompt "IBM disk label and partition support" if [BLOCK && PARTITION_ADVANCED && S390]
     depends on [PARTITION_ADVANCED && S390]
     inherited [BLOCK && PARTITION_ADVANCED && S390]
    }
    config MAC_PARTITION boolean {
     prompt "Macintosh partition map support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && (MAC || PPC_PMAC)]
     inherited [BLOCK]
    }
    config MSDOS_PARTITION boolean {
     prompt "PC BIOS (MSDOS partition tables) support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK]
     inherited [BLOCK]
     config BSD_DISKLABEL boolean {
      prompt "BSD disklabel (FreeBSD partition tables) support" if [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
      depends on [PARTITION_ADVANCED && MSDOS_PARTITION]
      inherited [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
     }
     config MINIX_SUBPARTITION boolean {
      prompt "Minix subpartition support" if [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
      depends on [PARTITION_ADVANCED && MSDOS_PARTITION]
      inherited [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
     }
     config SOLARIS_X86_PARTITION boolean {
      prompt "Solaris (x86) partition table support" if [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
      depends on [PARTITION_ADVANCED && MSDOS_PARTITION]
      inherited [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
     }
     config UNIXWARE_DISKLABEL boolean {
      prompt "Unixware slices support" if [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
      depends on [PARTITION_ADVANCED && MSDOS_PARTITION]
      inherited [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
     }
    }
    config LDM_PARTITION boolean {
     prompt "Windows Logical Disk Manager (Dynamic Disk) support" if [BLOCK && PARTITION_ADVANCED]
     depends on [PARTITION_ADVANCED]
     inherited [BLOCK && PARTITION_ADVANCED]
     config LDM_DEBUG boolean {
      prompt "Windows LDM extra logging" if [BLOCK && LDM_PARTITION]
      depends on [LDM_PARTITION]
      inherited [BLOCK && LDM_PARTITION]
     }
    }
    config SGI_PARTITION boolean {
     prompt "SGI partition support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && (SGI_IP22 || SGI_IP27 || (MACH_JAZZ || SNI_RM) && !CPU_LITTLE_ENDIAN)]
     inherited [BLOCK]
    }
    config ULTRIX_PARTITION boolean {
     prompt "Ultrix partition table support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && MACH_DECSTATION]
     inherited [BLOCK]
    }
    config SUN_PARTITION boolean {
     prompt "Sun partition tables support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && (SPARC || SUN3 || SUN3X)]
     inherited [BLOCK]
    }
    config KARMA_PARTITION boolean {
     prompt "Karma Partition support" if [BLOCK && PARTITION_ADVANCED]
     depends on [PARTITION_ADVANCED]
     inherited [BLOCK && PARTITION_ADVANCED]
    }
    config EFI_PARTITION boolean {
     prompt "EFI GUID Partition support" if [BLOCK && PARTITION_ADVANCED]
     depends on [PARTITION_ADVANCED]
     select CRC32 if [BLOCK && PARTITION_ADVANCED]
     inherited [BLOCK && PARTITION_ADVANCED]
    }
   }
  }
 }
 menu "Native Language Support" {
  config NLS tristate {
   prompt "Base native language support" if []
   config NLS_DEFAULT string {
    prompt "Default NLS Option" if [NLS]
    depends on [NLS]
    default ["iso8859-1"] if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_437 tristate {
    prompt "Codepage 437 (United States, Canada)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_737 tristate {
    prompt "Codepage 737 (Greek)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_775 tristate {
    prompt "Codepage 775 (Baltic Rim)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_850 tristate {
    prompt "Codepage 850 (Europe)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_852 tristate {
    prompt "Codepage 852 (Central/Eastern Europe)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_855 tristate {
    prompt "Codepage 855 (Cyrillic)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_857 tristate {
    prompt "Codepage 857 (Turkish)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_860 tristate {
    prompt "Codepage 860 (Portuguese)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_861 tristate {
    prompt "Codepage 861 (Icelandic)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_862 tristate {
    prompt "Codepage 862 (Hebrew)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_863 tristate {
    prompt "Codepage 863 (Canadian French)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_864 tristate {
    prompt "Codepage 864 (Arabic)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_865 tristate {
    prompt "Codepage 865 (Norwegian, Danish)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_866 tristate {
    prompt "Codepage 866 (Cyrillic/Russian)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_869 tristate {
    prompt "Codepage 869 (Greek)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_936 tristate {
    prompt "Simplified Chinese charset (CP936, GB2312)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_950 tristate {
    prompt "Traditional Chinese charset (Big5)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_932 tristate {
    prompt "Japanese charsets (Shift-JIS, EUC-JP)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_949 tristate {
    prompt "Korean charset (CP949, EUC-KR)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_874 tristate {
    prompt "Thai charset (CP874, TIS-620)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_8 tristate {
    prompt "Hebrew charsets (ISO-8859-8, CP1255)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_1250 tristate {
    prompt "Windows CP1250 (Slavic/Central European Languages)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_1251 tristate {
    prompt "Windows CP1251 (Bulgarian, Belarusian)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_ASCII tristate {
    prompt "ASCII (United States)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_1 tristate {
    prompt "NLS ISO 8859-1  (Latin 1; Western European Languages)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_2 tristate {
    prompt "NLS ISO 8859-2  (Latin 2; Slavic/Central European Languages)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_3 tristate {
    prompt "NLS ISO 8859-3  (Latin 3; Esperanto, Galician, Maltese, Turkish)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_4 tristate {
    prompt "NLS ISO 8859-4  (Latin 4; old Baltic charset)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_5 tristate {
    prompt "NLS ISO 8859-5  (Cyrillic)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_6 tristate {
    prompt "NLS ISO 8859-6  (Arabic)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_7 tristate {
    prompt "NLS ISO 8859-7  (Modern Greek)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_9 tristate {
    prompt "NLS ISO 8859-9  (Latin 5; Turkish)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_13 tristate {
    prompt "NLS ISO 8859-13 (Latin 7; Baltic)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_14 tristate {
    prompt "NLS ISO 8859-14 (Latin 8; Celtic)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_15 tristate {
    prompt "NLS ISO 8859-15 (Latin 9; Western European Languages with Euro)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_KOI8_R tristate {
    prompt "NLS KOI8-R (Russian)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_KOI8_U tristate {
    prompt "NLS KOI8-U/RU (Ukrainian, Belarusian)" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
   config NLS_UTF8 tristate {
    prompt "NLS UTF-8" if [NLS]
    depends on [NLS]
    inherited [NLS]
   }
  }
 }
 menu "Distributed Lock Manager" {
  depends on [EXPERIMENTAL && INET]
  config DLM tristate {
   prompt "Distributed Lock Manager (DLM)" if [EXPERIMENTAL && INET && (IPV6 || IPV6="n")]
   depends on [IPV6 || IPV6="n"]
   select CONFIGFS_FS if [EXPERIMENTAL && INET && (IPV6 || IPV6="n")]
   select IP_SCTP if [EXPERIMENTAL && INET && (IPV6 || IPV6="n") && DLM_SCTP]
   inherited [EXPERIMENTAL && INET && (IPV6 || IPV6="n")]
   choice boolean {
    prompt "Select DLM communications protocol" if [EXPERIMENTAL && INET && DLM]
    depends on [DLM]
    default [DLM_TCP] if [EXPERIMENTAL && INET && DLM]
    config DLM_TCP boolean {
     prompt "TCP/IP" if [<choice>]
     inherited [<choice>]
    }
    config DLM_SCTP boolean {
     prompt "SCTP" if [<choice>]
     inherited [<choice>]
    }
   }
   config DLM_DEBUG boolean {
    prompt "DLM debugging" if [EXPERIMENTAL && INET && DLM]
    depends on [DLM]
    inherited [EXPERIMENTAL && INET && DLM]
   }
  }
 }
}
menu "Instrumentation Support" {
 depends on [EXPERIMENTAL]
 config PROFILING boolean {
  prompt "Profiling support (EXPERIMENTAL)" if [EXPERIMENTAL]
  inherited [EXPERIMENTAL]
  config OPROFILE tristate {
   prompt "OProfile system profiling (EXPERIMENTAL)" if [EXPERIMENTAL && PROFILING]
   depends on [PROFILING]
   inherited [EXPERIMENTAL && PROFILING]
  }
 }
 config KPROBES boolean {
  prompt "Kprobes (EXPERIMENTAL)" if [KALLSYMS && EXPERIMENTAL && MODULES]
  depends on [KALLSYMS && EXPERIMENTAL && MODULES]
  inherited [KALLSYMS && EXPERIMENTAL && MODULES]
 }
}
menu "Kernel hacking" {
 config TRACE_IRQFLAGS_SUPPORT boolean {
  default [y] if []
 }
 config PRINTK_TIME boolean {
  prompt "Show timing information on printks" if [PRINTK]
  depends on [PRINTK]
  inherited [PRINTK]
 }
 config ENABLE_MUST_CHECK boolean {
  prompt "Enable __must_check logic" if []
  default [y] if []
 }
 config MAGIC_SYSRQ boolean {
  prompt "Magic SysRq key" if [!UML]
  depends on [!UML]
  inherited [!UML]
 }
 config UNUSED_SYMBOLS boolean {
  prompt "Enable unused/obsolete exported symbols" if []
  default [y] if [X86]
 }
 config DEBUG_FS boolean {
  prompt "Debug Filesystem" if [SYSFS]
  depends on [SYSFS]
  inherited [SYSFS]
 }
 config HEADERS_CHECK boolean {
  prompt "Run 'make headers_check' when building vmlinux" if [!UML]
  depends on [!UML]
  inherited [!UML]
 }
 config DEBUG_KERNEL boolean {
  prompt "Kernel debugging" if []
  config LOG_BUF_SHIFT integer {
   prompt "Kernel log buffer size (16 => 64KB, 17 => 128KB)" if [DEBUG_KERNEL]
   range [12 21] if []
   default [17] if [S390 || LOCKDEP]
   default [16] if [X86_NUMAQ || IA64]
   default [15] if [SMP]
   default [14] if []
  }
  config DETECT_SOFTLOCKUP boolean {
   prompt "Detect Soft Lockups" if [DEBUG_KERNEL && !S390]
   depends on [DEBUG_KERNEL && !S390]
   default [y] if [DEBUG_KERNEL && !S390]
   inherited [DEBUG_KERNEL && !S390]
  }
  config SCHEDSTATS boolean {
   prompt "Collect scheduler statistics" if [DEBUG_KERNEL && PROC_FS]
   depends on [DEBUG_KERNEL && PROC_FS]
   inherited [DEBUG_KERNEL && PROC_FS]
  }
  config DEBUG_SLAB boolean {
   prompt "Debug slab memory allocations" if [DEBUG_KERNEL && SLAB]
   depends on [DEBUG_KERNEL && SLAB]
   inherited [DEBUG_KERNEL && SLAB]
   config DEBUG_SLAB_LEAK boolean {
    prompt "Memory leak debugging" if [DEBUG_SLAB]
    depends on [DEBUG_SLAB]
    inherited [DEBUG_SLAB]
   }
  }
  config DEBUG_PREEMPT boolean {
   prompt "Debug preemptible kernel" if [DEBUG_KERNEL && PREEMPT && TRACE_IRQFLAGS_SUPPORT]
   depends on [DEBUG_KERNEL && PREEMPT && TRACE_IRQFLAGS_SUPPORT]
   default [y] if [DEBUG_KERNEL && PREEMPT && TRACE_IRQFLAGS_SUPPORT]
   inherited [DEBUG_KERNEL && PREEMPT && TRACE_IRQFLAGS_SUPPORT]
  }
  config DEBUG_RT_MUTEXES boolean {
   prompt "RT Mutex debugging, deadlock detection" if [DEBUG_KERNEL && RT_MUTEXES]
   depends on [DEBUG_KERNEL && RT_MUTEXES]
   inherited [DEBUG_KERNEL && RT_MUTEXES]
   config DEBUG_PI_LIST boolean {
    default [y] if [DEBUG_RT_MUTEXES]
    depends on [DEBUG_RT_MUTEXES]
    inherited [DEBUG_RT_MUTEXES]
   }
  }
  config RT_MUTEX_TESTER boolean {
   prompt "Built-in scriptable tester for rt-mutexes" if [DEBUG_KERNEL && RT_MUTEXES]
   depends on [DEBUG_KERNEL && RT_MUTEXES]
   inherited [DEBUG_KERNEL && RT_MUTEXES]
  }
  config DEBUG_SPINLOCK boolean {
   prompt "Spinlock and rw-lock debugging: basic checks" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
  }
  config DEBUG_MUTEXES boolean {
   prompt "Mutex debugging: basic checks" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
  }
  config DEBUG_RWSEMS boolean {
   prompt "RW-sem debugging: basic checks" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
  }
  config DEBUG_LOCK_ALLOC boolean {
   prompt "Lock debugging: detect incorrect freeing of live locks" if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
   depends on [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
   select DEBUG_SPINLOCK if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
   select DEBUG_MUTEXES if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
   select DEBUG_RWSEMS if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
   select LOCKDEP if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
   inherited [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  }
  config PROVE_LOCKING boolean {
   prompt "Lock debugging: prove locking correctness" if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
   depends on [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
   select LOCKDEP if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
   select DEBUG_SPINLOCK if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
   select DEBUG_MUTEXES if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
   select DEBUG_RWSEMS if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
   select DEBUG_LOCK_ALLOC if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
   default [n] if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
   inherited [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  }
  config LOCKDEP boolean {
   depends on [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
   select STACKTRACE if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
   select FRAME_POINTER if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT && !X86]
   select KALLSYMS if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
   select KALLSYMS_ALL if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
   inherited [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  }
  config DEBUG_LOCKDEP boolean {
   prompt "Lock dependency engine debugging" if [DEBUG_KERNEL && LOCKDEP]
   depends on [DEBUG_KERNEL && LOCKDEP]
   inherited [DEBUG_KERNEL && LOCKDEP]
  }
  config TRACE_IRQFLAGS boolean {
   depends on [DEBUG_KERNEL]
   default [y] if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && PROVE_LOCKING]
   depends on [TRACE_IRQFLAGS_SUPPORT]
   depends on [PROVE_LOCKING]
   inherited [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && PROVE_LOCKING]
  }
  config DEBUG_SPINLOCK_SLEEP boolean {
   prompt "Spinlock debugging: sleep-inside-spinlock checking" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
  }
  config DEBUG_LOCKING_API_SELFTESTS boolean {
   prompt "Locking API boot-time self-tests" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
  }
  config STACKTRACE boolean {
   depends on [DEBUG_KERNEL]
   depends on [STACKTRACE_SUPPORT]
   inherited [DEBUG_KERNEL && STACKTRACE_SUPPORT]
  }
  config DEBUG_KOBJECT boolean {
   prompt "kobject debugging" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
  }
  config DEBUG_HIGHMEM boolean {
   prompt "Highmem debugging" if [DEBUG_KERNEL && HIGHMEM]
   depends on [DEBUG_KERNEL && HIGHMEM]
   inherited [DEBUG_KERNEL && HIGHMEM]
  }
  config DEBUG_BUGVERBOSE boolean {
   prompt "Verbose BUG() reporting (adds 70K)" if [BUG && (ARM || ARM26 || AVR32 || M32R || M68K || SPARC32 || SPARC64 || FRV || SUPERH || GENERIC_BUG) && DEBUG_KERNEL && EMBEDDED]
   depends on [BUG]
   depends on [ARM || ARM26 || AVR32 || M32R || M68K || SPARC32 || SPARC64 || FRV || SUPERH || GENERIC_BUG]
   default [!EMBEDDED] if [BUG && (ARM || ARM26 || AVR32 || M32R || M68K || SPARC32 || SPARC64 || FRV || SUPERH || GENERIC_BUG)]
   inherited [BUG && (ARM || ARM26 || AVR32 || M32R || M68K || SPARC32 || SPARC64 || FRV || SUPERH || GENERIC_BUG)]
  }
  config DEBUG_INFO boolean {
   prompt "Compile the kernel with debug info" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
  }
  config DEBUG_VM boolean {
   prompt "Debug VM" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
  }
  config DEBUG_LIST boolean {
   prompt "Debug linked list manipulation" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
  }
  config FRAME_POINTER boolean {
   prompt "Compile the kernel with frame pointers" if [DEBUG_KERNEL && (X86 || CRIS || M68K || M68KNOMMU || FRV || UML || S390 || AVR32 || SUPERH)]
   depends on [DEBUG_KERNEL && (X86 || CRIS || M68K || M68KNOMMU || FRV || UML || S390 || AVR32 || SUPERH)]
   default [y] if [DEBUG_KERNEL && (X86 || CRIS || M68K || M68KNOMMU || FRV || UML || S390 || AVR32 || SUPERH) && DEBUG_INFO && UML]
   inherited [DEBUG_KERNEL && (X86 || CRIS || M68K || M68KNOMMU || FRV || UML || S390 || AVR32 || SUPERH)]
  }
  config FORCED_INLINING boolean {
   prompt "Force gcc to inline functions marked 'inline'" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   default [y] if [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
  }
  config RCU_TORTURE_TEST tristate {
   prompt "torture tests for RCU" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   default [n] if [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
  }
  config LKDTM tristate {
   prompt "Linux Kernel Dump Test Tool Module" if [DEBUG_KERNEL && KPROBES]
   depends on [DEBUG_KERNEL]
   depends on [KPROBES]
   default [n] if [DEBUG_KERNEL && KPROBES]
   inherited [DEBUG_KERNEL && KPROBES]
  }
  config FAULT_INJECTION boolean {
   prompt "Fault-injection framework" if [DEBUG_KERNEL && STACKTRACE]
   depends on [DEBUG_KERNEL]
   depends on [STACKTRACE]
   select FRAME_POINTER if [DEBUG_KERNEL && STACKTRACE]
   inherited [DEBUG_KERNEL && STACKTRACE]
   config FAILSLAB boolean {
    prompt "Fault-injection capability for kmalloc" if [FAULT_INJECTION]
    depends on [FAULT_INJECTION]
    inherited [FAULT_INJECTION]
   }
   config FAIL_PAGE_ALLOC boolean {
    prompt "Fault-injection capabilitiy for alloc_pages()" if [FAULT_INJECTION]
    depends on [FAULT_INJECTION]
    inherited [FAULT_INJECTION]
   }
   config FAIL_MAKE_REQUEST boolean {
    prompt "Fault-injection capability for disk IO" if [FAULT_INJECTION]
    depends on [FAULT_INJECTION]
    inherited [FAULT_INJECTION]
   }
   config FAULT_INJECTION_DEBUG_FS boolean {
    prompt "Debugfs entries for fault-injection capabilities" if [FAULT_INJECTION && SYSFS && DEBUG_FS]
    depends on [FAULT_INJECTION && SYSFS && DEBUG_FS]
    inherited [FAULT_INJECTION && SYSFS && DEBUG_FS]
   }
  }
  config EARLY_PRINTK boolean {
   prompt "Early printk" if [EMBEDDED && DEBUG_KERNEL]
   default [y] if []
  }
  config DEBUG_STACKOVERFLOW boolean {
   prompt "Check for stack overflows" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
  }
  config DEBUG_STACK_USAGE boolean {
   prompt "Stack utilization instrumentation" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
  }
  config DEBUG_PAGEALLOC boolean {
   prompt "Debug page memory allocations" if [DEBUG_KERNEL && !SOFTWARE_SUSPEND && !HUGETLBFS]
   depends on [DEBUG_KERNEL && !SOFTWARE_SUSPEND && !HUGETLBFS]
   inherited [DEBUG_KERNEL && !SOFTWARE_SUSPEND && !HUGETLBFS]
  }
  config DEBUG_RODATA boolean {
   prompt "Write protect kernel read-only data structures" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
  }
  config 4KSTACKS boolean {
   prompt "Use 4Kb for kernel stacks instead of 8Kb" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
  }
 }
 config X86_FIND_SMP_CONFIG boolean {
  depends on [X86_LOCAL_APIC || X86_VOYAGER]
  default [y] if [X86_LOCAL_APIC || X86_VOYAGER]
  inherited [X86_LOCAL_APIC || X86_VOYAGER]
 }
 config X86_MPPARSE boolean {
  depends on [X86_LOCAL_APIC && !X86_VISWS]
  default [y] if [X86_LOCAL_APIC && !X86_VISWS]
  inherited [X86_LOCAL_APIC && !X86_VISWS]
 }
 config DOUBLEFAULT boolean {
  default [y] if []
  prompt "Enable doublefault exception handler" if [EMBEDDED]
 }
 config DEBUG_PARAVIRT boolean {
  prompt "Enable some paravirtualization debugging" if [PARAVIRT && DEBUG_KERNEL]
  default [y] if [PARAVIRT && DEBUG_KERNEL]
  depends on [PARAVIRT && DEBUG_KERNEL]
  inherited [PARAVIRT && DEBUG_KERNEL]
 }
}
menu "Security options" {
 config KEYS boolean {
  prompt "Enable access key retention support" if []
  config KEYS_DEBUG_PROC_KEYS boolean {
   prompt "Enable the /proc/keys file by which keys may be viewed" if [KEYS]
   depends on [KEYS]
   inherited [KEYS]
  }
 }
 config SECURITY boolean {
  prompt "Enable different security models" if [SYSFS]
  depends on [SYSFS]
  inherited [SYSFS]
  config SECURITY_NETWORK boolean {
   prompt "Socket and Networking Security Hooks" if [SECURITY]
   depends on [SECURITY]
   inherited [SECURITY]
   config SECURITY_NETWORK_XFRM boolean {
    prompt "XFRM (IPSec) Networking Security Hooks" if [XFRM && SECURITY_NETWORK]
    depends on [XFRM && SECURITY_NETWORK]
    inherited [XFRM && SECURITY_NETWORK]
   }
  }
  config SECURITY_CAPABILITIES tristate {
   prompt "Default Linux Capabilities" if [SECURITY]
   depends on [SECURITY]
   inherited [SECURITY]
  }
  config SECURITY_ROOTPLUG tristate {
   prompt "Root Plug Support" if [USB && SECURITY]
   depends on [USB && SECURITY]
   inherited [USB && SECURITY]
  }
 }
 config SECURITY_SELINUX boolean {
  prompt "NSA SELinux Support" if [SECURITY_NETWORK && AUDIT && NET && INET]
  depends on [SECURITY_NETWORK && AUDIT && NET && INET]
  select NETWORK_SECMARK if [SECURITY_NETWORK && AUDIT && NET && INET]
  default [n] if [SECURITY_NETWORK && AUDIT && NET && INET]
  inherited [SECURITY_NETWORK && AUDIT && NET && INET]
  config SECURITY_SELINUX_BOOTPARAM boolean {
   prompt "NSA SELinux boot parameter" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   default [n] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
   config SECURITY_SELINUX_BOOTPARAM_VALUE integer {
    prompt "NSA SELinux boot parameter default value" if [SECURITY_SELINUX_BOOTPARAM]
    depends on [SECURITY_SELINUX_BOOTPARAM]
    range [0 1] if [SECURITY_SELINUX_BOOTPARAM]
    default [1] if [SECURITY_SELINUX_BOOTPARAM]
    inherited [SECURITY_SELINUX_BOOTPARAM]
   }
  }
  config SECURITY_SELINUX_DISABLE boolean {
   prompt "NSA SELinux runtime disable" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   default [n] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
  }
  config SECURITY_SELINUX_DEVELOP boolean {
   prompt "NSA SELinux Development Support" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   default [y] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
  }
  config SECURITY_SELINUX_AVC_STATS boolean {
   prompt "NSA SELinux AVC Statistics" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   default [y] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
  }
  config SECURITY_SELINUX_CHECKREQPROT_VALUE integer {
   prompt "NSA SELinux checkreqprot default value" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   range [0 1] if [SECURITY_SELINUX]
   default [1] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
  }
  config SECURITY_SELINUX_ENABLE_SECMARK_DEFAULT boolean {
   prompt "NSA SELinux enable new secmark network controls by default" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   default [n] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
  }
  config SECURITY_SELINUX_POLICYDB_VERSION_MAX boolean {
   prompt "NSA SELinux maximum supported policy format version" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   default [n] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
   config SECURITY_SELINUX_POLICYDB_VERSION_MAX_VALUE integer {
    prompt "NSA SELinux maximum supported policy format version value" if [SECURITY_SELINUX_POLICYDB_VERSION_MAX]
    depends on [SECURITY_SELINUX_POLICYDB_VERSION_MAX]
    range [15 21] if [SECURITY_SELINUX_POLICYDB_VERSION_MAX]
    default [19] if [SECURITY_SELINUX_POLICYDB_VERSION_MAX]
    inherited [SECURITY_SELINUX_POLICYDB_VERSION_MAX]
   }
  }
 }
}
menu "Cryptographic options" {
 config CRYPTO boolean {
  prompt "Cryptographic API" if []
  if [CRYPTO] {
   config CRYPTO_ALGAPI tristate {
    inherited [CRYPTO]
   }
   config CRYPTO_BLKCIPHER tristate {
    select CRYPTO_ALGAPI if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_HASH tristate {
    select CRYPTO_ALGAPI if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_MANAGER tristate {
    prompt "Cryptographic algorithm manager" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_HMAC tristate {
    prompt "HMAC support" if [CRYPTO]
    select CRYPTO_HASH if [CRYPTO]
    select CRYPTO_MANAGER if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_XCBC tristate {
    prompt "XCBC support" if [CRYPTO && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    select CRYPTO_HASH if [CRYPTO && EXPERIMENTAL]
    select CRYPTO_MANAGER if [CRYPTO && EXPERIMENTAL]
    inherited [CRYPTO && EXPERIMENTAL]
   }
   config CRYPTO_NULL tristate {
    prompt "Null algorithms" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_MD4 tristate {
    prompt "MD4 digest algorithm" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_MD5 tristate {
    prompt "MD5 digest algorithm" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_SHA1 tristate {
    prompt "SHA1 digest algorithm" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_SHA1_S390 tristate {
    prompt "SHA1 digest algorithm (s390)" if [CRYPTO && S390]
    depends on [S390]
    select CRYPTO_ALGAPI if [CRYPTO && S390]
    inherited [CRYPTO && S390]
   }
   config CRYPTO_SHA256 tristate {
    prompt "SHA256 digest algorithm" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_SHA256_S390 tristate {
    prompt "SHA256 digest algorithm (s390)" if [CRYPTO && S390]
    depends on [S390]
    select CRYPTO_ALGAPI if [CRYPTO && S390]
    inherited [CRYPTO && S390]
   }
   config CRYPTO_SHA512 tristate {
    prompt "SHA384 and SHA512 digest algorithms" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_WP512 tristate {
    prompt "Whirlpool digest algorithms" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_TGR192 tristate {
    prompt "Tiger digest algorithms" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_GF128MUL tristate {
    prompt "GF(2^128) multiplication functions (EXPERIMENTAL)" if [CRYPTO && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [CRYPTO && EXPERIMENTAL]
   }
   config CRYPTO_ECB tristate {
    prompt "ECB support" if [CRYPTO]
    select CRYPTO_BLKCIPHER if [CRYPTO]
    select CRYPTO_MANAGER if [CRYPTO]
    default [m] if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_CBC tristate {
    prompt "CBC support" if [CRYPTO]
    select CRYPTO_BLKCIPHER if [CRYPTO]
    select CRYPTO_MANAGER if [CRYPTO]
    default [m] if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_LRW tristate {
    prompt "LRW support (EXPERIMENTAL)" if [CRYPTO && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    select CRYPTO_BLKCIPHER if [CRYPTO && EXPERIMENTAL]
    select CRYPTO_MANAGER if [CRYPTO && EXPERIMENTAL]
    select CRYPTO_GF128MUL if [CRYPTO && EXPERIMENTAL]
    inherited [CRYPTO && EXPERIMENTAL]
   }
   config CRYPTO_DES tristate {
    prompt "DES and Triple DES EDE cipher algorithms" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_DES_S390 tristate {
    prompt "DES and Triple DES cipher algorithms (s390)" if [CRYPTO && S390]
    depends on [S390]
    select CRYPTO_ALGAPI if [CRYPTO && S390]
    select CRYPTO_BLKCIPHER if [CRYPTO && S390]
    inherited [CRYPTO && S390]
   }
   config CRYPTO_BLOWFISH tristate {
    prompt "Blowfish cipher algorithm" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_TWOFISH tristate {
    prompt "Twofish cipher algorithm" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    select CRYPTO_TWOFISH_COMMON if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_TWOFISH_COMMON tristate {
    inherited [CRYPTO]
   }
   config CRYPTO_TWOFISH_586 tristate {
    prompt "Twofish cipher algorithms (i586)" if [CRYPTO && (X86 || UML_X86) && !64BIT]
    depends on [(X86 || UML_X86) && !64BIT]
    select CRYPTO_ALGAPI if [CRYPTO && (X86 || UML_X86) && !64BIT]
    select CRYPTO_TWOFISH_COMMON if [CRYPTO && (X86 || UML_X86) && !64BIT]
    inherited [CRYPTO && (X86 || UML_X86) && !64BIT]
   }
   config CRYPTO_TWOFISH_X86_64 tristate {
    prompt "Twofish cipher algorithm (x86_64)" if [CRYPTO && (X86 || UML_X86) && 64BIT]
    depends on [(X86 || UML_X86) && 64BIT]
    select CRYPTO_ALGAPI if [CRYPTO && (X86 || UML_X86) && 64BIT]
    select CRYPTO_TWOFISH_COMMON if [CRYPTO && (X86 || UML_X86) && 64BIT]
    inherited [CRYPTO && (X86 || UML_X86) && 64BIT]
   }
   config CRYPTO_SERPENT tristate {
    prompt "Serpent cipher algorithm" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_AES tristate {
    prompt "AES cipher algorithms" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_AES_586 tristate {
    prompt "AES cipher algorithms (i586)" if [CRYPTO && (X86 || UML_X86) && !64BIT]
    depends on [(X86 || UML_X86) && !64BIT]
    select CRYPTO_ALGAPI if [CRYPTO && (X86 || UML_X86) && !64BIT]
    inherited [CRYPTO && (X86 || UML_X86) && !64BIT]
   }
   config CRYPTO_AES_X86_64 tristate {
    prompt "AES cipher algorithms (x86_64)" if [CRYPTO && (X86 || UML_X86) && 64BIT]
    depends on [(X86 || UML_X86) && 64BIT]
    select CRYPTO_ALGAPI if [CRYPTO && (X86 || UML_X86) && 64BIT]
    inherited [CRYPTO && (X86 || UML_X86) && 64BIT]
   }
   config CRYPTO_AES_S390 tristate {
    prompt "AES cipher algorithms (s390)" if [CRYPTO && S390]
    depends on [S390]
    select CRYPTO_ALGAPI if [CRYPTO && S390]
    select CRYPTO_BLKCIPHER if [CRYPTO && S390]
    inherited [CRYPTO && S390]
   }
   config CRYPTO_CAST5 tristate {
    prompt "CAST5 (CAST-128) cipher algorithm" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_CAST6 tristate {
    prompt "CAST6 (CAST-256) cipher algorithm" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_TEA tristate {
    prompt "TEA, XTEA and XETA cipher algorithms" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_ARC4 tristate {
    prompt "ARC4 cipher algorithm" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_KHAZAD tristate {
    prompt "Khazad cipher algorithm" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_ANUBIS tristate {
    prompt "Anubis cipher algorithm" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_DEFLATE tristate {
    prompt "Deflate compression algorithm" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    select ZLIB_INFLATE if [CRYPTO]
    select ZLIB_DEFLATE if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_MICHAEL_MIC tristate {
    prompt "Michael MIC keyed digest algorithm" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_CRC32C tristate {
    prompt "CRC32c CRC algorithm" if [CRYPTO]
    select CRYPTO_ALGAPI if [CRYPTO]
    select LIBCRC32C if [CRYPTO]
    inherited [CRYPTO]
   }
   config CRYPTO_TEST tristate {
    prompt "Testing module" if [CRYPTO && m && <choice>]
    depends on [m]
    select CRYPTO_ALGAPI if [CRYPTO && m && <choice>]
    inherited [CRYPTO && m && <choice>]
   }
   menu "Hardware crypto devices" {
    depends on [CRYPTO]
    config CRYPTO_DEV_PADLOCK tristate {
     prompt "Support for VIA PadLock ACE" if [CRYPTO && X86_32]
     depends on [X86_32]
     select CRYPTO_ALGAPI if [CRYPTO && X86_32]
     default [m] if [CRYPTO && X86_32]
     inherited [CRYPTO && X86_32]
     config CRYPTO_DEV_PADLOCK_AES tristate {
      prompt "PadLock driver for AES algorithm" if [CRYPTO && CRYPTO_DEV_PADLOCK]
      depends on [CRYPTO_DEV_PADLOCK]
      select CRYPTO_BLKCIPHER if [CRYPTO && CRYPTO_DEV_PADLOCK]
      default [m] if [CRYPTO && CRYPTO_DEV_PADLOCK]
      inherited [CRYPTO && CRYPTO_DEV_PADLOCK]
     }
     config CRYPTO_DEV_PADLOCK_SHA tristate {
      prompt "PadLock driver for SHA1 and SHA256 algorithms" if [CRYPTO && CRYPTO_DEV_PADLOCK]
      depends on [CRYPTO_DEV_PADLOCK]
      select CRYPTO_SHA1 if [CRYPTO && CRYPTO_DEV_PADLOCK]
      select CRYPTO_SHA256 if [CRYPTO && CRYPTO_DEV_PADLOCK]
      default [m] if [CRYPTO && CRYPTO_DEV_PADLOCK]
      inherited [CRYPTO && CRYPTO_DEV_PADLOCK]
     }
    }
    config CRYPTO_DEV_GEODE tristate {
     prompt "Support for the Geode LX AES engine" if [CRYPTO && X86_32 && PCI]
     depends on [CRYPTO && X86_32 && PCI]
     select CRYPTO_ALGAPI if [CRYPTO && X86_32 && PCI]
     select CRYPTO_BLKCIPHER if [CRYPTO && X86_32 && PCI]
     default [m] if [CRYPTO && X86_32 && PCI]
     inherited [CRYPTO && X86_32 && PCI]
    }
   }
  }
 }
}
menu "Library routines" {
 config BITREVERSE tristate {
 }
 config CRC_CCITT tristate {
  prompt "CRC-CCITT functions" if []
 }
 config CRC16 tristate {
  prompt "CRC16 functions" if []
 }
 config CRC32 tristate {
  prompt "CRC32 functions" if []
  default [y] if []
  select BITREVERSE if []
 }
 config LIBCRC32C tristate {
  prompt "CRC32c (Castagnoli, et al) Cyclic Redundancy-Check" if []
 }
 config AUDIT_GENERIC boolean {
  depends on [AUDIT && !AUDIT_ARCH]
  default [y] if [AUDIT && !AUDIT_ARCH]
  inherited [AUDIT && !AUDIT_ARCH]
 }
 config ZLIB_INFLATE tristate {
 }
 config ZLIB_DEFLATE tristate {
 }
 config GENERIC_ALLOCATOR boolean {
 }
 config REED_SOLOMON tristate {
 }
 config REED_SOLOMON_ENC8 boolean {
 }
 config REED_SOLOMON_DEC8 boolean {
 }
 config REED_SOLOMON_ENC16 boolean {
 }
 config REED_SOLOMON_DEC16 boolean {
 }
 config TEXTSEARCH boolean {
 }
 config TEXTSEARCH_KMP tristate {
 }
 config TEXTSEARCH_BM tristate {
 }
 config TEXTSEARCH_FSM tristate {
 }
 config PLIST boolean {
 }
 config IOMAP_COPY boolean {
  depends on [!UML]
  default [y] if [!UML]
  inherited [!UML]
 }
}
config GENERIC_HARDIRQS boolean {
 default [y] if []
}
config GENERIC_IRQ_PROBE boolean {
 default [y] if []
}
config GENERIC_PENDING_IRQ boolean {
 depends on [GENERIC_HARDIRQS && SMP]
 default [y] if [GENERIC_HARDIRQS && SMP]
 inherited [GENERIC_HARDIRQS && SMP]
}
config X86_SMP boolean {
 depends on [SMP && !X86_VOYAGER]
 default [y] if [SMP && !X86_VOYAGER]
 inherited [SMP && !X86_VOYAGER]
}
config X86_HT boolean {
 depends on [SMP && !(X86_VISWS || X86_VOYAGER)]
 default [y] if [SMP && !X86_VISWS && !X86_VOYAGER]
 inherited [SMP && !X86_VISWS && !X86_VOYAGER]
}
config X86_BIOS_REBOOT boolean {
 depends on [!(X86_VISWS || X86_VOYAGER)]
 default [y] if [!X86_VISWS && !X86_VOYAGER]
 inherited [!X86_VISWS && !X86_VOYAGER]
}
config X86_TRAMPOLINE boolean {
 depends on [X86_SMP || X86_VOYAGER && SMP]
 default [y] if [X86_SMP || X86_VOYAGER && SMP]
 inherited [X86_SMP || X86_VOYAGER && SMP]
}
config KTIME_SCALAR boolean {
 default [y] if []
}
